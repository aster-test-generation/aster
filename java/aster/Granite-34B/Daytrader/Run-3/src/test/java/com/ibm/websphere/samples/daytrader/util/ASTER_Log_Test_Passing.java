/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Log_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStat_UVuU0() {
    Log.stat("test message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_aJYT0() {
    Log.error("test message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorWithNullMessage_RYIm1() {
    Log.error(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorWithEmptyMessage_nxwt2() {
    Log.error("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testTraceEnter_fjDq0() {
    Log.traceEnter("test message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWarning_sOHa0() {
    Log.warning("This is a test warning message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_rlWT0() {
    Log.print("test message");
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testTrace_pHaW0() {
    Log.trace("message", new Object(), new Object(), new Object(), new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testTraceWithNullMessage_JpuZ1() {
    Log.trace(null, new Object(), new Object(), new Object(), new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testTraceWithNullParameters_ufFA2() {
    Log.trace("message", null, null, null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testTraceWithAllNullParameters_Idoz3() {
    Log.trace(null, null, null, null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void traceTest1_uIdW0() {
    Log.trace("message", "parm1", "parm2", "parm3");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void traceTest2_wpsb1() {
    Log.trace("message", new Object(), new Object(), new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void traceTest3_mJuG2() {
    Log.trace("message", null, null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDebug_wtOC0() {
    Log.debug("Test message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_vvUD0() {
    Log.trace("test message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_gJdQ0() {
    Throwable e = new Throwable();
    String msg1 = "error message 1";
    String msg2 = "error message 2";
    Log.error(e, msg1, msg2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceExit_bnkk0() {
    Log.traceExit("message");
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceExitWithEmptyMessage_QPbP1() {
    Log.traceExit("");
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceExitWithNullMessage_AfqI2() {
    Log.traceExit(null);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceInterceptor_OHbp0() {
    Log.traceInterceptor("message", new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceInterceptorWithNullMessage_hPDU1() {
    Log.traceInterceptor(null, new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceInterceptorWithNullparm1_HUuf2() {
    Log.traceInterceptor("message", null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceInterceptorWithBothNull_LqXm3() {
    Log.traceInterceptor(null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoDebug_LgNb0() {
    Log log = new Log();
    boolean result = log.doDebug();
    org.junit.jupiter.api.Assertions.assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoDebug_returnsFalse_Vsev2() {
    Log log = new Log();
    boolean result = log.doDebug();
    org.junit.jupiter.api.Assertions.assertFalse(!result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithSevenParameters_DTSf0() {
    Log.trace("message", new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithSixParameters_rYgt1() {
    Log.trace("message", new Object(), new Object(), new Object(), new Object(), new Object(), new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithFiveParameters_axWP2() {
    Log.trace("message", new Object(), new Object(), new Object(), new Object(), new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithTwoParameters_KeSk5() {
    Log.trace("message", new Object(), new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithOneParameter_nbga6() {
    Log.trace("message", new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithNoParameters_UZRM7() {
    Log.trace("message");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_flnu0() {
    Log.error("msg1", "msg2", "msg3", new Throwable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorWithCoverage_HDLm1() {
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
    Log.error("msg1", "msg2", "msg3", new Throwable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testError_sNZL0() {
    Log.error(new Throwable(), "msg1", "msg2", "msg3");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorWithEmptyMessages_EGuy2() {
    Log.error(new Throwable(), "", "", "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorWithNullMessages_ISsW3() {
    Log.error(new Throwable(), null, null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_iVRs0() {
    Log.trace("message", "parm1", "parm2", "parm3", "parm4", "parm5", "parm6");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithNullParameters_pvhz1() {
    Log.trace("message", null, null, null, null, null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithEmptyParameters_wVRU2() {
    Log.trace("message", "", "", "", "", "", "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoTrace_HjxQ0() {
    Log log = new Log();
    assertFalse(log.doTrace());
  }
}