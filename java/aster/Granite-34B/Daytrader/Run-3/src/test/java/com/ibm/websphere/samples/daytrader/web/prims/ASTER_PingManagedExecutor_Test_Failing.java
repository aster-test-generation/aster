/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedExecutor_Test_Failing {
  private static String initTime;
  private static int hitCount;
  PingManagedExecutor pingmanagedexecutor;
  HttpServlet httpservlet;
  HttpServletRequest request;
  HttpServletResponse response;
  private ManagedExecutorService mes;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingmanagedexecutor = new PingManagedExecutor();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter(Mockito.anyString())).thenReturn("initValue");
    pingmanagedexecutor.init(config);
    assertEquals("initValue", initTime);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    pingmanagedexecutor = mock(PingManagedExecutor.class);
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    // Set up expected behavior for the mock objects
    doCallRealMethod().when(pingmanagedexecutor).doPost(request, response);
    when(request.getParameter("param1")).thenReturn("value1");
    when(request.getParameter("param2")).thenReturn("value2");
    // Call the method to be tested
    pingmanagedexecutor.doPost(request, response);
    // Add meaningful assertions here
    verify(pingmanagedexecutor, times(1)).doPost(request, response);
    verify(request, times(1)).getParameter("param1");
    verify(request, times(1)).getParameter("param2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_returnsCorrectString_vdDV0() {
    PingManagedExecutor executor = new PingManagedExecutor();
    String info = executor.getServletInfo();
    assertEquals("Tests a ManagedExecutor", info);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_returnsEmptyInfo_nzfI2() {
    PingManagedExecutor executor = new PingManagedExecutor();
    String info = executor.getServletInfo();
    assertEquals("", info);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_returnsNullInfo_Rlvx3() {
    PingManagedExecutor executor = new PingManagedExecutor();
    String info = executor.getServletInfo();
    assertNull(info);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_returnsDifferentString_dXTy4() {
    PingManagedExecutor executor = new PingManagedExecutor();
    String info = executor.getServletInfo();
    assertNotEquals("Some other string", info);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_1() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingmanagedexecutor = new PingManagedExecutor();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter(Mockito.anyString())).thenReturn("initValue");
    pingmanagedexecutor.init(config);
    assertEquals("initValue", initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_2() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingmanagedexecutor = new PingManagedExecutor();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter(Mockito.anyString())).thenReturn("initValue");
    pingmanagedexecutor.init(config);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_nRIq0_zEdJ0() throws ServletException, IOException {
    PingManagedExecutor executor = new PingManagedExecutor();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    executor.doPost(request, response);
  }
}