/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionDate_1_hOjp0() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(1), "type", 1, "symbol", new BigDecimal(1));
    Date completionDate = orderData.getCompletionDate();
    assertEquals(new Date(), completionDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantityWithNegativeValue_PcXC2() {
    OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "Limit", 100.00, "AAPL", new BigDecimal(150.00));
    try {
      orderData.setQuantity(-50.00);
      fail("Expected an IllegalArgumentException to be thrown");
    } catch (IllegalArgumentException e) {
      assertEquals("Quantity cannot be negative", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_XsGi0_fid1() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10), "type", 1.0, "symbol", new BigDecimal(100));
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(1000), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalWithNullPrice_pLoO1_fid1() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10), "type", 1.0, "symbol");
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(100), total);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalWithNegativePrice_jzAq3_fid1() {
    OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10), "type", 1.0, "symbol", new BigDecimal(-100));
    BigDecimal total = orderData.getTotal();
    assertEquals(new BigDecimal(-1000), total);
  }
}