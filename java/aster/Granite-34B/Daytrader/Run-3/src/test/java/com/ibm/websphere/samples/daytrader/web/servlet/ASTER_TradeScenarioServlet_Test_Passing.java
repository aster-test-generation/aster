/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeScenarioServlet_Test_Passing {
  TradeScenarioServlet tradescenarioservlet;
  HttpServlet httpservlet;
  ServletConfig servletconfig;
  @Mock
  HttpServletResponse httpservletresponse;
  @Mock
  HttpServletRequest httpservletrequest;
  @Mock
  HttpSession httpsession;
  @Mock
  ServletContext servletcontext;
  @Mock
  private static String tasPathPrefix = "/app?action=";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_IHgH0() throws ServletException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    ServletConfig config = new MockServletConfig();
    servlet.init(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit2_wXni1() throws ServletException {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    ServletConfig config = new MockServletConfig();
    TradeConfig tradeConfig = new TradeConfig();
    servlet.init(config);
    java.util.Enumeration<String> en = config.getInitParameterNames();
    while (en.hasMoreElements()) {
      String parm = en.nextElement();
      String value = config.getInitParameter(parm);
      tradeConfig.setConfigParam(parm, value);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_lineCoverage_gNzq1() {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    tradeScenarioServlet.getServletInfo();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_branchCoverage_JvrU2_lNCk0() {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    String servletInfo = tradeScenarioServlet.getServletInfo();
    org.junit.jupiter.api.Assertions.assertNotNull(servletInfo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_rnhA0_UeQL0() {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    String servletInfo = tradeScenarioServlet.getServletInfo();
    assertEquals("TradeScenarioServlet emulates a population of web users", servletInfo);
  }
}