/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.jms.ConnectionFactory;
import javax.jms.Queue;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBQueue_Test_Failing {
  private static String initTime;
  private static int hitCount;
  PingServlet2MDBQueue pingservlet2mdbqueue;
  HttpServlet httpservlet;
  @Mock
  HttpServletRequest httpservletrequest;
  @Mock
  HttpServletResponse httpservletresponse;
  private ConnectionFactory queueConnectionFactory;
  private Queue tradeBrokerQueue;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_1() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2mdbqueue = new PingServlet2MDBQueue();
    pingservlet2mdbqueue.init(httpservlet);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_2() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2mdbqueue = new PingServlet2MDBQueue();
    pingservlet2mdbqueue.init(httpservlet);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_zFfz0() {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    String info = servlet.getServletInfo();
    assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", info);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_100_line_coverage_fQvW1() {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    servlet.getServletInfo();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_100_branch_coverage_FRWS2() {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    servlet.getServletInfo();
    servlet.getServletInfo();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_rRhb0() throws IOException, ServletException {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_QbvV0_xthd0() {
    PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    try {
      servlet.doPost(request, response);
    } catch (ServletException | IOException e) {
      fail("Exception occurred while testing doPost method: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2mdbqueue = new PingServlet2MDBQueue();
    pingservlet2mdbqueue.init(httpservlet);
    assertEquals(0, hitCount);
    assertNotNull(initTime);
  }
}