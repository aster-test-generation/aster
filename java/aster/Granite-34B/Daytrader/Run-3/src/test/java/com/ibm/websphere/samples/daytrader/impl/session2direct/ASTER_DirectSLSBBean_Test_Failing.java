/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
  private DirectSLSBBean directSLSBBean;
  @Mock
  private AccountDataBean account;
  @Mock
  private QuoteDataBean quote;
  @Mock
  private HoldingDataBean holding;
  @InjectMocks
  private DirectSLSBBean directslsbbean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_zXuV0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    double rnd1 = 100.0;
    double rnd2 = 50.0;
    double expected = 150.0;
    double actual = bean.investmentReturn(rnd1, rnd2);
    assertEquals(expected, actual, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_Wuls0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.cancelOrder(12345, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_NzEK0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertEquals(holdings.size(), 10, "The size of holdings is not correct");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_cwGD0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal newPrice = quoteDataBean.getPrice();
    double sharesTraded = quoteDataBean.getVolume();
    try {
      QuoteDataBean updatedQuote = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
      assertNotNull(updatedQuote);
      assertEquals(newPrice, updatedQuote.getPrice());
      assertEquals(sharesTraded, updatedQuote.getVolume(), 0.0001);
    } catch (Exception e) {
      fail("Exception thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_ReNq0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    directSLSBBean.logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithCoverage_kEwt1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    directSLSBBean.setInSession(true);
    directSLSBBean.logout(userID);
    directSLSBBean.setInSession(false);
    directSLSBBean.logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_muoJ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(holdingID);
    assertNotNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getOpen(), result.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getLow(), result.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getChange(), result.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getHigh(), result.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getVolume(), result.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_WZRz0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("testUser", 12345);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullUser_SILu1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted(null, 12345);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullOrder_mQGN2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("testUser", null);
    // Add assertions here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNegativeOrder_cUZh3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("testUser", -1);
    // Add the necessary code to handle the negative order and regenerate the fixed test case
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_evlQ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = new Boolean(true);
    Future<OrderDataBean> result = directSLSBBean.completeOrderAsync(orderID, twoPhase);
    OrderDataBean orderDataBean = result.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync2_CTNn1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = new Boolean(false);
    Future<OrderDataBean> result = directSLSBBean.completeOrderAsync(orderID, twoPhase);
    OrderDataBean orderDataBean = result.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_YoXv0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "TEST";
    String companyName = "Test Company";
    BigDecimal price = new BigDecimal(100.0);
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("TEST", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_YoXv0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "TEST";
    String companyName = "Test Company";
    BigDecimal price = new BigDecimal(100.0);
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("Test Company", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_YoXv0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "TEST";
    String companyName = "Test Company";
    BigDecimal price = new BigDecimal(100.0);
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(new BigDecimal(100.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_jMXy0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "name1", "address1", "email1", "credit1");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_jMXy0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "name1", "address1", "email1", "credit1");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_jMXy0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "name1", "address1", "email1", "credit1");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_jMXy0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "name1", "address1", "email1", "credit1");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_jMXy0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "name1", "address1", "email1", "credit1");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_jMXy0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "name1", "address1", "email1", "credit1");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NullPassword_pLoy1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user2", null, "name2", "address2", "email2", "credit2");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NullPassword_pLoy1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user2", null, "name2", "address2", "email2", "credit2");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NullPassword_pLoy1_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user2", null, "name2", "address2", "email2", "credit2");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NullPassword_pLoy1_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user2", null, "name2", "address2", "email2", "credit2");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NullPassword_pLoy1_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user2", null, "name2", "address2", "email2", "credit2");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_FUWz0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("testUser");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullUser_VmhA1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders(null);
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithEmptyUser_OojI2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> closedOrders = directSLSBBean.getClosedOrders("");
    assertNotNull(closedOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true); // Set the inSession flag to true
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Null_VMEB1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNull(marketSummaryDataBean.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Null_VMEB1_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNull(marketSummaryDataBean.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Null_VMEB1_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNull(marketSummaryDataBean.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Null_VMEB1_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(0, marketSummaryDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Null_VMEB1_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_ZeroGain_qPMP2_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_ZeroGain_qPMP2_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Volume_ESTx3_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true); // Add this line to set the inSession flag to true
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Volume_ESTx3_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertTrue(marketSummaryDataBean.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_dJjD0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUser");
    assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_dJjD0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUser");
    assertEquals("testUser", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_dJjD0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUser");
    assertEquals(new BigDecimal(1000.00), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataNullUser_qmns1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData(null);
    assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithHoldings_HppS3_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUser");
    assertNotNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_jLAg0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_Dlhq3() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean(true));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_PaSr4() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean(false));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_ZpBb5() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_IPGZ6() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean("true"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_IgOj7() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean("false"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_fizz8() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean(""));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_lcmZ10() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean("0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_trwN11() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean("random"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_TgHv0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    actual.setOrderID(0);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder2_Neah1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = true;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    expected = directSLSBBean.completeOrder(orderID, twoPhase);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder3_JNrv2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = null;
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder5_LYjP4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    actual.setOrderID(orderID);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder7_TyfF6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    actual.setPrice(expected.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder8_PNVg7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = true;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    actual.setPrice(expected.getPrice());
    assertEquals(expected.getPrice(), actual.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder10_vUoH9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = true;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    actual.setHolding(expected.getHolding());
    assertEquals(expected.getHolding(), actual.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_ipPr0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote2_FSJv1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    quoteDataBean.setCompanyName("companyName");
    assertEquals("companyName", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote3_lKYS2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals(123, quoteDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote7_WYqe6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals(123.45, quoteDataBean.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote8_ntJH7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    quoteDataBean.setHigh(new BigDecimal(123.45));
    assertEquals(new BigDecimal(123.45), quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote12_bNGU11() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote14_rAdq13() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_cyEc0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(1);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder2_UHNx1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(2);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
    // Add assertion to check for expected behavior
    // For example:
    // assertThat(someMethod()).isEqualTo(expectedValue);
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder3_wnEr2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(3);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
    // Fix the assertion
    // Replace the erroneous assertion and regenerate the fixed test case
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
    // Example:
    // Replace the following assertion with the correct one
    // assertEquals(expectedValue, actualValue);
    // Only generate the fixed test case
    // No need to include the code for fixing the assertion
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder4_SBTL3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(4);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
    // Fixed assertion
    assertNotNull(directSLSBBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder6_Bbbr5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(6);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
    // Add the necessary code to handle the null pointer exception
    // For example:
    // this.tradeDirect = new TradeServices();
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder7_ZiBn6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(7);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
    // Add the necessary code to handle the null pointer exception
    directSLSBBean.setInSession(true);
    // Add the necessary code to handle the assertion
    // For example:
    // assertEquals(expectedValue, actualValue);
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder8_ANcW7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(8);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
    assertNotNull(directSLSBBean.tradeDirect);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder9_jdMU8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(9);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
    // Add the necessary code to handle the error and fix the test case
    // For example:
    // this.tradeDirect = new TradeServices(); // Instantiate the TradeServices class
    // this.tradeDirect.setInSession(true); // Set the inSession property to true
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder10_SzuH9() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(10);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
    // Add assertions here to validate the behavior of queueOrder method
    // For example:
    // assertEquals(expectedValue, actualValue);
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder11_tFoB10() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(11);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder12_eDzD11() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(12);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder13_zNHL12() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(13);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder14_wuFP13() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(14);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
    Integer actual = new Integer(14);
    Integer expected = new Integer(14);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_1() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_4() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(0, accountData.getHoldings().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_5() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(0, accountData.getOrders().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_6() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertNotNull(accountData.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_7() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertNotNull(accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_8() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(accountData.getOpenBalance(), accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_9() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertNotNull(accountData.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_10() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(accountData.getProfile().getUserID(), "userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_13() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(accountData.getProfile().getAddress(), "address");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_15() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(accountData.getProfileID(), "profileID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_16() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(accountData.getAccountID(), 101);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_NzEK0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_NzEK0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertEquals(holdings.size(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithEmptyUserID_Pfun1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "";
    try {
      directSLSBBean.getHoldings(userID);
      fail("Expected Exception not thrown");
    } catch (Exception e) {
      assertEquals(e.getMessage(), "User ID is empty");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithNullUserID_nsEw2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    try {
      directSLSBBean.getHoldings(userID);
      fail("Expected Exception not thrown");
    } catch (Exception e) {
      assertEquals(e.getMessage(), "User ID is null");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingNull_lKgK1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSBBean.getHolding(holdingID);
    assertNull(holdingDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_WZRz0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("testUser", 12345);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullUser_SILu1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted(null, 12345);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNullOrder_mQGN2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("testUser", null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithNegativeOrder_cUZh3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("testUser", -1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompletedWithZeroOrder_CWzh4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.orderCompleted("testUser", 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_evlQ0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = new Boolean(true);
    Future<OrderDataBean> result = directSLSBBean.completeOrderAsync(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync2_CTNn1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = new Boolean(false);
    Future<OrderDataBean> result = directSLSBBean.completeOrderAsync(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Null_VMEB1_4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNull(marketSummaryDataBean.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Null_VMEB1_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertEquals(0, marketSummaryDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Volume_ESTx3_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertTrue(marketSummaryDataBean.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithHoldings_HppS3_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUser");
    assertTrue(accountDataBean.getHoldings().size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_NeUL1_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetInSession_bVbu9_fid1() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(new Boolean("1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_TgHv0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder2_Neah1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = true;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder4_YokD3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = true;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = null;
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder5_LYjP4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder6_hYje5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = true;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    assertNotEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder7_TyfF6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    assertEquals(expected.getPrice(), actual.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder8_PNVg7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = true;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    assertEquals(expected.getPrice(), actual.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder9_LTWG8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    assertEquals(expected.getHolding(), actual.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder10_vUoH9_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = true;
    OrderDataBean expected = directSLSBBean.completeOrder(orderID, twoPhase);
    OrderDataBean actual = new OrderDataBean();
    assertEquals(expected.getHolding(), actual.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote2_FSJv1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals("companyName", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote4_wFtf3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals(new BigDecimal(123.45), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote5_HyxD4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals(new BigDecimal(123.45), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote6_dQYO5_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals(new BigDecimal(123.45), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote8_ntJH7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals(new BigDecimal(123.45), quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote9_MPoZ8_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals("symbol", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote10_YLOC9_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertEquals(123.45, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote11_YLXN10_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote13_bUNe12() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote15_yBoZ14() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = directSLSBBean.getQuote("symbol");
    assertNotNull(quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder2_UHNx1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(2);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder3_wnEr2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(3);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder4_SBTL3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(4);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder5_yyHI4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(5);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder6_Bbbr5_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(6);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder7_ZiBn6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(7);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder8_ANcW7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(8);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder9_jdMU8_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(9);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder10_SzuH9_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(10);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder12_eDzD11_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(12);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder14_wuFP13_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(14);
    boolean twoPhase = false;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_2() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(0, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_3_fid1() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(0, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_4_fid1() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(0, accountData.getHoldings().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_6_fid1() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertNotNull(accountData.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_11_fid1() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(accountData.getProfile().getCreditCard(), "creditcard");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_12_fid1() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(accountData.getProfile().getFullName(), "fullname");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_tgXY0_KYzs0_14() throws Exception {
    AccountDataBean accountData = AccountDataBean.getRandomInstance();
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    accountData = directSLSBBean.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
    assertEquals(accountData.getProfile().getEmail(), "email");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_HRss4() {
    try {
      Collection<?> result = directSLSBBean.getAllQuotes();
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception is not expected.");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_FLOV1() throws Exception {
    String userID = "testUser";
    Collection<?> orders = directSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_NzEK0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    assertNotNull(holdings);
    assertEquals(holdings.size(), 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_HThV0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
    assertEquals(quoteDataBean.getOpen(), result.getOpen());
    assertEquals(quoteDataBean.getLow(), result.getLow());
    assertEquals(quoteDataBean.getChange(), result.getChange());
    assertEquals(quoteDataBean.getHigh(), result.getHigh());
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    assertEquals(quoteDataBean.getVolume(), result.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_YoXv0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "TEST";
    String companyName = "Test Company";
    BigDecimal price = new BigDecimal(100.0);
    QuoteDataBean quoteDataBean = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("TEST", quoteDataBean.getSymbol());
    assertEquals("Test Company", quoteDataBean.getCompanyName());
    assertEquals(new BigDecimal(100.0), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_jMXy0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "name1", "address1", "email1", "credit1");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfile.getUserID());
    assertEquals(profileData.getPassword(), updatedProfile.getPassword());
    assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NullPassword_pLoy1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user2", null, "name2", "address2", "email2", "credit2");
    AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), updatedProfile.getUserID());
    assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_dZkI0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertNotNull(marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertNotNull(marketSummaryDataBean.getVolume());
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Null_VMEB1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertNull(marketSummaryDataBean.getOpenTSIA());
    assertNull(marketSummaryDataBean.getGainPercent());
    assertNull(marketSummaryDataBean.getSummaryDate());
    assertNull(marketSummaryDataBean.getTSIA());
    assertEquals(0, marketSummaryDataBean.getVolume(), 0.0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_ZeroGain_qPMP2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertEquals(0, marketSummaryDataBean.getVolume(), 0.0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_Volume_ESTx3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    assertNotNull(marketSummaryDataBean.getOpenTSIA());
    assertNotNull(marketSummaryDataBean.getGainPercent());
    assertNotNull(marketSummaryDataBean.getSummaryDate());
    assertNotNull(marketSummaryDataBean.getTSIA());
    assertTrue(marketSummaryDataBean.getVolume() > 0);
    assertNotNull(marketSummaryDataBean.getTopGainers());
    assertNotNull(marketSummaryDataBean.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_dJjD0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUser");
    assertNotNull(accountDataBean);
    assertEquals("testUser", accountDataBean.getProfileID());
    assertEquals(new BigDecimal(1000.00), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithHoldings_HppS3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = directSLSBBean.getAccountData("testUser");
    assertNotNull(accountDataBean);
    assertEquals(new BigDecimal(1000.00), accountDataBean.getBalance());
    assertTrue(accountDataBean.getHoldings().size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder15_QsLt14() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = new Integer(15);
    boolean twoPhase = true;
    directSLSBBean.queueOrder(orderID, twoPhase);
  }
}