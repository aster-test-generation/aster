/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DirectSLSBBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void tearDown_YSVa3() throws java.lang.Exception {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getHoldingsTest1_QHIJ0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    try {
      Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getImplTest1_kLxP0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    int result = directSLSBBean.getImpl();
    assertEquals(TradeConfig.SESSION_TO_DIRECT, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_qonU0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = null;
    try {
      quoteDataBean = directSLSBBean.pingTwoPhase("TEST1");
      Assertions.fail("Expected exception: UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
    Assertions.assertNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_LUvT0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    try {
      QuoteDataBean result = directSLSBBean.updateQuotePriceVolume("symbol", new BigDecimal(100.0), 1000.0);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume2_cbbZ1() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    try {
      directSLSBBean.setInSession(true);
      QuoteDataBean result = directSLSBBean.updateQuotePriceVolume("symbol", new BigDecimal(100.0), 1000.0);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_ABFB0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    try {
      AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
      System.out.println(accountDataBean);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_async_caHu0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "uid";
    Integer holdingID = 1;
    int orderProcessingMode = 2;
    try {
      OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
      directSLSBBean.completeOrderAsync(orderDataBean.getOrderID(), false);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_sync_jPOp1() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "uid";
    Integer holdingID = 1;
    int orderProcessingMode = 1;
    try {
      OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_nullHolding_SfgB2() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "uid";
    Integer holdingID = null;
    int orderProcessingMode = 1;
    try {
      OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_nullUser_pVzG3() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = null;
    Integer holdingID = 1;
    int orderProcessingMode = 1;
    try {
      OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_invalidHolding_NGfp4() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "uid";
    Integer holdingID = 0;
    int orderProcessingMode = 1;
    try {
      OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void buyTest5_ZbIv4() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(5);
    when(directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(orderDataBean);
    assertEquals(5, directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt()).getOrderID());
  }
}