/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_MarketSummaryJSF_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getVolume_KWbj0() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    assertEquals(0.0, marketSummaryJSF.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSummaryDate_NNKN0() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    Date expectedSummaryDate = new Date();
    marketSummaryJSF.setSummaryDate(expectedSummaryDate);
    assertEquals(expectedSummaryDate, marketSummaryJSF.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSummaryDateWithNullDate_uYov1() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    marketSummaryJSF.setSummaryDate(null);
    assertEquals(null, marketSummaryJSF.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopLosers_chaD0() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    assertEquals(0, topLosers.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getSummaryDate_SuAJ0() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    Date summaryDate = marketSummaryJSF.getSummaryDate();
    assertEquals(null, summaryDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getSummaryDate_coverage_rztQ1_1() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    Date summaryDate = marketSummaryJSF.getSummaryDate();
    Date summaryDate2 = marketSummaryJSF.getSummaryDate();
    assertEquals(null, summaryDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getSummaryDate_coverage_rztQ1_2() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    Date summaryDate = marketSummaryJSF.getSummaryDate();
    Date summaryDate2 = marketSummaryJSF.getSummaryDate();
    assertEquals(summaryDate, summaryDate2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA_lttb0() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    BigDecimal expected = BigDecimal.valueOf(0.00);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA1_fwDr1() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal bigDecimal = new BigDecimal(0);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    assertEquals(bigDecimal, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA2_lvTG2() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal expected = new BigDecimal(0);
    when(marketSummaryJSF.getOpenTSIA()).thenReturn(expected);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA3_JphX3() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal bigDecimal = new BigDecimal(0);
    when(marketSummaryJSF.getOpenTSIA()).thenReturn(bigDecimal);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    verify(marketSummaryJSF, times(1)).getOpenTSIA();
    assertEquals(bigDecimal, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA4_ovic4() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal bigDecimal = new BigDecimal(0);
    when(marketSummaryJSF.getOpenTSIA()).thenReturn(bigDecimal);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    verify(marketSummaryJSF, atLeast(1)).getOpenTSIA();
    assertEquals(0, actual.compareTo(bigDecimal));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA5_iIKp5() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal bigDecimal = new BigDecimal(0);
    when(marketSummaryJSF.getOpenTSIA()).thenReturn(bigDecimal);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    verify(marketSummaryJSF, atMost(1)).getOpenTSIA();
    assertEquals(bigDecimal, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA6_XkXa6() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal bigDecimal = new BigDecimal(0);
    when(marketSummaryJSF.getOpenTSIA()).thenReturn(bigDecimal);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    verify(marketSummaryJSF, never()).getOpenTSIA();
    assertEquals(bigDecimal, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_TPGN0() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal expected = null; // Change the expected value
    BigDecimal actual = marketSummaryJSF.getGainPercent();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent1_nLxF1() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal expected = null; // Change the expected value as per the requirement
    BigDecimal actual = marketSummaryJSF.getGainPercent();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent2_xDkg2() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getGainPercent();
    // Replace the erroneous assertion and fix the test case
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
    // Generate the fixed test case
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent3_PgMG3() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getGainPercent();
    BigDecimal expected = null; // Change the expected value based on the return type of getGainPercent()
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent4_eqfd4() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getGainPercent();
    BigDecimal expected = BigDecimal.ZERO;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent5_igNt5() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getGainPercent();
    BigDecimal expected = new BigDecimal("0.00");
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent8_UMYp8() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getGainPercent();
    // Replace the erroneous assertion and regenerate the fixed test case
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
    // Only generate the fixed test case
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent17_mOYV17() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getGainPercent();
    // Replace the erroneous assertion and regenerate the fixed test case
    // For example:
    // org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummaryTest1_VfwU0_AjIO0_1() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    marketSummary.getMarketSummary();
    assertEquals(null, marketSummary.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummaryTest1_VfwU0_AjIO0_2() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    marketSummary.getMarketSummary();
    assertEquals(BigDecimal.ZERO, marketSummary.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummaryTest1_VfwU0_AjIO0_3() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    marketSummary.getMarketSummary();
    assertEquals(0, marketSummary.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummaryTest1_VfwU0_AjIO0_4() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    marketSummary.getMarketSummary();
    assertEquals(BigDecimal.ZERO, marketSummary.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummaryTest1_VfwU0_AjIO0_5() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    marketSummary.getMarketSummary();
    assertEquals(Collections.emptyList(), marketSummary.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopLosers_chaD0_fid2() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
    assertEquals(null, topLosers);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getSummaryDate_coverage_rztQ1() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    Date summaryDate = marketSummaryJSF.getSummaryDate();
    assertEquals(null, summaryDate);
    Date summaryDate2 = marketSummaryJSF.getSummaryDate();
    assertEquals(summaryDate, summaryDate2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA_lttb0_fid2() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA2_lvTG2_fid2() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal bigDecimal = new BigDecimal(0);
    when(marketSummaryJSF.getOpenTSIA()).thenReturn(bigDecimal);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    assertEquals(bigDecimal, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenTSIA4_ovic4_fid2() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal bigDecimal = new BigDecimal(0);
    when(marketSummaryJSF.getOpenTSIA()).thenReturn(bigDecimal);
    BigDecimal actual = marketSummaryJSF.getOpenTSIA();
    verify(marketSummaryJSF, atLeast(1)).getOpenTSIA();
    assertEquals(bigDecimal, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_TPGn0() {
    MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
    BigDecimal actual = marketSummaryJSF.getGainPercent();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummaryTest1_VfwU0_AjIO0_5_fid3() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    marketSummary.getMarketSummary();
    assertEquals(null, marketSummary.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummaryTest1_VfwU0_AjIO0_6() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    marketSummary.getMarketSummary();
    assertEquals(null, marketSummary.getTopLosers());
  }
}