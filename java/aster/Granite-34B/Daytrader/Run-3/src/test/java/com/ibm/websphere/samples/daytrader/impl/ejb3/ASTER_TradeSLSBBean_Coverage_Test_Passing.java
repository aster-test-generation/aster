/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeSLSBBean_Coverage_Test_Passing {
  TradeSLSBBean trade = new TradeSLSBBean();

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getImpl_1_EAVF0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    int actual = tradeSLSBBean.getImpl();
    int expected = TradeConfig.EJB3;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_hMAr0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.orderCompleted("user1", 123);
      fail("Expected UnsupportedOperationException to be thrown");
    } catch (UnsupportedOperationException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsyncWithException_zSXb1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      tradeSLSBBean.completeOrderAsync(1, true);
      fail("Expected Exception was not thrown");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_012_ltLm11() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_TbfZ0() throws java.lang.Exception {
    double investment = 1000;
    double NetValue = 1500;
    double ir = 0.5;
    assertEquals(ir, trade.investmentReturn(investment, NetValue), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn2_mIRS1() throws java.lang.Exception {
    double investment = 10000;
    double NetValue = 10500;
    double ir = 0.05;
    assertEquals(ir, trade.investmentReturn(investment, NetValue), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn3_uFsC2() throws java.lang.Exception {
    double investment = 100000;
    double NetValue = 100500;
    double ir = 0.005;
    assertEquals(ir, trade.investmentReturn(investment, NetValue), 0.001);
  }
}