/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_JSFLoginFilter_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit1_cHoG0() throws javax.servlet.ServletException {
    JSFLoginFilter jSFLoginFilter = new JSFLoginFilter();
    jSFLoginFilter.init(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWhenFilterConfigIsNullOrEmpty_bGKj0() throws java.io.IOException, javax.servlet.ServletException {
    JSFLoginFilter loginFilter = new JSFLoginFilter();
    FilterConfig filterConfig = null;
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    loginFilter.doFilter(request, response, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWhenRequestAndResponseAreNull_xFmY1() throws java.io.IOException, javax.servlet.ServletException {
    JSFLoginFilter loginFilter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    HttpServletRequest request = null;
    HttpServletResponse response = null;
    FilterChain chain = mock(FilterChain.class);
    loginFilter.doFilter(request, response, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWhenSessionIsNull_Hxxs2() throws java.io.IOException, javax.servlet.ServletException {
    JSFLoginFilter loginFilter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = null;
    when(request.getSession()).thenReturn(session);
    FilterChain chain = mock(FilterChain.class);
    loginFilter.doFilter(request, response, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWhenUserIDIsNullOrEmpty_mljq3() throws java.io.IOException, javax.servlet.ServletException {
    JSFLoginFilter loginFilter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession()).thenReturn(session);
    String userID = null;
    when(session.getAttribute("uidBean")).thenReturn(userID);
    FilterChain chain = mock(FilterChain.class);
    loginFilter.doFilter(request, response, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWhenUserIDIsNotNullOrEmpty_vjWX4() throws java.io.IOException, javax.servlet.ServletException {
    JSFLoginFilter loginFilter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession()).thenReturn(session);
    String userID = "user";
    when(session.getAttribute("uidBean")).thenReturn(userID);
    FilterChain chain = mock(FilterChain.class);
    loginFilter.doFilter(request, response, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWhenURLContainsHome_pjbp5() throws java.io.IOException, javax.servlet.ServletException {
    JSFLoginFilter loginFilter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession()).thenReturn(session);
    String userID = null;
    when(session.getAttribute("uidBean")).thenReturn(userID);
    String url = "home";
    when(request.getServletPath()).thenReturn(url);
    FilterChain chain = mock(FilterChain.class);
    loginFilter.doFilter(request, response, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWhenURLContainsAccount_JCWh6() throws java.io.IOException, javax.servlet.ServletException {
    JSFLoginFilter loginFilter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession()).thenReturn(session);
    String userID = null;
    when(session.getAttribute("uidBean")).thenReturn(userID);
    String url = "account";
    when(request.getServletPath()).thenReturn(url);
    FilterChain chain = mock(FilterChain.class);
    loginFilter.doFilter(request, response, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWhenURLContainsPortfolio_vPUU7() throws java.io.IOException, javax.servlet.ServletException {
    JSFLoginFilter loginFilter = new JSFLoginFilter();
    FilterConfig filterConfig = mock(FilterConfig.class);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession()).thenReturn(session);
    String userID = null;
    when(session.getAttribute("uidBean")).thenReturn(userID);
    String url = "portfolio";
    when(request.getServletPath()).thenReturn(url);
    FilterChain chain = mock(FilterChain.class);
    loginFilter.doFilter(request, response, chain);
  }
}