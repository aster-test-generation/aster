/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_MarketSummaryWebSocket_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMarketSummarytUpdate_GCal0() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    String event = "event";
    marketSummaryWebSocket.onMarketSummarytUpdate(event);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMarketSummarytUpdateWithNullEvent_EKyR1() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    String event = null;
    marketSummaryWebSocket.onMarketSummarytUpdate(event);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMarketSummarytUpdateWithEmptyEvent_nIHX2() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    String event = "";
    marketSummaryWebSocket.onMarketSummarytUpdate(event);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithNullSession_mtgH2() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    Throwable t = new Throwable();
    Session currentSession = null;
    marketSummaryWebSocket.onError(t, currentSession);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnStockChange_tRXC0() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    marketSummaryWebSocket.onStockChange("event");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnError_duDF0_CcmA0() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    Throwable t = new Throwable();
    Session currentSession = mock(Session.class);
    marketSummaryWebSocket.onError(t, currentSession);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnOpen_fJdE0_dMmI0() throws Exception {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    Session session = mock(Session.class);
    marketSummaryWebSocket.onOpen(session, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryWithValidActionMessage_QjJL0_RIDO0() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    ActionMessage message = new ActionMessage();
    message.doDecoding("updateMarketSummary");
    Session currentSession = mock(Session.class);
    marketSummaryWebSocket.sendMarketSummary(message, currentSession);
    verify(currentSession).getAsyncRemote();
    verify(currentSession.getAsyncRemote()).sendText(anyString());
  }
}