/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.JsonBuilderFactory;
import javax.json.JsonReaderFactory;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObjectFactory_Test_Passing {
  private static int hitCount;
  private static String initTime;
  PingJSONPObjectFactory pingjsonpobjectfactory;
  HttpServlet httpservlet;
  HttpServletRequest request;
  HttpServletResponse response;
  private static JsonBuilderFactory toJSONObjectFactory = Json.createBuilderFactory(null);
  private static JsonReaderFactory toJSONReaderFactory = Json.createReaderFactory(null);
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;
  private static final JsonReaderFactory jSONReaderFactory = Json.createReaderFactory(null);
  private static final JsonBuilderFactory jSONObjectFactory = Json.createBuilderFactory(null);

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingjsonpobjectfactory = new PingJSONPObjectFactory();
    ServletConfig servletconfig = mock(ServletConfig.class);
    pingjsonpobjectfactory.init(servletconfig);
    verify(servletconfig, times(1)).getInitParameterNames();
    verify(servletconfig, times(1)).getInitParameter("name");
    verify(servletconfig, times(1)).getInitParameter("value");
    verify(servletconfig, times(1)).getInitParameter("name");
    verify(servletconfig, times(1)).getInitParameter("value");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    pingjsonpobjectfactory = new PingJSONPObjectFactory();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(httpservletrequest.getParameter("callback")).thenReturn("callbackFunction");
    pingjsonpobjectfactory.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/javascript");
    verify(httpservletresponse).setCharacterEncoding("UTF-8");
    verify(servletoutputstream).print("callbackFunction({\"initTime\":\"" + initTime + "\",\"hitCount\":" + hitCount + "})");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullRequestAndResponse_oKyl3() throws ServletException, IOException {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    HttpServletRequest req = null;
    HttpServletResponse res = null;
    factory.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingJSONPObjectFactoryGetServletInfo_LWtT0() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    String result = factory.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingJSONPObjectFactoryGetServletInfoForNull_kuJn1() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    String result = factory.getServletInfo();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingJSONPObjectFactoryGetServletInfoForEmpty_UXLj2() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    String result = factory.getServletInfo();
    assertNotEquals("", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingJSONPObjectFactoryGetServletInfoForLength_xStt3() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    String result = factory.getServletInfo();
    assertTrue(result.length() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_rnyk0() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    try {
      factory.doGet(request, response);
      assertEquals("text/html", response.getContentType());
    } catch (ServletException | IOException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullRequest_iATe1_pLfl0() throws ServletException, IOException {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    factory.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullResponse_NaCb2_yEyt0() throws ServletException, IOException {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = null;
    factory.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_VpPz0_kYvf0() throws ServletException, IOException {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("callback")).thenReturn("callback");
    when(req.getParameter("msg")).thenReturn("msg");
    factory.doPost(req, res);
    verify(res).setContentType("text/javascript");
    verify(res).setCharacterEncoding("UTF-8");
    verify(res).getWriter();
  }
}