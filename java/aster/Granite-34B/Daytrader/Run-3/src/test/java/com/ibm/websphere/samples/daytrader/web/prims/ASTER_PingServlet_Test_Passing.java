/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet_Test_Passing {
  private static int hitCount;
  private static String initTime;
  PingServlet pingservlet;
  HttpServlet httpservlet;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;
  @Mock
  private HttpServletRequest mockHttpServletRequest;
  @Mock
  private HttpServletResponse mockHttpServletResponse;
  @Mock
  private ServletOutputStream mockServletOutputStream;
  private PingServlet pingServlet;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_1() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet = mock(PingServlet.class, CALLS_REAL_METHODS);
    doCallRealMethod().when(pingservlet).init(any(ServletConfig.class));
    ServletConfig servletConfig = mock(ServletConfig.class);
    pingservlet.init(servletConfig);
    verify(pingservlet, times(1)).init(servletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_2() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet = mock(PingServlet.class, CALLS_REAL_METHODS);
    doCallRealMethod().when(pingservlet).init(any(ServletConfig.class));
    ServletConfig servletConfig = mock(ServletConfig.class);
    pingservlet.init(servletConfig);
    verify(pingservlet, times(1)).init(servletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    pingServlet = new PingServlet();
    when(mockHttpServletResponse.getOutputStream()).thenReturn(mockServletOutputStream);
    pingServlet.doGet(mockHttpServletRequest, mockHttpServletResponse);
    // Add meaningful assertions here
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_iHmY0() {
    PingServlet target = new PingServlet();
    String result = target.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_lineCoverage_mdcu1() {
    PingServlet target = new PingServlet();
    target.getServletInfo();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_branchCoverage_urAj2() {
    PingServlet target = new PingServlet();
    String result = target.getServletInfo();
    if (result.equals("Basic dynamic HTML generation through a servlet")) {
    } else {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_fAHx0() throws Exception {
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    PingServlet servlet = new PingServlet();
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NPbx1_Snnu0() throws ServletException, IOException {
    PingServlet servlet = new PingServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet = mock(PingServlet.class, CALLS_REAL_METHODS);
    doCallRealMethod().when(pingservlet).init(any(ServletConfig.class));
    ServletConfig servletConfig = mock(ServletConfig.class);
    pingservlet.init(servletConfig);
    verify(pingservlet, times(1)).init(servletConfig);
    assertEquals(0, hitCount);
    assertNotNull(initTime);
  }
}