/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Passing {
  private static final String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
  private static BigDecimal ZERO = new BigDecimal(0.0);
  private static final String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
  private static final String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
  TradeDirect tradedirect;
  Connection connection;
  @Mock
  private static MarketSummaryDataBean cachedMSDB;
  @Mock
  private static Integer marketSummaryLock;
  @Mock
  private static long nextMarketSummary;
  @Mock
  private PreparedStatement preparedstatement;
  @Mock
  private ResultSet resultset;
  private static String getAllQuotesSQL = "select * from quoteejb q";
  private boolean inSession = false;
  private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
  private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
  private  UserTransaction txn;
  @Mock
  private HoldingDataBean holdingDataBean;
  @Mock
  private QuoteDataBean quoteDataBean;
  @Mock
  private AccountDataBean accountDataBean;
  @InjectMocks
  private TradeDirect tradeDirect;
  @Mock
  private ManagedExecutorService mes;
  @Mock
  private Connection conn;
  @Mock
  private PreparedStatement stmt;
  @Mock
  private ResultSet rs;
  private MarketSummaryDataBean marketSummaryData;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_goAh0() {
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderID(1);
    orderData.setOrderStatus("open");
    orderData.setOrderType("buy");
    orderData.setPrice(new BigDecimal(100.00));
    orderData.setQuantity(100.00);
    orderData.setAccount(new AccountDataBean());
    orderData.setQuote(new QuoteDataBean());
    orderData.setHolding(new HoldingDataBean());
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderData.getOrderID(), true);
      assertEquals(orderData, result);
    } catch (Exception e) {
      fail("Failed to complete order: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_1_QXLQ0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1;
    boolean twoPhase = false;
    tradeDirect.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_2_jLKU1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_3_PlrQ2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2;
    boolean twoPhase = false;
    tradeDirect.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTables_AKZx0() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[10]; // Replace with actual sqlBuffer
    java.io.PrintWriter out = new java.io.PrintWriter(System.out); // Replace with actual out
    try {
      boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRecreateDBTablesCoverage_iBMg2() {
    TradeDirect tradeDirect = new TradeDirect();
    Object[] sqlBuffer = new Object[10]; // Replace with actual sqlBuffer
    java.io.PrintWriter out = new java.io.PrintWriter(System.out); // Replace with actual out
    try {
      tradeDirect.recreateDBTables(sqlBuffer, out);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_dBlo0() throws Exception {
    OrderDataBean orderData = null;
    Integer orderID = new Integer(1);
    boolean twoPhase = true;
    TradeDirect trade = new TradeDirect();
    try {
      orderData = trade.completeOrder(orderID, twoPhase);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder2_QUeQ1() throws Exception {
    OrderDataBean orderData = null;
    Integer orderID = new Integer(1);
    boolean twoPhase = false;
    TradeDirect trade = new TradeDirect();
    try {
      orderData = trade.completeOrder(orderID, twoPhase);
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder1_fMQG0() {
    try {
      TradeDirect trade = new TradeDirect();
      Integer orderID = new Integer(1);
      boolean twoPhase = true;
      OrderDataBean orderData = trade.completeOrder(orderID, twoPhase);
      assertEquals(orderData.getOrderID(), orderID);
    } catch (Exception e) {
      fail("Exception in testCompleteOrder1");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder2_zSqf1() {
    try {
      TradeDirect trade = new TradeDirect();
      Integer orderID = new Integer(2);
      boolean twoPhase = true;
      OrderDataBean orderData = trade.completeOrder(orderID, twoPhase);
      assertEquals(orderData.getOrderID(), orderID);
    } catch (Exception e) {
      fail("Exception in testCompleteOrder2");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataNull_uXsz1() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.getAccountData(1);
    assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNull_RBok1() throws Exception {
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    try {
      accountData = trade.register(null, null, null, null, null, null, null);
      Assertions.fail("TradeDirect:register -- error registering new user");
    } catch (Exception e) {
      Log.error("TradeDirect:registerNull -- error registering new user", e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterInvalid_okit2() throws Exception {
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    try {
      accountData = trade.register("", "", "", "", "", "", new BigDecimal(100.00));
      Assertions.fail("TradeDirect:register -- error registering new user");
    } catch (Exception e) {
      Log.error("TradeDirect:registerInvalid -- error registering new user", e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterZero_LYGv3() throws Exception {
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    try {
      accountData = trade.register("uid", "pwd", "fn", "ad", "mail", "cc", new BigDecimal(0.00));
      Assertions.fail("TradeDirect:register -- error registering new user");
    } catch (Exception e) {
      Log.error("TradeDirect:registerZero -- error registering new user", e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_qTBi0() throws Exception {
    AccountProfileDataBean profileData = new AccountProfileDataBean("testUser", "testPassword", "testFullName", "testAddress", "testEmail", "testCreditCard");
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals(accountProfileData.getUserID(), profileData.getUserID());
    assertEquals(accountProfileData.getPassword(), profileData.getPassword());
    assertEquals(accountProfileData.getFullName(), profileData.getFullName());
    assertEquals(accountProfileData.getAddress(), profileData.getAddress());
    assertEquals(accountProfileData.getEmail(), profileData.getEmail());
    assertEquals(accountProfileData.getCreditCard(), profileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_rhVE0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.orderCompleted("testUser", 123);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_dbnS0() throws Exception {
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("user123");
    profileData.setPassword("password123");
    profileData.setFullName("John Doe");
    profileData.setAddress("123 Main St");
    profileData.setEmail("johndoe@example.com");
    profileData.setCreditCard("1234 5678 9012 3456");
    AccountProfileDataBean accountProfileData = tradeDirect.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), accountProfileData.getUserID());
    assertEquals(profileData.getPassword(), accountProfileData.getPassword());
    assertEquals(profileData.getFullName(), accountProfileData.getFullName());
    assertEquals(profileData.getAddress(), accountProfileData.getAddress());
    assertEquals(profileData.getEmail(), accountProfileData.getEmail());
    assertEquals(profileData.getCreditCard(), accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTest_NSbK0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    tradeDirect.logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTestWithNullUserID_sjNj1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = null;
    tradeDirect.logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTestWithEmptyUserID_KMtD2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "";
    tradeDirect.logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTestWithInvalidUserID_vcEZ3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "invalidUser";
    tradeDirect.logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTestWithValidUserID_hDyi4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "validUser";
    tradeDirect.logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTestWithMultipleUsers_HIcL5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String[] userIDs = {"user1", "user2", "user3"};
    for (String userID : userIDs) {
      tradeDirect.logout(userID);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTestWithInvalidUserIDs_OAjp6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String[] userIDs = {"invalidUser1", "invalidUser2", "invalidUser3"};
    for (String userID : userIDs) {
      tradeDirect.logout(userID);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTestWithValidAndInvalidUserIDs_TayN7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String[] userIDs = {"validUser1", "invalidUser1", "validUser2", "invalidUser2"};
    for (String userID : userIDs) {
      tradeDirect.logout(userID);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_4_WROf4() throws Exception {
    OrderDataBean orderData = new OrderDataBean();
    orderData.setOrderID(Integer.valueOf(4));
    orderData.setOrderStatus("status4");
    orderData.setOrderType("type4");
    orderData.setPrice(new BigDecimal(4));
    orderData.setQuantity(4);
    orderData.setOpenDate(new java.util.Date(4L));
    orderData.setCompletionDate(new java.util.Date(4L));
    orderData.setAccount(new AccountDataBean());
    orderData.setOrderFee(new BigDecimal(4));
    orderData.setSymbol("symbol4");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest1_lJic0() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "12345";
    try {
      Collection<OrderDataBean> orders = tradeDirect.getClosedOrders(userID);
    } catch (Exception e) {
      fail("Failed to get closed orders: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest2_GuFI1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "67890";
    try {
      Collection<OrderDataBean> orders = tradeDirect.getClosedOrders(userID);
    } catch (Exception e) {
      fail("Failed to get closed orders: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_pLAm0() {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = null;
    try {
      accountData = trade.getAccountData("uid123");
      Assertions.assertEquals(accountData.getBalance(), new BigDecimal(1000.00));
    } catch (Exception e) {
      Assertions.fail("TradeDirect:getAccountData -- error getting account data");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataNull_XuVo1() {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = null;
    try {
      accountData = trade.getAccountData(null);
      Assertions.assertNull(accountData);
    } catch (Exception e) {
      Assertions.fail("TradeDirect:getAccountData -- error getting account data");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataEmpty_fHTw2() {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = null;
    try {
      accountData = trade.getAccountData("");
      Assertions.assertNull(accountData);
    } catch (Exception e) {
      Assertions.fail("TradeDirect:getAccountData -- error getting account data");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataRandom_rLMb3() {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = null;
    try {
      accountData = trade.getAccountData("randomUser");
      Assertions.assertNull(accountData);
    } catch (Exception e) {
      Assertions.fail("TradeDirect:getAccountData -- error getting account data");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_Pszy0() throws Exception {
    String userID = "uid1";
    String password = "uid1";
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    accountData = trade.login(userID, password);
    Assertions.assertNotNull(accountData);
    Assertions.assertEquals(accountData.getProfileID(), password);
    Assertions.assertEquals(accountData.getOpenBalance(), new BigDecimal(1000.00));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNull_uEPg1() throws Exception {
    String userID = null;
    String password = null;
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    accountData = trade.login(userID, password);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginEmpty_oZQg2() throws Exception {
    String userID = "";
    String password = "";
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    accountData = trade.login(userID, password);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullUser_Zhir3() throws Exception {
    String userID = null;
    String password = "uid1";
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    accountData = trade.login(userID, password);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullPassword_oscV4() throws Exception {
    String userID = "uid1";
    String password = null;
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    accountData = trade.login(userID, password);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginEmptyUser_rGZx5() throws Exception {
    String userID = "";
    String password = "uid1";
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    accountData = trade.login(userID, password);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginEmptyPassword_bJBL6() throws Exception {
    String userID = "uid1";
    String password = "";
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    accountData = trade.login(userID, password);
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginIncorrectUser_aeQt7() throws Exception {
    String userID = "uid2";
    String password = "uid1";
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    try {
      accountData = trade.login(userID, password);
    } catch (Exception e) {
      Assertions.assertTrue(true);
    }
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginIncorrectPassword_NOBS8() throws Exception {
    String userID = "uid1";
    String password = "uid2";
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    try {
      accountData = trade.login(userID, password);
    } catch (Exception e) {
      Assertions.assertTrue(true);
    }
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullUserIncorrectPassword_UOvo9() throws Exception {
    String userID = null;
    String password = "uid2";
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    try {
      accountData = trade.login(userID, password);
    } catch (Exception e) {
      Assertions.assertTrue(true);
    }
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginIncorrectUserNullPassword_PqQj10() throws Exception {
    String userID = "uid2";
    String password = null;
    AccountDataBean accountData = new AccountDataBean();
    TradeDirect trade = new TradeDirect();
    try {
      accountData = trade.login(userID, password);
    } catch (Exception e) {
      Assertions.assertTrue(true);
    }
    Assertions.assertNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummaryInternal_drtD0() throws Exception {
    TradeDirect trade = new TradeDirect();
    MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
    assertNotNull(marketSummaryData);
    assertNotNull(marketSummaryData.getOpenTSIA());
    assertNotNull(marketSummaryData.getGainPercent());
    assertNotNull(marketSummaryData.getSummaryDate());
    assertNotNull(marketSummaryData.getTSIA());
    assertNotNull(marketSummaryData.getVolume());
    assertNotNull(marketSummaryData.getTopGainers());
    assertNotNull(marketSummaryData.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_zLrf0() {
    TradeDirect tradeDirect = new TradeDirect();
    int actual = tradeDirect.getImpl();
    int expected = TradeConfig.DIRECT;
    assertEquals(expected, actual);
  }
}