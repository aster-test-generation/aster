/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple1_Test_Failing {
  private static LocalDateTime initTime;
  PingServletBeanValSimple1 pingservletbeanvalsimple1;
  HttpServlet httpservlet;
  HttpServletRequest request;
  HttpServletResponse response;
  private static int hitCount = 0;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
    doCallRealMethod().when(httpservlet).init(any());
    pingservletbeanvalsimple1.init(httpservlet);
    verify(httpservlet, times(1)).init(any());
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    initTime = LocalDateTime.now();
    hitCount = 0;
    httpservlet = mock(HttpServlet.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingservletbeanvalsimple1.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse, times(1)).setContentType("text/html");
    verify(httpservletresponse, times(1)).getOutputStream();
    verify(servletoutputstream, times(1)).println("<html><head><title>Ping Servlet Bean Validation Simple</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet Bean Validation Simple<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>  <B>Hit Count: " + ++hitCount + "</B></body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_rEjL0() throws ServletException {
    PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    ServletConfig config = mock(ServletConfig.class);
    doNothing().when(pingServletBeanValSimple1).init(config);
    pingServletBeanValSimple1.init(config);
    verify(pingServletBeanValSimple1, times(1)).init(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullServletConfig_sgAM1() throws ServletException {
    PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    ServletConfig config = null;
    doNothing().when(pingServletBeanValSimple1).init(config);
    pingServletBeanValSimple1.init(config);
    verify(pingServletBeanValSimple1, times(1)).init(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithException_nSeh2() throws ServletException {
    PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    ServletConfig config = mock(ServletConfig.class);
    doThrow(ServletException.class).when(pingServletBeanValSimple1).init(config);
    try {
      pingServletBeanValSimple1.init(config);
      fail("Expected ServletException");
    } catch (ServletException e) {
    }
    verify(pingServletBeanValSimple1, times(1)).init(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequestAndResponse_QMSZ3() throws ServletException, IOException {
    PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
    HttpServletRequest request = null;
    HttpServletResponse response = null;
    servlet.doPost(request, response);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetServletInfo_bQeb0() {
    PingServletBeanValSimple1 obj = new PingServletBeanValSimple1();
    String actual = obj.getServletInfo();
    String expected = "Basic dynamic HTML generation through a servlet";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetServletInfo1_tAcp1() {
    PingServletBeanValSimple1 obj = new PingServletBeanValSimple1();
    String actual = obj.getServletInfo();
    String expected = "Basic dynamic HTML generation through a servlet";
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetServletInfo3_Qdpd3() {
    PingServletBeanValSimple1 obj = new PingServletBeanValSimple1();
    String actual = obj.getServletInfo();
    String expected = "Basic dynamic HTML generation through a servlet";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetServletInfo12_qZBo12() {
    PingServletBeanValSimple1 obj = new PingServletBeanValSimple1();
    String actual = obj.getServletInfo();
    String expected = "Basic dynamic HTML generation through a servlet";
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequest_sVLA1_nxoW0() throws ServletException, IOException {
    PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
    HttpServletRequest request = null;
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullResponse_AtNA2_FpwG0() throws ServletException, IOException {
    PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = null;
    servlet.doPost(request, response);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_bpAS0_fqRM0() throws ServletException, IOException {
    PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_fid1() throws Exception {
    HttpServlet httpservlet = mock(HttpServlet.class);
    PingServletBeanValSimple1 pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
    doCallRealMethod().when(httpservlet).init(any());
    pingservletbeanvalsimple1.init(httpservlet);
    verify(httpservlet, times(1)).init(any());
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_rEjL0_fid1() throws ServletException {
    PingServletBeanValSimple1 pingServletBeanValSimple1 = mock(PingServletBeanValSimple1.class);
    ServletConfig config = mock(ServletConfig.class);
    doNothing().when(pingServletBeanValSimple1).init(config);
    pingServletBeanValSimple1.init(config);
    verify(pingServletBeanValSimple1, times(1)).init(config);
  }
}