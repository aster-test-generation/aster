/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.TimeUnit;
import javax.websocket.EncodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotePriceChangeListEncoder_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDestroy_MrZu0() {
    QuotePriceChangeListEncoder quotePriceChangeListEncoder = new QuotePriceChangeListEncoder();
    quotePriceChangeListEncoder.destroy();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_eqxM0() {
    QuotePriceChangeListEncoder qpcle = new QuotePriceChangeListEncoder();
    qpcle.init(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncode_gCYv0() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithNullList_Eamo1() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    String encoded = encoder.encode(null);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithEmptyList_ZZni2() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithListSizeOne_Hxqi3() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    list.add(new QuoteDataBean());
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithListSizeTwo_zPWn4() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithListSizeThree_aKEj5() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithListSizeFour_wCgQ6() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithListSizeFive_PjuM7() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithListSizeSix_IDKW8() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    list.add(new QuoteDataBean());
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEncodeWithListSizeOne_Hxqi3_fid1() throws EncodeException {
    QuotePriceChangeListEncoder encoder = new QuotePriceChangeListEncoder();
    CopyOnWriteArrayList<QuoteDataBean> list = new CopyOnWriteArrayList<QuoteDataBean>();
    list.add(new QuoteDataBean());
    String encoded = encoder.encode(list);
    assertNotNull(encoded);
    assertEquals("[]", encoded);
  }
}