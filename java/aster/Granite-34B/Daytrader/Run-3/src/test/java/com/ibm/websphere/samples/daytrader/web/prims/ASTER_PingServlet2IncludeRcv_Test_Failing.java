/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2IncludeRcv_Test_Failing {
  PingServlet2IncludeRcv pingservlet2includercv;
  @Mock
  HttpServletRequest request;
  @Mock
  HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    pingservlet2includercv = mock(PingServlet2IncludeRcv.class);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    doCallRealMethod().when(pingservlet2includercv).doPost(request, response);
    pingservlet2includercv.doPost(request, response);
    // Add meaningful assertions here
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequestAndResponse_mpTc3() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    HttpServletRequest request = null;
    HttpServletResponse response = null;
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_XlBj0() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    servlet.doGet(null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullRequest_utbD1() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    try {
      servlet.doGet(null, null);
      fail("Expected ServletException to be thrown");
    } catch (ServletException e) {
      assertTrue(e.getMessage().contains("Request cannot be null"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullResponse_QbEF2() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    try {
      servlet.doGet(null, null);
      fail("Expected ServletException to be thrown");
    } catch (ServletException e) {
      assertTrue(e.getMessage().contains("Response cannot be null"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequest_xhxX1_FBDY0() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    HttpServletRequest request = null;
    HttpServletResponse response = mock(HttpServletResponse.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullResponse_Rosu2_cPvC0() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = null;
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithException_xFqw7_naLg0() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    try {
      servlet.doPost(request, response);
      fail("Expected ServletException");
    } catch (ServletException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_wAtX0_wqrb0() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithIOException_tHVZ8_rHhh0() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    doNothing().when(response).sendError(Mockito.anyInt(), Mockito.anyString());
    servlet.doPost(request, response);
  }
}