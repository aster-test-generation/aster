/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Failing {
  OrderDataBean orderdatabean;
  @Mock
  HoldingDataBean holdingDataBean;
  @Mock
  AccountDataBean accountDataBean;
  @Mock
  QuoteDataBean quoteDataBean;
  private String symbol;
  private Integer orderID;
  private BigDecimal price;
  private HoldingDataBean holding;
  @Mock
  AccountDataBean accountDataBeanMock;
  @Mock
  QuoteDataBean quoteDataBeanMock;
  @Mock
  HoldingDataBean holdingDataBeanMock;
  private OrderDataBean orderDataBean;
  private double quantity;
  @Mock
  private AccountDataBean account;
  @Mock
  private QuoteDataBean quote;
  private BigDecimal orderFee;
  private String orderType;
  private OrderDataBean other;
  private Object object;
  private String orderStatus;
  private Date openDate;
  private Date completionDate;
  @Mock
  private Date mockDate;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_1() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(new Integer(1), randomInstance.getHolding().getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_2() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(1.0, randomInstance.getHolding().getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_3() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getHolding().getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_4() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(new Date(), randomInstance.getHolding().getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_5() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals("TEST", randomInstance.getHolding().getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_6() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(new Integer(1), randomInstance.getAccount().getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_7() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(1, randomInstance.getAccount().getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_8() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(1, randomInstance.getAccount().getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_9() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(new Date(), randomInstance.getAccount().getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_10() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(new Date(), randomInstance.getAccount().getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_11() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getAccount().getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_12() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getAccount().getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_13() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals("TEST", randomInstance.getAccount().getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_14() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals("TEST", randomInstance.getQuote().getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_15() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals("TEST", randomInstance.getQuote().getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_16() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(1.0, randomInstance.getQuote().getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_17() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getQuote().getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_18() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getQuote().getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_19() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getQuote().getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_20() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getQuote().getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance_21() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(1.0, randomInstance.getQuote().getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetPrice() throws Exception {
    orderdatabean = new OrderDataBean();
    price = new BigDecimal(100.00);
    when(orderdatabean.getPrice()).thenReturn(price);
    assertEquals(price, orderdatabean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testcancel() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setAccount(accountDataBeanMock);
    orderdatabean.setQuote(quoteDataBeanMock);
    orderdatabean.setHolding(holdingDataBeanMock);
    orderdatabean.cancel();
    verify(orderdatabean, times(1)).setOrderStatus("cancelled");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetQuantity() throws Exception {
    orderdatabean = new OrderDataBean(null, null, null, null, 100.0, null, null, account, quote, holding);
    when(holding.getQuantity()).thenReturn(100.0);
    assertEquals(100.0, orderdatabean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_1() throws Exception {
    orderID = 1;
    orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    other = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    object = new Object();
    // Mock the dependencies
    when(account.equals(any())).thenReturn(true);
    when(quote.equals(any())).thenReturn(true);
    when(holding.equals(any())).thenReturn(true);
    // Test the equals method with the same object
    // Test the equals method with the same values
    // Test the equals method with different values
    other.setOrderID(2);
    // Test the equals method with a different object type
    assertTrue(orderdatabean.equals(orderdatabean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_2() throws Exception {
    orderID = 1;
    orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    other = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    object = new Object();
    // Mock the dependencies
    when(account.equals(any())).thenReturn(true);
    when(quote.equals(any())).thenReturn(true);
    when(holding.equals(any())).thenReturn(true);
    // Test the equals method with the same object
    // Test the equals method with the same values
    // Test the equals method with different values
    other.setOrderID(2);
    // Test the equals method with a different object type
    assertTrue(orderdatabean.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_3() throws Exception {
    orderID = 1;
    orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    other = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    object = new Object();
    // Mock the dependencies
    when(account.equals(any())).thenReturn(true);
    when(quote.equals(any())).thenReturn(true);
    when(holding.equals(any())).thenReturn(true);
    // Test the equals method with the same object
    // Test the equals method with the same values
    // Test the equals method with different values
    other.setOrderID(2);
    // Test the equals method with a different object type
    assertFalse(orderdatabean.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_4() throws Exception {
    orderID = 1;
    orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    other = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    object = new Object();
    // Mock the dependencies
    when(account.equals(any())).thenReturn(true);
    when(quote.equals(any())).thenReturn(true);
    when(holding.equals(any())).thenReturn(true);
    // Test the equals method with the same object
    // Test the equals method with the same values
    // Test the equals method with different values
    other.setOrderID(2);
    // Test the equals method with a different object type
    assertFalse(orderdatabean.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrderStatus() throws Exception {
    orderdatabean = new OrderDataBean();
    when(orderdatabean.getOrderStatus()).thenReturn("Completed");
    assertEquals("Completed", orderdatabean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString() throws Exception {
    orderdatabean = new OrderDataBean();
    holdingDataBean = new HoldingDataBean();
    accountDataBean = new AccountDataBean();
    quoteDataBean = new QuoteDataBean();
    Mockito.when(orderdatabean.getCompletionDate()).thenReturn(new Date());
    Mockito.when(orderdatabean.getOpenDate()).thenReturn(new Date());
    Mockito.when(orderdatabean.getHolding()).thenReturn(holdingDataBean);
    Mockito.when(orderdatabean.getAccount()).thenReturn(accountDataBean);
    Mockito.when(orderdatabean.getQuote()).thenReturn(quoteDataBean);
    Mockito.when(orderdatabean.getQuantity()).thenReturn(100.0);
    Mockito.when(orderdatabean.getPrice()).thenReturn(new BigDecimal(100));
    Mockito.when(orderdatabean.getOrderFee()).thenReturn(new BigDecimal(10));
    Mockito.when(orderdatabean.getSymbol()).thenReturn("TEST");
    Mockito.when(orderdatabean.getOrderID()).thenReturn(1);
    Mockito.when(orderdatabean.getOrderType()).thenReturn("BUY");
    Mockito.when(orderdatabean.getOrderStatus()).thenReturn("OPEN");
    Mockito.when(holdingDataBean.getHoldingID()).thenReturn(1);
    Mockito.when(holdingDataBean.getQuantity()).thenReturn(100.0);
    Mockito.when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal(100));
    Mockito.when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    Mockito.when(accountDataBean.getAccountID()).thenReturn(1);
    Mockito.when(accountDataBean.getLoginCount()).thenReturn(1);
    Mockito.when(accountDataBean.getLogoutCount()).thenReturn(1);
    Mockito.when(accountDataBean.getLastLogin()).thenReturn(new Date());
    Mockito.when(accountDataBean.getCreationDate()).thenReturn(new Date());
    Mockito.when(accountDataBean.getBalance()).thenReturn(new BigDecimal(100));
    Mockito.when(accountDataBean.getOpenBalance()).thenReturn(new BigDecimal(100));
    Mockito.when(accountDataBean.getProfileID()).thenReturn("TEST");
    Mockito.when(quoteDataBean.getSymbol()).thenReturn("TEST");
    Mockito.when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    Mockito.when(quoteDataBean.getVolume()).thenReturn(100.0);
    Mockito.when(quoteDataBean.getPrice()).thenReturn(new BigDecimal(100));
    Mockito.when(quoteDataBean.getOpen()).thenReturn(new BigDecimal(100));
    Mockito.when(quoteDataBean.getLow()).thenReturn(new BigDecimal(100));
    Mockito.when(quoteDataBean.getHigh()).thenReturn(new BigDecimal(100));
    Mockito.when(quoteDataBean.getChange()).thenReturn(100.0);
    assertEquals(
        "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: "
            + new Date()
            + "\n\t completionDate: "
            + new Date()
            + "\n\t       quantity: 100.0\n\t          price: 100\n\t       orderFee: 10\n\t         symbol: TEST",
        orderdatabean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatusWithNullOrder_Xhda2() {
    OrderDataBean order = null;
    assertEquals(null, order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCompletionDate() throws Exception {
    orderdatabean = new OrderDataBean();
    completionDate = new Date();
    when(orderdatabean.getCompletionDate()).thenReturn(completionDate);
    assertEquals(completionDate, orderdatabean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_pCwx0_2() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertNotNull(orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_pCwx0_3() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertNotNull(orderDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_pCwx0_4() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertNotNull(orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_10() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertNotNull(orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_11() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertNotNull(orderDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_12() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertNotNull(orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisCompleted() throws Exception {
    orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    when(orderdatabean.getOrderStatus()).thenReturn("Completed");
    assertTrue(orderdatabean.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetQuote() throws Exception {
    quote = mock(QuoteDataBean.class);
    orderdatabean = new OrderDataBean();
    orderdatabean.setQuote(quote);
    Mockito.verify(quote).setSymbol(Mockito.anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetCompletionDate() throws Exception {
    orderdatabean = new OrderDataBean();
    completionDate = mock(Date.class);
    orderdatabean.setCompletionDate(completionDate);
    verify(completionDate, times(1)).getTime();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_lMtR0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    String expected = "Order 1	      orderType: BUY	    orderStatus: OPEN	       openDate: Fri Jul 26 16:39:33 CDT 2024	 completionDate: Fri Jul 26 16:39:33 CDT 2024	       quantity: 100.0	          price: 10.0	       orderFee: 1.0	         symbol: XYZ\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: XYZ";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNoCompletionDate_rEEC1() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    String expected = "Order 1	      orderType: BUY	    orderStatus: OPEN	       openDate: Fri Jul 26 16:39:34 CDT 2024	 completionDate: null	       quantity: 100.0	          price: 10.0	       orderFee: 1.0	         symbol: XYZ\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: null\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: XYZ";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateInvalid_sAyB2() {
    OrderDataBean order = new OrderDataBean();
    Date completionDate = new Date(0L);
    order.setCompletionDate(completionDate);
    assertNotEquals(completionDate, order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_WDYJ0() {
    OrderDataBean order = new OrderDataBean();
    AccountDataBean account = order.getAccount();
    assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithNullOrderType_blEG6() {
    OrderDataBean order = new OrderDataBean(1, null, "open", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    assertTrue(order.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisOpen_pqmV0() throws Exception {
    orderdatabean = new OrderDataBean();
    when(orderdatabean.getOrderStatus()).thenReturn("open");
    assertTrue(orderdatabean.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetAccount_fid1() throws Exception {
    account = mock(AccountDataBean.class);
    orderdatabean = new OrderDataBean();
    orderdatabean.setAccount(account);
    // Create a new account object
    AccountDataBean newAccount = new AccountDataBean();
    // Set the expected behavior of the mock account object
    when(account.getProfileID()).thenReturn("test_profile_id");
    // Call the method being tested
    orderdatabean.setAccount(newAccount);
    // Verify that the method behaves as expected
    assertEquals("test_profile_id", orderdatabean.getAccount().getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_lMtR0_fid1() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: XYZ";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNoCompletionDate_rEEC1_fid1() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: null\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: XYZ";
    assertEquals(expected, order.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithNullOrderType_aGnU2_fid1() {
    OrderDataBean order = new OrderDataBean(1, null, "open", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    assertFalse(order.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingDifferentOrderType_NBtZ4_fid1() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "SELL", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    boolean actualValue = orderDataBean1.equals(orderDataBean2);
    boolean expectedValue = false;
    assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingDifferentOrderStatus_uece5_fid1() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", " CLOSED", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    boolean actualValue = orderDataBean1.equals(orderDataBean2);
    boolean expectedValue = false;
    assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_Null_fRaL4_fid1() {
    OrderDataBean order = new OrderDataBean(1, "BUY", null, new java.util.Date(1378402302000L), new java.util.Date(1378402302000L), 1.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(1.0), "ORCL");
    assertFalse(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRandomInstance() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setHolding(holdingDataBean);
    orderdatabean.setAccount(accountDataBean);
    orderdatabean.setQuote(quoteDataBean);
    when(holdingDataBean.getHoldingID()).thenReturn(1);
    when(holdingDataBean.getQuantity()).thenReturn(1.0);
    when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.ONE);
    when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
    when(holdingDataBean.getQuoteID()).thenReturn("TEST");
    when(accountDataBean.getAccountID()).thenReturn(1);
    when(accountDataBean.getLoginCount()).thenReturn(1);
    when(accountDataBean.getLogoutCount()).thenReturn(1);
    when(accountDataBean.getLastLogin()).thenReturn(new Date());
    when(accountDataBean.getCreationDate()).thenReturn(new Date());
    when(accountDataBean.getBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getOpenBalance()).thenReturn(BigDecimal.ONE);
    when(accountDataBean.getProfileID()).thenReturn("TEST");
    when(quoteDataBean.getSymbol()).thenReturn("TEST");
    when(quoteDataBean.getCompanyName()).thenReturn("TEST");
    when(quoteDataBean.getVolume()).thenReturn(1.0);
    when(quoteDataBean.getPrice()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getOpen()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getLow()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getHigh()).thenReturn(BigDecimal.ONE);
    when(quoteDataBean.getChange()).thenReturn(1.0);
    OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
    Assertions.assertEquals(new Integer(1), randomInstance.getHolding().getHoldingID());
    Assertions.assertEquals(1.0, randomInstance.getHolding().getQuantity(), 0.0);
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getHolding().getPurchasePrice());
    Assertions.assertEquals(new Date(), randomInstance.getHolding().getPurchaseDate());
    Assertions.assertEquals("TEST", randomInstance.getHolding().getQuoteID());
    Assertions.assertEquals(new Integer(1), randomInstance.getAccount().getAccountID());
    Assertions.assertEquals(1, randomInstance.getAccount().getLoginCount());
    Assertions.assertEquals(1, randomInstance.getAccount().getLogoutCount());
    Assertions.assertEquals(new Date(), randomInstance.getAccount().getLastLogin());
    Assertions.assertEquals(new Date(), randomInstance.getAccount().getCreationDate());
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getAccount().getBalance());
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getAccount().getOpenBalance());
    Assertions.assertEquals("TEST", randomInstance.getAccount().getProfileID());
    Assertions.assertEquals("TEST", randomInstance.getQuote().getSymbol());
    Assertions.assertEquals("TEST", randomInstance.getQuote().getCompanyName());
    Assertions.assertEquals(1.0, randomInstance.getQuote().getVolume(), 0.0);
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getQuote().getPrice());
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getQuote().getOpen());
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getQuote().getLow());
    Assertions.assertEquals(BigDecimal.ONE, randomInstance.getQuote().getHigh());
    Assertions.assertEquals(1.0, randomInstance.getQuote().getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals() throws Exception {
    orderID = 1;
    orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    other = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "MSFT");
    object = new Object();
    // Mock the dependencies
    when(account.equals(any())).thenReturn(true);
    when(quote.equals(any())).thenReturn(true);
    when(holding.equals(any())).thenReturn(true);
    // Test the equals method with the same object
    assertTrue(orderdatabean.equals(orderdatabean));
    // Test the equals method with the same values
    assertTrue(orderdatabean.equals(other));
    // Test the equals method with different values
    other.setOrderID(2);
    assertFalse(orderdatabean.equals(other));
    // Test the equals method with a different object type
    assertFalse(orderdatabean.equals(object));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_pCwx0() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertNotNull(orderDataBean);
    assertNotNull(orderDataBean.getAccount());
    assertNotNull(orderDataBean.getQuote());
    assertNotNull(orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertEquals(1, orderDataBean.getOrderID().intValue());
    assertEquals("buy", orderDataBean.getOrderType());
    assertEquals("open", orderDataBean.getOrderStatus());
    assertNotNull(orderDataBean.getOpenDate());
    assertNotNull(orderDataBean.getCompletionDate());
    assertEquals(1.0, orderDataBean.getQuantity(), 0.0);
    assertEquals(new BigDecimal(1.0), orderDataBean.getPrice());
    assertEquals(new BigDecimal(1.0), orderDataBean.getOrderFee());
    assertEquals("symbol", orderDataBean.getSymbol());
    assertNotNull(orderDataBean.getAccount());
    assertNotNull(orderDataBean.getQuote());
    assertNotNull(orderDataBean.getHolding());
  }
}