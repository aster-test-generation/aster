/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession2_Test_Failing {
  private static int hitCount;
  private static String initTime;
  PingSession2 pingsession2;
  ServletConfig servletconfig;
  HttpServletRequest httpservletrequest;
  HttpSession httpsession;
  HttpServletResponse httpservletresponse;
  HttpServlet httpservlet;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpsession = mock(HttpSession.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingsession2 = new PingSession2();
    when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
    pingsession2.doPost(httpservletrequest, httpservletresponse);
    verify(httpservletrequest, times(1)).getSession(anyBoolean());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_IoPg0() throws ServletException, IOException {
    PingSession2 pingSession2 = new PingSession2();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(request.getSession()).thenReturn(session);
    pingSession2.doPost(request, response);
    verify(session, times(1)).invalidate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_with_HttpServletRequest_null_CqFZ1() throws ServletException, IOException {
    PingSession2 pingSession2 = new PingSession2();
    HttpServletRequest request = null;
    HttpServletResponse response = mock(HttpServletResponse.class);
    pingSession2.doPost(request, response);
    verify(response, times(1)).setStatus(500);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_with_HttpServletResponse_null_oIHk2() throws ServletException, IOException {
    PingSession2 pingSession2 = new PingSession2();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = null;
    pingSession2.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_zHBL0() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "HTTP Session Key: Tests management of a read/write unique id";
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo1_vTXT1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "Some expected value";
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo2_tain2() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "some expected value";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo3_sAyU3() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "some expected value"; // replace with the expected value
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo4_QeVF4() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "Some expected value";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo5_nYih5() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "Some String"; // Change the expected value to match the return type of getServletInfo()
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo6_dDjf6() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "Some expected value"; // Replace with the expected value
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo7_efeV7() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern() == actual;
    Assertions.assertTrue(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo8_TzSb8() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern() == "HTTP Session Key: Tests management of a read/write unique id";
    Assertions.assertTrue(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo9_ZhMG9() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern() != "HTTP Session Key: Tests management of a read/write unique id";
    Assertions.assertTrue(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo10_xxKj10() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern() != "PingSession2".intern();
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo12_tPhz12() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "HTTP Session Key: Tests management of a read/write unique id";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo13_JTYa13() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern().equals("HTTP Session Key: Tests management of a read/write unique id");
    Assertions.assertTrue(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo14_aBBW14() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "Some expected value";
    boolean flag = actual.intern().equals(expected);
    Assertions.assertTrue(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo15_bDrW15() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "Some text";
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo16_smWY16() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    String expected = "Some random string";
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_vCIQ0_1() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingsession2 = mock(PingSession2.class);
    doCallRealMethod().when(pingsession2).init(servletconfig);
    pingsession2.init(servletconfig);
    verify(pingsession2, times(1)).init(servletconfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_vCIQ0_2() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingsession2 = mock(PingSession2.class);
    doCallRealMethod().when(pingsession2).init(servletconfig);
    pingsession2.init(servletconfig);
    verify(pingsession2, times(1)).init(servletconfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost_fid1() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpsession = mock(HttpSession.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingsession2 = new PingSession2();
    when(httpservletrequest.getSession(any())).thenReturn(httpsession);
    pingsession2.doPost(httpservletrequest, httpservletresponse);
    verify(httpservletrequest, times(1)).getSession(any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_IoPg0_fid1() throws ServletException, IOException {
    PingSession2 pingSession2 = new PingSession2();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    pingSession2.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_with_HttpServletRequest_null_CqFZ1_fid1() throws ServletException, IOException {
    PingSession2 pingSession2 = new PingSession2();
    HttpServletRequest request = null;
    HttpServletResponse response = mock(HttpServletResponse.class);
    pingSession2.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo1_vTXT1_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    Assertions.assertNotNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo2_tain2_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.isEmpty();
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo3_sAyU3_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.equals("");
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo4_QeVF4_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.equals(null);
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo5_nYih5_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.length() == 0;
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo6_dDjf6_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.trim().isEmpty();
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo9_ZhMG9_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern() != "HTTP Session Key: Tests management of a read/write unique id";
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo10_xxKj10_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern() != obj.getServletInfo();
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo11_HnTy11_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern().equals(actual);
    Assertions.assertTrue(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo14_aBBW14_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern().equals(null);
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo15_bDrW15_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern().length() == 0;
    Assertions.assertFalse(flag);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo16_smWY16_fid1() {
    PingSession2 obj = new PingSession2();
    String actual = obj.getServletInfo();
    boolean flag = actual.intern().trim().isEmpty();
    Assertions.assertFalse(flag);
  }
}