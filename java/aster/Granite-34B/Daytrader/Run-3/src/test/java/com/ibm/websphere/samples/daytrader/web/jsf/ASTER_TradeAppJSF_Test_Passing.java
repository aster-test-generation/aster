/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppJSF_Test_Passing {
  private TradeServices tradeAction;
  private String userID = "uid:0";
  TradeAppJSF tradeappjsf;
  HttpSession httpsession;
  ExternalContext externalcontext;
  HttpServletRequest httpservletrequest;
  private String password = "xxx";
  private String email;
  private String money;
  private String fullname;
  private String address;
  private String ccn;
  private String cpassword;
  private TradeServices services;
  @InjectMocks
  private TradeAppJSF tradeAppJSF;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTest1_sniW0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String expected = "welcome";
    String actual = tradeAppJSF.logout();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void logoutTest2_Kxuf1() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String expected = "illegal argument:test";
    tradeAppJSF.setResults("test");
    String actual = tradeAppJSF.logout();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin1_qzHM0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String result = tradeAppJSF.login();
    assertEquals("Ready to Trade", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin2_fTCQ1() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String result = tradeAppJSF.login();
    assertEquals("Could not find account", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cfzT0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String result = tradeAppJSF.register();
    Assertions.assertEquals(result, "Registration operation succeeded");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_FqYw0_OOLa0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    String userID = tradeAppJSF.getUserID();
    Assertions.assertNotNull(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateProfile_Negative_Exception_nKlo2_qOcC0() {
    Instance<TradeServices> tradeServicesInstance = Mockito.mock(Instance.class);
    TradeAppJSF tradeAppJSF = new TradeAppJSF(tradeServicesInstance);
    tradeAppJSF.setUserID("invalid-user");
    String result = tradeAppJSF.updateProfile();
    assertEquals("invalid argument, check userID is correct, and the database is populatedinvalid-user", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResults_null_iPfv1_sksl0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setResults(null);
    assertEquals("", tradeAppJSF.getResults());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResults_IPBg0_BRst0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    String tempResults = tradeAppJSF.getResults();
    tradeAppJSF.setResults("");
    assertEquals(tempResults, tradeAppJSF.getResults());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCcnTest4_qygG4_KZBv0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    String ccn = tradeAppJSF.getCcn();
    Assertions.assertTrue(ccn.length() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResults_nonNullOrEmptyString_ALLA3_RNbV0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setResults("Some results");
    assertEquals("Some results", tradeAppJSF.getResults());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResults_nonNullOrEmptyString_afterClearing_wHNn4_Gwar0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setResults("Some results");
    tradeAppJSF.setResults("");
    assertEquals("", tradeAppJSF.getResults());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithEmptyPassword_RjLu2_fTcM0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    tradeAppJSF.setPassword("");
    assertEquals("", tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithLongPassword_XcUV5_uSfC0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String password = "12345678901234567890";
    tradeAppJSF.setPassword(password);
    assertEquals(password, tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMoney2_YGWV1_afZl0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setMoney("200");
    assertEquals("200", tradeAppJSF.getMoney());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPasswordWithSpecialCharactersPassword_OMMT6_sDqZ0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
    String password = "!@#$%^&*()_+";
    tradeAppJSF.setPassword(password);
    assertEquals(password, tradeAppJSF.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMoney3_cVjj2_FFlV0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setMoney("300");
    assertEquals("300", tradeAppJSF.getMoney());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResults7_njrr6_Xpdh0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setResults("700");
    assertEquals("700", tradeAppJSF.getResults());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResults8_hMuz7_TeRh0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setResults("800");
    assertEquals("800", tradeAppJSF.getResults());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_setResults_1_JeJC0_djIQ0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setResults("results");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMoney9_QDpz8_yNQe0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setMoney("900");
    assertEquals("900", tradeAppJSF.getMoney());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMoney10_DHqj9_WeHz0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setMoney("1000");
    assertEquals("1000", tradeAppJSF.getMoney());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMoney11_NJmE10_AcUE0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setMoney("1100");
    assertEquals("1100", tradeAppJSF.getMoney());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMoney12_bQmx11_NUVB0() {
    TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
    tradeAppJSF.setMoney("1200");
    assertEquals("1200", tradeAppJSF.getMoney());
  }
}