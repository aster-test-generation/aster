/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountProfileDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetCreditCard_KaKF0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "FullName1", "Address1", "Email1", "1234567890");
    String creditCard = accountProfileDataBean.getCreditCard();
    assert creditCard.equals("1234567890");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setEmail_withInvalidEmail_shouldThrowException_DReo1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    try {
      accountProfileDataBean.setEmail("test");
    } catch (Exception e) {
      assert true;
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_DHUc0_1() {
    AccountProfileDataBean bean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(bean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_DHUc0_2() {
    AccountProfileDataBean bean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(bean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_DHUc0_3() {
    AccountProfileDataBean bean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(bean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_DHUc0_4() {
    AccountProfileDataBean bean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(bean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_DHUc0_5() {
    AccountProfileDataBean bean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(bean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_DHUc0_6() {
    AccountProfileDataBean bean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(bean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_DHUc0_7() {
    AccountProfileDataBean bean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(bean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceForLineCoverage_HbUl1() {
    AccountProfileDataBean.getRandomInstance().toString();
    AccountProfileDataBean.getRandomInstance().equals(new Object());
    AccountProfileDataBean.getRandomInstance().hashCode();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmail_qypW0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    assertEquals("email", accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmailWithNullEmail_PHaY1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", null, "creditCard");
    assertEquals(null, accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_MpMZ0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "user1@example.com", "1234567890");
    String expected = "\n\tAccount Profile Data for userID:user1\n\t\t   passwd:password1\n\t\t   fullName:John Doe\n\t\t    address:123 Main St\n\t\t      email:user1@example.com\n\t\t creditCard:1234567890";
    String actual = accountProfileDataBean.toString();
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_FWxr0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@example.com", "1234567890");
    String userID = accountProfileDataBean.getUserID();
    assertEquals("user123", userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserIDWithEmptyObject_wpVT2() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    String userID = accountProfileDataBean.getUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_FHTU0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    assertEquals(111578566, accountProfileDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullUserID_EwGg1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean(null, "password1", "fullName1", "address1", "email1", "creditCard1");
    assertEquals(0, accountProfileDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setFullNameTest1_nCFw0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    accountProfileDataBean.setFullName("newFullName1");
    assert accountProfileDataBean.getFullName().equals("newFullName1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setFullNameTest2_kAXu1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user2", "password2", "fullName2", "address2", "email2", "creditCard2");
    accountProfileDataBean.setFullName("newFullName2");
    assert accountProfileDataBean.getFullName().equals("newFullName2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddress_fNbl0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
    String actual = accountProfileDataBean.getAddress();
    String expected = "address1";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddressWithNullAddress_FRNc1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user2", "password2", "fullName2", null, "email2", "creditCard2");
    String actual = accountProfileDataBean.getAddress();
    String expected = null;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getPasswordTest_DUQb0() {
    AccountProfileDataBean account = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "user1@example.com", "1234567890");
    assertEquals("password1", account.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getPasswordTest_IvhN1() {
    AccountProfileDataBean account = new AccountProfileDataBean("user2", "password2", "Jane Smith", "456 Elm St", "user2@example.com", "0987654321");
    assertEquals("password2", account.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreditCard_QWvE0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "john.doe@example.com", "1234567890");
    accountProfileDataBean.setCreditCard("1234567890");
    assertEquals("1234567890", accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreditCardNull_vaKq1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "john.doe@example.com", "1234567890");
    accountProfileDataBean.setCreditCard(null);
    assertEquals(null, accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreditCardEmpty_UDYT2() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user1", "password1", "John Doe", "123 Main St", "john.doe@example.com", "1234567890");
    accountProfileDataBean.setCreditCard("");
    assertEquals("", accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_dFpv0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountForLineCoverage_ArYl1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("userID");
    accountProfileDataBean.setPassword("password");
    accountProfileDataBean.setFullName("fullName");
    accountProfileDataBean.setAddress("address");
    accountProfileDataBean.setEmail("email");
    accountProfileDataBean.setCreditCard("creditCard");
    AccountDataBean accountDataBean = accountProfileDataBean.getAccount();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToHTML_npyL0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@example.com", "1234567890");
    String html = accountProfileDataBean.toHTML();
    System.out.println(html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToHTML_allFieldsEmpty_BesR1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("", "", "", "", "", "");
    String html = accountProfileDataBean.toHTML();
    System.out.println(html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToHTML_nullFields_YyhP3() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean(null, null, null, null, null, null);
    String html = accountProfileDataBean.toHTML();
    System.out.println(html);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullName_SDVX0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
    String fullNameResult = accountProfileDataBean.getFullName();
    assertEquals("fullName", fullNameResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullNameWithNullFullName_SoYg2() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", null, "address", "email", "creditCard");
    String fullNameResult = accountProfileDataBean.getFullName();
    assertEquals(null, fullNameResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullNameWithEmptyFullName_cWaW3() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("userID", "password", "", "address", "email", "creditCard");
    String fullNameResult = accountProfileDataBean.getFullName();
    assertEquals("", fullNameResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullNameWithInvalidInput_PBfm4() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean(null, null, null, null, null, null);
    String fullNameResult = accountProfileDataBean.getFullName();
    assertEquals(null, fullNameResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_ZDwJ0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    boolean actual = accountProfileDataBean.equals(null);
    boolean expected = false;
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_aEzQ1() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    boolean actual = accountProfileDataBean.equals(new Object());
    boolean expected = false;
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSimilarObject_PZhJ2() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    boolean actual = accountProfileDataBean1.equals(accountProfileDataBean2);
    boolean expected = true;
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentPassword_cVKd4() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean("1", "8", "3", "4", "5", "6");
    boolean actual = accountProfileDataBean1.equals(accountProfileDataBean2);
    boolean expected = true;
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentFullName_anUo5() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean("1", "2", "9", "4", "5", "6");
    boolean actual = accountProfileDataBean1.equals(accountProfileDataBean2);
    boolean expected = true;
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentAddress_ohIQ6() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean("1", "2", "3", "10", "5", "6");
    boolean actual = accountProfileDataBean1.equals(accountProfileDataBean2);
    boolean expected = true;
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentEmail_hkiy7() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean("1", "2", "3", "4", "11", "6");
    boolean actual = accountProfileDataBean1.equals(accountProfileDataBean2);
    boolean expected = true;
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentCreditCard_wvsv8() {
    AccountProfileDataBean accountProfileDataBean1 = new AccountProfileDataBean("1", "2", "3", "4", "5", "6");
    AccountProfileDataBean accountProfileDataBean2 = new AccountProfileDataBean("1", "2", "3", "4", "5", "12");
    boolean actual = accountProfileDataBean1.equals(accountProfileDataBean2);
    boolean expected = true;
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddress_Vowu0() {
    AccountProfileDataBean bean = new AccountProfileDataBean("123", "password", "John Doe", null, "john@example.com", "1234567890");
    bean.setAddress("123 Main St");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddress_Null_rjSq1() {
    AccountProfileDataBean bean = new AccountProfileDataBean("123", "password", "John Doe", null, "john@example.com", "1234567890");
    bean.setAddress(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddress_Empty_YYql2() {
    AccountProfileDataBean bean = new AccountProfileDataBean("123", "password", "John Doe", null, "john@example.com", "1234567890");
    bean.setAddress("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_DHUc0() {
    AccountProfileDataBean bean = AccountProfileDataBean.getRandomInstance();
    assertNotNull(bean);
    assertNotNull(bean.getUserID());
    assertNotNull(bean.getPassword());
    assertNotNull(bean.getFullName());
    assertNotNull(bean.getAddress());
    assertNotNull(bean.getEmail());
    assertNotNull(bean.getCreditCard());
  }
}