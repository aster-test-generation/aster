/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataJSF_Test_Failing {
  private TradeServices tradeAction;
  private ExternalContext context;
  OrderDataJSF orderdatajsf;
  HttpSession httpsession;
  ExternalContext externalcontext;
  private OrderData orderData;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrders_DHaX0() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    OrderData[] orders = orderDataJSF.getAllOrders();
    assertEquals(orders, orderDataJSF.getAllOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrder_yhHc0() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    orderDataJSF.getAllOrder();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrderWithNoOrders_xVul1() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    ArrayList<Object> emptyList = new ArrayList<>();
    orderDataJSF.setAllOrders(emptyList.toArray(new OrderData[0]));
    orderDataJSF.getAllOrder();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrderWithOrders_nzMD2() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    ArrayList<Object> orderList = new ArrayList<>();
    orderList.add(new OrderDataBean());
    orderDataJSF.setAllOrders(orderList.toArray(new OrderData[0]));
    orderDataJSF.getAllOrder();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderData_NullOrderData_BGsd1_cDuQ0() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    orderDataJSF.setAllOrders(null);
    Assertions.assertNull(orderDataJSF.getAllOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderData_LPhU0_fFAT0() {
    OrderData orderData = new OrderData(1, "status", new java.sql.Date(System.currentTimeMillis()), new java.sql.Time(System.currentTimeMillis()), new BigDecimal(10.00), "type", 100.00, "symbol", new BigDecimal(100.00));
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    orderDataJSF.setOrderData(orderData);
    Assertions.assertNotNull(orderDataJSF.getOrderData());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrders_DHaX0_fid2() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null);
    OrderData[] orders = orderDataJSF.getAllOrders();
    OrderData[] expected = null;
    assertEquals(expected, orders);
  }
}