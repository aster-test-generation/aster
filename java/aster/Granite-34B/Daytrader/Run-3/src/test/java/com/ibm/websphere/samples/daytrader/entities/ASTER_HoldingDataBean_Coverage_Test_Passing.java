/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashcodeWithholdingIDNotNull_xcqr0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 1.0, new BigDecimal(1.0), new Date(), "ABC");
    assertEquals(1, holdingDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashcodeWithholdingIDNull_gPPg1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    assertEquals(0, holdingDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashcodeWithholdingIDNotNullAndNotNull_yWKh2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 1.0, new BigDecimal(1.0), new Date(), "ABC");
    HoldingDataBean holdingDataBean1 = new HoldingDataBean(1, 1.0, new BigDecimal(1.0), new Date(), "ABC");
    assertEquals(holdingDataBean.hashCode(), holdingDataBean1.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString1_DzmG0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    String expected = "\n\tHolding Data for holding: " + holdingDataBean.getHoldingID() + "\n\t\t      quantity:" + holdingDataBean.getQuantity() + "\n\t\t purchasePrice:" + holdingDataBean.getPurchasePrice() + "\n\t\t  purchaseDate:" + holdingDataBean.getPurchaseDate() + "\n\t\t       quoteID:" + holdingDataBean.getQuoteID();
    assertEquals(expected, holdingDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_LIUw0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    assertFalse(holdingDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonHoldingDataBeanObject_dkYz1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    assertFalse(holdingDataBean.equals("test"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_GdCt0_1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(100), 10.0, new BigDecimal(100.0), new Date(), "symbol");
    assertEquals(100, holdingDataBean.getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_GdCt0_2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(100), 10.0, new BigDecimal(100.0), new Date(), "symbol");
    assertEquals(10.0, holdingDataBean.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_GdCt0_3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(100), 10.0, new BigDecimal(100.0), new Date(), "symbol");
    assertEquals(new BigDecimal(100.0), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_GdCt0_4() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(100), 10.0, new BigDecimal(100.0), new Date(), "symbol");
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance2_BRVH1_1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(200), 20.0, new BigDecimal(200.0), new Date(), "symbol");
    assertEquals(200, holdingDataBean.getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance2_BRVH1_2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(200), 20.0, new BigDecimal(200.0), new Date(), "symbol");
    assertEquals(20.0, holdingDataBean.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance2_BRVH1_3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(200), 20.0, new BigDecimal(200.0), new Date(), "symbol");
    assertEquals(new BigDecimal(200.0), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance2_BRVH1_4() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(200), 20.0, new BigDecimal(200.0), new Date(), "symbol");
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_cJTS2_1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(300), 30.0, new BigDecimal(300.0), new Date(), "symbol");
    assertEquals(300, holdingDataBean.getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_cJTS2_2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(300), 30.0, new BigDecimal(300.0), new Date(), "symbol");
    assertEquals(30.0, holdingDataBean.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_cJTS2_3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(300), 30.0, new BigDecimal(300.0), new Date(), "symbol");
    assertEquals(new BigDecimal(300.0), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_cJTS2_4() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(300), 30.0, new BigDecimal(300.0), new Date(), "symbol");
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance4_mthV3_1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(400), 40.0, new BigDecimal(400.0), new Date(), "symbol");
    assertEquals(400, holdingDataBean.getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance4_mthV3_2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(400), 40.0, new BigDecimal(400.0), new Date(), "symbol");
    assertEquals(40.0, holdingDataBean.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance4_mthV3_3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(400), 40.0, new BigDecimal(400.0), new Date(), "symbol");
    assertEquals(new BigDecimal(400.0), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance4_mthV3_4() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(400), 40.0, new BigDecimal(400.0), new Date(), "symbol");
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance5_rSdE4_1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(500), 50.0, new BigDecimal(500.0), new Date(), "symbol");
    assertEquals(500, holdingDataBean.getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance5_rSdE4_2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(500), 50.0, new BigDecimal(500.0), new Date(), "symbol");
    assertEquals(50.0, holdingDataBean.getQuantity(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance5_rSdE4_3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(500), 50.0, new BigDecimal(500.0), new Date(), "symbol");
    assertEquals(new BigDecimal(500.0), holdingDataBean.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance5_rSdE4_4() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(500), 50.0, new BigDecimal(500.0), new Date(), "symbol");
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance1_GdCt0() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(100), 10.0, new BigDecimal(100.0), new Date(), "symbol");
    assertEquals(100, holdingDataBean.getHoldingID().intValue());
    assertEquals(10.0, holdingDataBean.getQuantity(), 0);
    assertEquals(new BigDecimal(100.0), holdingDataBean.getPurchasePrice());
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance2_BRVH1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(200), 20.0, new BigDecimal(200.0), new Date(), "symbol");
    assertEquals(200, holdingDataBean.getHoldingID().intValue());
    assertEquals(20.0, holdingDataBean.getQuantity(), 0);
    assertEquals(new BigDecimal(200.0), holdingDataBean.getPurchasePrice());
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance3_cJTS2() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(300), 30.0, new BigDecimal(300.0), new Date(), "symbol");
    assertEquals(300, holdingDataBean.getHoldingID().intValue());
    assertEquals(30.0, holdingDataBean.getQuantity(), 0);
    assertEquals(new BigDecimal(300.0), holdingDataBean.getPurchasePrice());
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance4_mthV3() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(400), 40.0, new BigDecimal(400.0), new Date(), "symbol");
    assertEquals(400, holdingDataBean.getHoldingID().intValue());
    assertEquals(40.0, holdingDataBean.getQuantity(), 0);
    assertEquals(new BigDecimal(400.0), holdingDataBean.getPurchasePrice());
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance5_rSdE4() {
    HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(500), 50.0, new BigDecimal(500.0), new Date(), "symbol");
    assertEquals(500, holdingDataBean.getHoldingID().intValue());
    assertEquals(50.0, holdingDataBean.getQuantity(), 0);
    assertEquals(new BigDecimal(500.0), holdingDataBean.getPurchasePrice());
    assertEquals("symbol", holdingDataBean.getQuoteID());
  }
}