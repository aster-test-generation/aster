/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead2JSP_Test_Passing {
  @Mock
  HttpServletRequest req;
  @Mock
  HttpServletResponse res;
  private String symbol;
  @InjectMocks
  PingJDBCRead2JSP pingJDBCRead2JSP;
  PingJDBCRead2JSP pingjdbcread2jsp;
  HttpServlet httpservlet;
  ServletConfig servletconfig;
  HttpServletRequest httpservletrequest;
  ServletContext servletcontext;
  HttpServletResponse httpservletresponse;
  private ServletContext ctx;
  private QuoteDataBean quoteData;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void tearDown_xXGg1() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_vklo0() {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class";
    assertEquals(expected, pingJDBCRead2JSP.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLineCoverage_MSmj2() {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    String info = pingJDBCRead2JSP.getServletInfo();
    assert info != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBranchCoverage_sNtZ5() {
    PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
    String info1 = pingJDBCRead2JSP.getServletInfo();
    String info2 = pingJDBCRead2JSP.getServletInfo();
    assert !info1.equals(info2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_MniQ0() throws ServletException {
    PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
    obj.init(null);
  }
}