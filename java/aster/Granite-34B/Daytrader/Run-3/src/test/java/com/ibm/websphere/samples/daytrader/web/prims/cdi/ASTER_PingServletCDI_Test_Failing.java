/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletCDI_Test_Failing {
  private static String initTime;
  PingServletCDI pingservletcdi;
  ServletConfig servletconfig;
  HttpServlet httpservlet;
  HttpServletResponse httpservletresponse;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingservletcdi = new PingServletCDI();
    pingservletcdi.init(servletconfig);
    verify(servletconfig, times(1)).getInitParameterNames();
    verify(servletconfig, times(1)).getInitParameter("param1");
    verify(servletconfig, times(1)).getInitParameter("param2");
    assertEquals("initTime should be set", initTime, new java.util.Date().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithException_gQWx4_MGPT0() {
    PingServletCDI servlet = new PingServletCDI();
    ServletConfig config = mock(ServletConfig.class);
    try {
      servlet.init(config);
      fail("Expected ServletException");
    } catch (ServletException e) {
    }
  }
}