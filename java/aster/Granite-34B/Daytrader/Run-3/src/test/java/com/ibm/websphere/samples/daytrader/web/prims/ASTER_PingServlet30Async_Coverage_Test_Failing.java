/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.AsyncContext;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet30Async_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_jzHp0() throws javax.servlet.ServletException, java.io.IOException {
    PingServlet30Async servlet = new PingServlet30Async();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_eMTP0() throws javax.servlet.ServletException, java.io.IOException {
    PingServlet30Async servlet = new PingServlet30Async();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    AsyncContext asyncContext = mock(AsyncContext.class);
    ServletInputStream inputStream = mock(ServletInputStream.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(request.startAsync()).thenReturn(asyncContext);
    when(request.getInputStream()).thenReturn(inputStream);
    when(response.getOutputStream()).thenReturn(outputStream);
    try {
      when(inputStream.read(any(byte[].class))).thenReturn(1024);
      servlet.doPost(request, response);
    } catch (Exception e) {
      e.printStackTrace();
    }
    verify(request, times(1)).startAsync();
    verify(request, times(1)).getInputStream();
    verify(response, times(1)).getOutputStream();
    verify(asyncContext, times(1)).complete();
    verify(outputStream, times(1)).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_nqYm0() {
    PingServlet30Async servlet = new PingServlet30Async();
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
  }
}