/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObject_Test_Failing {
  private static String initTime;
  private static int hitCount;
  PingJSONPObject pingjsonpobject;
  ServletConfig servletconfig;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;
  HttpServlet httpservlet;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_1() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingjsonpobject = new PingJSONPObject();
    pingjsonpobject.init(servletconfig);
    verify(servletconfig, times(1)).getInitParameterNames();
    verify(servletconfig, times(1)).getInitParameter("param");
    assertEquals(initTime, new java.util.Date().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_2() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingjsonpobject = new PingJSONPObject();
    pingjsonpobject.init(servletconfig);
    verify(servletconfig, times(1)).getInitParameterNames();
    verify(servletconfig, times(1)).getInitParameter("param");
    assertEquals(hitCount, 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservlet = mock(HttpServlet.class);
    pingjsonpobject = new PingJSONPObject();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingjsonpobject.doPost(null, httpservletresponse);
    verify(servletoutputstream).println("Pong");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_BuGr0() {
    PingJSONPObject object = new PingJSONPObject();
    String expected = "Basic JSON generation and parsing in a servlet";
    String actual = object.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_uVwn0() throws ServletException, IOException {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    HttpServletRequest req = new MockHttpServletRequest();
    HttpServletResponse res = new MockHttpServletResponse();
    pingJSONPObject.doGet(req, res);
    assertEquals(200, res.getStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_xUmk0_Wlvz0() throws ServletException, IOException {
    PingJSONPObject obj = new PingJSONPObject();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    obj.doPost(request, response);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingjsonpobject = new PingJSONPObject();
    pingjsonpobject.init(servletconfig);
    verify(servletconfig, times(1)).getInitParameterNames();
    verify(servletconfig, times(1)).getInitParameter("param");
    assertEquals(initTime, new java.util.Date().toString());
    assertEquals(hitCount, 0);
  }
}