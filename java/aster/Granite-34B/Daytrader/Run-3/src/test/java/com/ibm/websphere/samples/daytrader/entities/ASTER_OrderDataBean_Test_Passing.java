/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
  OrderDataBean orderdatabean;
  @Mock
  HoldingDataBean holdingDataBean;
  @Mock
  AccountDataBean accountDataBean;
  @Mock
  QuoteDataBean quoteDataBean;
  private String symbol;
  private Integer orderID;
  private BigDecimal price;
  private HoldingDataBean holding;
  @Mock
  AccountDataBean accountDataBeanMock;
  @Mock
  QuoteDataBean quoteDataBeanMock;
  @Mock
  HoldingDataBean holdingDataBeanMock;
  private OrderDataBean orderDataBean;
  private double quantity;
  @Mock
  private AccountDataBean account;
  @Mock
  private QuoteDataBean quote;
  private BigDecimal orderFee;
  private String orderType;
  private OrderDataBean other;
  private Object object;
  private String orderStatus;
  private Date openDate;
  private Date completionDate;
  @Mock
  private Date mockDate;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetSymbol() throws Exception {
    orderdatabean = new OrderDataBean();
    symbol = "TESTSYMBOL";
    orderdatabean.setSymbol(symbol);
    assertEquals(symbol, orderdatabean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetHolding() throws Exception {
    orderdatabean = new OrderDataBean();
    holding = mock(HoldingDataBean.class);
    orderdatabean.setHolding(holding);
    HoldingDataBean result = orderdatabean.getHolding();
    assertEquals(holding, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOrderID() throws Exception {
    orderdatabean = new OrderDataBean();
    Integer orderID = 1;
    orderdatabean.setOrderID(orderID);
    assertEquals(orderID, orderdatabean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_ETwz0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol("TEST_SYMBOL");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbolWithCoverage_IDno1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setSymbol(null);
    orderDataBean.setSymbol("");
    orderDataBean.setSymbol("TEST_SYMBOL");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee() throws Exception {
    orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " Symbol");
    assertEquals(new BigDecimal(1.0), orderdatabean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_QLja0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "Symbol");
    int hash = orderDataBean.hashCode();
    assertEquals(hash, orderDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullOrderID_BdyX1() {
    OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "Symbol");
    int hash = orderDataBean.hashCode();
    assertEquals(hash, orderDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetPrice() throws Exception {
    orderdatabean = new OrderDataBean();
    price = new BigDecimal(100.00);
    orderdatabean.setPrice(price);
    assertEquals(price, orderdatabean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetOrderID_BFVR0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetOrderIDWithCoverage_wwxg1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    orderDataBean.setOrderID(2);
    orderDataBean.setOrderID(3);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOrderStatus() throws Exception {
    orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ABC");
    orderdatabean.setAccount(account);
    orderdatabean.setQuote(quote);
    orderdatabean.setHolding(holding);
    orderdatabean.setOrderStatus("Completed");
    assertEquals("Completed", orderdatabean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetSymbol() throws Exception {
    quote = mock(QuoteDataBean.class);
    symbol = "TEST_SYMBOL";
    orderdatabean = new OrderDataBean();
    orderdatabean.setQuote(quote);
    orderdatabean.setSymbol(symbol);
    when(quote.getSymbol()).thenReturn("TEST_SYMBOL");
    assertEquals("TEST_SYMBOL", orderdatabean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getPrice_eQlm0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(1), new Date(2), 3.0, new BigDecimal(4), new BigDecimal(5), "symbol");
    assertEquals(new BigDecimal(4), order.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getPrice2_Qnhi1() {
    OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(1), new Date(2), 3.0, new BigDecimal(4), new BigDecimal(5), new AccountDataBean(1, 2, 3, new Date(4), new Date(5), new BigDecimal(6), new BigDecimal(7), "profileID"), new QuoteDataBean("symbol"), new HoldingDataBean(8.0, new BigDecimal(9), new Date(10), new AccountDataBean(11, 12, 13, new Date(14), new Date(15), new BigDecimal(16), new BigDecimal(17), "profileID"), new QuoteDataBean("symbol")));
    assertEquals(new BigDecimal(4), order.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getPrice3_gEIt2() {
    OrderDataBean order = new OrderDataBean();
    assertEquals(null, order.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrderID() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setOrderID(1);
    assertEquals(1, orderdatabean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetAccount() throws Exception {
    account = mock(AccountDataBean.class);
    orderdatabean = new OrderDataBean();
    orderdatabean.setAccount(account);
    // Create a new account object
    AccountDataBean newAccount = new AccountDataBean();
    // Set the expected behavior of the mock account object
    when(account.getProfileID()).thenReturn("test_profile_id");
    // Call the method being tested
    orderdatabean.setAccount(newAccount);
    // Verify that the method behaves as expected
    assertNull(orderdatabean.getAccount().getProfileID());
  }

  @BeforeAll
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public static void setUpBeforeClass_Ezyy0() throws Exception {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_lLrB4() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "ORCL");
    double quantity = order.getQuantity();
    assertEquals(100.0, quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOrderFee() throws Exception {
    orderdatabean = new OrderDataBean();
    orderFee = new BigDecimal(100.00);
    orderdatabean.setOrderFee(orderFee);
    assertEquals(orderFee, orderdatabean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOpenDate() throws Exception {
    orderdatabean = new OrderDataBean();
    openDate = new Date();
    orderdatabean.setOpenDate(openDate);
    assertEquals(openDate, orderdatabean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testPrint_DBQT0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    orderDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testPrintWithNoData_zgpD1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOpenDate() throws Exception {
    orderdatabean = new OrderDataBean();
    Date expectedOpenDate = new Date();
    orderdatabean.setOpenDate(expectedOpenDate);
    assertEquals(expectedOpenDate, orderdatabean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_jYNn0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
    assertEquals("OPEN", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatusWithNoOrder_eCFw1() {
    OrderDataBean order = new OrderDataBean();
    assertEquals(null, order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_pCwx0_1() {
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_1() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertEquals(1, orderDataBean.getOrderID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_2() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertEquals("buy", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_3() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertEquals("open", orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_4() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertNotNull(orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_5() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertNotNull(orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_6() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertEquals(1.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_7() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertEquals(new BigDecimal(1.0), orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_8() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertEquals(new BigDecimal(1.0), orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithFullCoverage_kwDp1_9() {
    OrderDataBean orderDataBean = new OrderDataBean(new Integer(1), "buy", "open", new java.util.Date(1), new java.util.Date(1), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    assertEquals("symbol", orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_1() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_2() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_3() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_4() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_5() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_6() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_7() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_8() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_9() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_10() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_11() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2_12() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisSell() throws Exception {
    orderdatabean = new OrderDataBean(1, "sell", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(orderdatabean.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_Twqp0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
    assertEquals(1, order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderIDWithNoOrderID_bXQd1() {
    OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
    assertEquals(null, order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getSymbol_0_iqWW0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(13.0), "XYZ");
    String symbol = order.getSymbol();
    assertEquals("XYZ", symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getSymbol_1_CBhR1() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(13.0), null);
    String symbol = order.getSymbol();
    assertEquals(null, symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_LoQR0() {
    OrderDataBean order = new OrderDataBean();
    Date date = new Date();
    order.setOpenDate(date);
    assertEquals(date, order.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrderType() throws Exception {
    orderdatabean = new OrderDataBean();
    assertEquals(orderType, orderdatabean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisOpenWithOrderStatusProcessing_KBXz1() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "processing", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertTrue(order.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisOpenWithOrderStatusClosed_MIgv2() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "closed", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertFalse(order.isOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_dphl0() {
    AccountDataBean account = new AccountDataBean();
    OrderDataBean order = new OrderDataBean();
    order.setAccount(account);
    assertEquals(account, order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithCoverage_uMUZ1_1() {
    AccountDataBean account = AccountDataBean.getRandomInstance();
    OrderDataBean order = new OrderDataBean();
    order.setAccount(account);
    assertEquals(account.getBalance(), order.getAccount().getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithCoverage_uMUZ1_2() {
    AccountDataBean account = AccountDataBean.getRandomInstance();
    OrderDataBean order = new OrderDataBean();
    order.setAccount(account);
    assertEquals(account.getOpenBalance(), order.getAccount().getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithCoverage_uMUZ1_3() {
    AccountDataBean account = AccountDataBean.getRandomInstance();
    OrderDataBean order = new OrderDataBean();
    order.setAccount(account);
    assertEquals(account.getProfileID(), order.getAccount().getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType_supr0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "IBM");
    orderDataBean.setOrderType("BUY");
    assertEquals("BUY", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderTypeWithNoOrderType_qfVd1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, null, "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "IBM");
    orderDataBean.setOrderType(null);
    assertEquals(null, orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderTypeWithInvalidOrderType_ZudG2() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "SELL", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "IBM");
    orderDataBean.setOrderType("test");
    assertNotEquals("SELL", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderTypeWithEmptyOrderType_EAiI3() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "IBM");
    orderDataBean.setOrderType("");
    assertEquals("", orderDataBean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_WWJC0() {
    OrderDataBean order = new OrderDataBean();
    order.setOrderFee(new BigDecimal(10.00));
    assertEquals(new BigDecimal(10.00), order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithAccountAndQuote_jnlg1() {
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.00, new BigDecimal(10.00), new BigDecimal(1.00), account, quote, null);
    assertEquals(new BigDecimal(1.00), order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeWithHolding_hLCC2() {
    HoldingDataBean holding = new HoldingDataBean();
    OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.00, new BigDecimal(10.00), new BigDecimal(1.00), null, null, holding);
    assertEquals(new BigDecimal(1.00), order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetQuantity() throws Exception {
    orderdatabean = new OrderDataBean();
    // arrange
    double expectedQuantity = 10.0;
    // act
    orderdatabean.setQuantity(expectedQuantity);
    // assert
    assertEquals(expectedQuantity, orderdatabean.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisBuy() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setOrderType("buy");
    assertTrue(orderdatabean.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetAccount() throws Exception {
    account = AccountDataBean.getRandomInstance();
    orderdatabean = new OrderDataBean();
    orderdatabean.setAccount(account);
    assertEquals(account, orderdatabean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisCancelled() throws Exception {
    orderdatabean = new OrderDataBean();
    orderdatabean.setOrderStatus("cancelled");
    assertTrue(orderdatabean.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_sZlj0() {
    OrderDataBean order = new OrderDataBean();
    order.setQuantity(100.0);
    assertEquals(100.0, order.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_wDHg0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertTrue(order.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuyWithSellOrder_Clql1() {
    OrderDataBean order = new OrderDataBean(1, "sell", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    assertFalse(order.isBuy());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingNull_yeop1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    orderDataBean.setHolding(null);
    assertEquals(null, orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_MnEs0() {
    OrderDataBean order = new OrderDataBean();
    Date completionDate = new Date();
    order.setCompletionDate(completionDate);
    assertEquals(completionDate, order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDateNull_dRMj1() {
    OrderDataBean order = new OrderDataBean();
    order.setCompletionDate(null);
    assertEquals(null, order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelledTrue_XUTp0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "cancelled", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    assertTrue(orderDataBean.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelledFalse_qbxs1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    assertFalse(orderDataBean.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote_nUjJ4() {
    System.out.println("setQuote");
    QuoteDataBean quote = null;
    OrderDataBean instance = new OrderDataBean();
    instance.setQuote(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote2_Xffy5() {
    System.out.println("setQuote");
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean instance = new OrderDataBean();
    instance.setQuote(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountForNullAccount_sJNt1() {
    OrderDataBean order = new OrderDataBean();
    order.setAccount(null);
    AccountDataBean account = order.getAccount();
    assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountForNotNullAccount_sojp2() {
    OrderDataBean order = new OrderDataBean();
    AccountDataBean account = new AccountDataBean();
    order.setAccount(account);
    AccountDataBean returnedAccount = order.getAccount();
    assertEquals(account, returnedAccount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountCoverage_rZMo3() {
    OrderDataBean order = new OrderDataBean();
    order.getAccount();
    order.setAccount(null);
    order.getAccount();
    order.setAccount(new AccountDataBean());
    order.getAccount();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_JDrh4() {
    OrderDataBean order = new OrderDataBean();
    AccountDataBean account = new AccountDataBean();
    order.setAccount(account);
    assertEquals(account, order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_shWL0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    HoldingDataBean holdingDataBean = new HoldingDataBean(1, 100.0, new BigDecimal(10.0), new Date(), "TEST");
    orderDataBean.setHolding(holdingDataBean);
    assertEquals(holdingDataBean, orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingNull_gypq1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    assertEquals(null, orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCoverage_sYqi2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setHolding(null);
    assertEquals(null, orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingNull_XvDi4() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    orderDataBean.setHolding(null);
    assertEquals(null, orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_aEuH6() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    assertEquals(orderDataBean1.hashCode(), orderDataBean2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeCoverage_prSr7() {
    OrderDataBean orderDataBean = new OrderDataBean();
    assertEquals(0, orderDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_Svgn8() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    assertEquals(orderDataBean1, orderDataBean2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsNull_jNpd9() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
    assertNotEquals(orderDataBean, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsCoverage_yOek10() {
    OrderDataBean orderDataBean = new OrderDataBean();
    assertNotEquals(orderDataBean, new Object());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel_gVjO0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel2_hzwx1() {
    OrderDataBean order = new OrderDataBean(2, "SELL", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel3_vKeN2() {
    OrderDataBean order = new OrderDataBean(3, "BUY", " CLOSED", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel4_KZyy3() {
    OrderDataBean order = new OrderDataBean(4, "SELL", "CANCELLED", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel5_WsVa4() {
    OrderDataBean order = new OrderDataBean(5, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel6_QePk5() {
    OrderDataBean order = new OrderDataBean(6, "SELL", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel7_IIoO6() {
    OrderDataBean order = new OrderDataBean(7, "BUY", "OPEN", new Date(), null, 1000000.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel8_yeOD7() {
    OrderDataBean order = new OrderDataBean(8, "SELL", "OPEN", new Date(), null, 1000000.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel9_aWYK8() {
    OrderDataBean order = new OrderDataBean(9, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(1000000.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel10_rbYL9() {
    OrderDataBean order = new OrderDataBean(10, "SELL", "OPEN", new Date(), null, 100.0, new BigDecimal(1000000.0), new BigDecimal(1.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel11_JnDH10() {
    OrderDataBean order = new OrderDataBean(11, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1000000.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancel12_WlNY11() {
    OrderDataBean order = new OrderDataBean(12, "SELL", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1000000.0), "ORCL");
    order.cancel();
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_eewU0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(0);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee2_pOmP1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(100);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee3_LHLi2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(1000);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee4_oYRv3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(10000);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee5_ebNr4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(100000);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee6_Ykaw5() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(1000000);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee7_fKOA6() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(10000000);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee8_zsDF7() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(100000000);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee9_dFbR8() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(1000000000);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee10_hwVj9() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = new BigDecimal(10000000000L);
    orderDataBean.setOrderFee(orderFee);
    assertEquals(orderFee, orderDataBean.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithSellOrderType_mVXM0() {
    OrderDataBean order = new OrderDataBean(1, "sell", "open", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    assertTrue(order.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithBuyOrderType_ooyi1() {
    OrderDataBean order = new OrderDataBean(1, "buy", "open", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    assertFalse(order.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithNullOrderType_aGnU2() {
    OrderDataBean order = new OrderDataBean(1, null, "open", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithEmptyOrderType_oDfF3() {
    OrderDataBean order = new OrderDataBean(1, "", "open", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
    assertFalse(order.isSell());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_nfSr0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setPrice(new BigDecimal(100.00));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_RFMs0() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    boolean actualValue = orderDataBean.equals(null);
    boolean expectedValue = false;
    assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectOfDifferentClass_tXOa1() {
    OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    boolean actualValue = orderDataBean.equals(new Object());
    boolean expectedValue = false;
    assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingSameAttributes_QLqw2() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    boolean actualValue = orderDataBean1.equals(orderDataBean2);
    boolean expectedValue = true;
    assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingDifferentOrderID_pqrY3() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    boolean actualValue = orderDataBean1.equals(orderDataBean2);
    boolean expectedValue = false;
    assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingDifferentOrderType_NBtZ4() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "SELL", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    boolean actualValue = orderDataBean1.equals(orderDataBean2);
    boolean expectedValue = true;
    assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingDifferentOrderStatus_uece5() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", " CLOSED", new java.sql.Timestamp(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    boolean actualValue = orderDataBean1.equals(orderDataBean2);
    boolean expectedValue = true;
    assertEquals(expectedValue, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus1_HILD0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "IN_PROGRESS", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(100.0), new java.math.BigDecimal(100.0), "ORCL");
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus2_nWEs1() {
    OrderDataBean order = new OrderDataBean(2, "BUY", "IN_PROGRESS", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(100.0), new java.math.BigDecimal(100.0), "ORCL");
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus3_fmih2() {
    OrderDataBean order = new OrderDataBean(3, "BUY", "IN_PROGRESS", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(100.0), new java.math.BigDecimal(100.0), "ORCL");
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus4_MqIJ3() {
    OrderDataBean order = new OrderDataBean(4, "BUY", "IN_PROGRESS", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(100.0), new java.math.BigDecimal(100.0), "ORCL");
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus5_tluT4() {
    OrderDataBean order = new OrderDataBean(5, "BUY", "IN_PROGRESS", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(100.0), new java.math.BigDecimal(100.0), "ORCL");
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus6_TkRr5() {
    OrderDataBean order = new OrderDataBean(6, "BUY", "IN_PROGRESS", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(100.0), new java.math.BigDecimal(100.0), "ORCL");
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus7_NaFX6() {
    OrderDataBean order = new OrderDataBean(7, "BUY", "IN_PROGRESS", new java.util.Date(1234567890), new java.util.Date(1234567890), 100.0, new java.math.BigDecimal(100.0), new java.math.BigDecimal(100.0), "ORCL");
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_Completed_kpUH0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "completed", new java.util.Date(1378402302000L), new java.util.Date(1378402302000L), 1.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(1.0), "ORCL");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_AlertCompleted_JMLg1() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "alertcompleted", new java.util.Date(1378402302000L), new java.util.Date(1378402302000L), 1.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(1.0), "ORCL");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_Cancelled_DTHN2() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "cancelled", new java.util.Date(1378402302000L), new java.util.Date(1378402302000L), 1.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(1.0), "ORCL");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_Open_zhUI3() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "open", new java.util.Date(1378402302000L), new java.util.Date(1378402302000L), 1.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(1.0), "ORCL");
    assertFalse(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_Null_fRaL4() {
    OrderDataBean order = new OrderDataBean(1, "BUY", null, new java.util.Date(1378402302000L), new java.util.Date(1378402302000L), 1.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(1.0), "ORCL");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompleted_Unknown_ZvXu5() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "unknown", new java.util.Date(1378402302000L), new java.util.Date(1378402302000L), 1.0, new java.math.BigDecimal(123.45), new java.math.BigDecimal(1.0), "ORCL");
    assertFalse(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_PKES0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate2_aOPQ1() {
    OrderDataBean order = new OrderDataBean(2, "SELL", " CLOSED", new Date(System.currentTimeMillis()), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate3_QOCQ2() {
    OrderDataBean order = new OrderDataBean(3, "BUY", "OPEN", new Date(System.currentTimeMillis() - 1000), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis() - 1000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate4_jwff3() {
    OrderDataBean order = new OrderDataBean(4, "BUY", "OPEN", new Date(System.currentTimeMillis() - 2000), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis() - 2000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate5_NqJa4() {
    OrderDataBean order = new OrderDataBean(5, "BUY", "OPEN", new Date(System.currentTimeMillis() - 3000), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis() - 3000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate6_LIyj5() {
    OrderDataBean order = new OrderDataBean(6, "BUY", "OPEN", new Date(System.currentTimeMillis() - 4000), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis() - 4000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate7_wzEw6() {
    OrderDataBean order = new OrderDataBean(7, "BUY", "OPEN", new Date(System.currentTimeMillis() - 5000), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis() - 5000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate8_dgbj7() {
    OrderDataBean order = new OrderDataBean(8, "BUY", "OPEN", new Date(System.currentTimeMillis() - 6000), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis() - 6000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate9_pddK8() {
    OrderDataBean order = new OrderDataBean(9, "BUY", "OPEN", new Date(System.currentTimeMillis() - 7000), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis() - 7000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate10_XHbD9() {
    OrderDataBean order = new OrderDataBean(10, "BUY", "OPEN", new Date(System.currentTimeMillis() - 8000), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    assertEquals(order.getOpenDate(), new Date(System.currentTimeMillis() - 8000));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionDate_IIyK0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(System.currentTimeMillis()), new Date(System.currentTimeMillis()), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
    Date completionDate = order.getCompletionDate();
    assertEquals(completionDate, order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOrderTypeTest1_PXCH0() {
    OrderDataBean order = new OrderDataBean(new Integer(1), "BUY", "OPEN", new java.util.Date(1234567890), new java.util.Date(1234567890), 123.45, new BigDecimal(123.45), new BigDecimal(123.45), "XYZ");
    assertEquals("BUY", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetOrderType_LeJv0() throws Exception {
    orderdatabean = new OrderDataBean();
    String orderType = "buy";
    orderdatabean.setOrderType(orderType);
    assertEquals(orderType, orderdatabean.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceWithNullValues_UjcR2() {
    OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
    assertNull(orderDataBean.getOrderID());
    assertNull(orderDataBean.getOrderType());
    assertNull(orderDataBean.getOrderStatus());
    assertNull(orderDataBean.getOpenDate());
    assertNull(orderDataBean.getCompletionDate());
    assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
    assertNull(orderDataBean.getPrice());
    assertNull(orderDataBean.getOrderFee());
    assertNull(orderDataBean.getSymbol());
    assertNull(orderDataBean.getAccount());
    assertNull(orderDataBean.getQuote());
    assertNull(orderDataBean.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountWithCoverage_uMUZ1() {
    AccountDataBean account = AccountDataBean.getRandomInstance();
    OrderDataBean order = new OrderDataBean();
    order.setAccount(account);
    assertEquals(account.getBalance(), order.getAccount().getBalance());
    assertEquals(account.getOpenBalance(), order.getAccount().getOpenBalance());
    assertEquals(account.getProfileID(), order.getAccount().getProfileID());
  }
}