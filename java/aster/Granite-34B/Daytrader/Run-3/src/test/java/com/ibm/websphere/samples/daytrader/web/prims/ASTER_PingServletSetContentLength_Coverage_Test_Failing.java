/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServletSetContentLength_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_GtOb0() {
    PingServletSetContentLength obj = new PingServletSetContentLength();
    String expected = "Basic dynamic HTML generation through a servlet, with " + "contentLength set by contentLength parameter.";
    assertEquals(expected, obj.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_lPLX0() throws javax.servlet.ServletException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    ServletConfig config = new MockServletConfig();
    servlet.init(config);
    assertEquals(null, servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_xpcU0() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest req = null;
    HttpServletResponse res = null;
    servlet.doPost(req, res);
    assertEquals(0, 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetContentType_xUxE0() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(null, response);
    verify(response).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLength_Ttbd1() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getParameter("contentLength")).thenReturn("100");
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(request).getParameter("contentLength");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLengthToZero_fWRj2() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getParameter("contentLength")).thenReturn(null);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(request).getParameter("contentLength");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLengthToNegative_NSOx3() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getParameter("contentLength")).thenReturn("-100");
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(request).getParameter("contentLength");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLengthToInvalid_vguM4() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getParameter("contentLength")).thenReturn("abc");
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(request).getParameter("contentLength");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLengthToMax_nwgr5() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getParameter("contentLength")).thenReturn(String.valueOf(Integer.MAX_VALUE));
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(request).getParameter("contentLength");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLengthToMin_FTzn6() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getParameter("contentLength")).thenReturn(String.valueOf(Integer.MIN_VALUE));
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(request).getParameter("contentLength");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuffer_NfkF7() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getParameter("contentLength")).thenReturn("100");
    HttpServletResponse response = mock(HttpServletResponse.class);
    ServletOutputStream output = mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(output);
    servlet.doGet(request, response);
    verify(response).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBufferException_OcPF8() throws javax.servlet.ServletException, java.io.IOException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    when(request.getParameter("contentLength")).thenReturn("100");
    HttpServletResponse response = mock(HttpServletResponse.class);
    ServletOutputStream output = mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenThrow(new IOException());
    servlet.doGet(request, response);
    verify(response).getOutputStream();
  }
}