/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummarySingleton_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummaryDataBean_zYxt0() {
    MarketSummarySingleton marketSummarySingleton = new MarketSummarySingleton();
    marketSummarySingleton.getMarketSummaryDataBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryDataBean_PsfG0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    MarketSummarySingleton marketSummarySingleton = new MarketSummarySingleton();
    marketSummarySingleton.setMarketSummaryDataBean(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryDataBeanWithNull_FnZB1() {
    MarketSummarySingleton marketSummarySingleton = new MarketSummarySingleton();
    marketSummarySingleton.setMarketSummaryDataBean(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryDataBeanWithRandomInstance_WkZb2() {
    MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
    MarketSummarySingleton marketSummarySingleton = new MarketSummarySingleton();
    marketSummarySingleton.setMarketSummaryDataBean(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryDataBeanWithAllParameters_ibGM3() {
    BigDecimal TSIA = new BigDecimal(0);
    BigDecimal openTSIA = new BigDecimal(0);
    double volume = 0;
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(TSIA, openTSIA, volume, topGainers, topLosers);
    MarketSummarySingleton marketSummarySingleton = new MarketSummarySingleton();
    marketSummarySingleton.setMarketSummaryDataBean(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryDataBeanWithAllParametersRandom_CNmR4() {
    BigDecimal TSIA = new BigDecimal(Math.random());
    BigDecimal openTSIA = new BigDecimal(Math.random());
    double volume = Math.random();
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(TSIA, openTSIA, volume, topGainers, topLosers);
    MarketSummarySingleton marketSummarySingleton = new MarketSummarySingleton();
    marketSummarySingleton.setMarketSummaryDataBean(marketSummaryDataBean);
  }
}