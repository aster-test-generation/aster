/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServletPush_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_KoHl0() throws javax.servlet.ServletException {
    PingServletPush servlet = new PingServletPush();
    servlet.init(null);
    assertNotNull(servlet);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithSuper_gbjX1() throws javax.servlet.ServletException {
    PingServletPush servlet = new PingServletPush();
    servlet.init(null);
    assertNotNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet1_bsXw0() throws javax.servlet.ServletException, java.io.IOException {
    PingServletPush servlet = new PingServletPush();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PushBuilder pushBuilder = mock(PushBuilder.class);
    when(request.newPushBuilder()).thenReturn(pushBuilder);
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet2_qWLm1() throws javax.servlet.ServletException, java.io.IOException {
    PingServletPush servlet = new PingServletPush();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet3_TyRA2() throws javax.servlet.ServletException, java.io.IOException {
    PingServletPush servlet = new PingServletPush();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PushBuilder pushBuilder = mock(PushBuilder.class);
    when(request.newPushBuilder()).thenReturn(pushBuilder);
    when(pushBuilder.path("images/graph.gif")).thenReturn(pushBuilder);
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet6_jcVE5() throws javax.servlet.ServletException, java.io.IOException {
    PingServletPush servlet = new PingServletPush();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PushBuilder pushBuilder = mock(PushBuilder.class);
    when(request.newPushBuilder()).thenThrow(new IOException());
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet7_RnNE6() throws javax.servlet.ServletException, java.io.IOException {
    PingServletPush servlet = new PingServletPush();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PushBuilder pushBuilder = mock(PushBuilder.class);
    when(request.newPushBuilder()).thenReturn(pushBuilder);
    when(pushBuilder.path("images/graph.gif")).thenThrow(new IOException());
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet4_apyU3_Pclm0() throws javax.servlet.ServletException, java.io.IOException {
    PingServletPush servlet = new PingServletPush();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PushBuilder pushBuilder = mock(PushBuilder.class);
    when(request.newPushBuilder()).thenReturn(pushBuilder);
    when(pushBuilder.path("images/graph.gif")).thenReturn(pushBuilder);
    doThrow(new IOException()).when(pushBuilder).push();
    servlet.doGet(request, response);
  }
}