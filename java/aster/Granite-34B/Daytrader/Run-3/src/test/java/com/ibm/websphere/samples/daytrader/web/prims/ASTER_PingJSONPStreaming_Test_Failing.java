/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPStreaming_Test_Failing {
  private static String initTime;
  private static int hitCount;
  PingJSONPStreaming pingjsonpstreaming;
  ServletConfig servletconfig;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;
  HttpServlet httpservlet;
  HttpServletRequest httpservletrequest;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingjsonpstreaming = new PingJSONPStreaming();
    // Mock the behavior of the super.init() method
    doCallRealMethod().when(pingjsonpstreaming).init(any());
    // Call the init method to be tested
    pingjsonpstreaming.init(servletconfig);
    // Add meaningful assertions here
    assertEquals(new java.util.Date().toString(), initTime);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservlet = mock(HttpServlet.class);
    pingjsonpstreaming = new PingJSONPStreaming();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingjsonpstreaming.doPost(null, httpservletresponse);
    verify(httpservletresponse, times(1)).getOutputStream();
    verify(servletoutputstream, times(1)).print("Pong");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservlet = mock(HttpServlet.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    pingjsonpstreaming = new PingJSONPStreaming();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(httpservletrequest.getParameter("callback")).thenReturn("callback");
    pingjsonpstreaming.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse, times(1)).setContentType("text/javascript");
    verify(httpservletresponse, times(1)).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_VHkx0() {
    PingJSONPStreaming obj = new PingJSONPStreaming();
    String result = obj.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_oKMD2() {
    PingJSONPStreaming obj = new PingJSONPStreaming();
    obj.getServletInfo();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test3_ANvS3() {
    PingJSONPStreaming obj = new PingJSONPStreaming();
    String result = obj.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
    obj.getServletInfo();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_fZLk0() throws ServletException, IOException {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    ServletOutputStream servletOutputStream = Mockito.mock(ServletOutputStream.class);
    Mockito.when(response.getOutputStream()).thenReturn(servletOutputStream);
    pingJSONPStreaming.doGet(request, response);
    Mockito.verify(response, Mockito.times(1)).setContentType("text/html");
    Mockito.verify(response, Mockito.times(1)).getOutputStream();
    Mockito.verify(servletOutputStream, Mockito.times(1)).println(Mockito.anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithException_dpjg1() throws ServletException, IOException {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    Mockito.doThrow(new IOException()).when(response).getOutputStream();
    try {
      pingJSONPStreaming.doGet(request, response);
    } catch (IOException e) {
      assertTrue(true);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_1() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingjsonpstreaming = new PingJSONPStreaming();
    // Mock the behavior of the super.init() method
    doCallRealMethod().when(pingjsonpstreaming).init(any());
    // Call the init method to be tested
    pingjsonpstreaming.init(servletconfig);
    // Add meaningful assertions here
    assertEquals(new java.util.Date().toString(), initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_2() throws Exception {
    servletconfig = mock(ServletConfig.class);
    pingjsonpstreaming = new PingJSONPStreaming();
    // Mock the behavior of the super.init() method
    doCallRealMethod().when(pingjsonpstreaming).init(any());
    // Call the init method to be tested
    pingjsonpstreaming.init(servletconfig);
    // Add meaningful assertions here
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_oKMD2_fid1() {
    PingJSONPStreaming obj = new PingJSONPStreaming();
    obj.getServletInfo();
    assertEquals("PingJSONPStreaming", obj.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withNullRequest_ZDfF2_hTxJ0() throws ServletException, IOException {
    PingJSONPStreaming testee = new PingJSONPStreaming();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    testee.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withNullRequestAndResponse_swBV4_EOAR0() throws ServletException, IOException {
    PingJSONPStreaming testee = new PingJSONPStreaming();
    HttpServletRequest req = null;
    HttpServletResponse res = null;
    testee.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_gwcB0_EIWJ0() throws ServletException, IOException {
    PingJSONPStreaming testee = new PingJSONPStreaming();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    doNothing().when(res).setContentType("text/html");
    testee.doPost(req, res);
  }
}