/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletLargeContentLength_Test_Failing {
  PingServletLargeContentLength pingservletlargecontentlength;
  HttpServlet httpservlet;
  HttpServletRequest httpservletrequest;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    // given
    when(httpservletrequest.getContentLengthLong()).thenReturn(100L);
    // when
    pingservletlargecontentlength.doPost(httpservletrequest, null);
    // then
    verify(httpservletrequest, times(1)).getContentLengthLong();
    verifyNoMoreInteractions(httpservletrequest);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_0_MbmF0() throws Exception {
    PingServletLargeContentLength obj = new PingServletLargeContentLength();
    String expected = "Basic dynamic HTML generation through a servlet, with " + "contentLength set by contentLength parameter.";
    assertEquals(expected, obj.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_qtTR0() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getContentLengthLong()).thenReturn(100L);
    servlet.doPost(request, response);
    verify(request, times(1)).getContentLengthLong();
    verifyNoMoreInteractions(request);
    verifyNoMoreInteractions(response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNegativeLength_lmaU1() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getContentLengthLong()).thenReturn(-1L);
    servlet.doPost(request, response);
    verify(request, times(1)).getContentLengthLong();
    verifyNoMoreInteractions(request);
    verifyNoMoreInteractions(response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithZeroLength_CGAI2() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getContentLengthLong()).thenReturn(0L);
    servlet.doPost(request, response);
    verify(request, times(1)).getContentLengthLong();
    verifyNoMoreInteractions(request);
    verifyNoMoreInteractions(response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NhPP0_ACfB0() throws ServletException, IOException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getContentLengthLong()).thenReturn(10L);
    servlet.doPost(request, response);
  }
}