/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
  @Mock
  private EntityManager entityManager;
  @InjectMocks
  private TradeSLSBBean tradeslsbbean;
  @Mock
  private AccountProfileDataBean accountProfileDataBean;
  @Mock
  private AccountDataBean accountDataBean;
  @Mock
  private QuoteDataBean quoteDataBean;
  @Mock
  private HoldingDataBean holdingDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetInSession_DnVh0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_vaIW0_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(100.00));
    assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_vaIW0_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(100.00));
    assertEquals("user1", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_vaIW0_3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(100.00));
    assertEquals(new BigDecimal(100.00), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterWithInvalidPassword_rIBm1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user2", "", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(200.00));
    assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell() throws Exception {
    when(entityManager.find(AccountProfileDataBean.class, anyString())).thenReturn(new AccountProfileDataBean());
    when(entityManager.find(AccountDataBean.class, anyString())).thenReturn(new AccountDataBean());
    when(entityManager.find(HoldingDataBean.class, anyInt())).thenReturn(new HoldingDataBean());
    when(entityManager.find(QuoteDataBean.class, anyString())).thenReturn(new QuoteDataBean());
    OrderDataBean order = tradeslsbbean.sell("userID", 1, 1);
    verify(entityManager).persist(any(OrderDataBean.class));
    verify(entityManager).merge(any(HoldingDataBean.class));
    verify(entityManager).merge(any(AccountDataBean.class));
    assertEquals("orderStatus", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_japn0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder2_ulDC1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 2;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder3_rQff2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 3;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_zdnR0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
    assertEquals(0, orders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_skLM1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_QXKg2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    Assertions.assertEquals(Collections.emptyList(), orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_Ktwy3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalidUser";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_sSHY0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    tradeSLSBBean.logout(userID);
    assertTrue(true); // Add assertions here
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void publishQuotePriceChangeTest2_ZlOd1() throws Exception {
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal oldPrice = new BigDecimal(0);
    BigDecimal changeFactor = new BigDecimal(0);
    double sharesTraded = 0.0;
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_rvRc0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
    // Replace the erroneous assertion and regenerate the fixed test case
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
    // Only generate the fixed test case
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryNull_kimL1() throws Exception {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    when(marketSummaryDataBean.getGainPercent()).thenReturn(null);
    when(marketSummaryDataBean.getOpenTSIA()).thenReturn(null);
    when(marketSummaryDataBean.getSummaryDate()).thenReturn(null);
    when(marketSummaryDataBean.getTopGainers()).thenReturn(null);
    when(marketSummaryDataBean.getTopLosers()).thenReturn(null);
    when(marketSummaryDataBean.getRandomInstance()).thenReturn(null);
    when(marketSummaryDataBean.getTSIA()).thenReturn(null);
    when(marketSummaryDataBean.getVolume()).thenReturn(0.0);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean1 = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean, marketSummaryDataBean1);
    verify(marketSummaryDataBean, times(1)).getGainPercent();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest_DPPS0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> actualValue = tradeSLSBBean.getClosedOrders("uid123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest_NullUserID_DaJS1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> actualValue = tradeSLSBBean.getClosedOrders(null);
    Assertions.assertEquals(null, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest_EmptyUserID_EDXl2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> actualValue = tradeSLSBBean.getClosedOrders("");
    assertEquals(null, actualValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_mtVQ0_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@email.com", "1234567890");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_mtVQ0_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@email.com", "1234567890");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), updatedProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_mtVQ0_3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@email.com", "1234567890");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), updatedProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_mtVQ0_4() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@email.com", "1234567890");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_mtVQ0_5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@email.com", "1234567890");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithNullData_qQvl1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = null;
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(null, updatedProfile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithEmptyData_fxLE2_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(null, updatedProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithEmptyData_fxLE2_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(null, updatedProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithEmptyData_fxLE2_3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(null, updatedProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithEmptyData_fxLE2_4() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(null, updatedProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithEmptyData_fxLE2_5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(null, updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingNull_PoyC1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    when(entityManager.find(eq(HoldingDataBean.class), any(Integer.class))).thenReturn(null);
    assertNull(tradeSLSBBean.getHolding(1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getSymbol(), symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getCompanyName(), companyName);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getPrice(), price);
    Assertions.assertNotNull(result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getLow(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_6() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getHigh(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_8() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getVolume(), 0.0, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getSymbol(), symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getCompanyName(), companyName);
    Assertions.assertEquals(result.getPrice(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getPrice(), price, "The price of the quote should be zero");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_4() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getOpen(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getLow(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_6() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getHigh(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_8() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getVolume(), 0.0, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_oIHQ0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertEquals("uid123", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NullUser_aGCA1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(null);
    Assertions.assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_EmptyUser_JtYV2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("");
    Assertions.assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_InvalidUser_emhT3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("invalidUser");
    Assertions.assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NoUser_lwYi4() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("noUser");
    Assertions.assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NullProfile_lmqU5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertNull(accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NoHoldings_HcuK6() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertTrue(accountDataBean.getHoldings().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NoOrders_SBnw7() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertEquals(0, accountDataBean.getOrders().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NullCreationDate_oIBc8() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertNull(accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NullLastLogin_Snht9() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertNull(accountDataBean.getLastLogin(), "LastLogin is not null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NullOpenBalance_rgJV10() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertEquals(accountDataBean.getOpenBalance(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ZeroLoginCount_aYCH11() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ZeroLogoutCount_uaUC12() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_RBkK0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
    OrderDataBean orderDataBean = future.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync2_UkVe1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(1);
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
    OrderDataBean orderDataBean = future.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync3_cvub2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(2);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync5_ktWz4() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(4);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
    OrderDataBean orderDataBean = future.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync6_YHEb5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(5);
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync7_kyCY6() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(6);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
    OrderDataBean orderDataBean = future.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync8_PlEg7() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(7);
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
    OrderDataBean orderDataBean = future.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync9_nRcd8() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(8);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
    OrderDataBean orderDataBean = future.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync10_NMAJ9() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(9);
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
    OrderDataBean orderDataBean = future.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHolding_Nzvd0_zKNB0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setQuantity(100.0);
    holdingDataBean.setPurchasePrice(new BigDecimal(100.0));
    holdingDataBean.setPurchaseDate(new java.sql.Timestamp(System.currentTimeMillis()));
    holdingDataBean.setQuoteID("ABC123");
    when(entityManager.find(eq(HoldingDataBean.class), any(Integer.class))).thenReturn(holdingDataBean);
    assertEquals(holdingDataBean, tradeSLSBBean.getHolding(1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_emQG0_ztur0_1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal changeFactor = new BigDecimal(quoteDataBean.getChange());
    double sharesTraded = quoteDataBean.getVolume();
    quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    Assertions.assertEquals(quoteDataBean.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_emQG0_ztur0_2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal changeFactor = new BigDecimal(quoteDataBean.getChange());
    double sharesTraded = quoteDataBean.getVolume();
    quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    Assertions.assertEquals(quoteDataBean.getVolume(), quoteDataBean.getVolume() + sharesTraded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryNotNull_iVpU2_GPmo0() throws Exception {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    when(marketSummaryDataBean.getGainPercent()).thenReturn(new BigDecimal(100));
    when(marketSummaryDataBean.getOpenTSIA()).thenReturn(new BigDecimal(100));
    when(marketSummaryDataBean.getSummaryDate()).thenReturn(new java.sql.Date(new java.util.Date().getTime()));
    when(marketSummaryDataBean.getTopGainers()).thenReturn(new ArrayList<QuoteDataBean>());
    when(marketSummaryDataBean.getTopLosers()).thenReturn(new ArrayList<QuoteDataBean>());
    when(marketSummaryDataBean.getRandomInstance()).thenReturn(new MarketSummaryDataBean());
    when(marketSummaryDataBean.getTSIA()).thenReturn(new BigDecimal(100));
    when(marketSummaryDataBean.getVolume()).thenReturn(100.0);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean1 = tradeSLSBBean.getMarketSummary();
    assertNotEquals(marketSummaryDataBean, marketSummaryDataBean1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_RfNd0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesForLineAndBranchCoverage_rkXr1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.getAllQuotes();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_DDap0() throws Exception {
    AccountDataBean account = AccountDataBean.getRandomInstance();
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    try {
      AccountDataBean result = tradeSLSBBean.login(account.getProfileID(), account.getCreationDate().toString());
      assertEquals(account, result);
    } catch (RollbackException e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_vaIW0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(100.00));
    assertNotNull(account);
    assertEquals("user1", account.getProfileID());
    assertEquals(new BigDecimal(100.00), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_japn0_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder2_ulDC1_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 2;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_zdnR0_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullUserID_skLM1_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyUserID_QXKg2_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertTrue(orders.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithInvalidUserID_Ktwy3_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "invalidUser";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    assertTrue(orders.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void publishQuotePriceChangeTest_Psyy0() throws Exception {
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal oldPrice = new BigDecimal(0);
    BigDecimal changeFactor = new BigDecimal(0);
    double sharesTraded = 100.0;
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_erDJ0_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(1);
    boolean twoPhase = true;
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_NullOrder_yZxX1_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = true;
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_InvalidOrder_YFqx2_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(-1);
    boolean twoPhase = true;
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_TwoPhaseFalse_CsBU3_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(1);
    boolean twoPhase = false;
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_NullOrderID_CyKr4_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = false;
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_InvalidOrderID_qdpJ5() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(-1);
    boolean twoPhase = false;
    tradeSLSBBean.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_rvRc0_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
    assertNotNull(marketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryNull_kimL1_fid1() throws Exception {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    when(marketSummaryDataBean.getGainPercent()).thenReturn(null);
    when(marketSummaryDataBean.getOpenTSIA()).thenReturn(null);
    when(marketSummaryDataBean.getSummaryDate()).thenReturn(null);
    when(marketSummaryDataBean.getTopGainers()).thenReturn(null);
    when(marketSummaryDataBean.getTopLosers()).thenReturn(null);
    when(marketSummaryDataBean.getRandomInstance()).thenReturn(null);
    when(marketSummaryDataBean.getTSIA()).thenReturn(null);
    when(marketSummaryDataBean.getVolume()).thenReturn(0.0);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean1 = tradeSLSBBean.getMarketSummary();
    assertEquals(marketSummaryDataBean, marketSummaryDataBean1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest_NullUserID_DaJS1_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> actualValue = tradeSLSBBean.getClosedOrders(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest_EmptyUserID_EDXl2_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<OrderDataBean> actualValue = tradeSLSBBean.getClosedOrders("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_mtVQ0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@email.com", "1234567890");
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    assertEquals(profileData.getPassword(), updatedProfile.getPassword());
    assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
    assertEquals(profileData.getEmail(), updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileWithEmptyData_fxLE2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
    assertEquals(null, updatedProfile.getAddress());
    assertEquals(null, updatedProfile.getPassword());
    assertEquals(null, updatedProfile.getFullName());
    assertEquals(null, updatedProfile.getCreditCard());
    assertEquals(null, updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getSymbol(), symbol);
    Assertions.assertEquals(result.getCompanyName(), companyName);
    Assertions.assertEquals(result.getPrice(), price);
    Assertions.assertEquals(result.getOpen(), price);
    Assertions.assertEquals(result.getLow(), price);
    Assertions.assertEquals(result.getHigh(), price);
    Assertions.assertEquals(result.getChange(), 0.0, 0.0);
    Assertions.assertEquals(result.getVolume(), 0.0, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getSymbol(), symbol);
    Assertions.assertEquals(result.getCompanyName(), companyName);
    Assertions.assertEquals(result.getPrice(), price);
    Assertions.assertEquals(result.getOpen(), price);
    Assertions.assertEquals(result.getLow(), price);
    Assertions.assertEquals(result.getHigh(), price);
    Assertions.assertEquals(result.getChange(), 0.0, 0.0);
    Assertions.assertEquals(result.getVolume(), 0.0, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NoOrders_SBnw7_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertTrue(accountDataBean.getOrders().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NullLastLogin_Snht9_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_NullOpenBalance_rgJV10_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertNull(accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ZeroLogoutCount_uaUC12_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid123");
    Assertions.assertEquals(0, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_RBkK0_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(0);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync2_UkVe1_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(1);
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync4_pIah3() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(3);
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync5_ktWz4_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(4);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync7_kyCY6_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(6);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync8_PlEg7_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(7);
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync9_nRcd8_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(8);
    boolean twoPhase = false;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync10_NMAJ9_fid1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(9);
    boolean twoPhase = true;
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_3_fid2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getPrice(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_4() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getOpen(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_amNI0_7() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getChange(), 0.0, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_2_fid2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getCompanyName(), companyName);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_3_fid2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getPrice(), price);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteZeroPrice_FBZV4_7() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = BigDecimal.ZERO;
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    Assertions.assertEquals(result.getChange(), 0.0, 0.0);
  }
}