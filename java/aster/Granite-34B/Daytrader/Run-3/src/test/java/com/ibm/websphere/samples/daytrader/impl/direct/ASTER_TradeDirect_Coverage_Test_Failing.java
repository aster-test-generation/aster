/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeDirect_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void investmentReturn_UnsupportedOperationException_rsXG0() {
    TradeDirect tradeDirect = new TradeDirect();
    double actual = tradeDirect.investmentReturn(0, 0);
    assertEquals(Double.NaN, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhase_PFzd0() {
    TradeDirect trade = new TradeDirect();
    QuoteDataBean quoteData = trade.pingTwoPhase("ORCL");
    assertEquals(null, quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_MlTP0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.orderCompleted("123", 12345);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_tfVI0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(1, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder2_oFes1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(2, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder4_YjFn3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(4, true);
    // Add the necessary code to handle the null pointer exception and regenerate the fixed test case
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder5_nAVc4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(5, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder6_aupD5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(6, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder7_DEmE6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(7, true);
    // Replace the erroneous assertion
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder8_EUVS7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(8, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder9_RSIp8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(9, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder10_asrO9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(10, true);
    // Add assertions here to validate the behavior of queueOrder method
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder11_TqNj10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(11, true);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder12_cunf11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(12, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder13_SgaC12() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(13, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder14_Kmey13() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(14, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_UEMv0() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(1);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_dvEW1() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(2);
    Assertions.assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test3_FUTa2() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(3);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test4_KCVE3() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(4);
    Assertions.assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test5_UHOf4() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(5);
    Assertions.assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test6_yoor5() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(6);
    Assertions.assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test7_bZxM6() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(7);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test8_wwMy7() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(8);
    Assertions.assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test9_HynZ8() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(9);
    Assertions.assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test10_WSxp9() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(10);
    Assertions.assertNotNull(holdingData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test11_UAtT10() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(11);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder1_vnRV0() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 1;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder2_zIis1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 2;
    boolean twoPhase = false;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder3_uVdp2() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 3;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
    // Replace the erroneous assertion and regenerate the fixed test case
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
    // Only generate the fixed test case
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder5_mdiV4() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 5;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
    // Add assertions here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder6_tteL5() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 6;
    boolean twoPhase = false;
    trade.cancelOrder(orderID, twoPhase);
    // Add assertions to verify the expected behavior
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder7_BkKd6() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 7;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
    // Replace the erroneous assertion
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder8_UwaR7() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 8;
    boolean twoPhase = false;
    trade.cancelOrder(orderID, twoPhase);
    // Add assertions here to check for expected behavior
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder10_OXwQ9() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 10;
    boolean twoPhase = false;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder11_xfYR10() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 11;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummary_0_Aqvv0() throws Exception {
    TradeDirect trade = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(0);
    MarketSummaryDataBean marketSummary = trade.getMarketSummary();
    assertEquals(null, marketSummary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummary_3_BCkm3() throws Exception {
    TradeDirect trade = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(10);
    long time = System.currentTimeMillis();
    Thread.sleep(1000);
    assertEquals(null, trade.getMarketSummary());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote1_CycH0() throws java.lang.Exception {
    QuoteDataBean quoteData = null;
    Connection conn = null;
    TradeDirect trade = new TradeDirect();
    try {
      quoteData = trade.createQuote("symbol", "companyName", new BigDecimal("123.45"));
    } catch (Exception e) {
      e.printStackTrace();
    }
    assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote7_pzNj6() throws java.lang.Exception {
    QuoteDataBean quoteData = null;
    Connection conn = null;
    TradeDirect trade = new TradeDirect();
    try {
      quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(""));
    } catch (Exception e) {
      e.printStackTrace();
    }
    assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote8_vOFa7() throws java.lang.Exception {
    QuoteDataBean quoteData = null;
    Connection conn = null;
    TradeDirect trade = new TradeDirect();
    try {
      quoteData = trade.createQuote("symbol", "companyName", new BigDecimal("123"));
    } catch (Exception e) {
      e.printStackTrace();
    }
    assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_dALT0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.logout("user123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithValidUser_XvcO4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.logout("validUser");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithMultipleUsers_UdtP6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.logout("user123");
    tradeDirect.logout("user456");
    tradeDirect.logout("user789");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithMultipleUsersAndExceptions_JBHl7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.logout("user123");
    try {
      tradeDirect.logout("user456");
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
    tradeDirect.logout("user789");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithMultipleUsersAndExceptionsInMiddle_TTSU8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.logout("user123");
    try {
      tradeDirect.logout("user456");
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
    tradeDirect.logout("user789");
    try {
      tradeDirect.logout("user000");
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithMultipleUsersAndExceptionsAtEnd_YRSQ9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.logout("user123");
    tradeDirect.logout("user456");
    try {
      tradeDirect.logout("user789");
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithMultipleUsersAndExceptionsAtStart_iRVH10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.logout("user123");
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
    tradeDirect.logout("user456");
    tradeDirect.logout("user789");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_UxzB0() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    String orderType = " buy";
    double quantity = 100.10;
    OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
    assertEquals(null, orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder2_Bbxh1() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    String orderType = " sell";
    double quantity = 100.10;
    OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder3_Mfnq2() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    String orderType = " sell";
    double quantity = 100.10;
    OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
    assertEquals(null, orderData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_HOaA0() throws Exception {
    TradeDirect trade = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = trade.getHoldings(null);
    Assertions.assertTrue(holdingDataBeans.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_ehMn1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = trade.getHoldings("12345");
    Assertions.assertTrue(holdingDataBeans.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test3_KYkh2() throws Exception {
    TradeDirect trade = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = trade.getHoldings("12345");
    Assertions.assertEquals(0, holdingDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test6_gBpv5() throws Exception {
    TradeDirect trade = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = trade.getHoldings("12345");
    Assertions.assertEquals(null, holdingDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test15_qpHg14() throws Exception {
    TradeDirect trade = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = trade.getHoldings("12345");
    Assertions.assertEquals(Collections.emptyList(), holdingDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin1_naLI0() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid1", "uid1");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin2_JWxJ1() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid2", "uid2");
    assertNotNull(accountData);
    accountData = new AccountDataBean();
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin3_Ztyq2() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid3", "uid3");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin4_jlmm3() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid4", "uid4");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin5_lRrg4() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid5", "uid5");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin6_VAhj5() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid6", "uid6");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin7_cHnY6() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid7", "uid7");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin8_kmYx7() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid8", "uid8");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin10_uLkg9() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid10", "uid10");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin11_xRHq10() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid11", "uid11");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin12_qSPD11() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid12", "uid12");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin13_ojKa12() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid13", "uid13");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin14_HEHX13() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid14", "uid14");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin15_xOlu14() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid15", "uid15");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin16_zYQB15() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid16", "uid16");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin17_nzwg16() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid17", "uid17");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin18_GhOv17() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid18", "uid18");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin19_BqFM18() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid19", "uid19");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin20_oBSW19() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid20", "uid20");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_ihqB1() throws java.lang.Exception {
    TradeDirect trade = new TradeDirect();
    AccountProfileDataBean accountProfileData = null;
    try {
      accountProfileData = trade.getAccountProfileData("12345");
    } catch (Exception e) {
      e.printStackTrace();
    }
    Assertions.assertNotNull(accountProfileData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test3_bUUx2() throws java.lang.Exception {
    TradeDirect trade = new TradeDirect();
    AccountProfileDataBean accountProfileData = null;
    try {
      accountProfileData = trade.getAccountProfileData("12345");
    } catch (Exception e) {
      e.printStackTrace();
    }
    Assertions.assertNotNull(accountProfileData);
    Assertions.assertEquals("12345", accountProfileData.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test4_piSC3() throws java.lang.Exception {
    TradeDirect trade = new TradeDirect();
    AccountProfileDataBean accountProfileData = null;
    try {
      accountProfileData = trade.getAccountProfileData("12345");
    } catch (Exception e) {
      e.printStackTrace();
    }
    Assertions.assertNotNull(accountProfileData);
    Assertions.assertEquals("12345", accountProfileData.getUserID());
    Assertions.assertEquals("12345", accountProfileData.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test5_bAJI4() throws java.lang.Exception {
    TradeDirect trade = new TradeDirect();
    AccountProfileDataBean accountProfileData = null;
    try {
      accountProfileData = trade.getAccountProfileData("12345");
    } catch (Exception e) {
      e.printStackTrace();
    }
    Assertions.assertNotNull(accountProfileData);
    Assertions.assertEquals("12345", accountProfileData.getUserID());
    Assertions.assertEquals("12345", accountProfileData.getCreditCard());
    Assertions.assertEquals("12345", accountProfileData.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test6_xpxi5() throws java.lang.Exception {
    TradeDirect trade = new TradeDirect();
    AccountProfileDataBean accountProfileData = null;
    try {
      accountProfileData = trade.getAccountProfileData("12345");
    } catch (Exception e) {
      e.printStackTrace();
    }
    Assertions.assertNotNull(accountProfileData);
    Assertions.assertEquals("12345", accountProfileData.getUserID());
    Assertions.assertEquals("12345", accountProfileData.getCreditCard());
    Assertions.assertEquals("12345", accountProfileData.getEmail());
    Assertions.assertEquals("12345", accountProfileData.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test7_qWjg6() throws java.lang.Exception {
    TradeDirect trade = new TradeDirect();
    AccountProfileDataBean accountProfileData = null;
    try {
      accountProfileData = trade.getAccountProfileData("12345");
    } catch (Exception e) {
      e.printStackTrace();
    }
    Assertions.assertNotNull(accountProfileData);
    Assertions.assertEquals("12345", accountProfileData.getUserID());
    Assertions.assertEquals("12345", accountProfileData.getCreditCard());
    Assertions.assertEquals("12345", accountProfileData.getEmail());
    Assertions.assertEquals("12345", accountProfileData.getFullName());
    Assertions.assertEquals("12345", accountProfileData.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_lrqo0() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid1";
    String symbol = "s1";
    double quantity = 1.0;
    int orderProcessingMode = 1;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(1, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_rESS1() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid2";
    String symbol = "s2";
    double quantity = 2.0;
    int orderProcessingMode = 2;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(2, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy3_GSnh2() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid3";
    String symbol = "s3";
    double quantity = 3.0;
    int orderProcessingMode = 3;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(3, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy4_GnXV3() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid4";
    String symbol = "s4";
    double quantity = 4.0;
    int orderProcessingMode = 4;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(4, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy5_SbAz4() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid5";
    String symbol = "s5";
    double quantity = 5.0;
    int orderProcessingMode = 5;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(5, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy6_EYCp5() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid6";
    String symbol = "s6";
    double quantity = 6.0;
    int orderProcessingMode = 6;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(6, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy7_Qizk6() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid7";
    String symbol = "s7";
    double quantity = 7.0;
    int orderProcessingMode = 7;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(7, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy8_jPwi7() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid8";
    String symbol = "s8";
    double quantity = 8.0;
    int orderProcessingMode = 8;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(8, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy9_Ymfk8() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid9";
    String symbol = "s9";
    double quantity = 9.0;
    int orderProcessingMode = 9;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(9, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy10_LRhv9() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "uid10";
    String symbol = "s10";
    double quantity = 10.0;
    int orderProcessingMode = 10;
    OrderDataBean orderData = trade.buy(userID, symbol, quantity, orderProcessingMode);
    Assertions.assertEquals(10, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder3_NjYx2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(3, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder4_YjFn3_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(4, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder7_DEmE6_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(7, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder10_asrO9_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(10, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder11_TqNj10_fid1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    tradeDirect.queueOrder(11, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_dvEW1_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(2);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test4_KCVE3_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(4);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test5_UHOf4_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(5);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test6_yoor5_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(6);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test8_wwMy7_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(8);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test9_HynZ8_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(9);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test10_WSxp9_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    HoldingDataBean holdingData = trade.getHolding(10);
    Assertions.assertTrue(holdingData != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder3_uVdp2_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 3;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder4_zEOY3() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 4;
    boolean twoPhase = false;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder5_mdiV4_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 5;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder6_tteL5_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 6;
    boolean twoPhase = false;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder7_BkKd6_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 7;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder8_UwaR7_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 8;
    boolean twoPhase = false;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder9_OdAp8() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 9;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder11_xfYR10_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 11;
    boolean twoPhase = true;
    trade.cancelOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummary_0_Aqvv0_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(0);
    assertEquals(null, trade.getMarketSummary());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummary_1_IPwr1_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(-1);
    assertEquals(null, trade.getMarketSummary());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMarketSummary_2_DXff2_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(10);
    long time = System.currentTimeMillis();
    assertEquals(null, trade.getMarketSummary());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote6_Mxbx5_fid1() throws java.lang.Exception {
    QuoteDataBean quoteData = null;
    Connection conn = null;
    TradeDirect trade = new TradeDirect();
    try {
      quoteData = trade.createQuote("symbol", "companyName", null);
    } catch (Exception e) {
      e.printStackTrace();
    }
    assertNotNull(quoteData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder1_UxzB0_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    String orderType = " buy";
    double quantity = 100.10;
    OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin2_JWxJ1_fid1() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid2", "uid2");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin9_kamt8() throws Exception {
    TradeDirect trade = new TradeDirect();
    AccountDataBean accountData = trade.login("uid9", "uid9");
    assertNotNull(accountData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithMultipleUsersAndExceptionsAtStartAndEnd_MIgZ11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    try {
      tradeDirect.logout("user123");
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
    tradeDirect.logout("user456");
    tradeDirect.logout("user789");
    try {
      tradeDirect.logout("user000");
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
  }
}