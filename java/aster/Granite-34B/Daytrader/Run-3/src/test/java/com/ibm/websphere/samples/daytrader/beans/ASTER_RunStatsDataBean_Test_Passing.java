/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getBuyOrderCountTest_MXeK0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int actual = runStatsDataBean.getBuyOrderCount();
    int expected = 0; // Initialize with the expected value
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setHoldingCountTest_tbxn0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCount_bjQc0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(10);
    assertEquals(10, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountZero_PXnk1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(0);
    assertEquals(0, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCountNegative_oKGg2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(-10);
    assertEquals(-10, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelledOrderCount_MOks0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(10);
    int actual = runStatsDataBean.getCancelledOrderCount();
    int expected = 10;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCount_vJtr0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountZero_hHXe1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCountNegative_yRdh2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(-100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNewUserCountTest_eKOE0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int actual = runStatsDataBean.getNewUserCount();
    int expected = runStatsDataBean.getNewUserCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNewUserCountCoverageTest_UBZs1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(100);
    int actual = runStatsDataBean.getNewUserCount();
    assertEquals(100, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNewUserCountBoundaryTest_eMrr2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(Integer.MAX_VALUE);
    int actual = runStatsDataBean.getNewUserCount();
    assertEquals(Integer.MAX_VALUE, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_HOHN0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCount_nsSF0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(10);
    assertEquals(10, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCount_VDEu0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int actual = runStatsDataBean.getOrderCount();
    int expected = 0; // Initialize the expected value based on the method's return type and logic
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountWithPositiveValue_XPEA1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(10);
    int actual = runStatsDataBean.getOrderCount();
    int expected = 10;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountWithNegativeValue_kvPc2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(-10);
    int actual = runStatsDataBean.getOrderCount();
    int expected = -10; // Initialize the expected value based on the method's return type and logic
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCountAfterSettingValue_fGvB3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(5);
    int actual = runStatsDataBean.getOrderCount();
    int expected = 5;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getHoldingCountTest_OrhL0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(10);
    int actual = runStatsDataBean.getHoldingCount();
    int expected = 10;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCount_dkKg0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(100);
    assertEquals(100, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountZero_RKbp1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(0);
    assertEquals(0, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCountNegative_yCSG2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(-100);
    assertEquals(-100, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCount_gNxK0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(100);
    assertEquals(100, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCount_BoundaryValues_gIVh1_2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(Integer.MIN_VALUE);
    runStatsDataBean.setSellOrderCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCount_Null_ZgRI2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(0);
    assertEquals(0, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_GPMC0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLoginCount(100);
    assertEquals(100, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_zero_VyKk1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLoginCount(0);
    assertEquals(0, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_negative_pHWI2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLoginCount(-100);
    assertEquals(-100, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getTradeStockCount_kqfG0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int actual = runStatsDataBean.getTradeStockCount();
    int expected = 0; // Default value for tradeStockCount
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getTradeStockCount_afterAddingStocks_HNIa1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(100);
    int actual = runStatsDataBean.getTradeStockCount();
    int expected = 100;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getTradeStockCount_afterSubtractingStocks_OUIt2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeStockCount(100);
    runStatsDataBean.setTradeStockCount(50);
    int actual = runStatsDataBean.getTradeStockCount();
    int expected = 50;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_AtmH0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(100);
    assertEquals(100, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_zeroValue_mWTx1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(0);
    assertEquals(0, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_negativeValue_gYDd2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(-100);
    assertEquals(-100, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_maxValue_cOkw3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_minValue_LLAG4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCount_FCEs0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(100);
    assertEquals(100, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCount_maxValue_XlGo1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCount_minValue_GTSx2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCount_zero_cVCE3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(0);
    assertEquals(0, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCount_negativeValue_vbKb4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(-100);
    assertEquals(-100, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSumLogoutCount_wfap0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(10);
    int expected = 10;
    int actual = runStatsDataBean.getSumLogoutCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSumLogoutCountZero_SgxQ2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(0);
    int expected = 0;
    int actual = runStatsDataBean.getSumLogoutCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSumLogoutCountNegative_QKgW3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(-10);
    int expected = -10;
    int actual = runStatsDataBean.getSumLogoutCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_nSOK0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: " + runStatsDataBean.getTradeUserCount() + "\n\t\t        newUserCount: " + runStatsDataBean.getNewUserCount() + "\n\t\t       sumLoginCount: " + runStatsDataBean.getSumLoginCount() + "\n\t\t      sumLogoutCount: " + runStatsDataBean.getSumLogoutCount() + "\n\t\t        holdingCount: " + runStatsDataBean.getHoldingCount() + "\n\t\t          orderCount: " + runStatsDataBean.getOrderCount() + "\n\t\t       buyOrderCount: " + runStatsDataBean.getBuyOrderCount() + "\n\t\t      sellOrderCount: " + runStatsDataBean.getSellOrderCount() + "\n\t\t cancelledOrderCount: " + runStatsDataBean.getCancelledOrderCount() + "\n\t\t      openOrderCount: " + runStatsDataBean.getOpenOrderCount() + "\n\t\t   deletedOrderCount: " + runStatsDataBean.getDeletedOrderCount();
    assertEquals(expected, runStatsDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringTradeUserCount_VwuI1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(100);
    String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: " + runStatsDataBean.getTradeUserCount() + "\n\t\t        newUserCount: " + runStatsDataBean.getNewUserCount() + "\n\t\t       sumLoginCount: " + runStatsDataBean.getSumLoginCount() + "\n\t\t      sumLogoutCount: " + runStatsDataBean.getSumLogoutCount() + "\n\t\t        holdingCount: " + runStatsDataBean.getHoldingCount() + "\n\t\t          orderCount: " + runStatsDataBean.getOrderCount() + "\n\t\t       buyOrderCount: " + runStatsDataBean.getBuyOrderCount() + "\n\t\t      sellOrderCount: " + runStatsDataBean.getSellOrderCount() + "\n\t\t cancelledOrderCount: " + runStatsDataBean.getCancelledOrderCount() + "\n\t\t      openOrderCount: " + runStatsDataBean.getOpenOrderCount() + "\n\t\t   deletedOrderCount: " + runStatsDataBean.getDeletedOrderCount();
    assertEquals(expected, runStatsDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getTradeUserCount_ohZQ0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(100);
    int actual = runStatsDataBean.getTradeUserCount();
    int expected = 100;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getTradeUserCount_zero_KDMa1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(0);
    int actual = runStatsDataBean.getTradeUserCount();
    int expected = 0;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getTradeUserCount_negative_YImI2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(-1);
    int actual = runStatsDataBean.getTradeUserCount();
    int expected = -1;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getTradeUserCount_max_vQxW3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(Integer.MAX_VALUE);
    int actual = runStatsDataBean.getTradeUserCount();
    int expected = Integer.MAX_VALUE;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getTradeUserCount_min_VtjU4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(Integer.MIN_VALUE);
    int actual = runStatsDataBean.getTradeUserCount();
    int expected = Integer.MIN_VALUE;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_DCFD0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_MfOz1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_wzEf2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(Integer.MAX_VALUE);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_OZIv3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(Integer.MIN_VALUE);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_POkD4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_oKRR5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(-1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_NYXJ6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_ZZQM7() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(-10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetTradeUserCount_ahCu8() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setTradeUserCount(50);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDeletedOrderCountTest_zqxz0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int actual = runStatsDataBean.getDeletedOrderCount();
    int expected = 0;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDeletedOrderCountTest_returnsNonZeroValue_Yfgs1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(5);
    int actual = runStatsDataBean.getDeletedOrderCount();
    int expected = 5;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDeletedOrderCountTest_returnsNegativeValue_lJNL2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(-5);
    int actual = runStatsDataBean.getDeletedOrderCount();
    int expected = -5;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDeletedOrderCountTest_returnsZero_ebrK3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(0);
    int actual = runStatsDataBean.getDeletedOrderCount();
    int expected = 0;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDeletedOrderCountTest_returnsMaxValue_ylHH4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(Integer.MAX_VALUE);
    int actual = runStatsDataBean.getDeletedOrderCount();
    int expected = Integer.MAX_VALUE;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDeletedOrderCountTest_returnsMinValue_DDOJ5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(Integer.MIN_VALUE);
    int actual = runStatsDataBean.getDeletedOrderCount();
    int expected = Integer.MIN_VALUE;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDeletedOrderCountTest_returnsRandomValue_FplC6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(12345);
    int actual = runStatsDataBean.getDeletedOrderCount();
    int expected = 12345;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDeletedOrderCountTest_returnsFirstPrimeNumber_gMnv7() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(2);
    int actual = runStatsDataBean.getDeletedOrderCount();
    int expected = 2;
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getSumLoginCountTest_sxGQ0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int actual = runStatsDataBean.getSumLoginCount();
    int expected = 0;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCount_HEMV0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int actualResult = runStatsDataBean.getSellOrderCount();
    int expectedResult = 0; // Initialize the expected result with a default value
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountWithPositiveValue_qanD1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(10); // Set a positive value for sellOrderCount
    int actualResult = runStatsDataBean.getSellOrderCount();
    int expectedResult = 10;
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountWithNegativeValue_vQNt2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(-5); // Set a negative value for sellOrderCount
    int actualResult = runStatsDataBean.getSellOrderCount();
    int expectedResult = -5; // Expected result should be-5 for negative values
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountAfterSettingValue_ODlw3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(20); // Set a positive value for sellOrderCount
    int actualResult = runStatsDataBean.getSellOrderCount();
    int expectedResult = 20;
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountAfterSettingZero_hRfQ4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(0); // Set a zero value for sellOrderCount
    int actualResult = runStatsDataBean.getSellOrderCount();
    int expectedResult = 0;
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountAfterSettingNegativeValue_BFCQ5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(-10); // Set a negative value for sellOrderCount
    int actualResult = runStatsDataBean.getSellOrderCount();
    int expectedResult = -10; // Expected result should be-10 for negative values
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountAfterSettingMaxIntValue_yYeF6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(Integer.MAX_VALUE); // Set the maximum integer value for sellOrderCount
    int actualResult = runStatsDataBean.getSellOrderCount();
    int expectedResult = Integer.MAX_VALUE;
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCountAfterSettingMinIntValue_JUZd7() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(Integer.MIN_VALUE); // Set the minimum integer value for sellOrderCount
    int actualResult = runStatsDataBean.getSellOrderCount();
    int expectedResult = -2147483648; // Expected result should be-2147483648 for negative values
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_nullValue_yqIg5_rVzE0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(0);
    assertEquals(0, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCount_BoundaryValues_gIVh1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, runStatsDataBean.getSellOrderCount());
    runStatsDataBean.setSellOrderCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, runStatsDataBean.getSellOrderCount());
  }
}