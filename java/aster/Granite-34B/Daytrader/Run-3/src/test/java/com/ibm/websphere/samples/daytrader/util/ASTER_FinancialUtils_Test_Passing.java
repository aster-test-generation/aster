/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_SSmF0() {
    String symbol = "AAPL";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLinkWithEmptySymbol_WLzt1() {
    String symbol = "";
    String expected = "<A href=\"app?action=quotes&symbols=" + symbol + "\">" + symbol + "</A>";
    String actual = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_BelowZero_uEYw0() {
    String result = FinancialUtils.printChangeHTML(-10.0);
    assertEquals("<FONT color=\"#ff0000\">-10.0</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_AboveZero_ZcmK1() {
    String result = FinancialUtils.printChangeHTML(10.0);
    assertEquals("<FONT color=\"#009900\">10.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeHoldingsTotal_NullHoldingDataBeans_MMXH0_ARyg0() {
    Collection<HoldingDataBean> holdingDataBeans = null;
    BigDecimal holdingsTotal = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
    assertEquals(holdingsTotal, new BigDecimal(0.0).setScale(FinancialUtils.SCALE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercent_iCrF0_fid1() {
    BigDecimal currentBalance = new BigDecimal("100.00");
    BigDecimal openBalance = new BigDecimal("50.00");
    BigDecimal expectedGainPercent = new BigDecimal("100.00");
    BigDecimal actualGainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTMLWithPositiveGain_dKTV0_fid1() {
    BigDecimal gain = new BigDecimal(100.0);
    String expected = "<FONT color=\"#009900\">100.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    assertEquals(expected, FinancialUtils.printGainHTML(gain));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTMLWithNegativeGain_GerO1_fid1() {
    BigDecimal gain = new BigDecimal(-50.0);
    String expected = "<FONT color=\"#ff0000\">-50.00</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
    assertEquals(expected, FinancialUtils.printGainHTML(gain));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercentZeroOpenBalance_hrAW1() {
    BigDecimal currentBalance = new BigDecimal("100.00");
    BigDecimal openBalance = new BigDecimal("0.00");
    BigDecimal expectedGainPercent = new BigDecimal("0.00");
    BigDecimal actualGainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(expectedGainPercent, actualGainPercent);
  }
}