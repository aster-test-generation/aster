/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
  @Mock
  private EntityManager entityManager;
  @InjectMocks
  private TradeSLSBBean tradeslsbbean;
  @Mock
  private AccountProfileDataBean accountProfileDataBean;
  @Mock
  private AccountDataBean accountDataBean;
  @Mock
  private QuoteDataBean quoteDataBean;
  @Mock
  private HoldingDataBean holdingDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_GRsq0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = 2000.0;
    double expected = 1.0;
    double actual = tradeSLSBBean.investmentReturn(investment, netValue);
    assertEquals(expected, actual, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_erDJ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(1);
    boolean twoPhase = true;
    try {
      tradeSLSBBean.cancelOrder(orderID, twoPhase);
    } catch (NullPointerException e) {
      // Expected exception, handle accordingly
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_NullOrder_yZxX1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = true;
    try {
      tradeSLSBBean.cancelOrder(orderID, twoPhase);
      fail("Exception expected");
    } catch (NullPointerException e) {
      // Expected exception
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_InvalidOrder_YFqx2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(-1);
    boolean twoPhase = true;
    try {
      tradeSLSBBean.cancelOrder(orderID, twoPhase);
      fail("Exception is expected");
    } catch (Exception e) {
      // Expected exception
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_TwoPhaseFalse_CsBU3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = new Integer(1);
    boolean twoPhase = false;
    try {
      tradeSLSBBean.cancelOrder(orderID, twoPhase);
    } catch (NullPointerException e) {
      // Expected exception, handle accordingly
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_NullOrderID_CyKr4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = false;
    try {
      tradeSLSBBean.cancelOrder(orderID, twoPhase);
    } catch (Exception e) {
      // Expected exception
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreditCard_MQMR0() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertEquals(accountProfileDataBean.getCreditCard(), accountProfileDataBean.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmail_dGeQ1() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertEquals(accountProfileDataBean.getEmail(), accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_XbAT2() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertEquals(accountProfileDataBean.getUserID(), accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_Dhcu3() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertEquals(accountProfileDataBean.hashCode(), accountProfileDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddress_VHTp4() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertEquals(accountProfileDataBean.getAddress(), accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPassword_uFra5() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertEquals(accountProfileDataBean.getPassword(), accountProfileDataBean.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullName_fucA6() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertEquals(accountProfileDataBean.getFullName(), accountProfileDataBean.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_Gyvk7() {
    AccountProfileDataBean accountProfileDataBean = AccountProfileDataBean.getRandomInstance();
    assertEquals(accountProfileDataBean.getAccount(), accountProfileDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_OVRb0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    int actual = tradeSLSBBean.getImpl();
    int expected = TradeConfig.EJB3;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteNullPrice_axCA1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = null;
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
      Assertions.fail("Expected an exception to be thrown");
    } catch (Exception e) {
      Assertions.assertTrue(true);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteNullSymbol_NtZT2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = null;
    String companyName = quoteDataBean.getCompanyName();
    BigDecimal price = quoteDataBean.getPrice();
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
      Assertions.fail("Expected an exception to be thrown");
    } catch (Exception e) {
      Assertions.assertTrue(true);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteNullCompanyName_sfwE3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    String companyName = null;
    BigDecimal price = quoteDataBean.getPrice();
    try {
      tradeSLSBBean.createQuote(symbol, companyName, price);
      Assertions.fail("Expected an exception to be thrown");
    } catch (Exception e) {
      Assertions.assertTrue(true);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_dCCw0_tTkW0() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new java.sql.Date(System.currentTimeMillis()), new java.sql.Date(System.currentTimeMillis()), new java.math.BigDecimal(1.0), new java.math.BigDecimal(1.0), "profileID");
    QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 1.0, new java.math.BigDecimal(1.0), new java.math.BigDecimal(1.0), new java.math.BigDecimal(1.0), new java.math.BigDecimal(1.0), 1.0);
    HoldingDataBean holding = new HoldingDataBean(1.0, new java.math.BigDecimal(1.0), new java.sql.Date(System.currentTimeMillis()), account, quote);
    String orderType = "orderType";
    double quantity = 1.0;
    OrderDataBean order = new OrderDataBean(orderType, "open", new java.sql.Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
    entityManager.persist(order);
    OrderDataBean actual = new OrderDataBean(orderType, "open", new java.sql.Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
    Assertions.assertEquals(order, actual);
  }
}