/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Failing {
  TradeConfigServlet tradeconfigservlet;
  HttpServlet httpservlet;
  @Mock
  ServletConfig config;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    tradeconfigservlet = new TradeConfigServlet();
    tradeconfigservlet.init(config);
    tradeconfigservlet.init(config);
    verify(httpservlet, times(2)).init(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void doConfigDisplayTest_RFEQ0() throws Exception {
    TradeConfigServlet servlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String results = "some results";
    servlet.doConfigDisplay(req, resp, results);
    verify(req, atLeastOnce()).setAttribute("tradeConfig", any(TradeConfig.class));
    verify(req, atLeastOnce()).setAttribute("status", results);
    verify(req.getServletContext(), atLeastOnce()).getRequestDispatcher(TradeConfig.getPage(TradeConfig.CONFIG_PAGE));
    verify(req.getServletContext().getRequestDispatcher(TradeConfig.getPage(TradeConfig.CONFIG_PAGE)), atLeastOnce()).include(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_fid2() throws Exception {
    httpservlet = mock(HttpServlet.class);
    tradeconfigservlet = new TradeConfigServlet();
    tradeconfigservlet.init(config);
    tradeconfigservlet.init(config);
    verify(httpservlet).init(config);
  }
}