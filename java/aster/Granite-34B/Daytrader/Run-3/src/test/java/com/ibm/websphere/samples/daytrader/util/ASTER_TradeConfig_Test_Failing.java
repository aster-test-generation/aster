/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getPrimIterations_rfhO0() {
    int iterations = TradeConfig.getPrimIterations();
    assertEquals(iterations, 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_axTY0() {
    int i = 10;
    float expected = (float) (Math.random() * i);
    float actual = TradeConfig.rndFloat(i);
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloatWithNegativeInput_TJtC1() {
    int i = -10;
    float expected = (float) (Math.random() * i);
    float actual = TradeConfig.rndFloat(i);
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantity_mdRA0() {
    assertEquals(116.0f, TradeConfig.rndQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPrice_XESz0() {
    assertEquals(188.0f, TradeConfig.rndPrice());
  }

  @Test
  @Timeout(value = 2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode_plib0_2() {
    TradeConfig.setAccessMode(0);
    TradeConfig.setAccessMode(1);
    TradeConfig.setAccessMode(2);
    assertEquals(1, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetLongRun_VgoY0() {
    boolean expected = false;
    boolean actual = TradeConfig.getLongRun();
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_XPqw0() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:651066176,s:1528520960,s:375569920,s:441309248,s:466219104", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbolsWithNegativeInput_HUCO1() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:57,s:0,s:46,s:51,s:85,s:68,s:80,s:83,s:68,s:76", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmail_DIYB0() {
    String userID = "user:123";
    int rndInt = TradeConfig.rndInt(100);
    String expected = "user123@" + rndInt + ".com";
    assertEquals(expected, TradeConfig.rndEmail(userID));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_mUtk0() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(result, new BigDecimal("1.04"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactorWithNegativePercentage_eFRx2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(result.compareTo(new BigDecimal("1.0")), -1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getScenarioCount_with_default_value_lSpr1() {
    int expected = 69;
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRndAddress_ILau0() {
    int expected = 252;
    String actual = TradeConfig.rndAddress();
    assertEquals(expected, Integer.parseInt(actual.split(" ")[0]));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_AmAY0() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:956 last:2578";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName1_cXTA1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:771 last:4092";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName2_uPnM2() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:82 last:240";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName3_xAbh3() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:645 last:264";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName4_jDQq4() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:21 last:1314";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName5_mLAd5() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:590 last:4470";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName6_ddNx6() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:600 last:1262";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName7_pugg7() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:867 last:2829";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName8_uYtf8() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:444 last:580";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName9_Jsuo9() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:156 last:2911";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName10_Ataq10() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:326 last:4598";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName11_yKQs11() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:452 last:4425";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName12_giiS12() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:84 last:4554";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName13_csnJ13() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:719 last:2802";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName14_Wque14() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:636 last:185";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName15_AyzK15() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:966 last:4210";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName16_CvsH16() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:993 last:861";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName17_GqQR17() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:687 last:1111";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName18_jOzF18() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:497 last:4399";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName19_wbzX19() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:205 last:66";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getScenarioAction_notNewUser_returnsCorrectAction_WduK1() {
    boolean newUser = false;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('q', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getScenarioAction_notNewUser_sellDeficitPositive_returnsCorrectAction_kxUY2() {
    boolean newUser = false;
    int sellDeficit = 1;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('q', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getScenarioAction_notNewUser_sellDeficitZero_returnsCorrectAction_uDOC3() {
    boolean newUser = false;
    int sellDeficit = 0;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('q', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard2_IWFq2() {
    assertEquals("98-230-251-552", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard5_zySU5() {
    assertEquals("63-162-287-947", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard6_yaUn6() {
    assertEquals("0-914-904-393", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard7_PZpn7() {
    assertEquals("62-858-0-250", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard8_Mxcd8() {
    assertEquals("97-740-471-109", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard9_KgAe9() {
    assertEquals("55-823-930-321", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard10_MHvd10() {
    assertEquals("34-732-544-8", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard13_ROUd13() {
    assertEquals("99-738-936-925", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard15_QTiL15() {
    assertEquals("5-916-285-513", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard20_UtLA20() {
    assertEquals("97-50-742-610", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard21_Xkvx21() {
    assertEquals("24-857-124-414", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard22_BRhM22() {
    assertEquals("58-427-473-586", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard23_AbCL23() {
    assertEquals("32-932-550-49", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard24_ZFCv24() {
    assertEquals("32-827-904-695", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard25_PjaL25() {
    assertEquals("41-423-783-682", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withTraceLogging_EduO1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:3666", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withNoTraceLogging_lPIZ2() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:6606", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withEmptyDeck_LWmE3() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:606", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withNullDeck_BleF4() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:10409", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withNegativeLengthDeck_SXUq5() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:4267", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withZeroLengthDeck_lrqN6() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:1164", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withPositiveLengthDeck_pwjy7() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:5010", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withNegativeLengthDeck_withTraceLogging_hvMB8() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:4952", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withZeroLengthDeck_withTraceLogging_lcHu9() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:13401", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withPositiveLengthDeck_withTraceLogging_Edsn10() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("uid:9318", nextUser);
  }

  @Test
  public void test_getScenarioMixes15_reih15_uNxU0() {
    int[][] result = TradeConfig.getScenarioMixes();
    int[][] expected = {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_NBUQ0_QSXe0() {
    int MAX_HOLDINGS = 100000;
    assertEquals(TradeConfig.getMAX_HOLDINGS(), MAX_HOLDINGS);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getPrimIterations_rfhO0_fid1() {
    int iterations = TradeConfig.getPrimIterations();
    assert iterations > 0;
    TradeConfig config = new TradeConfig();
    int iterations2 = config.getPrimIterations();
    assert iterations2 > 0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantity_mdRA0_fid1() {
    assertEquals(1.0f, TradeConfig.rndQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryIntervalNegative_CQwr2_fid1() {
    TradeConfig.setMarketSummaryInterval(-5);
    assertEquals(0, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPrice_XESz0_fid1() {
    assertEquals(1.0f, TradeConfig.rndPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode_plib0_1() {
    TradeConfig.setAccessMode(0);
    TradeConfig.setAccessMode(1);
    TradeConfig.setAccessMode(2);
    assertEquals(0, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange2_TccT1_fid1() {
    boolean result = TradeConfig.getPublishQuotePriceChange();
    assertEquals(false, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbols_XPqw0_fid1() {
    String symbols = TradeConfig.rndSymbols();
    assertEquals("s:0", symbols);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getWebInterface_return_1_SILV1_fid1() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 1;
    int actual = TradeConfig.getWebInterface();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getWebInterface_return_2_SBvQ2_fid1() {
    TradeConfig tradeConfig = new TradeConfig();
    int expected = 2;
    int actual = TradeConfig.getWebInterface();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getOrderProcessingMode_moXj0() {
    TradeConfig tradeConfig = new TradeConfig();
    int result = TradeConfig.getOrderProcessingMode();
    assertEquals(0, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_GClO0_fid1() {
    String result = TradeConfig.rndSymbol();
    assertEquals("s:0", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmail_DIYB0_fid1() {
    String userID = "user:123";
    String expected = "user123@" + TradeConfig.rndInt(100) + ".com";
    assertEquals(expected, TradeConfig.rndEmail(userID));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_mUtk0_fid1() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertEquals(result, new BigDecimal("1.0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRndAddress_ILau0_fid1() {
    int expected = 1000;
    String actual = TradeConfig.rndAddress();
    assertEquals(expected, Integer.parseInt(actual.split(" ")[0]));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRndAddress_vWfK1_fid1() {
    String expected = "1000 Oak St.";
    String actual = TradeConfig.rndAddress();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRndAddress_xFdp7_fid1() {
    String expected = "1000 Oak St.";
    String actual = TradeConfig.rndAddress();
    assertTrue(actual.contains("1000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRndAddress_lIWT9_fid1() {
    String expected = "1000 Oak St.";
    String actual = TradeConfig.rndAddress();
    assertTrue(actual.contains("1000 Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_AmAY0_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:0 last:0";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName1_cXTA1_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:0 last:1";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName2_uPnM2_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:1 last:0";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName3_xAbh3_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:1 last:1";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName4_jDQq4_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:2 last:2";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName5_mLAd5_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:3 last:3";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName6_ddNx6_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:4 last:4";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName7_pugg7_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:5 last:5";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName8_uYtf8_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:6 last:6";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName9_Jsuo9_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:7 last:7";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName10_Ataq10_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:8 last:8";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName11_yKQs11_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:9 last:9";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName12_giiS12_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:10 last:10";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName13_csnJ13_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:11 last:11";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName14_Wque14_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:12 last:12";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName15_AyzK15_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:13 last:13";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName16_CvsH16_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:14 last:14";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName17_GqQR17_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:15 last:15";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName18_jOzF18_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:16 last:16";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName19_wbzX19_fid1() {
    String actual = TradeConfig.rndFullName();
    String expected = "first:17 last:17";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_IYOP4() {
    float f = 10000.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(f);
    BigDecimal expected = new BigDecimal(Math.random() * f).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getScenarioAction_newUser_returnsCorrectAction_YWUj0_fid1() {
    boolean newUser = true;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('s', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getScenarioAction_notNewUser_returnsCorrectAction_WduK1_fid1() {
    boolean newUser = false;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('b', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getScenarioAction_notNewUser_sellDeficitPositive_returnsCorrectAction_kxUY2_fid1() {
    boolean newUser = false;
    int sellDeficit = 1;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('s', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getScenarioAction_notNewUser_sellDeficitZero_returnsCorrectAction_uDOC3_fid1() {
    boolean newUser = false;
    int sellDeficit = 0;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('b', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard_mpza0_fid1() {
    assertEquals("2-553-297-666", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard1_voSn1_fid1() {
    assertEquals("4-428-838-707", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard2_IWFq2_fid1() {
    assertEquals("9-202-132-412", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard3_AzFA3_fid1() {
    assertEquals("1-287-893-496", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard4_YGue4_fid1() {
    assertEquals("4-200-199-273", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard5_zySU5_fid1() {
    assertEquals("2-232-857-166", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard6_yaUn6_fid1() {
    assertEquals("9-349-464-569", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard7_PZpn7_fid1() {
    assertEquals("1-200-725-544", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard8_Mxcd8_fid1() {
    assertEquals("1-615-251-643", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard9_KgAe9_fid1() {
    assertEquals("2-385-555-559", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard10_MHvd10_fid1() {
    assertEquals("9-519-956-643", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard11_idbA11_fid1() {
    assertEquals("1-303-356-478", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard12_BZeF12_fid1() {
    assertEquals("7-969-128-681", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard13_ROUd13_fid1() {
    assertEquals("1-643-609-132", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard14_xits14_fid1() {
    assertEquals("0-921-134-972", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard15_QTiL15_fid1() {
    assertEquals("5-977-540-135", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard16_aJTg16_fid1() {
    assertEquals("1-650-991-893", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard17_vYDh17_fid1() {
    assertEquals("5-333-921-715", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard18_qzfN18_fid1() {
    assertEquals("5-127-324-013", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard19_QrQh19_fid1() {
    assertEquals("7-730-509-774", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard20_UtLA20_fid1() {
    assertEquals("1-670-850-057", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard21_Xkvx21_fid1() {
    assertEquals("1-106-361-252", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard22_BRhM22_fid1() {
    assertEquals("8-586-353-236", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard23_AbCL23_fid1() {
    assertEquals("2-277-113-394", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard24_ZFCv24_fid1() {
    assertEquals("7-967-312-040", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard25_PjaL25_fid1() {
    assertEquals("0-013-665-393", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCard26_GcHw26_fid1() {
    assertEquals("6-839-741-066", TradeConfig.rndCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withTraceLogging_EduO1_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader123", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withNoTraceLogging_lPIZ2_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader456", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withEmptyDeck_LWmE3_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader789", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withNullDeck_BleF4_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader012", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withNegativeLengthDeck_SXUq5_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader345", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withZeroLengthDeck_lrqN6_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader678", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withPositiveLengthDeck_pwjy7_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader901", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withNegativeLengthDeck_withTraceLogging_hvMB8_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader234", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withZeroLengthDeck_withTraceLogging_lcHu9_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader567", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_withPositiveLengthDeck_withTraceLogging_Edsn10_fid1() {
    String nextUser = TradeConfig.rndUserID();
    assertEquals("trader890", nextUser);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getUpdateQuotePrices_returnFalse_nRyz1_siOi0_fid1() {
    boolean result = TradeConfig.getUpdateQuotePrices();
    assertTrue(!result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_NBUQ0_QSXe0_fid1() {
    int MAX_HOLDINGS = 1000;
    assertEquals(TradeConfig.getMAX_HOLDINGS(), MAX_HOLDINGS);
  }
}