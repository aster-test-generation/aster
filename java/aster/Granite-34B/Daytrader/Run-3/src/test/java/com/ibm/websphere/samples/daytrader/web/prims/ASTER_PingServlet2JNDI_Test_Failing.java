/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2JNDI_Test_Failing {
  private static String initTime;
  private static int hitCount;
  PingServlet2JNDI pingservlet2jndi;
  HttpServlet httpservlet;
  HttpServletResponse httpservletresponse;
  HttpServletRequest httpservletrequest;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_1() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2jndi = new PingServlet2JNDI();
    when(httpservlet.getServletConfig()).thenReturn(mock(ServletConfig.class));
    pingservlet2jndi.init(httpservlet.getServletConfig());
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_2() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2jndi = new PingServlet2JNDI();
    when(httpservlet.getServletConfig()).thenReturn(mock(ServletConfig.class));
    pingservlet2jndi.init(httpservlet.getServletConfig());
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingservlet2jndi = new PingServlet2JNDI();
    HttpServletRequest request = mock(HttpServletRequest.class);
    doNothing().when(httpservletresponse).getWriter();
    pingservlet2jndi.doPost(request, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_mIpg0() {
    PingServlet2JNDI servlet = new PingServlet2JNDI();
    String result = servlet.getServletInfo();
    assertEquals("Basic JNDI look up of a JDBC DataSource", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_oEYg0() throws ServletException, IOException {
    PingServlet2JNDI servlet = new PingServlet2JNDI();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost_fid1() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingservlet2jndi = new PingServlet2JNDI();
    HttpServletRequest request = mock(HttpServletRequest.class);
    pingservlet2jndi.doPost(request, httpservletresponse);
    verify(httpservletresponse, times(1)).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservlet = mock(HttpServlet.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    pingservlet2jndi = new PingServlet2JNDI();
    initTime = "2022-01-01";
    hitCount = 0;
    when(httpservletrequest.getParameter("t1")).thenReturn("2");
    pingservlet2jndi.doGet(httpservletrequest, httpservletresponse);
    assertEquals(2, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2jndi = new PingServlet2JNDI();
    when(httpservlet.getServletConfig()).thenReturn(mock(ServletConfig.class));
    pingservlet2jndi.init(httpservlet.getServletConfig());
    assertEquals(0, hitCount);
    assertNotNull(initTime);
  }
}