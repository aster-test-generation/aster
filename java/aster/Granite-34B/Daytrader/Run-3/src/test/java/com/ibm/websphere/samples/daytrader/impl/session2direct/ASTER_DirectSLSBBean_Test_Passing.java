/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Passing {
  private DirectSLSBBean directSLSBBean;
  @Mock
  private AccountDataBean account;
  @Mock
  private QuoteDataBean quote;
  @Mock
  private HoldingDataBean holding;
  @InjectMocks
  private DirectSLSBBean directslsbbean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void tearDown_NYfN3() throws Exception {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithEmptyUserID_Pfun1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "";
    try {
      directSLSBBean.getHoldings(userID);
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_Zegl0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    int result = directSLSBBean.getImpl();
    assertEquals(TradeConfig.SESSION_TO_DIRECT, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullPrice_jzxR1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "TEST";
    String companyName = "Test Company";
    BigDecimal price = null;
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_VhcJ2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "TEST";
    String companyName = "Test Company";
    BigDecimal price = new BigDecimal(0.0);
    try {
      directSLSBBean.createQuote(symbol, companyName, price);
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote4_wFtf3() throws Exception {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal(123.45));
    assertEquals(new BigDecimal(123.45), quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote9_MPoZ8() throws Exception {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    assertEquals("symbol", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote10_YLOC9() throws Exception {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setVolume(123.45);
    assertEquals(123.45, quoteDataBean.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_BranchCoverage_HUHB2_bRSt0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    int result;
    if (TradeConfig.SESSION_TO_DIRECT == 1) {
      result = TradeConfig.SESSION_TO_DIRECT;
    } else {
      result = TradeConfig.SESSION_TO_DIRECT;
    }
    assertEquals(result, directSLSBBean.getImpl());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_Yupg2() throws Exception {
    directSLSBBean = new DirectSLSBBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersCoverage_povp2() throws Exception {
    String userID = null;
    try {
      directSLSBBean.getOrders(userID);
      fail("Expected Exception not thrown");
    } catch (Exception e) {
    }
  }
}