/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.spi.Bean;
import javax.enterprise.inject.spi.BeanManager;
import javax.enterprise.inject.spi.CDI;
import javax.naming.InitialContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingCDIBean_Test_Failing {
  private static int getBeanManagerHitCountJNDI = 0;
  PingCDIBean pingcdibean;
  InitialContext initialcontext;
  MockedConstruction<InitialContext> mockedInitialContext;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloTwice_dFVZ1() {
    PingCDIBean bean = new PingCDIBean();
    bean.hello();
    int actual = bean.hello();
    int expected = 3;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBeanMangerViaCDICheckBeanManager_opmN0_udUM0() throws Exception {
    PingCDIBean bean = new PingCDIBean();
    BeanManager beanManager = CDI.current().getBeanManager();
    Set<Bean<?>> beans = beanManager.getBeans(Object.class);
    if (beans.size() > 0) {
      bean.getBeanMangerViaJNDI();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBeanMangerViaJNDI_GNoj0() throws Exception {
    mockedInitialContext = mockConstruction(InitialContext.class);
    initialcontext = mock(InitialContext.class);
    PingCDIBean pingcdibean = new PingCDIBean();
    when(initialcontext.lookup("java:comp/BeanManager")).thenReturn(mock(BeanManager.class));
    assertEquals(1, pingcdibean.getBeanMangerViaJNDI());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBeanMangerViaJNDI_WhenNoBeanFound_SuWR1_Kbrn0_1() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    BeanManager beanManager = (BeanManager) new InitialContext().lookup("java:comp/BeanManager");
    Set<Bean<?>> beans = beanManager.getBeans(Object.class);
    int beanManagerHitCountJNDI = 0;
    if (beans.size() == 0) {
    } else {
    }
    Assertions.assertEquals(0, ++beanManagerHitCountJNDI);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBeanMangerViaJNDI_WhenNoBeanFound_SuWR1_Kbrn0_2() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    BeanManager beanManager = (BeanManager) new InitialContext().lookup("java:comp/BeanManager");
    Set<Bean<?>> beans = beanManager.getBeans(Object.class);
    int beanManagerHitCountJNDI = 0;
    if (beans.size() == 0) {
    } else {
    }
    Assertions.assertEquals(1, beanManagerHitCountJNDI);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHelloTwice_dFVZ1_fid1() {
    PingCDIBean bean = new PingCDIBean();
    bean.hello();
    int actual = bean.hello();
    int expected = 2;
    assertEquals(expected, actual);
  }
}