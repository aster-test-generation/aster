/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CDIMethodConstraintBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getHitCount_NotNull_PastOrPresent_BVka0_1() {
    CDIMethodConstraintBean classUT = new CDIMethodConstraintBean();
    LocalDateTime now = LocalDateTime.now();
    int result = classUT.getHitCount(now);
    assertNotNull(now);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getHitCount_NotNull_PastOrPresent_Max_zphc1_1() {
    CDIMethodConstraintBean classUT = new CDIMethodConstraintBean();
    LocalDateTime now = LocalDateTime.MAX;
    int result = classUT.getHitCount(now);
    assertNotNull(now);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getHitCount_NotNull_PastOrPresent_Max_zphc1_2() {
    CDIMethodConstraintBean classUT = new CDIMethodConstraintBean();
    LocalDateTime now = LocalDateTime.MAX;
    int result = classUT.getHitCount(now);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getHitCount_NotNull_PastOrPresent_Min_Vfoh2_1() {
    CDIMethodConstraintBean classUT = new CDIMethodConstraintBean();
    LocalDateTime now = LocalDateTime.MIN;
    int result = classUT.getHitCount(now);
    assertNotNull(now);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void test_getHitCount_NotNull_PastOrPresent_Min_Vfoh2_2() {
    CDIMethodConstraintBean classUT = new CDIMethodConstraintBean();
    LocalDateTime now = LocalDateTime.MIN;
    int result = classUT.getHitCount(now);
    assertTrue(now.isBefore(LocalDateTime.now()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHitList_kIyU0_1() {
    CDIMethodConstraintBean bean = new CDIMethodConstraintBean();
    List<Integer> result = bean.hitList();
    assertNotNull(result);
  }
}