/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCompanyName_ivOw0() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setCompanyName("TestCompany");
    assertEquals("TestCompany", bean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_IssZ0() {
    QuoteDataBean quote = new QuoteDataBean("TEST", "TEST", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
    quote.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_NXuN0() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setSymbol("TEST");
    assertEquals("TEST", bean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetVolume_Xpbp0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("testSymbol");
    quoteDataBean.setVolume(100.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetVolumeWithAllParameters_wEKv1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
    quoteDataBean.setVolume(100.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_tgsi0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal price = new BigDecimal(100.00);
    quoteDataBean.setPrice(price);
    assertEquals(price, quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_uZog0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("TEST", "TEST", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
    assertEquals(new BigDecimal(100.0), quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetChange_AUWm0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
    quoteDataBean.setChange(10.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetChangeWithNoParameters_oitf1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setChange(10.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_hpoO0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("TEST", "TEST", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
    assertEquals(new BigDecimal(100.0), quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLowWithNoArgumentConstructor_UEls1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    assertEquals(null, quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHigh_HVtN0() {
    QuoteDataBean bean = new QuoteDataBean("TEST");
    bean.setHigh(new BigDecimal(100.0));
    Assertions.assertEquals(new BigDecimal(100.0), bean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHighWithNull_yiNd1() {
    QuoteDataBean bean = new QuoteDataBean("TEST");
    bean.setHigh(null);
    Assertions.assertNull(bean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHighWithZero_KxtV2() {
    QuoteDataBean bean = new QuoteDataBean("TEST");
    bean.setHigh(BigDecimal.ZERO);
    Assertions.assertEquals(BigDecimal.ZERO, bean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHighWithNegativeValue_dOvB3() {
    QuoteDataBean bean = new QuoteDataBean("TEST");
    bean.setHigh(new BigDecimal(-100.0));
    Assertions.assertEquals(new BigDecimal(-100.0), bean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHighAfterSettingValue_DUmO4() {
    QuoteDataBean bean = new QuoteDataBean("TEST");
    bean.setHigh(new BigDecimal(100.0));
    bean.setHigh(new BigDecimal(200.0));
    Assertions.assertEquals(new BigDecimal(200.0), bean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getChange_HmwX0() {
    QuoteDataBean bean = new QuoteDataBean("symbol", "companyName", 100, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
    double actual = bean.getChange();
    assertEquals(10.0, actual, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getChange2_gapQ1() {
    QuoteDataBean bean = new QuoteDataBean();
    double actual = bean.getChange();
    assertEquals(0.0, actual, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getChange3_VRCa2() {
    QuoteDataBean bean = new QuoteDataBean("symbol");
    double actual = bean.getChange();
    assertEquals(0.0, actual, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_zuMO0() {
    QuoteDataBean bean = new QuoteDataBean("testSymbol");
    assertEquals("testSymbol", bean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolDefaultConstructor_QMbi1() {
    QuoteDataBean bean = new QuoteDataBean();
    assertEquals(null, bean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbolFullConstructor_MRAN2() {
    QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(80.0), new BigDecimal(110.0), 10.0);
    assertEquals("testSymbol", bean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpen_KulR0() {
    QuoteDataBean bean = new QuoteDataBean();
    BigDecimal open = new BigDecimal(100.0);
    bean.setOpen(open);
    assertEquals(open, bean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenWithCoverage_CKib1() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setOpen(null);
    bean.setOpen(new BigDecimal(100.0));
    bean.setOpen(new BigDecimal(200.0));
    bean.setOpen(new BigDecimal(300.0));
    bean.setOpen(new BigDecimal(400.0));
    bean.setOpen(new BigDecimal(500.0));
    bean.setOpen(new BigDecimal(600.0));
    bean.setOpen(new BigDecimal(700.0));
    bean.setOpen(new BigDecimal(800.0));
    bean.setOpen(new BigDecimal(900.0));
    bean.setOpen(new BigDecimal(1000.0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHigh_wwIK0() {
    QuoteDataBean bean = new QuoteDataBean(" IBM", " International Business Machines", 100.0, new BigDecimal(101.0), new BigDecimal(100.5), new BigDecimal(99.0), new BigDecimal(101.1), 1.1);
    BigDecimal high = bean.getHigh();
    assertEquals(new BigDecimal(101.1), high);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHigh2_gVrm1() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setSymbol(" IBM");
    bean.setCompanyName(" International Business Machines");
    bean.setVolume(100.0);
    bean.setPrice(new BigDecimal(101.0));
    bean.setOpen(new BigDecimal(100.5));
    bean.setLow(new BigDecimal(99.0));
    bean.setHigh(new BigDecimal(101.1));
    bean.setChange(1.1);
    BigDecimal high = bean.getHigh();
    assertEquals(new BigDecimal(101.1), high);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_agaK0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("testSymbol");
    boolean actual = quoteDataBean.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectOfDifferentType_jztl1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("testSymbol");
    Object object = new Object();
    boolean actual = quoteDataBean.equals(object);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectOfSameTypeAndNullSymbol_lhpH2() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("testSymbol");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean();
    boolean actual = quoteDataBean1.equals(quoteDataBean2);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectOfSameTypeAndDifferentSymbol_IiEW3() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("testSymbol1");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean("testSymbol2");
    boolean actual = quoteDataBean1.equals(quoteDataBean2);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectOfSameTypeAndSameSymbol_FRCG4() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("testSymbol");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean("testSymbol");
    boolean actual = quoteDataBean1.equals(quoteDataBean2);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString(QuoteDataBean quoteDataBean, String expected) {
    assertEquals(expected, quoteDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow_xXvl0() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(0));
    Assertions.assertEquals(new BigDecimal(0), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow2_RaBD1() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(1));
    Assertions.assertEquals(new BigDecimal(1), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow3_yOKm2() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(100));
    Assertions.assertEquals(new BigDecimal(100), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow4_XbjV3() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(1000));
    Assertions.assertEquals(new BigDecimal(1000), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow5_pPMS4() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(10000));
    Assertions.assertEquals(new BigDecimal(10000), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow6_HXQh5() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(100000));
    Assertions.assertEquals(new BigDecimal(100000), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow7_aZtc6() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(1000000));
    Assertions.assertEquals(new BigDecimal(1000000), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow8_FCOQ7() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(10000000));
    Assertions.assertEquals(new BigDecimal(10000000), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow9_IlEp8() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(100000000));
    Assertions.assertEquals(new BigDecimal(100000000), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow10_FRJk9() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setLow(new BigDecimal(1000000000));
    Assertions.assertEquals(new BigDecimal(1000000000), bean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_LQpg0() {
    QuoteDataBean bean = new QuoteDataBean("testSymbol");
    assertEquals(null, bean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_jVsh1() {
    QuoteDataBean bean = new QuoteDataBean();
    assertEquals(null, bean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test3_SQDW2() {
    QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
    assertEquals(new BigDecimal(1.0), bean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getPriceTest_twAS3() {
    QuoteDataBean bean = new QuoteDataBean();
    bean.setPrice(new BigDecimal(1.0));
    assertEquals(new BigDecimal(1.0), bean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_geGg0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
    quoteDataBean.setCompanyName("TEST_COMPANY");
    assert quoteDataBean.getCompanyName().equals("TEST_COMPANY");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_RUAh1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    assert quoteDataBean.getCompanyName() == null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_mydP2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("");
    assert quoteDataBean.getCompanyName().equals("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_CamG3() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("TEST_COMPANY");
    assert quoteDataBean.getCompanyName().equals("TEST_COMPANY");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_GoxO4() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("TEST_COMPANY");
    quoteDataBean.setCompanyName("ANOTHER_TEST_COMPANY");
    assert quoteDataBean.getCompanyName().equals("ANOTHER_TEST_COMPANY");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_XomS5() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("TEST_COMPANY");
    quoteDataBean.setCompanyName(null);
    assert quoteDataBean.getCompanyName() == null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_BKnT6() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("TEST_COMPANY");
    quoteDataBean.setCompanyName("");
    assert quoteDataBean.getCompanyName().equals("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_Lyah7() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    quoteDataBean.setCompanyName("TEST_COMPANY");
    assert quoteDataBean.getCompanyName().equals("TEST_COMPANY");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_pbKg8() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    quoteDataBean.setCompanyName(null);
    assert quoteDataBean.getCompanyName() == null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompanyNameTest_yTOm9() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    quoteDataBean.setCompanyName("");
    assert quoteDataBean.getCompanyName().equals("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testVolume_cFRK0_DyzS0() {
    QuoteDataBean bean = new QuoteDataBean("testSymbol");
    bean.setVolume(100.0);
    Assertions.assertEquals(100.0, bean.getVolume(), 0.0, "Volume not set correctly");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_PSvr0_fid1() {
    QuoteDataBean quote = new QuoteDataBean("TEST", "Test Company", 1000.0, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(80.0), new BigDecimal(110.0), 10.0);
    String htmlOutput = quote.toHTML();
    String expectedOutput = "<BR>Quote Data for: TEST<LI> companyName: Test Company</LI>" + "<LI>      volume: 1000.0</LI>" + "<LI>       price: 100.0</LI>" + "<LI>        open1: 90.0</LI>" + "<LI>         low: 80.0</LI>" + "<LI>        high: 110.0</LI>" + "<LI>      change1: 10.0</LI>";
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithEmptyData_NpLb2_fid1() {
    QuoteDataBean quote = new QuoteDataBean("", "", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
    String htmlOutput = quote.toHTML();
    String expectedOutput = "<BR>Quote Data for: <LI> companyName: </LI>" + "<LI>      volume: 0.0</LI>" + "<LI>       price: 0.0</LI>" + "<LI>        open1: 0.0</LI>" + "<LI>         low: 0.0</LI>" + "<LI>        high: 0.0</LI>" + "<LI>      change1: 0.0</LI>";
  }
}