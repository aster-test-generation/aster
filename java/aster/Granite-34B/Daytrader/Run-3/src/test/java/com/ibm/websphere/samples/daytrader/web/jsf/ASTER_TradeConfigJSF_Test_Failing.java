/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
  private String result = "";
  private ExternalContext context;
  TradeConfigJSF tradeconfigjsf;
  HttpSession httpsession;
  ExternalContext externalcontext;
  private TradeConfigJSF tradeConfigJSF;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_Null_lxSW1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] result = tradeConfigJSF.getOrderProcessingModeList();
    Assertions.assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetmaxQuotes_negative_pniE2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setmaxQuotes(-1 - 10);
    assertEquals(-10, tradeConfigJSF.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getWebInterfaceList_cZIr0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] actual = tradeConfigJSF.getWebInterfaceList();
    String[] expected = null; // Initialize the expected value based on the method's return type
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeMode_eqzn0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertEquals(null, runtimeMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsLongRun_0_TaTn0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    boolean expected = false;
    boolean actual = tradeConfigJSF.isLongRun();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTrade_coja0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.resetTrade();
    Assertions.assertEquals("stats", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWebInterface_NLho0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String expected = "expectedValue"; // Replace with the expected value
    String actual = tradeConfigJSF.getWebInterface();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_Empty_XcYH2_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] result = tradeConfigJSF.getOrderProcessingModeList();
    Assertions.assertEquals(0, result.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_Nxsk0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    assertEquals(tradeConfigJSF.getMaxQuotes(), 0); // Replace 0 with the expected value
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetmaxQuotes_negative_pniE2_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setmaxQuotes(-10);
    assertEquals(0, tradeConfigJSF.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalDefault_YBOG3_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int actual = tradeConfig.getMarketSummaryInterval();
    assertEquals(5, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalNegative_rfTW5_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMarketSummaryInterval(-1);
    int actual = tradeConfig.getMarketSummaryInterval();
    assertEquals(5, actual);
  }
}