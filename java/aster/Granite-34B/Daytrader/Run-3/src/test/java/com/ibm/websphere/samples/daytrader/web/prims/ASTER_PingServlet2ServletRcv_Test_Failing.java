/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Failing {
  private static String initTime = null;
  PingServlet2ServletRcv pingservlet2servletrcv;
  HttpServlet httpservlet;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    doCallRealMethod().when(httpservlet).init(any());
    doNothing().when(pingservlet2servletrcv).init(any());
    httpservlet.init(null);
    pingservlet2servletrcv.init(null);
    assertEquals("initTime should be initialized with current date", new java.util.Date().toString(), initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    // Set up expected behavior for the mocks
    when(httpservletrequest.getParameter("param1")).thenReturn("value1");
    when(httpservletresponse.getWriter()).thenReturn(mock(PrintWriter.class));
    // Call the method to be tested
    pingservlet2servletrcv.doPost(httpservletrequest, httpservletresponse);
    // Add meaningful assertions
    verify(httpservletrequest, times(1)).getParameter("param1");
    verify(httpservletresponse, times(1)).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithConfig_VLfk1() throws ServletException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertEquals(config, servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithException_dSme2() {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    try {
      servlet.init(null);
      fail("Expected ServletException");
    } catch (ServletException e) {
      assertNotNull(e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithConfigCoverage_RSyK4() throws ServletException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    servlet.getServletConfig();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_FFEW0_vImb0() throws ServletException, NoSuchFieldException, IllegalAccessException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    servlet.init(null);
    Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    assertNotNull(initTimeField.get(servlet));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withValidRequest_Gpge1_gLds0() throws ServletException, IOException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("param")).thenReturn("value");
    servlet.doPost(request, response);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_MPVO0_SeIk0() throws ServletException, IOException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withInvalidRequest_pDFQ2_UctI0() throws ServletException, IOException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("param")).thenReturn(null);
    servlet.doPost(request, response);
    verify(response, never()).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withInvalidRequestAndResponse_VdDf4_rZPb0() throws ServletException, IOException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("param")).thenReturn(null);
    when(response.getWriter()).thenThrow(new IOException());
    servlet.doPost(request, response);
    verify(response, never()).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withValidRequestAndResponse_ENmH3_qyKD0() throws ServletException, IOException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("param")).thenReturn("value");
    when(response.getWriter()).thenReturn(new PrintWriter(System.out));
    servlet.doPost(request, response);
    verify(response).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_withValidRequestAndResponseAndException_VLEG5_bKUD0() throws ServletException, IOException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(request.getParameter("param")).thenReturn("value");
    when(response.getWriter()).thenThrow(new IOException());
    servlet.doPost(request, response);
    verify(response, never()).getWriter();
  }
}