/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_case_1_GrwY0_IzuO0() {
    String expected = "1000000";
    String actual = TradeConfig.rndBalance();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRandomPriceChangeFactor_DULe0_lyFK0() {
    BigDecimal percentGainBD = TradeConfig.getRandomPriceChangeFactor();
    if (percentGainBD.doubleValue() <= 0.0) {
      percentGainBD = new BigDecimal(1);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_6_ztTk5_CbRZ0() {
    TradeConfig tradeConfig = new TradeConfig();
    tradeConfig.setConfigParam("primIterations", "1000");
    assertEquals(1000, tradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_DMRX0_1_fid2() {
  }
}