/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisOpen2_qkKz1() {
    OrderDataBean order = new OrderDataBean(1, "open", "processing", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    boolean actual = order.isOpen();
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_RadD0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    boolean actual = orderDataBean.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonOrderDataBeanObject_Eymx1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    boolean actual = orderDataBean.equals(new Object());
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithEqualObjects_teQK2() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    boolean actual = orderDataBean1.equals(orderDataBean2);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonEqualObjects_uMJs3() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    boolean actual = orderDataBean1.equals(orderDataBean2);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullOrderID_INgp4() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    OrderDataBean orderDataBean2 = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
    boolean actual = orderDataBean1.equals(orderDataBean2);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisOpen3_seHI2_fid1() {
    OrderDataBean order = new OrderDataBean(1, "closed", "processing", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "symbol");
    boolean actual = order.isOpen();
    boolean expected = true;
    assertEquals(expected, actual);
  }
}