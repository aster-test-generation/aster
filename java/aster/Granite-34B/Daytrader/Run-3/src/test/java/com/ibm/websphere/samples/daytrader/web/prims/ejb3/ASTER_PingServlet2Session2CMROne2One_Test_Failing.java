/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2CMROne2One_Test_Failing {
  private static int hitCount;
  private static String initTime;
  PingServlet2Session2CMROne2One pingservlet2session2cmrone2one;
  HttpServlet httpservlet;
  HttpServletResponse httpservletresponse;
  private TradeServices tradeSLSBLocal;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingservlet2session2cmrone2one = new PingServlet2Session2CMROne2One();
    HttpServletRequest request = mock(HttpServletRequest.class);
    pingservlet2session2cmrone2one.doPost(request, httpservletresponse);
    verify(httpservletresponse, atLeastOnce()).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_KhGh0() throws ServletException, IOException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_CSOl0() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "web primitive, tests Servlet to Entity EJB path";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithNullInput_jrZb1() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = null;
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithEmptyInput_yUwz2() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfoWithInvalidInput_tFtr3() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    String expected = "Invalid input";
    String actual = servlet.getServletInfo();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_IiMC0() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2session2cmrone2one = mock(PingServlet2Session2CMROne2One.class);
    ServletConfig servletconfig = mock(ServletConfig.class);
    Mockito.when(pingservlet2session2cmrone2one.getServletConfig()).thenReturn(servletconfig);
    Mockito.when(servletconfig.getInitParameter("hitCount")).thenReturn("0");
    Mockito.when(servletconfig.getInitParameter("initTime")).thenReturn(new java.util.Date().toString());
    Mockito.verify(pingservlet2session2cmrone2one).getServletConfig();
    Mockito.verify(servletconfig).getInitParameter("hitCount");
    Mockito.verify(servletconfig).getInitParameter("initTime");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost_fid1() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingservlet2session2cmrone2one = new PingServlet2Session2CMROne2One();
    HttpServletRequest request = mock(HttpServletRequest.class);
    doNothing().when(httpservletresponse).getWriter();
    pingservlet2session2cmrone2one.doPost(request, httpservletresponse);
    verify(httpservletresponse, atLeastOnce()).getWriter();
  }
}