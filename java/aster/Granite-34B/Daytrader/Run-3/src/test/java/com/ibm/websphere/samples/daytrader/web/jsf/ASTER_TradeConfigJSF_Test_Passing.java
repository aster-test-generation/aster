/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Passing {
  private String result = "";
  private ExternalContext context;
  TradeConfigJSF tradeconfigjsf;
  HttpSession httpsession;
  ExternalContext externalcontext;
  private TradeConfigJSF tradeConfigJSF;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeMode_eqzn0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String runtimeMode = tradeConfigJSF.getRuntimeMode();
    assertNull(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getResultTest_FYul0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.getResult();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getResultTest_lineCoverage_VnhH1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.getResult();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getResultTest_branchCoverage_pSwY2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getPrimIterations_XXQv0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(10);
    assert tradeConfigJSF.getPrimIterations() == 10;
  }

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setUp_Ixgl0() {
    tradeConfigJSF = new TradeConfigJSF();
  }

  @AfterEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void tearDown_XpYQ1() {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetWebInterfaceList_GWhT2() {
    String[] webInterfaceList = new String[]{"interface1", "interface2"};
    tradeConfigJSF.setWebInterfaceList(webInterfaceList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsLongRun_0_TaTn0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    boolean expected = false;
    boolean actual = tradeConfigJSF.isLongRun();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsLongRun_1_xBot1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setLongRun(true);
    boolean expected = true;
    boolean actual = tradeConfigJSF.isLongRun();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeList_muuf0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] orderProcessingModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setOrderProcessingModeList(orderProcessingModeList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_kXib0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("webInterface");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxUsers_tkKP0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setMaxUsers(100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_bjOy0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int maxUsers = tradeConfigJSF.getMaxUsers();
    assert (maxUsers == tradeConfigJSF.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_lineCoverage_joZG1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.getMaxUsers();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_branchCoverage_OBzQ2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.getMaxUsers();
    tradeConfigJSF.getMaxUsers();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetLongRun_xgTO0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setLongRun(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetLongRunFalse_knkW1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setLongRun(false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWebInterface_NLho0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String expected = "JSP"; // Replace with the expected value
    String actual = tradeConfigJSF.getWebInterface();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDisplayOrderAlerts_hYYY0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setDisplayOrderAlerts(true);
    assertEquals(true, tradeConfigJSF.isDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_MZCi0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithNegativeValue_BXfT1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(-1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithZeroValue_WjhZ2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithMaxValue_sPRG3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(Integer.MAX_VALUE);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithMinValue_BaGE4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(Integer.MIN_VALUE);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterationsWithRandomValue_xAyi5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(new Random().nextInt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_dlYK0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] result = tradeConfigJSF.getOrderProcessingModeList();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_NonEmpty_enqr3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] result = tradeConfigJSF.getOrderProcessingModeList();
    Assertions.assertTrue(result.length > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_Nxsk0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    assertEquals(tradeConfigJSF.getMaxQuotes(), 10000); // Replace10000 with the expected value
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsDisplayOrderAlertsTrue_cEWx0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setDisplayOrderAlerts(true);
    assertTrue(tradeConfigJSF.isDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsDisplayOrderAlertsFalse_lvvB1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setDisplayOrderAlerts(false);
    assertFalse(tradeConfigJSF.isDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetListQuotePriceChangeFrequency_NOAy2() {
    int expected = tradeConfigJSF.getListQuotePriceChangeFrequency();
    int actual = tradeConfigJSF.getListQuotePriceChangeFrequency();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_STJW0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.populateDatabase();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetmaxQuotes_leOl0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setmaxQuotes(100);
    assertEquals(100, tradeConfigJSF.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetmaxQuotes_zero_HqAa1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setmaxQuotes(0);
    assertEquals(0, tradeConfigJSF.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getOrderProcessingModeTest_pAln0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getOrderProcessingModeTest_Mode1_ivBI1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("Mode1");
    String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
    assertEquals("Mode1", orderProcessingMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getOrderProcessingModeTest_Mode2_mnVj2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("Mode2");
    String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
    assertEquals("Mode2", orderProcessingMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_bpHE0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int marketSummaryInterval = 10;
    tradeConfigJSF.setMarketSummaryInterval(marketSummaryInterval);
    assertEquals(marketSummaryInterval, tradeConfigJSF.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_zero_iXyF1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int marketSummaryInterval = 0;
    tradeConfigJSF.setMarketSummaryInterval(marketSummaryInterval);
    assertEquals(marketSummaryInterval, tradeConfigJSF.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_negative_PGbb2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int marketSummaryInterval = -10;
    tradeConfigJSF.setMarketSummaryInterval(marketSummaryInterval);
    assertEquals(marketSummaryInterval, tradeConfigJSF.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_maxValue_kAev3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int marketSummaryInterval = Integer.MAX_VALUE;
    tradeConfigJSF.setMarketSummaryInterval(marketSummaryInterval);
    assertEquals(marketSummaryInterval, tradeConfigJSF.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_minValue_KkhJ4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int marketSummaryInterval = Integer.MIN_VALUE;
    tradeConfigJSF.setMarketSummaryInterval(marketSummaryInterval);
    assertEquals(marketSummaryInterval, tradeConfigJSF.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_EKLm0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = 10;
    tradeConfigJSF.setListQuotePriceChangeFrequency(listQuotePriceChangeFrequency);
    assertEquals(listQuotePriceChangeFrequency, tradeConfigJSF.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequencyWithZero_NhdS1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = 0;
    tradeConfigJSF.setListQuotePriceChangeFrequency(listQuotePriceChangeFrequency);
    assertEquals(listQuotePriceChangeFrequency, tradeConfigJSF.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequencyWithNegativeNumber_eQJH2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = -1;
    tradeConfigJSF.setListQuotePriceChangeFrequency(listQuotePriceChangeFrequency);
    assertEquals(listQuotePriceChangeFrequency, tradeConfigJSF.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequencyWithMaximumValue_WufW3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = Integer.MAX_VALUE;
    tradeConfigJSF.setListQuotePriceChangeFrequency(listQuotePriceChangeFrequency);
    assertEquals(listQuotePriceChangeFrequency, tradeConfigJSF.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequencyWithMinimumValue_CMLI4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    int listQuotePriceChangeFrequency = Integer.MIN_VALUE;
    tradeConfigJSF.setListQuotePriceChangeFrequency(listQuotePriceChangeFrequency);
    assertEquals(listQuotePriceChangeFrequency, tradeConfigJSF.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeMode_iFCg0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setRuntimeMode("TEST");
    assertEquals("TEST", tradeConfigJSF.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeNull_Qsrs2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setRuntimeMode(null);
    assertEquals(null, tradeConfigJSF.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeEmpty_NLYd3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setRuntimeMode("");
    assertEquals("", tradeConfigJSF.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_InSP0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
    assertNotNull(runtimeModeList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_SsiJ0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int actual = tradeConfig.getMarketSummaryInterval();
    int expected = tradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalCoverage_fDce1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMarketSummaryInterval(100);
    int actual = tradeConfig.getMarketSummaryInterval();
    assertEquals(100, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalBoundary_UtKZ2() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMarketSummaryInterval(0);
    int actual = tradeConfig.getMarketSummaryInterval();
    assertEquals(0, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalDefault_YBOG3() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int actual = tradeConfig.getMarketSummaryInterval();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalNegative_rfTW5() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMarketSummaryInterval(-1);
    int actual = tradeConfig.getMarketSummaryInterval();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalDefaultCoverage_dAbf8() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int actual = tradeConfig.getMarketSummaryInterval();
    assertEquals(20, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryIntervalNegativeCoverage_qDyi10() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMarketSummaryInterval(-1);
    int actual = tradeConfig.getMarketSummaryInterval();
    assertEquals(-1, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeList_gdCG0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    Assertions.assertEquals(runtimeModeList, actualRuntimeModeList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListNull_XCzP1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = null;
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    Assertions.assertEquals(runtimeModeList, actualRuntimeModeList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListEmpty_hfpN2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = new String[]{};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    Assertions.assertEquals(runtimeModeList, actualRuntimeModeList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListBranchCoverage_CvDo3_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    String[] runtimeModeListNull = null;
    tradeConfigJSF.setRuntimeModeList(runtimeModeListNull);
    String[] actualRuntimeModeListNull = tradeConfigJSF.getRuntimeModeList();
    org.junit.jupiter.api.Assertions.assertEquals(runtimeModeList, actualRuntimeModeList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListBranchCoverage_CvDo3_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    String[] runtimeModeListNull = null;
    tradeConfigJSF.setRuntimeModeList(runtimeModeListNull);
    String[] actualRuntimeModeListNull = tradeConfigJSF.getRuntimeModeList();
    org.junit.jupiter.api.Assertions.assertEquals(runtimeModeListNull, actualRuntimeModeListNull);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListLineCoverage_Ztbl4_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    tradeConfigJSF.setRuntimeModeList(null);
    String[] actualRuntimeModeListNull = tradeConfigJSF.getRuntimeModeList();
    org.junit.jupiter.api.Assertions.assertEquals(runtimeModeList, actualRuntimeModeList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListLineCoverage_Ztbl4_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    tradeConfigJSF.setRuntimeModeList(null);
    String[] actualRuntimeModeListNull = tradeConfigJSF.getRuntimeModeList();
    org.junit.jupiter.api.Assertions.assertEquals(null, actualRuntimeModeListNull);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_WCzu0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value1");
    assertEquals("value1", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode2_gzpz1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value2");
    assertEquals("value2", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode3_eVyw2() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value3");
    assertEquals("value3", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode4_GJJm3() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value4");
    assertEquals("value4", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode5_UJiQ4() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value5");
    assertEquals("value5", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode6_iXBp5() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value6");
    assertEquals("value6", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode7_GXAe6() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value7");
    assertEquals("value7", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode8_CDMG7() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value8");
    assertEquals("value8", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode9_PIyV8() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value9");
    assertEquals("value9", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode10_GJgw9() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value10");
    assertEquals("value10", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode11_cLyH10() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value11");
    assertEquals("value11", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode12_YARP11() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value12");
    assertEquals("value12", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode13_RZKB12() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value13");
    assertEquals("value13", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode14_xJOe13() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value14");
    assertEquals("value14", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode15_byec14() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value15");
    assertEquals("value15", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode16_xrqH15() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setOrderProcessingMode("value16");
    assertEquals("value16", tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListBranchCoverage_CvDo3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    org.junit.jupiter.api.Assertions.assertEquals(runtimeModeList, actualRuntimeModeList);
    String[] runtimeModeListNull = null;
    tradeConfigJSF.setRuntimeModeList(runtimeModeListNull);
    String[] actualRuntimeModeListNull = tradeConfigJSF.getRuntimeModeList();
    org.junit.jupiter.api.Assertions.assertEquals(runtimeModeListNull, actualRuntimeModeListNull);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeListLineCoverage_Ztbl4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String[] runtimeModeList = new String[]{"mode1", "mode2"};
    tradeConfigJSF.setRuntimeModeList(runtimeModeList);
    String[] actualRuntimeModeList = tradeConfigJSF.getRuntimeModeList();
    org.junit.jupiter.api.Assertions.assertEquals(runtimeModeList, actualRuntimeModeList);
    tradeConfigJSF.setRuntimeModeList(null);
    String[] actualRuntimeModeListNull = tradeConfigJSF.getRuntimeModeList();
    org.junit.jupiter.api.Assertions.assertEquals(null, actualRuntimeModeListNull);
  }
}