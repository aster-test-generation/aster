/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeScenarioServlet_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_fPCA0() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    tradeScenarioServlet.doGet(null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask_UFpP1() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    tradeScenarioServlet.performTask(null, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_zCuU0() {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    String expected = "TradeScenarioServlet emulates a population of web users";
    assertEquals(expected, tradeScenarioServlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_ufCn0() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit1_uHAS0() throws javax.servlet.ServletException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameterNames()).thenReturn(Collections.emptyEnumeration());
    tradeScenarioServlet.init(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask1_HswJ0() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("n");
    when(resp.getOutputStream()).thenThrow(new IOException());
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask3_VXGV2() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("l");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask4_ynrT3() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("b");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask5_iyPa4() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("s");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask6_VZZP5() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("p");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask7_cMMe6() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("a");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask8_UZib7() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("u");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask9_LgQt8() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("h");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask10_dztM9() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("o");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask11_hkPR10() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("q");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask12_pInX11() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("r");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask13_iBfW12() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("m");
    tradeScenarioServlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask14_QtEj13() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_ufCn0_fid1() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    tradeScenarioServlet.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit1_uHAS0_fid1() throws javax.servlet.ServletException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameterNames()).thenReturn(Collections.emptyEnumeration());
    tradeScenarioServlet.init(config);
    // Add assertions here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTask13_iBfW12_fid1() throws javax.servlet.ServletException, java.io.IOException {
    TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("m");
    tradeScenarioServlet.performTask(req, resp);
    verify(resp, times(1)).sendError(500, "TradeScenarioServlet: Error:  Error looking up TradeAction");
  }
}