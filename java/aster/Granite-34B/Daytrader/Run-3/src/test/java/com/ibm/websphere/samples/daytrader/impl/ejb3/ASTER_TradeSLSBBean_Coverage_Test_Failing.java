/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeSLSBBean_Coverage_Test_Failing {
  TradeSLSBBean trade = new TradeSLSBBean();

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetMarketSummary_sTWV0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getAllQuotes_test1_VkMD0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getAllQuotes_test2_jqZP1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    Assertions.assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNulluserID_KEuE1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<OrderDataBean> orders = null;
    try {
      orders = tradeSLSBBean.getOrders(userID);
    } catch (javax.ejb.EJBException e) {
      // handle the exception
    }
    // add assertions here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyuserID_fvdt2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    // Replace the erroneous assertion and regenerate the fixed test case
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
    // Only generate the fixed test case
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_PQRj0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer holdingID = 1;
    HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(holdingID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getAccountDataTest1_LdUo0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.getAccountData("uid1");
    Assertions.assertNotNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getAccountDataTest2_puKf1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.getAccountData("uid2");
    Assertions.assertNotNull(account, "The account should not be null");
    Assertions.assertEquals("uid2", account.getProfileID(), "The profile ID should be 'uid2'");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getAccountDataTest3_RwEV2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.getAccountData("uid3");
    assertEquals(account.getProfileID(), "uid3");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getAccountDataTest4_irkb3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.getAccountData("uid4");
    assertEquals(account.getProfileID(), "uid4");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_KFRT0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(1, true);
    assertNotNull(future);
    // Fixed test case
    // Replace the erroneous assertion with the correct one
    OrderDataBean orderDataBean = future.get();
    assertNotNull(orderDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout1_RHHf0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.logout("1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout2_PGWg1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.logout("2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout3_FcGA2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.logout("3");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserDoesNotExist_cOcd0() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserExistsPasswordCorrect_KIad1() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertEquals(userID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserExistsPasswordCorrectBalanceGreaterThanZero_SQfB3() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserExistsPasswordCorrectBalanceLessThanZero_xUXb4() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertTrue(accountDataBean.getBalance().compareTo(new BigDecimal(-1)) < 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserExistsPasswordCorrectBalanceZero_AxAH5() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertEquals(BigDecimal.ZERO, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserExistsPasswordCorrectBalanceGreaterThanZeroLastLoginNotNull_TkFG6_2() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertNotNull(accountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange1_VsqH0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal oldPrice = new BigDecimal(0);
    BigDecimal changeFactor = new BigDecimal(0);
    double sharesTraded = 100;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChange2_ZoeU1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal oldPrice = new BigDecimal(0);
    BigDecimal changeFactor = new BigDecimal(0);
    double sharesTraded = 0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder1_Pfmb0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 12345;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder2_AkSU1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 12345;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder4_iXBY3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 54321;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder5_PeCx4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 11111;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder7_uavE6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 22222;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
    // Add assertions here
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder9_OOYh8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 33333;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder11_filQ10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 44444;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder12_XkmR11() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 44444;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
    // Add assertions here
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_001_xgYK0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid1", "pass1", "fn1", "ad1", "email1", "cc1", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_002_icqd1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid2", "pass2", "fn2", "ad2", "email2", "cc2", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_003_ETfK2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid3", "pass3", "fn3", "ad3", "email3", "cc3", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_004_ZhBz3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid4", "pass4", "fn4", "ad4", "email4", "cc4", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_006_hQiR5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid6", "pass6", "fn6", "ad6", "email6", "cc6", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_007_TgMS6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid7", "pass7", "fn7", "ad7", "email7", "cc7", new BigDecimal(100));
    Assertions.assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_009_uoBI8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid9", "pass9", "fn9", "ad9", "email9", "cc9", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_010_CQeu9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid10", "pass10", "fn10", "ad10", "email10", "cc10", new BigDecimal(100));
    Assertions.assertNull(account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_011_DwoQ10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid11", "pass11", "fn11", "ad11", "email11", "cc11", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume1_MttQ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = null;
    BigDecimal changeFactor = null;
    double sharesTraded = 0;
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(null, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume2_HKsv1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "TESTSYMBOL";
    BigDecimal changeFactor = new BigDecimal(0);
    double sharesTraded = 0;
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(null, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume3_LTKX2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "TESTSYMBOL";
    BigDecimal changeFactor = new BigDecimal(1);
    double sharesTraded = 0;
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(null, result);
    result = new QuoteDataBean();
    assertEquals(result, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume4_WYAU3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "TESTSYMBOL";
    BigDecimal changeFactor = new BigDecimal(1);
    double sharesTraded = 0;
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(null, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume9_xmyz8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "TESTSYMBOL";
    BigDecimal changeFactor = new BigDecimal(1);
    double sharesTraded = 0;
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(new BigDecimal(0), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lFEN0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(100.00));
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lFEN0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lFEN0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(100.00));
    assertNotNull(result, "The result should not be null");
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_KZqs1_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(0.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(0.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_KZqs1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(0.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(0.00));
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_KZqs1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(0.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(0.00));
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNegativePrice_WjGe2_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(-100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(-100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNegativePrice_WjGe2_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(-100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(-100.00));
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNegativePrice_WjGe2_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(-100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(-100.00));
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_QApf3_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", null, new BigDecimal(100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_QApf3_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", null, new BigDecimal(100.00));
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_QApf3_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", null, new BigDecimal(100.00));
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithEmptyCompanyName_tipt4_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithEmptyCompanyName_tipt4_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithEmptyCompanyName_tipt4_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_AXmO5_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol(null);
    QuoteDataBean result = tradeSLSBBean.createQuote(null, "testCompany", new BigDecimal(100.00));
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_AXmO5_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol(null);
    QuoteDataBean result = tradeSLSBBean.createQuote(null, "testCompany", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_AXmO5_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol(null);
    QuoteDataBean result = tradeSLSBBean.createQuote(null, "testCompany", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_QiUJ0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getUserID(), accountProfileDataBean1.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_QiUJ0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    Assertions.assertEquals(accountProfileDataBean.getPassword(), accountProfileDataBean1.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_QiUJ0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    Assertions.assertNotNull(accountProfileDataBean1);
    Assertions.assertEquals(accountProfileDataBean.getAddress(), accountProfileDataBean1.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_QiUJ0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getEmail(), accountProfileDataBean1.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_QiUJ0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getFullName(), accountProfileDataBean1.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_QiUJ0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getCreditCard(), accountProfileDataBean1.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile1_aFFB1_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getPassword(), accountProfileDataBean1.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile1_aFFB1_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getAddress(), accountProfileDataBean1.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile1_aFFB1_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    Assertions.assertNotNull(accountProfileDataBean1);
    Assertions.assertEquals(accountProfileDataBean.getEmail(), accountProfileDataBean1.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile1_aFFB1_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    Assertions.assertNotNull(accountProfileDataBean1);
    Assertions.assertEquals(accountProfileDataBean.getFullName(), accountProfileDataBean1.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile2_Hloa2_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    Assertions.assertNotNull(accountProfileDataBean1, "The account profile data bean should not be null");
    Assertions.assertEquals(accountProfileDataBean.getCreditCard(), accountProfileDataBean1.getCreditCard(), "The credit card numbers should be equal");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_1() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getPrice(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_2() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getHolding(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_3() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getQuantity(), 0.0, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_4() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getOrderFee(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_5() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getQuote(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_6() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getOrderStatus(), "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_7() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getSymbol(), "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_8() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getOrderID(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_9() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getOpenDate(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_10() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getCompletionDate(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_11() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getOrderType(), "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0_12() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getAccount(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_001_rIsP0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNull(order);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_002_qfEj1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals(order.getOrderStatus(), "cancelled");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_003_JAUC2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_004_dhXL3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "3";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_005_YHay4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_006_nAhn5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals(order.getQuantity(), 0.0, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_009_PQOj8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals(new java.sql.Timestamp(0), order.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_010_UaFa9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNull(order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_007_tAuh6_uWNz0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void createOrderTest1_wkcU0_jMrH0() {
    TradeSLSBBean trade = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 10.0;
    OrderDataBean order = trade.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(order.getOrderFee().compareTo(TradeConfig.getOrderFee(orderType)), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_1() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getPrice(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_2() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getHolding(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_3() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getQuantity(), 0.0, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_5() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getQuote(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_6() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getOrderStatus(), "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_7() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getSymbol(), symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_8() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getOrderID(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_9() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getOpenDate(), new java.util.Date(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_10() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    OrderDataBean order2 = new OrderDataBean();
    order2.setOrderID(0);
    assertEquals(order, order2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_11() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getOrderType(), "BUY");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_12() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getAccount(), account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNulluserID_KEuE1_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = null;
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithEmptyuserID_fvdt2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getAccountDataTest1_LdUo0_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.getAccountData("uid1");
    assertEquals(account.getProfileID(), "uid1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getAccountDataTest2_puKf1_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.getAccountData("uid2");
    assertEquals(account.getProfileID(), "uid2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_KFRT0_fid2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(1, true);
    assertNotNull(future);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout4_rUTA3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.logout("4");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout5_mUwP4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.logout("5");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserExistsPasswordCorrectBalanceLessThanZero_xUXb4_fid2() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) < 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserExistsPasswordCorrectBalanceGreaterThanZeroLastLoginNotNull_TkFG6_2_fid2() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder3_GwqI2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 54321;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder6_ZkGQ5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 11111;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder7_uavE6_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 22222;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder8_FVLk7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 22222;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder10_Gftc9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 33333;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder12_XkmR11_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 44444;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_005_WyUu4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid5", "pass5", "fn5", "ad5", "email5", "cc5", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_007_TgMS6_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid7", "pass7", "fn7", "ad7", "email7", "cc7", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_008_VAfn7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid8", "pass8", "fn8", "ad8", "email8", "cc8", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_register_010_CQeu9_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = tradeSLSBBean.register("uid10", "pass10", "fn10", "ad10", "email10", "cc10", new BigDecimal(100));
    Assertions.assertEquals(null, account);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lFEN0_1_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lFEN0_3_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_QApf3_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", null, new BigDecimal(100.00));
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_AXmO5_1_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol(null);
    QuoteDataBean result = tradeSLSBBean.createQuote(null, "testCompany", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_004_dhXL3_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertNotNull(order.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_009_PQOj8_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals(order.getOpenDate(), new java.sql.Timestamp(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_010_UaFa9_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals(order.getCompletionDate(), new java.sql.Timestamp(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_007_tAuh6_uWNz0_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_4() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getOrderFee(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_7_fid2() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getSymbol(), "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_8_fid2() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getOrderID(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_9_fid2() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getOpenDate(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_10_fid2() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getCompletionDate(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy2_LyIn1_SbWx0_11_fid2() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = profile.getAccount();
    assertEquals(order.getOrderType(), "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUserExistsPasswordCorrectBalanceGreaterThanZeroLastLoginNotNull_TkFG6() throws javax.transaction.RollbackException {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
    Assertions.assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) > 0);
    Assertions.assertNotNull(accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_lFEN0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithZeroPrice_KZqs1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(0.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(0.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNegativePrice_WjGe2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(-100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "testCompany", new BigDecimal(-100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullCompanyName_QApf3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName(null);
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", null, new BigDecimal(100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithEmptyCompanyName_tipt4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol("testSymbol");
    QuoteDataBean result = tradeSLSBBean.createQuote("testSymbol", "", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteWithNullSymbol_AXmO5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("testCompany");
    quoteDataBean.setPrice(new BigDecimal(100.00));
    quoteDataBean.setSymbol(null);
    QuoteDataBean result = tradeSLSBBean.createQuote(null, "testCompany", new BigDecimal(100.00));
    assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    assertEquals(quoteDataBean.getPrice(), result.getPrice());
    assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_QiUJ0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    accountProfileDataBean.setUserID("1");
    accountProfileDataBean.setPassword("1234");
    accountProfileDataBean.setAddress("1234");
    accountProfileDataBean.setEmail("1234");
    accountProfileDataBean.setFullName("1234");
    accountProfileDataBean.setCreditCard("1234");
    AccountProfileDataBean accountProfileDataBean1 = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    assertEquals(accountProfileDataBean.getUserID(), accountProfileDataBean1.getUserID());
    assertEquals(accountProfileDataBean.getPassword(), accountProfileDataBean1.getPassword());
    assertEquals(accountProfileDataBean.getAddress(), accountProfileDataBean1.getAddress());
    assertEquals(accountProfileDataBean.getEmail(), accountProfileDataBean1.getEmail());
    assertEquals(accountProfileDataBean.getFullName(), accountProfileDataBean1.getFullName());
    assertEquals(accountProfileDataBean.getCreditCard(), accountProfileDataBean1.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy1_PtsH0() {
    TradeSLSBBean trade = new TradeSLSBBean();
    String userID = "";
    String symbol = "";
    double quantity = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = trade.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(order.getPrice(), null);
    assertEquals(order.getHolding(), null);
    assertEquals(order.getQuantity(), 0.0, 0.0);
    assertEquals(order.getOrderFee(), null);
    assertEquals(order.getQuote(), null);
    assertEquals(order.getOrderStatus(), "");
    assertEquals(order.getSymbol(), "");
    assertEquals(order.getOrderID(), null);
    assertEquals(order.getOpenDate(), null);
    assertEquals(order.getCompletionDate(), null);
    assertEquals(order.getOrderType(), "");
    assertEquals(order.getAccount(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_011_JXlj10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "";
    Integer holdingID = 0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    Assertions.assertEquals(order.getOrderType(), "sell");
  }
}