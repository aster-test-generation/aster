/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedThread_Test_Failing {
  private static int hitCount;
  private static String initTime;
  PingManagedThread pingmanagedthread;
  ServletConfig servletconfig;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;
  HttpServlet httpservlet;
  private ManagedThreadFactory managedThreadFactory;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservlet = mock(HttpServlet.class);
    pingmanagedthread = new PingManagedThread();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingmanagedthread.doPost(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetServletInfo_EEhu0() {
    PingManagedThread managedThread = new PingManagedThread();
    String result = managedThread.getServletInfo();
    assertEquals("Tests a ManagedThread asynchronous servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_yKkZ0() throws ServletException, IOException {
    PingManagedThread cut = new PingManagedThread();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    cut.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullRequest_iUym1() throws ServletException, IOException {
    PingManagedThread cut = new PingManagedThread();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    cut.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullResponse_efbf2() throws ServletException, IOException {
    PingManagedThread cut = new PingManagedThread();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = null;
    cut.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullRequestAndResponse_PImD3() throws ServletException, IOException {
    PingManagedThread cut = new PingManagedThread();
    HttpServletRequest req = null;
    HttpServletResponse res = null;
    cut.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_NullConfig_Ykyw1() {
    try {
      PingManagedThread cut = new PingManagedThread();
      cut.init(null);
      fail("Expected ServletException");
    } catch (ServletException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullRequest_iUym1_fid1() throws ServletException, IOException {
    PingManagedThread cut = new PingManagedThread();
    HttpServletRequest req = null;
    HttpServletResponse res = mock(HttpServletResponse.class);
    cut.doPost(req, res);
    verify(res, times(1)).setStatus(500);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullResponse_efbf2_fid1() throws ServletException, IOException {
    PingManagedThread cut = new PingManagedThread();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = null;
    cut.doPost(req, res);
    verify(req, atLeastOnce()).setAttribute(eq("message"), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_NullRequestAndResponse_PImD3_fid1() throws ServletException, IOException {
    PingManagedThread cut = new PingManagedThread();
    HttpServletRequest req = null;
    HttpServletResponse res = null;
    cut.doPost(req, res);
    // Add code to fix the assertion and regenerate the fixed test case
}
}