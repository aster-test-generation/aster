/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Passing {
  private TradeServices tradeServices;
  @InjectMocks
  private TradeServletAction tradeServletAction;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHome_BZqe0() throws Exception {
    TradeServletAction action = new TradeServletAction();
    action.doHome(null, null, null, "testUser", "testResults");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes_RoUC0() throws Exception {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = new MockServletContext();
    HttpServletRequest req = new MockHttpServletRequest();
    HttpServletResponse resp = new MockHttpServletResponse();
    String userID = "testUser";
    String symbols = "testSymbol";
    action.doQuotes(ctx, req, resp, userID, symbols);
    Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
    assertNotNull(quoteDataBeans);
    assertEquals(1, quoteDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesWithEmptySymbols_LhlA1() throws Exception {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = new MockServletContext();
    HttpServletRequest req = new MockHttpServletRequest();
    HttpServletResponse resp = new MockHttpServletResponse();
    String userID = "testUser";
    String symbols = "";
    action.doQuotes(ctx, req, resp, userID, symbols);
    Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
    assertNotNull(quoteDataBeans);
    assertEquals(0, quoteDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoMarketSummary_bCeM0() throws Exception {
    TradeServletAction action = new TradeServletAction();
    action.doMarketSummary(new MockServletContext(), new MockHttpServletRequest(), new MockHttpServletResponse(), "testUser");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoMarketSummaryWithNullUserID_iuQp1() throws Exception {
    TradeServletAction action = new TradeServletAction();
    action.doMarketSummary(new MockServletContext(), new MockHttpServletRequest(), new MockHttpServletResponse(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoMarketSummaryWithEmptyUserID_chXw2() throws Exception {
    TradeServletAction action = new TradeServletAction();
    action.doMarketSummary(new MockServletContext(), new MockHttpServletRequest(), new MockHttpServletResponse(), "");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoMarketSummaryWithUserIDLengthExceed_IPHr3() throws Exception {
    TradeServletAction action = new TradeServletAction();
    action.doMarketSummary(new MockServletContext(), new MockHttpServletRequest(), new MockHttpServletResponse(), "testUser12345678901234567890");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void doPortfolioTest1_Schu0() {
    TradeServletAction action = new TradeServletAction();
    ServletContext context = mock(ServletContext.class);
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    String userId = "testUser";
    String results = "testResults";
    try {
      action.doPortfolio(context, request, response, userId, results);
      verify(request, times(1)).setAttribute("results", results);
      verify(request, times(1)).setAttribute("holdingDataBeans", null);
      verify(request, times(1)).setAttribute("quoteDataBeans", null);
      verify(context, times(1)).getRequestDispatcher(TradeConfig.getPage(TradeConfig.PORTFOLIO_PAGE));
    } catch (Exception e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes_RoUC0_1() throws Exception {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = new MockServletContext();
    HttpServletRequest req = new MockHttpServletRequest();
    HttpServletResponse resp = new MockHttpServletResponse();
    String userID = "testUser";
    String symbols = "testSymbol";
    action.doQuotes(ctx, req, resp, userID, symbols);
    Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
    assertNotNull(quoteDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes_RoUC0_2() throws Exception {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = new MockServletContext();
    HttpServletRequest req = new MockHttpServletRequest();
    HttpServletResponse resp = new MockHttpServletResponse();
    String userID = "testUser";
    String symbols = "testSymbol";
    action.doQuotes(ctx, req, resp, userID, symbols);
    Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
    assertEquals(1, quoteDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesWithEmptySymbols_LhlA1_1() throws Exception {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = new MockServletContext();
    HttpServletRequest req = new MockHttpServletRequest();
    HttpServletResponse resp = new MockHttpServletResponse();
    String userID = "testUser";
    String symbols = "";
    action.doQuotes(ctx, req, resp, userID, symbols);
    Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
    assertNotNull(quoteDataBeans);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesWithEmptySymbols_LhlA1_2() throws Exception {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = new MockServletContext();
    HttpServletRequest req = new MockHttpServletRequest();
    HttpServletResponse resp = new MockHttpServletResponse();
    String userID = "testUser";
    String symbols = "";
    action.doQuotes(ctx, req, resp, userID, symbols);
    Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
    assertEquals(0, quoteDataBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginWithInvalidCredentials_CYnC2_uodU0() throws ServletException {
    TradeServletAction action = new TradeServletAction();
    Assertions.assertThrows(IOException.class, () -> {
      action.doLogin(null, null, null, "invalidUser", "invalidPassword");
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegister_003_WQkm2_TjxS0() throws Exception {
    TradeServletAction target = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeServices tAction = mock(TradeServices.class);
    when(tAction.register(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any(BigDecimal.class))).thenThrow(new Exception());
    target.doRegister(ctx, req, resp, "userID3", "passwd3", "cpasswd3", "fullname3", "ccn3", "openBalanceString3", "email3", "address3");
    verify(tAction, times(1)).register(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any(BigDecimal.class));
  }
}