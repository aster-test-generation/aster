/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Failing {
  TradeAppServlet tradeappservlet;
  HttpServlet httpservlet;
  ServletConfig servletconfig;
  HttpServletResponse httpservletresponse;
  HttpServletRequest httpservletrequest;
  HttpSession httpsession;
  ServletContext servletcontext;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_CHSI0() {
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    String result = tradeAppServlet.getServletInfo();
    assertEquals("TradeAppServlet provides the standard web interface to Trade", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_EOuQ0() {
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    ServletConfig config = new MockServletConfig();
    try {
      tradeAppServlet.init(config);
    } catch (ServletException e) {
      fail("Error initializing TradeAppServlet");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithException_lQVi1() {
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    ServletConfig config = new MockServletConfig();
    try {
      tradeAppServlet.init(config);
      fail("Expected Exception not thrown");
    } catch (ServletException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_XOTu0_hjRb0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
  }
}