/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_LScx0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "12345");
    Date lastLogin = new Date();
    accountDataBean.setLastLogin(lastLogin);
    assertEquals(lastLogin, accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_IeXx0() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(50.0), "profile1");
    assertEquals(3, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCountWithNoParameters_pDwM1() {
    AccountDataBean account = new AccountDataBean();
    assertEquals(0, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode1_DAnm0() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profile1");
    assertEquals(1, account.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode2_ZDEv1() {
    AccountDataBean account = new AccountDataBean(2, 3, 4, new Date(), new Date(), new BigDecimal(150), new BigDecimal(75), "profile2");
    assertEquals(2, account.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldings_arXF0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    Collection<HoldingDataBean> holdings = new ArrayList<>();
    accountDataBean.setHoldings(holdings);
    assertEquals(holdings, accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsWithNull_cRMH1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
    accountDataBean.setHoldings(null);
    assertEquals(null, accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_eKTO0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(5.0), new BigDecimal(10.0), "profile1");
    accountDataBean.setLoginCount(10);
    assertEquals(10, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithZeroValue_WJdS1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(5.0), new BigDecimal(10.0), "profile1");
    accountDataBean.setLoginCount(0);
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCountWithNegativeValue_GpXV2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(5.0), new BigDecimal(10.0), "profile1");
    accountDataBean.setLoginCount(-10);
    assertEquals(-10, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_iBmZ0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(50.0), "profileID");
    accountDataBean.setLogoutCount(10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCountWithZeroCount_eUGc1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(50.0), "profileID");
    accountDataBean.setLogoutCount(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCountWithNegativeCount_pqDE2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(50.0), "profileID");
    accountDataBean.setLogoutCount(-1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_syOo0() {
    AccountDataBean account = new AccountDataBean(new Integer(1), 2, 3, new Date(4), new Date(5), new BigDecimal(6), new BigDecimal(7), "8");
    Collection<HoldingDataBean> holdings = account.getHoldings();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsNull_Ssns1() {
    AccountDataBean account = new AccountDataBean(new Integer(1), 2, 3, new Date(4), new Date(5), new BigDecimal(6), new BigDecimal(7), "8");
    account.setHoldings(null);
    Collection<HoldingDataBean> holdings = account.getHoldings();
    Assertions.assertNull(holdings);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_PvyG0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "12345");
    accountDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithZeroValues_nspg1() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, 0, new Date(0), new Date(0), new BigDecimal(0.00), new BigDecimal(0.00), "");
    accountDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNegativeValues_GVUP2() {
    AccountDataBean accountDataBean = new AccountDataBean(-1, -1, -1, new Date(-1), new Date(-1), new BigDecimal(-100.00), new BigDecimal(-50.00), "-12345");
    accountDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_yNJw0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
    assertEquals(10, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCountWithZeroLoginCount_awVz1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, 5, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
    assertEquals(0, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_iujl0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 100, 100, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID");
    Integer expected = 1;
    Integer actual = accountDataBean.getAccountID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountIDWithNull_CqFC1() {
    AccountDataBean accountDataBean = new AccountDataBean(null, 100, 100, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID");
    Integer expected = null;
    Integer actual = accountDataBean.getAccountID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_OQbV0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "profile123");
    assertEquals("profile123", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileIDWithNullProfileID_xNyg1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), null);
    assertEquals(null, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_vxNR0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "12345");
    account.setProfileID("67890");
    assertEquals("67890", account.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_Uaye0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "1234");
    accountDataBean.setAccountID(1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountIDWithNull_LYWv1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "1234");
    accountDataBean.setAccountID(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountIDWithNegativeValue_PgMG2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "1234");
    accountDataBean.setAccountID(-1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullPassword_djsA0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    try {
      account.login(null);
      fail("Should have thrown an exception");
    } catch (EJBException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginIncorrectPassword_fiSk1() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    try {
      account.login(" incorrect password");
      fail("Should have thrown an exception");
    } catch (EJBException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginNullProfile_jUgM3() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), null);
    try {
      account.login("1");
      fail("Should have thrown an exception");
    } catch (EJBException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithNullOrders_SrPB1() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "profileID");
    account.setOrders(null);
    Collection<OrderDataBean> orders = account.getOrders();
    assertNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_BdbG0() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(50.0), new BigDecimal(50.0), "profile1");
    Date lastLogin = account.getLastLogin();
    assertNotNull(lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLoginNull_xwJG1() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, null, new Date(), new BigDecimal(50.0), new BigDecimal(50.0), "profile1");
    Date lastLogin = account.getLastLogin();
    assertNull(lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLoginCoverage_pALh2() {
    AccountDataBean account = new AccountDataBean();
    Date lastLogin = account.getLastLogin();
    account.setLastLogin(lastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_ldzX0() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    account.setProfile(new AccountProfileDataBean());
    AccountProfileDataBean profile = account.getProfile();
    assertNotNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileNull_ayhz1() {
    AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    account.setProfile(null);
    AccountProfileDataBean profile = account.getProfile();
    assertNull(profile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_UFkd0() {
    AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile123");
    assertEquals(new BigDecimal(50.00), account.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setBalanceTest1_wxIt0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "1");
    accountDataBean.setBalance(new BigDecimal(200.00));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setBalanceTest2_gGuf1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 0, 0, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "1");
    accountDataBean.setBalance(new BigDecimal(200.00));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfile_SLxj0() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "12345");
    AccountProfileDataBean profile = new AccountProfileDataBean("user1", "pass1", "name1", "address1", "email1", "cc1");
    account.setProfile(profile);
    assertEquals(profile, account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileNull_wnhX1() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "12345");
    account.setProfile(null);
    assertNull(account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithNullArgument_OPad2() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "12345");
    AccountProfileDataBean profile = new AccountProfileDataBean("user1", "pass1", "name1", "address1", "email1", "cc1");
    account.setProfile(null);
    assertNotEquals(profile, account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileWithRandomInstances_zTBl3() {
    AccountDataBean account = AccountDataBean.getRandomInstance();
    AccountProfileDataBean profile = AccountProfileDataBean.getRandomInstance();
    account.setProfile(profile);
    assertEquals(profile, account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_OTth0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(100.00), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalanceWithZeroBalance_XeCn1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(0.00), new BigDecimal(50.00), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(0.00), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalanceWithNegativeBalance_jWXj2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(-100.00), new BigDecimal(50.00), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(new BigDecimal(-100.00), balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullBalance_ThXo3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), null, new BigDecimal(50.00), "profileID");
    BigDecimal balance = accountDataBean.getBalance();
    assertEquals(null, balance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_afKf0() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
    Date creationDate = new Date();
    account.setCreationDate(creationDate);
    assertEquals(creationDate, account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateNull_MzlH1() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), null, new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
    Date creationDate = null;
    account.setCreationDate(creationDate);
    assertEquals(creationDate, account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateMaxDate_DNPb2() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(Long.MAX_VALUE), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
    Date creationDate = new Date(Long.MAX_VALUE);
    account.setCreationDate(creationDate);
    assertEquals(creationDate, account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateMinDate_VoVb3() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(Long.MIN_VALUE), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
    Date creationDate = new Date(Long.MIN_VALUE);
    account.setCreationDate(creationDate);
    assertEquals(creationDate, account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDateZero_igKV4() {
    AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(0), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
    Date creationDate = new Date(0);
    account.setCreationDate(creationDate);
    assertEquals(creationDate, account.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_zUSw1() {
    AccountDataBean actual = new AccountDataBean();
    int expected = actual.hashCode();
    assertEquals(expected, actual.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_deXT2() {
    AccountDataBean actual = new AccountDataBean();
    Date expected = actual.getCreationDate();
    assertEquals(expected, actual.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_yLrh3() {
    AccountDataBean actual = new AccountDataBean();
    int expected = actual.getLogoutCount();
    assertEquals(expected, actual.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_EdYI4() {
    AccountDataBean actual = new AccountDataBean();
    Collection<HoldingDataBean> expected = actual.getHoldings();
    assertEquals(expected, actual.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_vODD5() {
    AccountDataBean actual = new AccountDataBean();
    int expected = actual.getLoginCount();
    assertEquals(expected, actual.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_rPsc6() {
    AccountDataBean actual = new AccountDataBean();
    Integer expected = actual.getAccountID();
    assertEquals(expected, actual.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_Prif7() {
    AccountDataBean actual = new AccountDataBean();
    String expected = actual.getProfileID();
    assertEquals(expected, actual.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_tzVd8() {
    AccountDataBean actual = new AccountDataBean();
    Collection<OrderDataBean> expected = actual.getOrders();
    assertEquals(expected, actual.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_MeNO9() {
    AccountDataBean actual = new AccountDataBean();
    Date expected = actual.getLastLogin();
    assertEquals(expected, actual.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_frPi10() {
    AccountDataBean actual = new AccountDataBean();
    BigDecimal expected = actual.getBalance();
    assertEquals(expected, actual.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfile_SbXi11() {
    AccountDataBean actual = new AccountDataBean();
    AccountProfileDataBean expected = actual.getProfile();
    assertEquals(expected, actual.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_Qfmy12() {
    AccountDataBean actual = new AccountDataBean();
    BigDecimal expected = actual.getOpenBalance();
    assertEquals(expected, actual.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_kDuD0() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    accountDataBean.logout();
    assertEquals(2, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout2_DpVi1() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    accountDataBean.logout();
    assertEquals(new BigDecimal(100.0), accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout4_IUQn3() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    accountDataBean.logout();
    assertEquals(1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout5_ksXt4() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    accountDataBean.logout();
    assertEquals(new BigDecimal(100.0), accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout6_fZjM5() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
    accountDataBean.logout();
    assertEquals("1", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintWithNullValues_YkAm3_ZSAG0() {
    AccountDataBean accountDataBean = new AccountDataBean(null, 0, 0, null, null, null, null, null);
    accountDataBean.setOrders(null);
    accountDataBean.print();
  }
}