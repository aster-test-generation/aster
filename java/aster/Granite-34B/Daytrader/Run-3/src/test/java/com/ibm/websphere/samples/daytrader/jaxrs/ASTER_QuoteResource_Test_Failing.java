/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.jaxrs;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteResource_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesGet_YCMd0() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesGet("symbol");
    List<QuoteDataBean> expected = new ArrayList<QuoteDataBean>();
    expected.add(new QuoteDataBean());
    expected.get(0).setSymbol("symbol");
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesGet3_CHDQ2() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesGet("symbol");
    List<QuoteDataBean> expected = new ArrayList<QuoteDataBean>();
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesPost_XrlC3() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesPost("symbols");
    List<QuoteDataBean> expected = new ArrayList<>();
    assertEquals(expected.get(0), actual.get(0));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesPost_ZdPV4() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesPost("symbols");
    List<QuoteDataBean> expected = new ArrayList<>();
    assertEquals(expected.get(0).getSymbol(), actual.get(0).getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesPost_QShP5() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesPost("symbols");
    List<QuoteDataBean> expected = new ArrayList<>();
    assertEquals(expected.get(0).getCompanyName(), actual.get(0).getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesPost_qBuv6() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesPost("symbols");
    List<QuoteDataBean> expected = new ArrayList<>();
    assertEquals(expected.get(0).getPrice(), actual.get(0).getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesPost_wxhH7() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesPost("symbols");
    List<QuoteDataBean> expected = new ArrayList<>();
    assertEquals(expected.get(0).getOpen(), actual.get(0).getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesPost_TIQZ8() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesPost("symbols");
    List<QuoteDataBean> expected = new ArrayList<>();
    assertEquals(expected.get(0).getLow(), actual.get(0).getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesGet_YCMd0_fid1() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesGet("symbol");
    List<QuoteDataBean> expected = new ArrayList<QuoteDataBean>();
    expected.add(new QuoteDataBean());
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesGet2_PuNy1_fid1() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesGet("symbol");
    List<QuoteDataBean> expected = new ArrayList<QuoteDataBean>();
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesGet3_CHDQ2_fid1() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesGet("symbol");
    List<QuoteDataBean> expected = new ArrayList<QuoteDataBean>();
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQuotesGet5_cWWG4_fid1() {
    QuoteResource quoteResource = new QuoteResource();
    List<QuoteDataBean> actual = quoteResource.quotesGet("symbol");
    List<QuoteDataBean> expected = new ArrayList<QuoteDataBean>();
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    expected.add(new QuoteDataBean());
    assertEquals(expected, actual);
  }
}