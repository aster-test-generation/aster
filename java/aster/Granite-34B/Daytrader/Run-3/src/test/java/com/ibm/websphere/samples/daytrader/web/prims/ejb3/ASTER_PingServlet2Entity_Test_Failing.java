/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Entity_Test_Failing {
  private static int hitCount;
  private static String initTime;
  PingServlet2Entity pingservlet2entity;
  HttpServlet httpservlet;
  HttpServletResponse httpservletresponse;
  private EntityManager em;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_1() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2entity = new PingServlet2Entity();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("key")).thenReturn("value");
    pingservlet2entity.init(config);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit_2() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2entity = new PingServlet2Entity();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("key")).thenReturn("value");
    pingservlet2entity.init(config);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingservlet2entity = new PingServlet2Entity();
    HttpServletRequest request = mock(HttpServletRequest.class);
    pingservlet2entity.doPost(request, httpservletresponse);
    verify(httpservletresponse, times(1)).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_XLgV0() throws Exception {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    servlet.doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequestAndResponse_iMdM4() throws ServletException, IOException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest request = null;
    HttpServletResponse response = null;
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo2_tpAd1() {
    PingServlet2Entity servlet = new PingServlet2Entity();
    String result = servlet.getServletInfo();
    assertEquals("web primitive, tests Servlet to Entity EJB path", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo14_cnIv13() {
    PingServlet2Entity servlet = null;
    String result = servlet.getServletInfo();
    assertEquals("web primitive, tests Servlet to Entity EJB path", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequest_svCv2_NRnP0() throws ServletException, IOException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest request = null;
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullResponse_BPMM3_lGUj0() throws ServletException, IOException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = null;
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_eJrN0_lGMw0() throws ServletException, IOException {
    PingServlet2Entity servlet = new PingServlet2Entity();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservlet2entity = new PingServlet2Entity();
    ServletConfig config = mock(ServletConfig.class);
    when(config.getInitParameter("key")).thenReturn("value");
    pingservlet2entity.init(config);
    assertEquals(0, hitCount);
    assertNotNull(initTime);
  }
}