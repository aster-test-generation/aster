/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession1_Test_Failing {
  private static String initTime;
  private static int hitCount;
  private static int count;
  PingSession1 pingsession1;
  HttpServlet httpservlet;
  HttpServletRequest httpservletrequest;
  HttpSession httpsession;
  HttpServletResponse httpservletresponse;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpsession = mock(HttpSession.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingsession1 = new PingSession1();
    when(httpservletrequest.getSession(any())).thenReturn(httpsession);
    pingsession1.doPost(httpservletrequest, httpservletresponse);
    verify(httpservletresponse, times(1)).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_Cnwm0() {
    PingSession1 pingSession1 = new PingSession1();
    String expected = "HTTP Session Key: Tests management of a read only unique id";
    assertEquals(expected, pingSession1.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_coverage_ZtcQ1() {
    PingSession1 pingSession1 = new PingSession1();
    String result = pingSession1.getServletInfo();
    assertEquals(true, result.startsWith("HTTP Session Key:"));
    assertEquals(true, result.endsWith("Tests management of a read only unique id"));
    assertEquals(true, result.length() > 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequestAndResponse_UncW3() throws ServletException, IOException {
    PingSession1 pingSession1 = new PingSession1();
    HttpServletRequest request = null;
    HttpServletResponse response = null;
    pingSession1.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_coverage_ZtcQ1_1() {
    PingSession1 pingSession1 = new PingSession1();
    String result = pingSession1.getServletInfo();
    assertEquals(true, result.startsWith("HTTP Session Key:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_coverage_ZtcQ1_2() {
    PingSession1 pingSession1 = new PingSession1();
    String result = pingSession1.getServletInfo();
    assertEquals(true, result.endsWith("Tests management of a read only unique id"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getServletInfo_coverage_ZtcQ1_3() {
    PingSession1 pingSession1 = new PingSession1();
    String result = pingSession1.getServletInfo();
    assertEquals(true, result.length() > 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullRequest_AYSV1_prEk0() throws ServletException, IOException {
    PingSession1 pingSession1 = new PingSession1();
    HttpServletRequest request = null;
    HttpServletResponse response = mock(HttpServletResponse.class);
    pingSession1.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostWithNullResponse_yKiP2_quJc0() throws ServletException, IOException {
    PingSession1 pingSession1 = new PingSession1();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = null;
    pingSession1.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost_fid2() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpsession = mock(HttpSession.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    pingsession1 = new PingSession1();
    when(httpservletrequest.getSession(any())).thenReturn(httpsession);
    doNothing().when(httpservletresponse).getWriter();
    pingsession1.doPost(httpservletrequest, httpservletresponse);
    verify(httpservletresponse, times(1)).getWriter();
  }
}