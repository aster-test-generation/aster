/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.naming.InitialContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedConstruction;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2Entity_Test_Failing {
  private static int hitCount;
  private static String initTime;
  private TradeServices tradeSLSBLocal;
  PingServlet2Session2Entity pingservlet2session2entity;
  HttpServlet httpservlet;
  InitialContext initialcontext;
  MockedConstruction<InitialContext> mockedInitialContext;
  HttpServletResponse httpservletresponse;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    mockedInitialContext = mockConstruction(InitialContext.class);
    httpservletresponse = mock(HttpServletResponse.class);
    httpservlet = mock(HttpServlet.class);
    initialcontext = mock(InitialContext.class);
    pingservlet2session2entity = new PingServlet2Session2Entity();
    HttpServletRequest request = mock(HttpServletRequest.class);
    pingservlet2session2entity.doPost(request, httpservletresponse);
    Mockito.verify(httpservletresponse).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_PTHt0() throws ServletException {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    ServletConfig config = new MockServletConfig();
    servlet.init(config);
    assertNotNull(servlet);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_nLHh0() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String result = servlet.getServletInfo();
    assertEquals("web primitive, tests Servlet to Session to Entity EJB path", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_GylC1() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String result = servlet.getServletInfo();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_IcwH2() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String result = servlet.getServletInfo();
    assertNotEquals("", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_IHyw3() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String result = servlet.getServletInfo();
    assertTrue(result.length() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_fNJh4() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String result = servlet.getServletInfo();
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getServletInfoTest_UrsZ5() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String result = servlet.getServletInfo();
    assertEquals("web primitive, tests Servlet to Session to Entity EJB path", result);
    assertNotNull(result);
    assertNotEquals("", result);
    assertTrue(result.length() > 0);
    assertFalse(result.isEmpty());
  }
}