/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DirectSLSBBean_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_OLqq0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    double actual = directSLSBBean.investmentReturn(0.0, 0.0);
    assertEquals(0.0, actual, 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetAllQuotes2_oZrV1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    directSLSBBean.getAllQuotes();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetInSession_GzPf0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_lEjp4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOrdersTest1_tMUN0() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    directSLSB.setInSession(true);
    directSLSB.getOrders("uid123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOrdersTest2_wPJq1() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    directSLSB.setInSession(false);
    directSLSB.getOrders("uid123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogin_MHAr0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    try {
      AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
      assertNotNull(accountDataBean);
      assertEquals(userID, accountDataBean.getProfileID());
    } catch (Exception e) {
      fail("Exception is not expected");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginInSession_mhOx1() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPassword";
    try {
      directSLSBBean.setInSession(true);
      AccountDataBean accountDataBean = directSLSBBean.login(userID, password);
      assertNotNull(accountDataBean);
      assertEquals(userID, accountDataBean.getProfileID());
    } catch (Exception e) {
      fail("Exception is not expected");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_RiZO0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.cancelOrder(123, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder2_zpwp1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    directSLSBBean.cancelOrder(123, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder3_SuNJ2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.cancelOrder(456, false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_BIZs0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    directSLSBBean.updateAccountProfile(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile2_cEev1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    directSLSBBean.updateAccountProfile(accountProfileDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterSetInSession_EzlB0() throws java.lang.Exception {
    DirectSLSBBean direct = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    try {
      account = direct.register("uid1", "pass1", " fullname1", "address1",
          "email1", "cc1", new BigDecimal(100.00));
    } catch (Exception e) {
      fail(e.getMessage());
    }
    assertTrue(account.getCreationDate() != null);
    assertEquals(account.getOpenBalance(), new BigDecimal(100.00));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jGFW1() throws java.lang.Exception {
    DirectSLSBBean direct = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    try {
      account = direct.register("uid1", "pass1", "fullname1", "address1",
          "email1", "cc1", new BigDecimal(100.00));
    } catch (Exception e) {
      fail(e.getMessage());
    }
    assertEquals(account.getProfileID(), "uid1");
    assertEquals(account.getProfile().getFullName(), "fullname1");
    assertEquals(account.getProfile().getAddress(), "address1");
    assertEquals(account.getProfile().getEmail(), "email1");
    assertEquals(account.getProfile().getCreditCard(), "cc1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted1_dtaM0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.orderCompleted("userID", 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted2_BIAk1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.orderCompleted("userID", 2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted3_pGpl2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.orderCompleted("userID", 3);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void completeOrderAsyncTest1_PAgZ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.completeOrderAsync(1, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void completeOrderAsyncTest2_aQFc1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.completeOrderAsync(2, false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_WIrf0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.queueOrder(1, true);
    directSLSBBean.queueOrder(2, false);
    directSLSBBean.queueOrder(3, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderInSession_ZleI1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.queueOrder(1, true);
    directSLSBBean.queueOrder(2, false);
    directSLSBBean.queueOrder(3, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderInSession2Phase_RdbS2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.queueOrder(1, true);
    directSLSBBean.queueOrder(2, true);
    directSLSBBean.queueOrder(3, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_rfPB0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.logout("userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout2_hgWK1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    directSLSBBean.logout("userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout3_yUYK2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.logout(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest1_wPUX0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.getClosedOrders("userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getClosedOrdersTest2_BQRj1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    directSLSBBean.getClosedOrders("userID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getHoldingTest1_giXA0_1() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
    Assertions.assertEquals(true, holdingDataBean.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getHoldingTest1_giXA0_2() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
    Assertions.assertEquals(true, holdingDataBean.getQuoteID() != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getHoldingTest1_giXA0_3() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
    Assertions.assertEquals(true, holdingDataBean.getPurchasePrice().floatValue() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getHoldingTest1_giXA0_4() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
    Assertions.assertEquals(true, holdingDataBean.getPurchaseDate() != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getHoldingTest1_giXA0_5() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
    Assertions.assertEquals(true, holdingDataBean.getHoldingID() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void buyTest1_WooO0() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    when(directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(orderDataBean);
    assertEquals(1, directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt()).getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void buyTest2_cUGi1() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(2);
    when(directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(orderDataBean);
    assertEquals(2, directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt()).getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void buyTest3_dSLK2() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(3);
    when(directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(orderDataBean);
    assertEquals(3, directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt()).getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void buyTest4_odfe3() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(4);
    when(directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(orderDataBean);
    assertEquals(4, directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt()).getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder3_SuNJ2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.cancelOrder(456, false);
    // Replace the erroneous assertion
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_BIZs0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    directSLSBBean.updateAccountProfile(accountProfileDataBean);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile2_cEev1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    directSLSBBean.updateAccountProfile(accountProfileDataBean);
    // Add assertions here to check the expected behavior
    // For example:
    // assertEquals(expectedValue, actualValue);
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted1_dtaM0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.orderCompleted("userID", 1);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted3_pGpl2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    directSLSBBean.orderCompleted("userID", 3);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getHoldingTest1_giXA0_4_fid1() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
    Assertions.assertNotNull(holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void buyTest1_WooO0_fid1() throws java.lang.Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(1);
    when(directSLSBBean.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(orderDataBean);
    assertEquals(1, directSLSBBean.buy("anyString", "anyString", anyDouble(), anyInt()).getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getHoldingTest1_giXA0() throws Exception {
    DirectSLSBBean directSLSB = new DirectSLSBBean();
    Integer holdingID = new Integer(0);
    HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
    Assertions.assertEquals(true, holdingDataBean.getQuantity() > 0);
    Assertions.assertEquals(true, holdingDataBean.getQuoteID() != null);
    Assertions.assertEquals(true, holdingDataBean.getPurchasePrice().floatValue() > 0);
    Assertions.assertEquals(true, holdingDataBean.getPurchaseDate() != null);
    Assertions.assertEquals(true, holdingDataBean.getHoldingID() > 0);
  }
}