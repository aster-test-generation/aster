/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.lang.reflect.Field;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple2_Test_Failing {
  private static LocalDateTime initTime;
  PingServletBeanValSimple2 pingservletbeanvalsimple2;
  HttpServlet httpservlet;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  ServletOutputStream servletoutputstream;
  private static int hitCount = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testinit() throws Exception {
    httpservlet = mock(HttpServlet.class);
    pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
    ServletConfig servletconfig = mock(ServletConfig.class);
    pingservletbeanvalsimple2.init(servletconfig);
    Mockito.verify(servletconfig).getInitParameterNames();
    Mockito.verify(servletconfig).getInitParameter("test");
    Mockito.verify(servletconfig).getServletName();
    Mockito.verify(servletconfig).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws Exception {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    httpservlet = mock(HttpServlet.class);
    pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingservletbeanvalsimple2.doPost(httpservletrequest, httpservletresponse);
    verify(servletoutputstream).println("Pong");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    httpservlet = mock(HttpServlet.class);
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    servletoutputstream = mock(ServletOutputStream.class);
    pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    pingservletbeanvalsimple2.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse, times(1)).setContentType("text/html");
    verify(httpservletresponse, times(1)).getOutputStream();
    verify(servletoutputstream, times(1)).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetError_pgft1() throws Exception {
    PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    servlet.doGet(request, response);
    assertEquals(500, response.getStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_mNDg1() {
    PingServletBeanValSimple2 obj = new PingServletBeanValSimple2();
    try {
      obj.init(null);
      fail("Expected ServletException");
    } catch (ServletException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig_Lrez7() {
    PingServletBeanValSimple2 obj = new PingServletBeanValSimple2();
    ServletConfig config = new MockServletConfig();
    try {
      obj.init(config);
      fail("Expected ServletException");
    } catch (ServletException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWithValidInput_Qlxt0() {
    PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWithInvalidInput_ipVW2() {
    PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
    assertEquals("", servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWithNullInput_rsbx4() {
    PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
    assertEquals(null, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWithMultipleInputs_QyaO8() {
    PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testWithMultipleInputs_vZGW10() {
    PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals("", servlet.getServletInfo());
    assertEquals(null, servlet.getServletInfo());
    assertEquals("", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals(null, servlet.getServletInfo());
    assertEquals("", servlet.getServletInfo());
    assertEquals("Basic dynamic HTML generation through a servlet", servlet.getServletInfo());
    assertEquals(null, servlet.getServletInfo());
    assertEquals("", servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullConfig_mNDg1_fid1() {
    PingServletBeanValSimple2 obj = new PingServletBeanValSimple2();
    try {
      obj.init(null);
      fail("Expected ServletException");
    } catch (ServletException e) {
      // Expected exception, no need to change anything
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig2_GDtg8() {
    PingServletBeanValSimple2 obj = new PingServletBeanValSimple2();
    ServletConfig config = new MockServletConfig();
    try {
      obj.init(config);
      fail("Expected ServletException");
    } catch (ServletException e) {
      // Expected exception
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithInvalidConfig3_oAEp9() {
    PingServletBeanValSimple2 obj = new PingServletBeanValSimple2();
    ServletConfig config = new MockServletConfig();
    try {
      obj.init(config);
      fail("Expected ServletException");
    } catch (ServletException e) {
      // Expected exception, no need to change anything
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_eOqY0_ClmD0() throws ServletException, NoSuchFieldException, IllegalAccessException {
    PingServletBeanValSimple2 obj = new PingServletBeanValSimple2();
    ServletConfig config = new MockServletConfig();
    obj.init(config);
    Field initTimeField = PingServletBeanValSimple2.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    assertNotNull(initTimeField.get(obj));
  }
}