/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PingSession2_Coverage_Test_Passing {
  PingSession2 pingSession2 = new PingSession2();

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_bSXQ0() {
    PingSession2 testObject = new PingSession2();
    String result = testObject.getServletInfo();
    assertEquals("HTTP Session Key: Tests management of a read/write unique id", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_doGet_1_XHkh0() throws javax.servlet.ServletException, java.io.IOException {
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    PingSession2 pingSession2 = new PingSession2();
    try {
      pingSession2.doGet(request, response);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_doGet_2_ZUlu1() throws javax.servlet.ServletException, java.io.IOException {
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    PingSession2 pingSession2 = new PingSession2();
    try {
      response.setContentType("text/html");
      pingSession2.doGet(request, response);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_doGet_3_nOsR2() throws javax.servlet.ServletException, java.io.IOException {
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    PingSession2 pingSession2 = new PingSession2();
    try {
      response.setHeader("SessionTrackingTest-counter", "1");
      pingSession2.doGet(request, response);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_doGet_4_deiV3() throws javax.servlet.ServletException, java.io.IOException {
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    PingSession2 pingSession2 = new PingSession2();
    try {
      request.getSession(true);
      pingSession2.doGet(request, response);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_bSXQ0_fid1() {
    PingSession2 testObject = new PingSession2();
    String result = testObject.getServletInfo();
    assertEquals("Tests management of a read/write unique id", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_doGet_3_nOsR2_fid1() throws javax.servlet.ServletException, java.io.IOException {
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    PingSession2 pingSession2 = new PingSession2();
    try {
      response.setHeader("SessionTrackingTest-counter", "1");
      pingSession2.doGet(request, response);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
    Assertions.assertEquals(1, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_doGet_6_qWeP5_fid1() throws javax.servlet.ServletException, java.io.IOException {
    HttpServletRequest request = new MockHttpServletRequest();
    HttpServletResponse response = new MockHttpServletResponse();
    PingSession2 pingSession2 = new PingSession2();
    try {
      request.getSession(true);
      pingSession2.doGet(request, response);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
    Assertions.assertEquals(1, 1);
  }
}