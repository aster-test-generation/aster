/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
    TradeDirect tradedirect;
    Connection connection;
    DataSource datasource;
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
    private static Integer marketSummaryLock = new Integer(0);
    private static long nextMarketSummary = System.currentTimeMillis();
    PreparedStatement preparedstatement;
    ResultSet resultset;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    private boolean inSession = false;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private  UserTransaction txn;
    private ManagedExecutorService mes;
    private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static BigDecimal ZERO = new BigDecimal(0.0);
    private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_Pqzn0() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummary = trade.getMarketSummary();
        Assertions.assertNotNull(marketSummary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_PEsR1() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummary = trade.getMarketSummaryInternal();
        Assertions.assertNotNull(marketSummary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_NGzI0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_NGzI0_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertTrue(quotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_xHfV1_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        QuoteDataBean quote = new QuoteDataBean();
        quotes.add(quote);
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_xHfV1_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        QuoteDataBean quote = new QuoteDataBean();
        quotes.add(quote);
        assertTrue(quotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_xHfV1_3() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        QuoteDataBean quote = new QuoteDataBean();
        quotes.add(quote);
        assertEquals(1, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_ZlgS0() throws Exception {
        TradeDirect trade = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        Integer orderID = orderData.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = trade.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_XSra1() throws Exception {
        TradeDirect trade = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        Integer orderID = orderData.getOrderID();
        boolean twoPhase = false;
        OrderDataBean result = trade.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_1() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getOrderID(), orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_3() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getQuantity(), 1.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_4() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getOrderFee(), new BigDecimal(1.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_5() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getQuote().getSymbol(), "AAPL");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_6() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getOrderStatus(), "closed");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_7() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getSymbol(), "AAPL");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_8() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getOrderID(), new Integer(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_9() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getOpenDate(), new java.util.Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_10() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getCompletionDate(), new java.util.Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_11() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getOrderType(), "buy");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0_12() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getAccount().getProfileID(), "1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_PhWK1_2() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getPrice(), new BigDecimal(1.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder3_xCzm2() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(3);
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, false);
        Assertions.assertEquals(orderData.getOrderID(), orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_hTIh0_1() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData, trade.completeOrder(orderID, twoPhase));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_cEPU1_1() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData, trade.completeOrder(orderID, twoPhase));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_JOSV0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        String userID = "uid1";
        Collection<OrderDataBean> orders = trade.getOrders(userID);
        Assertions.assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_JOSV0_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        String userID = "uid1";
        Collection<OrderDataBean> orders = trade.getOrders(userID);
        Assertions.assertEquals(5, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_1() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertNotNull(quoteDataFromDB);
        assertEquals(quoteData.getSymbol(), quoteDataFromDB.getSymbol());
        assertEquals(quoteData.getCompanyName(), quoteDataFromDB.getCompanyName());
        assertEquals(quoteData.getPrice(), quoteDataFromDB.getPrice());
        assertEquals(quoteData.getOpen(), quoteDataFromDB.getOpen());
        assertEquals(quoteData.getLow(), quoteDataFromDB.getLow());
        assertEquals(quoteData.getHigh(), quoteDataFromDB.getHigh());
        assertEquals(quoteData.getVolume(), quoteDataFromDB.getVolume());
        assertEquals(quoteData.getChange(), quoteDataFromDB.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_2() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertNotNull(quoteDataFromDB);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_3() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getPrice(), quoteDataFromDB.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_4() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getOpen(), quoteDataFromDB.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_5() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getLow(), quoteDataFromDB.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_6() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getHigh(), quoteDataFromDB.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_7() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getChange(), quoteDataFromDB.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_WhMO2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 2;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_DpmJ0_1() {
        TradeDirect trade = new TradeDirect();
        String symbol = "TEST";
        QuoteDataBean quoteData = trade.pingTwoPhase(symbol);
        assertEquals("TEST", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_DpmJ0_2() {
        TradeDirect trade = new TradeDirect();
        String symbol = "TEST";
        QuoteDataBean quoteData = trade.pingTwoPhase(symbol);
        assertEquals(0, quoteData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_DpmJ0_3() {
        TradeDirect trade = new TradeDirect();
        String symbol = "TEST";
        QuoteDataBean quoteData = trade.pingTwoPhase(symbol);
        assertEquals(0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_FbGq2_3() {
        TradeDirect trade = new TradeDirect();
        String symbol = "TEST";
        QuoteDataBean quoteData = trade.pingTwoPhase(symbol);
        Assertions.assertEquals(0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_CFqo5_2() {
        TradeDirect trade = new TradeDirect();
        String symbol = "TEST";
        QuoteDataBean quoteData = trade.pingTwoPhase(symbol);
        Assertions.assertEquals(0, quoteData.getVolume(), "Volume should be 0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_QfCs0() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("testUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTestWithBlankUser_xcOE3() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout(" ");
        Assertions.assertNull(this.datasource);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTestWithInvalidUser_epez4() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("invalidUser");
        Assertions.assertNull(this.datasource);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTestWithMultipleUsers_udWg6() throws Exception {
        TradeDirect trade1 = new TradeDirect();
        trade1.logout("testUser1");
        TradeDirect trade2 = new TradeDirect();
        trade2.logout("testUser2");
        TradeDirect trade3 = new TradeDirect();
        trade3.logout("testUser3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertNotNull(holdingData);
        // Add code to fix the error and regenerate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertNotNull(holdingData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_3() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertEquals(1.0, holdingData.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_5() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertNotNull(holdingData.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_6() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertNotNull(holdingData.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_7() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertNotNull(holdingData.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_8() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertNotNull(holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_RlrE0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        String symbol = "testSymbol";
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean quoteData = trade.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getPrice(), changeFactor.multiply(quoteData.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_RlrE0_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        String symbol = "testSymbol";
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean quoteData = trade.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getVolume(), quoteData.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt2_DWyH1_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        String symbol = "testSymbol";
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = false;
        QuoteDataBean quoteData = trade.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getPrice(), changeFactor.multiply(quoteData.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt2_DWyH1_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        String symbol = "testSymbol";
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = false;
        QuoteDataBean quoteData = trade.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        Assertions.assertNotNull(quoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt4_SgFL3_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        String symbol = "testSymbol";
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = false;
        QuoteDataBean quoteData = trade.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getVolume(), quoteData.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt5_vJbV4_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        String symbol = "testSymbol";
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean quoteData = trade.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        Assertions.assertNotNull(quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_xiZk0_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_xiZk0_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_xiZk0_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroVolume_ZTRj1_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroVolume_ZTRj1_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroVolume_ZTRj1_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeVolume_mmoa2_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = -100;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeVolume_mmoa2_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = -100;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeVolume_mmoa2_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = -100;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroChangeFactor_XsgZ3_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroChangeFactor_XsgZ3_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroChangeFactor_XsgZ3_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_VwVs0_1() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
        assertEquals(accountData.getProfileID(), "uid1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_VwVs0_2() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
        assertEquals(accountData.getBalance(), new BigDecimal(100.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_VwVs0_3() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
        assertEquals(accountData.getOpenBalance(), new BigDecimal(100.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_VwVs0_4() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
        assertEquals(accountData.getCreationDate(), new java.util.Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_VwVs0_5() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
        assertEquals(accountData.getLoginCount(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_VwVs0_6() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
        assertEquals(accountData.getLogoutCount(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_VwVs0_7() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
        assertEquals(accountData.getLastLogin(), new java.util.Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterZero_sfAM2() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(0.00));
            Assertions.assertEquals(accountData.getOpenBalance(), new BigDecimal(500000.00));
        } catch (Exception e) {
            fail("TradeDirect:register -- error, should not have allowed a zero open balance");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNeg_fUEW3() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(-100.00));
            Assertions.assertEquals(accountData.getOpenBalance(), new BigDecimal(-100.00));
        } catch (Exception e) {
            fail("TradeDirect:register -- error, should not have allowed a negative open balance");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest1_jWYc0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        String userID = "uid1";
        Collection<HoldingDataBean> holdingDataBeans = trade.getHoldings(userID);
        assertNotNull(holdingDataBeans);
        assertEquals(0, holdingDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest1_jxBO0() {
        AccountDataBean accountData = null;
        String userID = "uid1";
        String password = "uid1";
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.login(userID, password);
            assertNotNull(accountData);
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception in loginTest1");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest2_Oiop1() {
        AccountDataBean accountData = null;
        String userID = "uid2";
        String password = "uid2";
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.login(userID, password);
            assertNotNull(accountData);
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception in loginTest2");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest3_EyqB2() {
        AccountDataBean accountData = null;
        String userID = "uid3";
        String password = "uid3";
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.login(userID, password);
            assertNotNull(accountData);
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception in loginTest3");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest4_qgCK3() {
        AccountDataBean accountData = null;
        String userID = "uid4";
        String password = "uid4";
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.login(userID, password);
            assertNotNull(accountData);
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception in loginTest4");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConnPublic_SuGM0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection connection = tradeDirect.getConnPublic();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_0_tnLm0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        trade.cancelOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_1_ilYP1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        trade.cancelOrder(orderID, twoPhase);
        assertNotNull(this.datasource);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_Trhq0_GBhr0() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToTrue_opaI1_txiB0_1() throws Exception {
        TradeConfig.setPublishQuotePriceChange(true);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuoteData.getPrice(), quoteData.getPrice().add(quoteData.getPrice().multiply(changeFactor)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToTrue_opaI1_txiB0_2() throws Exception {
        TradeConfig.setPublishQuotePriceChange(true);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuoteData.getVolume(), quoteData.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToTrue_opaI1_txiB0_3() throws Exception {
        TradeConfig.setPublishQuotePriceChange(true);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertNotNull(datasource, "Data source is not set");
        assertEquals(updatedQuoteData.getOpen(), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToTrue_opaI1_txiB0_4() throws Exception {
        TradeConfig.setPublishQuotePriceChange(true);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuoteData.getLow(), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToTrue_opaI1_txiB0_5() throws Exception {
        TradeConfig.setPublishQuotePriceChange(true);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuoteData.getHigh(), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToFalse_Suwu2_DCaj0() throws Exception {
        TradeConfig.setPublishQuotePriceChange(false);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolumeTraded_opZM3_soEa0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = 0.0;
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuoteData.getPrice(), quoteData.getPrice().subtract(quoteData.getPrice().multiply(changeFactor)), "Price of the quote should be updated");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolumeTraded_opZM3_soEa0_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = 0.0;
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuoteData.getVolume(), 0.0, "Volume of the quote should be updated");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataWithCoverage_vwdv1_FsIY0() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        accountData.setCreationDate(new java.util.Date());
        accountData.setLogoutCount(10);
        accountData.setHoldings(new ArrayList<HoldingDataBean>());
        accountData.setLoginCount(10);
        accountData.setAccountID(123);
        accountData.setProfileID("pid123");
        accountData.setOrders(new ArrayList<OrderDataBean>());
        accountData.setLastLogin(new java.util.Date());
        accountData.setBalance(new BigDecimal(100.00));
        accountData.setProfile(new AccountProfileDataBean());
        accountData.setOpenBalance(new BigDecimal(100.00));
        when(trade.getAccountData("uid123")).thenReturn(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_PQaW0_fid1() throws Exception {
        Object[] sqlBuffer = new Object[10];
        sqlBuffer[0] = "CREATE TABLE IF NOT EXISTS table1 (id INT PRIMARY KEY, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE IF NOT EXISTS table2 (id INT PRIMARY KEY, age INT)";
        sqlBuffer[2] = "CREATE TABLE IF NOT EXISTS table3 (id INT PRIMARY KEY, address VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        TradeDirect tradeDirect = new TradeDirect();
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesWithEmptyBuffer_aVfK2_fid1() throws Exception {
        Object[] sqlBuffer = new Object[0];
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        TradeDirect tradeDirect = new TradeDirect();
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_axxw0_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[10]; // Replace with actual array initialization
        java.io.PrintWriter out = new java.io.PrintWriter(System.out); // Replace with actual initialization
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesWithException_mNMd1_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[10]; // Replace with actual array initialization
        java.io.PrintWriter out = new java.io.PrintWriter(System.out); // Replace with actual initialization
        boolean success = false;
        try {
            tradeDirect.recreateDBTables(sqlBuffer, out);
        } catch (Exception e) {
            success = true;
        }
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_ZlgS0_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        Integer orderID = orderData.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_XSra1_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        OrderDataBean orderData = OrderDataBean.getRandomInstance();
        Integer orderID = orderData.getOrderID();
        boolean twoPhase = false;
        OrderDataBean result = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_1_fid1() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getSymbol(), quoteDataFromDB.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_2_fid1() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getCompanyName(), quoteDataFromDB.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0_8() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getVolume(), quoteDataFromDB.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_lyXQ0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_WNln1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 1;
        boolean twoPhase = false;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_WhMO2_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 2;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTestWithNullUser_MNKX1() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTestWithEmptyUser_nEdu2() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTestWithInvalidUser_epez4_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("invalidUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_2_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertEquals(1, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0_4_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertEquals(" quote", holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_KPDa0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(123, true);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithNoTwoPhase_LQrc1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(123, false);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNull_nWoH1_fid1() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.register(null, null, null, null, null, null, null);
            fail("TradeDirect:register -- error, should not have allowed null arguments");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterZero_sfAM2_fid1() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(0.00));
            fail("TradeDirect:register -- error, should not have allowed a zero open balance");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNeg_fUEW3_fid1() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(-100.00));
            fail("TradeDirect:register -- error, should not have allowed a negative open balance");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterException_UwDb4_fid1() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
            fail("TradeDirect:register -- error, should not have allowed a negative open balance");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest1_jWYc0_1_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        String userID = "uid1";
        Collection<HoldingDataBean> holdingDataBeans = trade.getHoldings(userID);
        assertNotNull(holdingDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest1_jWYc0_2_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        String userID = "uid1";
        Collection<HoldingDataBean> holdingDataBeans = trade.getHoldings(userID);
        assertEquals(0, holdingDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest1_jxBO0_fid1() {
        AccountDataBean accountData = null;
        String userID = "uid1";
        String password = "uid1";
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.login(userID, password);
            assertNotNull(accountData);
        } catch (Exception e) {
            fail("Exception in loginTest1");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest2_Oiop1_fid1() {
        AccountDataBean accountData = null;
        String userID = "uid2";
        String password = "uid2";
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.login(userID, password);
            assertNotNull(accountData);
        } catch (Exception e) {
            fail("Exception in loginTest2");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest3_EyqB2_fid1() {
        AccountDataBean accountData = null;
        String userID = "uid3";
        String password = "uid3";
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.login(userID, password);
            assertNotNull(accountData);
        } catch (Exception e) {
            fail("Exception in loginTest3");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest4_qgCK3_fid1() {
        AccountDataBean accountData = null;
        String userID = "uid4";
        String password = "uid4";
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.login(userID, password);
            assertNotNull(accountData);
        } catch (Exception e) {
            fail("Exception in loginTest4");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_0_tnLm0_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        trade.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_1_ilYP1_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        trade.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_WhGU0() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.getAccountData("uid123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_TradeConfig_MEMORY_emiy2_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = 2;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_TradeConfig_FILE_ldRr3_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = 3;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_TradeConfig_DATABASE_WQge4_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = 4;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_TradeConfig_RMI_KTCb5_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = 5;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_TradeConfig_JMS_iljS6_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = 6;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_TradeConfig_CUSTOM_DdGX7_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = 7;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_TradeConfig_DEFAULT_NCOX8_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_XMfj0_cviz0() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToTrue_opaI1_txiB0_3_fid1() throws Exception {
        TradeConfig.setPublishQuotePriceChange(true);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuoteData.getOpen(), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_NGzI0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertNotNull(quotes);
        assertTrue(quotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_xHfV1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertNotNull(quotes);
        assertTrue(quotes.size() > 0);
        QuoteDataBean quote = new QuoteDataBean();
        quotes.add(quote);
        assertEquals(1, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_Niak0() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData.getOrderID(), orderID);
        assertEquals(orderData.getPrice(), new BigDecimal(1.0));
        assertEquals(orderData.getQuantity(), 1.0);
        assertEquals(orderData.getOrderFee(), new BigDecimal(1.0));
        assertEquals(orderData.getQuote().getSymbol(), "AAPL");
        assertEquals(orderData.getOrderStatus(), "closed");
        assertEquals(orderData.getSymbol(), "AAPL");
        assertEquals(orderData.getOrderID(), new Integer(1));
        assertEquals(orderData.getOpenDate(), new java.util.Date());
        assertEquals(orderData.getCompletionDate(), new java.util.Date());
        assertEquals(orderData.getOrderType(), "buy");
        assertEquals(orderData.getAccount().getProfileID(), "1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_hTIh0() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData, trade.completeOrder(orderID, twoPhase));
        assertEquals(orderData, trade.completeOrder(orderID, twoPhase));
        assertEquals(orderData, trade.completeOrder(orderID, twoPhase));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_cEPU1() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertEquals(orderData, trade.completeOrder(orderID, twoPhase));
        assertEquals(orderData, trade.completeOrder(orderID, twoPhase));
        assertEquals(orderData, trade.completeOrder(orderID, twoPhase));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_JOSV0() throws Exception {
        TradeDirect trade = new TradeDirect();
        String userID = "uid1";
        Collection<OrderDataBean> orders = trade.getOrders(userID);
        Assertions.assertNotNull(orders);
        Assertions.assertEquals(5, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_wZeA0() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextDouble());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        quoteDataFromDB = trade.getQuote(symbol);
        assertEquals(quoteData.getSymbol(), quoteDataFromDB.getSymbol());
        assertEquals(quoteData.getCompanyName(), quoteDataFromDB.getCompanyName());
        assertEquals(quoteData.getPrice(), quoteDataFromDB.getPrice());
        assertEquals(quoteData.getOpen(), quoteDataFromDB.getOpen());
        assertEquals(quoteData.getLow(), quoteDataFromDB.getLow());
        assertEquals(quoteData.getHigh(), quoteDataFromDB.getHigh());
        assertEquals(quoteData.getChange(), quoteDataFromDB.getChange());
        assertEquals(quoteData.getVolume(), quoteDataFromDB.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_DpmJ0() {
        TradeDirect trade = new TradeDirect();
        String symbol = "TEST";
        QuoteDataBean quoteData = trade.pingTwoPhase(symbol);
        assertEquals("TEST", quoteData.getSymbol());
        assertEquals(0, quoteData.getVolume(), 0.0);
        assertEquals(0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_VIkr0() throws Exception {
        TradeDirect trade = new TradeDirect();
        HoldingDataBean holdingData = trade.getHolding(1);
        assertNotNull(holdingData);
        assertEquals(1, holdingData.getHoldingID());
        assertEquals(1.0, holdingData.getQuantity(), 0.001);
        assertEquals(" quote", holdingData.getQuoteID());
        assertNotNull(holdingData.getQuote());
        assertNotNull(holdingData.getAccount());
        assertNotNull(holdingData.getPurchaseDate());
        assertNotNull(holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_RlrE0() throws Exception {
        TradeDirect trade = new TradeDirect();
        String symbol = "testSymbol";
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean quoteData = trade.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getPrice(), changeFactor.multiply(quoteData.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
        assertEquals(quoteData.getVolume(), quoteData.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt2_DWyH1() throws Exception {
        TradeDirect trade = new TradeDirect();
        String symbol = "testSymbol";
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = false;
        QuoteDataBean quoteData = trade.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getPrice(), changeFactor.multiply(quoteData.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
        assertEquals(quoteData.getVolume(), quoteData.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_xiZk0() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroVolume_ZTRj1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
        assertEquals(updatedQuoteData.getVolume(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeVolume_mmoa2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = -100;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
        assertEquals(updatedQuoteData.getVolume(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroChangeFactor_XsgZ3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
        assertEquals(updatedQuoteData.getPrice(), BigDecimal.ZERO);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeChangeFactor_XHSR4() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(-1);
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
        assertEquals(updatedQuoteData.getPrice(), BigDecimal.ZERO);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_VwVs0() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
        assertEquals(accountData.getProfileID(), "uid1");
        assertEquals(accountData.getBalance(), new BigDecimal(100.00));
        assertEquals(accountData.getOpenBalance(), new BigDecimal(100.00));
        assertEquals(accountData.getCreationDate(), new java.util.Date());
        assertEquals(accountData.getLoginCount(), 0);
        assertEquals(accountData.getLogoutCount(), 0);
        assertEquals(accountData.getLastLogin(), new java.util.Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_2_hWqe2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Integer orderID = new Integer(2);
        boolean twoPhase = true;
        trade.cancelOrder(orderID, twoPhase);
    }
}