/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_qYTB0() {
        float result = TradeConfig.rndFloat(10);
        assertTrue(result >= 0 && result < 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_YDiR1() {
        float result = TradeConfig.rndFloat(100);
        assertTrue(result >= 0 && result < 100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_eQZm2() {
        float result = TradeConfig.rndFloat(1000);
        assertTrue(result >= 0 && result < 1000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_GSJs3() {
        float result = TradeConfig.rndFloat(10000);
        assertTrue(result >= 0 && result < 10000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_imtY4() {
        float result = TradeConfig.rndFloat(100000);
        assertTrue(result >= 0 && result < 100000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_wuSF5() {
        float result = TradeConfig.rndFloat(1000000);
        assertTrue(result >= 0 && result < 1000000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_UUbv6() {
        float result = TradeConfig.rndFloat(10000000);
        assertTrue(result >= 0 && result < 10000000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_PZmL7() {
        float result = TradeConfig.rndFloat(100000000);
        assertTrue(result >= 0 && result < 100000000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_gpyX8() {
        float result = TradeConfig.rndFloat(1000000000);
        assertTrue(result >= 0 && result < 1000000000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessMode_whenModeIsPackagePrivate_thenReturns2_kPRK1() {
        int expected = 2;
        int actual = TradeConfig.getAccessMode();
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_null_ySxU1() {
        String[] expected = null;
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIncrementScenarioCount_aqau0() {
        TradeConfig.incrementScenarioCount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRunTimeMode_valueIsOne_runTimeModeIsOne_fLGT0() {
        TradeConfig.setRunTimeMode(1);
        assert TradeConfig.getRunTimeMode() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRunTimeMode_valueIsTwo_runTimeModeIsTwo_svsg1() {
        TradeConfig.setRunTimeMode(2);
        assert TradeConfig.getRunTimeMode() == 2;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRunTimeMode_valueIsThree_runTimeModeIsThree_dGVz2() {
        TradeConfig.setRunTimeMode(3);
        assert TradeConfig.getRunTimeMode() == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetJDBCDriverNeedsGlobalTransation_nRWv0() {
        TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetJDBCDriverNeedsGlobalTransationFalse_iKos1() {
        TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioMixes_lineCoverage_JLEx1() {
        TradeConfig.getScenarioMixes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_USERS_kXdH0() {
        assertEquals(Integer.valueOf(TradeConfig.getMAX_USERS()), Integer.valueOf(1600));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetMAX_HOLDINGS_tHxO0() {
        TradeConfig.setMAX_HOLDINGS(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMarketSummaryInterval_validInput_setsInterval_sGkB0() {
        TradeConfig.setMarketSummaryInterval(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMarketSummaryInterval_invalidInput_doesNotSetInterval_buuO1() {
        TradeConfig.setMarketSummaryInterval(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMarketSummaryInterval_zeroInput_setsIntervalToDefault_Feaz2() {
        TradeConfig.setMarketSummaryInterval(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongRun_faLC0() {
        boolean expected = true;
        boolean actual = TradeConfig.getLongRun();
        assertTrue(actual == expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongRunForBranchCoverage_cwlL1() {
        boolean expected = false;
        boolean actual = TradeConfig.getLongRun();
        assertFalse(actual == expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setPublishQuotePriceChange_true_hhiX0() {
        TradeConfig.setPublishQuotePriceChange(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setPublishQuotePriceChange_false_Lxem1() {
        TradeConfig.setPublishQuotePriceChange(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetListQuotePriceChangeFrequency_XvkZ0() {
        TradeConfig.setListQuotePriceChangeFrequency(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetListQuotePriceChangeFrequencyWithZeroValue_QQvf1() {
        TradeConfig.setListQuotePriceChangeFrequency(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetListQuotePriceChangeFrequencyWithNegativeValue_Wqyj2() {
        TradeConfig.setListQuotePriceChangeFrequency(-10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode_dbIm0() {
        TradeConfig.setOrderProcessingMode(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode2_lfyN1() {
        TradeConfig.setOrderProcessingMode(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode3_LGfc2() {
        TradeConfig.setOrderProcessingMode(3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode4_gRJM3() {
        TradeConfig.setOrderProcessingMode(4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode5_oulc4() {
        TradeConfig.setOrderProcessingMode(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode6_aNba5() {
        TradeConfig.setOrderProcessingMode(6);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode7_aoOr6() {
        TradeConfig.setOrderProcessingMode(7);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode8_lHkq7() {
        TradeConfig.setOrderProcessingMode(8);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode9_GeoX8() {
        TradeConfig.setOrderProcessingMode(9);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderProcessingMode10_rzNi9() {
        TradeConfig.setOrderProcessingMode(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS_RWoA0() {
        TradeConfig.setMAX_USERS(100);
        assertEquals(100, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS2_MRYk1() {
        TradeConfig.setMAX_USERS(200);
        assertEquals(200, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS3_CppD2() {
        TradeConfig.setMAX_USERS(300);
        assertEquals(300, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS4_XhSU3() {
        TradeConfig.setMAX_USERS(400);
        assertEquals(400, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS5_ptEc4() {
        TradeConfig.setMAX_USERS(500);
        assertEquals(500, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS6_sYrs5() {
        TradeConfig.setMAX_USERS(600);
        assertEquals(600, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS7_opSB6() {
        TradeConfig.setMAX_USERS(700);
        assertEquals(700, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS8_eykX7() {
        TradeConfig.setMAX_USERS(800);
        assertEquals(800, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS9_lZyl8() {
        TradeConfig.setMAX_USERS(900);
        assertEquals(900, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS10_uajv9() {
        TradeConfig.setMAX_USERS(1000);
        assertEquals(1000, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS11_drWM10() {
        TradeConfig.setMAX_USERS(1100);
        assertEquals(1100, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS12_jIqw11() {
        TradeConfig.setMAX_USERS(1200);
        assertEquals(1200, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS13_sIwo12() {
        TradeConfig.setMAX_USERS(1300);
        assertEquals(1300, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS14_mwEl13() {
        TradeConfig.setMAX_USERS(1400);
        assertEquals(1400, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS15_imac14() {
        TradeConfig.setMAX_USERS(1500);
        assertEquals(1500, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS16_XAak15() {
        TradeConfig.setMAX_USERS(1600);
        assertEquals(1600, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS17_qXXL16() {
        TradeConfig.setMAX_USERS(1700);
        assertEquals(1700, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS18_eTJL17() {
        TradeConfig.setMAX_USERS(1800);
        assertEquals(1800, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS19_mlvd18() {
        TradeConfig.setMAX_USERS(1900);
        assertEquals(1900, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS20_ysGj19() {
        TradeConfig.setMAX_USERS(2000);
        assertEquals(2000, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS21_XHcI20() {
        TradeConfig.setMAX_USERS(2100);
        assertEquals(2100, TradeConfig.getMAX_USERS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequencyCoverage_fQDX1() {
        TradeConfig.getListQuotePriceChangeFrequency();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsZero_thenAccessModeIsZero_PRJX0() {
        TradeConfig.setAccessMode(0);
        int expectedAccessMode = 0;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsOne_thenAccessModeIsOne_NQsu1() {
        TradeConfig.setAccessMode(1);
        int expectedAccessMode = 1;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsTwo_thenAccessModeIsTwo_CCln2() {
        TradeConfig.setAccessMode(2);
        int expectedAccessMode = 2;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsThree_thenAccessModeIsThree_qBlD3() {
        TradeConfig.setAccessMode(3);
        int expectedAccessMode = 3;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsFour_thenAccessModeIsFour_liTm4() {
        TradeConfig.setAccessMode(4);
        int expectedAccessMode = 4;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsFive_thenAccessModeIsFive_XnOt5() {
        TradeConfig.setAccessMode(5);
        int expectedAccessMode = 5;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsSix_thenAccessModeIsSix_zdrP6() {
        TradeConfig.setAccessMode(6);
        int expectedAccessMode = 6;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsSeven_thenAccessModeIsSeven_DxUD7() {
        TradeConfig.setAccessMode(7);
        int expectedAccessMode = 7;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsEight_thenAccessModeIsEight_tpOy8() {
        TradeConfig.setAccessMode(8);
        int expectedAccessMode = 8;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setAccessMode_whenValueIsNine_thenAccessModeIsNine_HbeH9() {
        TradeConfig.setAccessMode(9);
        int expectedAccessMode = 9;
        int actualAccessMode = TradeConfig.getAccessMode();
        assert actualAccessMode == expectedAccessMode;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJDBCDriverNeedsGlobalTransation_jTSP0() {
        assertTrue(TradeConfig.getJDBCDriverNeedsGlobalTransation());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setPrimIterations_whenIterIsOne_thenPrimIterationsIsOne_DxzH0() {
        TradeConfig.setPrimIterations(1);
        assert TradeConfig.getPrimIterations() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setPrimIterations_whenIterIsTen_thenPrimIterationsIsTen_MdiB1() {
        TradeConfig.setPrimIterations(10);
        assert TradeConfig.getPrimIterations() == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_FPQT0() {
        int expected = 100;
        TradeConfig.setMAX_QUOTES(expected);
        int actual = TradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_zero_QaRv1() {
        int expected = 0;
        TradeConfig.setMAX_QUOTES(expected);
        int actual = TradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_negative_CRPa2() {
        int expected = -100;
        TradeConfig.setMAX_QUOTES(expected);
        int actual = TradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_maxValue_KkyQ4() {
        int expected = Integer.MAX_VALUE;
        TradeConfig.setMAX_QUOTES(expected);
        int actual = TradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_minValue_OgMS5() {
        int expected = Integer.MIN_VALUE;
        TradeConfig.setMAX_QUOTES(expected);
        int actual = TradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_randomValue_LDwJ6() {
        int expected = 50;
        TradeConfig.setMAX_QUOTES(expected);
        int actual = TradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getUpdateQuotePricesTest_jVFV0() {
        boolean expected = true;
        boolean actual = TradeConfig.getUpdateQuotePrices();
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBoolean_Xjlw0_1() {
        assertFalse(TradeConfig.rndBoolean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setScenarioCount_validInput_setsScenarioCount_IYsR0() {
        TradeConfig.setScenarioCount(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setScenarioCount_invalidInput_doesNotSetScenarioCount_IhJP1() {
        TradeConfig.setScenarioCount(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getPublishQuotePriceChangeTest_pdAz0() {
        boolean expected = true;
        boolean actual = TradeConfig.getPublishQuotePriceChange();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_nullparm_pOUu0() {
        TradeConfig.setConfigParam(null, "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_emptyparm_vxBy1() {
        TradeConfig.setConfigParam("", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_nullvalue_BxWz2() {
        TradeConfig.setConfigParam("parm", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_emptyvalue_RDio3() {
        TradeConfig.setConfigParam("parm", "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_orderProcessingMode_fvxX4() {
        String parm = "orderProcessingMode";
        String value = "value";
        TradeConfig.setConfigParam(parm, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_accessMode_gaWT5() {
        String parm = "accessMode";
        String value = "value";
        TradeConfig.setConfigParam(parm, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_WebInterface_pumc6() {
        String parm = "WebInterface";
        String value = "value";
        TradeConfig.setConfigParam(parm, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_maxUsers_EaCC7() {
        String parm = "maxUsers";
        String value = "value";
        TradeConfig.setConfigParam(parm, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_maxQuotes_EMVo8() {
        String parm = "maxQuotes";
        String value = "value";
        TradeConfig.setConfigParam(parm, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_primIterations_HPcQ9() {
        String parm = "primIterations";
        String value = "value";
        TradeConfig.setConfigParam(parm, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_zJxV0() {
        int actual = TradeConfig.getWebInterface();
        int expected = -1; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_jHSr2() {
        int actual = TradeConfig.getWebInterface();
        int expected = 0; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_rtxt10() {
        int actual = TradeConfig.getWebInterface();
        int expected = 1; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_DofN0_1() {
        int result1 = TradeConfig.rndInt(10);
        int result2 = TradeConfig.rndInt(20);
        int result3 = TradeConfig.rndInt(30);
        assertTrue(result1 >= 0 && result1 < 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_DofN0_2() {
        int result1 = TradeConfig.rndInt(10);
        int result2 = TradeConfig.rndInt(20);
        int result3 = TradeConfig.rndInt(30);
        assertTrue(result2 >= 0 && result2 < 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_DofN0_3() {
        int result1 = TradeConfig.rndInt(10);
        int result2 = TradeConfig.rndInt(20);
        int result3 = TradeConfig.rndInt(30);
        assertTrue(result3 >= 0 && result3 < 30);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndIntEdgeCases_ZnAu1_1() {
        int result1 = TradeConfig.rndInt(0);
        int result2 = TradeConfig.rndInt(-10);
        assertTrue(result1 == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndIntEdgeCases_ZnAu1_2() {
        int result1 = TradeConfig.rndInt(0);
        int result2 = TradeConfig.rndInt(-10);
        assertFalse(result2 == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndIntBoundaryCases_AXsH2_1() {
        int result1 = TradeConfig.rndInt(Integer.MAX_VALUE);
        int result2 = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result1 >= 0 && result1 < Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndIntBoundaryCases_AXsH2_2() {
        int result1 = TradeConfig.rndInt(Integer.MAX_VALUE);
        int result2 = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertFalse(result2 >= 0 && result2 < Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandom_uRtt0() {
        double result = TradeConfig.random();
        assertTrue(result >= 0.0 && result < 1.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_qXSd9() {
        assertEquals(9, TradeConfig.getOrderProcessingMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor1_PHbi1() {
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        BigDecimal expected = new BigDecimal("1.0");
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor2_ksnx2() {
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        BigDecimal expected = new BigDecimal("1.0");
        assertFalse(actual.compareTo(expected) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_2_alyk1() {
        TradeConfig tradeConfig = new TradeConfig();
        assertEquals(0, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_3_cwBc2() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(10);
        assertEquals(10, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_4_CQtq3() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(100);
        assertEquals(100, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_5_zuZc4() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(1000);
        assertEquals(1000, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_6_MTZI5() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(10000);
        assertEquals(10000, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_7_AyjQ6() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(100000);
        assertEquals(100000, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_8_asNH7() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(1000000);
        assertEquals(1000000, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_9_uAge8() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(10000000);
        assertEquals(10000000, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_10_rKwm9() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(100000000);
        assertEquals(100000000, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_11_RHAl10() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setScenarioCount(1000000000);
        assertEquals(1000000000, tradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_PxEH0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_DXvO0() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 0; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_cyRP10() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 3; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_YMRL11() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 2; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_PmnY0() {
        TradeConfig.setWebInterface(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_YFKU1() {
        TradeConfig.setWebInterface(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_PVol2() {
        TradeConfig.setWebInterface(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_JCCt3() {
        TradeConfig.setWebInterface(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_wRQY4() {
        TradeConfig.setWebInterface(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_jhDr5() {
        TradeConfig.setWebInterface(Integer.parseInt("1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_ylIf6() {
        TradeConfig.setWebInterface(Integer.parseInt("0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_LNyW7() {
        TradeConfig.setWebInterface(Integer.parseInt("-1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_bDSb8() {
        TradeConfig.setWebInterface(Integer.parseInt(new String("1")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_nvBx9() {
        TradeConfig.setWebInterface(Integer.parseInt(new String("0")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_jdud10() {
        TradeConfig.setWebInterface(Integer.parseInt(new String("-1")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_SecU11() {
        TradeConfig.setWebInterface(Integer.valueOf("1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_BadQ12() {
        TradeConfig.setWebInterface(Integer.valueOf("0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_zTeC13() {
        TradeConfig.setWebInterface(Integer.valueOf("-1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_ZYUS14() {
        TradeConfig.setWebInterface(Integer.valueOf(new String("1")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_ttOV15() {
        TradeConfig.setWebInterface(Integer.valueOf(new String("0")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_DHvF16() {
        TradeConfig.setWebInterface(Integer.valueOf(new String("-1")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetWebInterface_iImV17() {
        TradeConfig.setWebInterface(new Integer("1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_NwuW0() {
        String result = TradeConfig.rndBalance();
        org.junit.jupiter.api.Assertions.assertEquals("1000000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_whenInputIsZero_thenOutputIsZero_jnLN1() {
        String result = TradeConfig.rndBalance();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_whenInputIsNegative_thenOutputIsNegative_OfkA2() {
        String result = TradeConfig.rndBalance();
        org.junit.jupiter.api.Assertions.assertFalse(result.startsWith("-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_whenInputIsPositive_thenOutputIsPositive_KUnP3() {
        String result = TradeConfig.rndBalance();
        org.junit.jupiter.api.Assertions.assertFalse(result.startsWith("+"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioMixes_mMJX0_Cspe0() {
        int[][] expected = {{1, 2, 3}, {4, 5, 6}};
        int[][] actual = TradeConfig.getScenarioMixes();
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeForBuyOrder_ZOLd0_HIDF0() {
        String orderType = "BUY";
        BigDecimal expectedFee = new BigDecimal("24.95"); // Replace with the actual value of orderFee
        BigDecimal actualFee = TradeConfig.getOrderFee(orderType);
        assertEquals(expectedFee, actualFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeForSellOrder_QjHF1_RtpW0() {
        String orderType = "SELL";
        BigDecimal expectedFee = new BigDecimal("24.95"); // Replace with the actual value of orderFee
        BigDecimal actualFee = TradeConfig.getOrderFee(orderType);
        assertEquals(expectedFee, actualFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeForInvalidOrderType_Dkxg2_FsmX0() {
        String orderType = "Invalid";
        BigDecimal expectedFee = new BigDecimal("0.0"); // Replace with the actual value of cashFee
        BigDecimal actualFee = TradeConfig.getOrderFee(orderType);
        assertEquals(expectedFee, actualFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterfaceNames_mjxa0_YhDU0() {
        String[] expected = {"webInterface1", "webInterface2"};
        String[] actual = TradeConfig.getWebInterfaceNames();
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBigDecimal_qZcr4_NRuT0() {
        float f = Float.MIN_VALUE;
        BigDecimal expected = (new BigDecimal(Math.random() * f)).setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal actual = TradeConfig.rndBigDecimal(f);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_DofN0() {
        int result1 = TradeConfig.rndInt(10);
        assertTrue(result1 >= 0 && result1 < 10);
        int result2 = TradeConfig.rndInt(20);
        assertTrue(result2 >= 0 && result2 < 20);
        int result3 = TradeConfig.rndInt(30);
        assertTrue(result3 >= 0 && result3 < 30);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor2_ksnx2_fid1() {
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        BigDecimal expected = new BigDecimal("1.0");
        assertTrue(actual.compareTo(expected) >= 0);
    }
}