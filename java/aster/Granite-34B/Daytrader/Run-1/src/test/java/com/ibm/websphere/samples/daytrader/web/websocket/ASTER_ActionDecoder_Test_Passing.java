/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.DecodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ActionDecoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDestroy_UYMM0() {
        ActionDecoder actionDecoder = new ActionDecoder();
        actionDecoder.destroy();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_DXXp0() throws DecodeException {
        ActionDecoder actionDecoder = new ActionDecoder();
        String jsonText = "example json text";
        ActionMessage expected = new ActionMessage();
        expected.doDecoding(jsonText);
        ActionMessage actual = actionDecoder.decode(jsonText);
        assertEquals(expected.getDecodedAction(), actual.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyInput_WDwB1() throws DecodeException {
        ActionDecoder actionDecoder = new ActionDecoder();
        String jsonText = "";
        ActionMessage expected = new ActionMessage();
        expected.doDecoding(jsonText);
        ActionMessage actual = actionDecoder.decode(jsonText);
        assertEquals(expected.getDecodedAction(), actual.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_MZdp2() throws DecodeException {
        ActionDecoder actionDecoder = new ActionDecoder();
        String jsonText = null;
        ActionMessage expected = new ActionMessage();
        expected.doDecoding(jsonText);
        ActionMessage actual = actionDecoder.decode(jsonText);
        assertEquals(expected.getDecodedAction(), actual.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDestroyWithCoverage_LnJl1_DrJM0() {
        ActionDecoder actionDecoder = new ActionDecoder();
        actionDecoder.destroy();
        actionDecoder.destroy();
    }
}