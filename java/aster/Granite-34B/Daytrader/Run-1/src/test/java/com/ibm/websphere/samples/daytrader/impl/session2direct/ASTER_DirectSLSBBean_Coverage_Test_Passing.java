/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DirectSLSBBean_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_tfKr0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        try {
            OrderDataBean orderDataBean = directSLSBBean.completeOrder(orderID, twoPhase);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_ACxT1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 2;
        boolean twoPhase = false;
        try {
            OrderDataBean orderDataBean = directSLSBBean.completeOrder(orderID, twoPhase);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrdersTest1_teVU0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.getOrders("12345");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_eGMy0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        try {
            directSLSBBean.updateAccountProfile(accountProfileDataBean);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PXmZ0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        String symbol = "symbol";
        BigDecimal newPrice = new BigDecimal(100);
        double sharesTraded = 100;
        try {
            quoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
            assertEquals(quoteDataBean.getPrice(), newPrice);
            assertEquals(quoteDataBean.getVolume(), sharesTraded);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout0_QPGT0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.logout("testString");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHolding_002_bCoA1() throws java.lang.Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        Integer holdingID = null;
        try {
            HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
            Assertions.fail("Should have thrown an exception");
        } catch (Exception e) {
            Assertions.assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest1_ExKe0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        try {
            Collection<?> result = directSLSBBean.getClosedOrders(userID);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyInSession_prSO0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            OrderDataBean orderDataBean = directSLSBBean.buy("uid", "s", 1.0, 1);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyOutSession_BMCa1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            OrderDataBean orderDataBean = directSLSBBean.buy("uid", "s", 1.0, 2);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyAsync_Sxej2() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            OrderDataBean orderDataBean = directSLSBBean.buy("uid", "s", 1.0, 3);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyFail_lBpj3() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            OrderDataBean orderDataBean = directSLSBBean.buy("uid", "s", 1.0, 4);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyNull_RKdg4() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            OrderDataBean orderDataBean = directSLSBBean.buy("uid", "s", 1.0, 5);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellInSession_MsFX0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        try {
            directSLSBBean.sell(userID, holdingID, orderProcessingMode);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellOutSession_vmdN1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 2;
        try {
            directSLSBBean.sell(userID, holdingID, orderProcessingMode);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellAsync_IjJH2() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 3;
        try {
            directSLSBBean.sell(userID, holdingID, orderProcessingMode);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellFail_DkUv3() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 4;
        try {
            directSLSBBean.sell(userID, holdingID, orderProcessingMode);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellNull_KCAP4() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 5;
        try {
            directSLSBBean.sell(userID, holdingID, orderProcessingMode);
        } catch (Exception e) {
        }
    }
}