/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode1_IrHW0_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
        int hash = quoteDataBean.hashCode();
        Assertions.assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode2_SlJX1_fid1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST", "TEST", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
        int hash = quoteDataBean.hashCode();
        Assertions.assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_0_brwk0_fid1() throws Exception {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        boolean result = quoteDataBean.equals(null);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_8_cxlf8_fid1() throws Exception {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("testString");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean();
        quoteDataBean2.setSymbol("testString");
        quoteDataBean2.setCompanyName("testString");
        boolean result = quoteDataBean.equals(quoteDataBean2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_9_DzvB9_fid1() throws Exception {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("testString");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean();
        quoteDataBean2.setSymbol("testString");
        quoteDataBean2.setVolume(1.0);
        boolean result = quoteDataBean.equals(quoteDataBean2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_10_camA10_fid1() throws Exception {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("testString");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean();
        quoteDataBean2.setSymbol("testString");
        quoteDataBean2.setPrice(new BigDecimal(1.0));
        boolean result = quoteDataBean.equals(quoteDataBean2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_equals_11_MEOl11_fid1() throws Exception {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("testString");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean();
        quoteDataBean2.setSymbol("testString");
        quoteDataBean2.setOpen(new BigDecimal(1.0));
        boolean result = quoteDataBean.equals(quoteDataBean2);
        Assertions.assertFalse(result);
    }
}