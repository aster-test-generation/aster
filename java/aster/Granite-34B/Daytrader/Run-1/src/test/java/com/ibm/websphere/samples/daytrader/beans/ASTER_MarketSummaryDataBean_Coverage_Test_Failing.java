/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoTopLosersOrTopGainers_vard0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, null, null);
        String actual = marketSummaryDataBean.toString();
        String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:100\n\t\t    openTSIA:100\n\t\t        gain:0.0\n\t\t      volume:100";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTopLosersButNoTopGainers_acpu2() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean();
        Collection<QuoteDataBean> topLosers = Arrays.asList(quoteDataBean1);
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, topLosers, null);
        String actual = marketSummaryDataBean.toString();
        String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:100\n\t\t    openTSIA:100\n\t\t        gain:0.0\n\t\t      volume:100\n\t\t   Current Top Gainers:\n\t\t\t\n\t\t   Current Top Losers:\n\t\t\t\n";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTopGainersButNoTopLosers_PGPq3() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean();
        Collection<QuoteDataBean> topGainers = Arrays.asList(quoteDataBean1);
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, null, topGainers);
        String actual = marketSummaryDataBean.toString();
        String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:100\n\t\t    openTSIA:100\n\t\t        gain:0.0\n\t\t      volume:100\n\t\t   Current Top Gainers:\n\t\t\tQuoteDataBean: symbol=null change=0.0 volume=0.0\n\t\t   Current Top Losers:\n\t\t\t\n";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML2_hxmP1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(123.45), new BigDecimal(123.45), 123.45, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML3_TetL2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>" + "<BR> Current Top Gainers:";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML4_mhYi3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>" + "<BR>   Current Top Losers:";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGainPercent_CbqB0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal TSIA = new BigDecimal(100.0);
        BigDecimal openTSIA = new BigDecimal(50.0);
        double volume = 1000.0;
        Collection<QuoteDataBean> topGainers = new ArrayList<>();
        Collection<QuoteDataBean> topLosers = new ArrayList<>();
        marketSummaryDataBean.setTSIA(TSIA);
        marketSummaryDataBean.setOpenTSIA(openTSIA);
        marketSummaryDataBean.setVolume(volume);
        marketSummaryDataBean.setTopGainers(topGainers);
        marketSummaryDataBean.setTopLosers(topLosers);
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(new BigDecimal(50.0), gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTopLosersAndTopGainers_oSsS1_fid1() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean();
        QuoteDataBean quoteDataBean2 = new QuoteDataBean();
        Collection<QuoteDataBean> topLosers = Arrays.asList(quoteDataBean1);
        Collection<QuoteDataBean> topGainers = Arrays.asList(quoteDataBean2);
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, topLosers, topGainers);
        String actual = marketSummaryDataBean.toString();
        String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:100\n\t\t    openTSIA:100\n\t\t        gain:0.0\n\t\t      volume:100\n\t\t   Current Top Gainers:\n\t\t\t\n\t\t   Current Top Losers:\n\t\t\t\n";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTopGainersButNoTopLosers_PGPq3_fid1() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean();
        Collection<QuoteDataBean> topGainers = Arrays.asList(quoteDataBean1);
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, null, topGainers);
        String actual = marketSummaryDataBean.toString();
        String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:100\n\t\t    openTSIA:100\n\t\t        gain:0.0\n\t\t      volume:100\n\t\t   Current Top Gainers:\n\t\t\t\n\t\t   Current Top Losers:\n\t\t\t\n";
        assertEquals(expected, actual);
    }
}