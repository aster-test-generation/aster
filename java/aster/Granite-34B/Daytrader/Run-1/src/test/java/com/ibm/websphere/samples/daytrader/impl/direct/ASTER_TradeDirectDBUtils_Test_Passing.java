/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import java.io.InputStream;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;
import javax.sql.DataSource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirectDBUtils_Test_Passing {
    @Mock
    private DataSource datasource;
    TradeDirectDBUtils tradedirectdbutils;
    Connection connection;
    PreparedStatement preparedstatement;
    ResultSet resultset;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithInvalidFile_pZzB2() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("invalidFile.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Exception exception = null;
        try {
            tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        } catch (Exception e) {
            exception = e;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithNullFile_JOKa3() throws Exception {
        InputStream ddlFile = null;
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Exception exception = null;
        try {
            tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        } catch (Exception e) {
            exception = e;
        }
        assertEquals(true, exception instanceof NullPointerException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcheckDBProductName_uIFG0() throws Exception {
        TradeDirectDBUtils tradedirectdbutils = new TradeDirectDBUtils();
        Connection connection = mock(Connection.class);
        Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
        field_datasource.setAccessible(true);
        field_datasource.set(tradedirectdbutils, datasource);
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.getMetaData()).thenReturn(mock(DatabaseMetaData.class));
        when(connection.getMetaData().getDatabaseProductName()).thenReturn("Mocked Database Product Name");
        String dbProductName = tradedirectdbutils.checkDBProductName();
        assertEquals("Mocked Database Product Name", dbProductName);
    }
}