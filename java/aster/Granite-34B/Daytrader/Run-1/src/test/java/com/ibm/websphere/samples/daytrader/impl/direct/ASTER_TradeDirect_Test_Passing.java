/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Passing {
    TradeDirect tradedirect;
    Connection connection;
    DataSource datasource;
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
    private static Integer marketSummaryLock = new Integer(0);
    private static long nextMarketSummary = System.currentTimeMillis();
    PreparedStatement preparedstatement;
    ResultSet resultset;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    private boolean inSession = false;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private  UserTransaction txn;
    private ManagedExecutorService mes;
    private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static BigDecimal ZERO = new BigDecimal(0.0);
    private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_PQaW0() throws Exception {
        Object[] sqlBuffer = new Object[10];
        sqlBuffer[0] = "CREATE TABLE IF NOT EXISTS table1 (id INT PRIMARY KEY, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE IF NOT EXISTS table2 (id INT PRIMARY KEY, age INT)";
        sqlBuffer[2] = "CREATE TABLE IF NOT EXISTS table3 (id INT PRIMARY KEY, address VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        TradeDirect tradeDirect = new TradeDirect();
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesWithException_pgFU1() throws Exception {
        Object[] sqlBuffer = new Object[10];
        sqlBuffer[0] = "CREATE TABLE IF NOT EXISTS table1 (id INT PRIMARY KEY, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE IF NOT EXISTS table2 (id INT PRIMARY KEY, age INT)";
        sqlBuffer[2] = "CREATE TABLE IF NOT EXISTS table3 (id INT PRIMARY KEY, address VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        TradeDirect tradeDirect = new TradeDirect();
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesWithEmptyBuffer_aVfK2() throws Exception {
        Object[] sqlBuffer = new Object[0];
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        TradeDirect tradeDirect = new TradeDirect();
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_axxw0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[10]; // Replace with actual array initialization
        java.io.PrintWriter out = new java.io.PrintWriter(System.out); // Replace with actual initialization
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesWithException_mNMd1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[10]; // Replace with actual array initialization
        java.io.PrintWriter out = new java.io.PrintWriter(System.out); // Replace with actual initialization
        boolean success = false;
        try {
            tradeDirect.recreateDBTables(sqlBuffer, out);
        } catch (Exception e) {
            success = true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesWithNoTablesToDrop_cazc2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[10]; // Replace with actual array initialization
        java.io.PrintWriter out = new java.io.PrintWriter(System.out); // Replace with actual initialization
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSession_true_LzLL0() {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSession_false_bohV1() {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.setInSession(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullUserID_UtQH1() throws Exception {
        TradeDirect trade = new TradeDirect();
        String userID = null;
        try {
            trade.getOrders(userID);
            Assertions.fail("TradeDirect:getOrders -- error, expected to receive an exception for a null parameter");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithEmptyUserID_zeUI2() throws Exception {
        TradeDirect trade = new TradeDirect();
        String userID = "";
        try {
            trade.getOrders(userID);
            Assertions.fail("TradeDirect:getOrders -- error, expected to receive an exception for an empty parameter");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTestWithMultipleReleases_XAji21() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNull_nWoH1() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.register(null, null, null, null, null, null, null);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterException_UwDb4() throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        TradeDirect trade = new TradeDirect();
        try {
            accountData = trade.register("uid1", "pwd1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(100.00));
            Assertions.assertEquals(accountData.getOpenBalance(), new BigDecimal(100.00));
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullChangeFactor_AlNR4() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = null;
        double sharesTraded = quoteData.getVolume();
        try {
            trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
            fail("Expected an exception to be thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_yXDv5() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        try {
            trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
            fail("Expected an exception to be thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_OPak0() {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "testUser";
        try {
            AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData(userID);
            assertEquals("expected credit card", accountProfileData.getCreditCard());
            assertEquals("expected email", accountProfileData.getEmail());
            assertEquals("expected user ID", accountProfileData.getUserID());
            assertEquals("expected address", accountProfileData.getAddress());
            assertEquals("expected password", accountProfileData.getPassword());
            assertEquals("expected full name", accountProfileData.getFullName());
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_VawB0() {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user123";
        Integer orderID = 12345;
        Exception exception = assertThrows(Exception.class, () -> tradeDirect.orderCompleted(userID, orderID));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompletedWithNullUserID_esAT1() {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 12345;
        Exception exception = assertThrows(Exception.class, () -> tradeDirect.orderCompleted(null, orderID));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompletedWithNullOrderID_XNiC2() {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user123";
        Exception exception = assertThrows(Exception.class, () -> tradeDirect.orderCompleted(userID, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_caxA0() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = TradeConfig.DIRECT;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getImpl_TradeConfig_MEMORY_emiy2() {
        TradeDirect tradeDirect = new TradeDirect();
        int actual = tradeDirect.getImpl();
        int expected = 1;
        assertEquals(expected, actual);
    }
}