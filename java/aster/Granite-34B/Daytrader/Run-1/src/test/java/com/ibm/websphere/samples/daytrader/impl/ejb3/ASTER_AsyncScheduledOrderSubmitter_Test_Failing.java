/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AsyncScheduledOrderSubmitter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrder_JpIe0() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 1;
        boolean twoPhase = true;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertEquals(result, asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrder2_tnEy1() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 1;
        boolean twoPhase = false;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertEquals(result, asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrder3_nRdM2() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 2;
        boolean twoPhase = true;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertEquals(result, asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrder4_bYwk3() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 2;
        boolean twoPhase = false;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertEquals(result, asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase));
    }
}