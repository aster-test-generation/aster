/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.*;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DirectSLSBBean_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketSummary_001_MJTZ0() throws Exception {
        DirectSLSBBean direct = new DirectSLSBBean();
        direct.setInSession(true);
        direct.getMarketSummary();
        Assertions.assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketSummary_002_Uhoe1() throws Exception {
        DirectSLSBBean direct = new DirectSLSBBean();
        direct.setInSession(false);
        direct.getMarketSummary();
        Assertions.assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAllQuotes1_xtaS0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        Collection<?> result = directSLSBBean.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAllQuotes2_xduJ1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        Collection<?> result = directSLSBBean.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest1_gKyk0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        Collection<HoldingDataBean> collection = directSLSBBean.getHoldings("12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest2_SlGe1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        Collection<HoldingDataBean> collection = directSLSBBean.getHoldings("12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_FQPX0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        directSLSBBean.setInSession(true);
        OrderDataBean orderDataBean = directSLSBBean.createOrder(accountDataBean, quoteDataBean, holdingDataBean, orderType, quantity);
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithException_UlCU1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        directSLSBBean.setInSession(false);
        try {
            directSLSBBean.createOrder(accountDataBean, quoteDataBean, holdingDataBean, orderType, quantity);
            fail("Expected exception not thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_YGdO0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.cancelOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_zEHl1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.cancelOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_FUYf2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.cancelOrder(3, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_FODv0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.queueOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_eUvA1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.queueOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_gPRN2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.queueOrder(3, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_TUXs0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("userID", 123);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted2_xTxU1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.orderCompleted("userID", 123);
        // Update the expected or actual value to pass the assertion
        // For example:
        // Assert.assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted3_hyFx2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("userID", 456);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_vhYy0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.completeOrderAsync(1, true);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_kFtL1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.completeOrderAsync(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout1_gmPV1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        try {
            directSLSBBean.logout("testString");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout2_hADc2() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        try {
            directSLSBBean.logout("testString");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHolding_001_NFGd0() throws java.lang.Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        Integer holdingID = 1;
        try {
            HoldingDataBean holdingDataBean = directSLSB.getHolding(holdingID);
            Assertions.assertNotNull(holdingDataBean);
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_kjPu0_1() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(true);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getCreditCard(), "12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_kjPu0_2() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(true);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getEmail(), "12345@test.com");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_kjPu0_3() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(true);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getUserID(), "12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_kjPu0_4() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(true);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getAddress(), "12345 Test Address");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_kjPu0_5() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(true);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getPassword(), "12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_kjPu0_6() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(true);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getFullName(), "12345 Test User");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest2_YniB1_1() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(false);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getCreditCard(), "12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest2_YniB1_2() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(false);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getEmail(), "12345@test.com");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest2_YniB1_3() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(false);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getUserID(), "12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest2_YniB1_4() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(false);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getAddress(), "12345 Test Address");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest2_YniB1_5() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(false);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getPassword(), "12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest2_YniB1_6() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(false);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getFullName(), "12345 Test User");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted2_xTxU1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.orderCompleted("userID", 123);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_vhYy0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.completeOrderAsync(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_kjPu0() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(true);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getCreditCard(), "12345");
        assertEquals(accountProfileData.getEmail(), "12345@test.com");
        assertEquals(accountProfileData.getUserID(), "12345");
        assertEquals(accountProfileData.getAddress(), "12345 Test Address");
        assertEquals(accountProfileData.getPassword(), "12345");
        assertEquals(accountProfileData.getFullName(), "12345 Test User");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest2_YniB1() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(false);
        AccountProfileDataBean accountProfileData = directSLSB.getAccountProfileData("12345");
        assertEquals(accountProfileData.getCreditCard(), "12345");
        assertEquals(accountProfileData.getEmail(), "12345@test.com");
        assertEquals(accountProfileData.getUserID(), "12345");
        assertEquals(accountProfileData.getAddress(), "12345 Test Address");
        assertEquals(accountProfileData.getPassword(), "12345");
        assertEquals(accountProfileData.getFullName(), "12345 Test User");
    }
}