/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletLargeContentLength_Test_Passing {
    @Mock
    ServletConfig config;
    @InjectMocks
    PingServletLargeContentLength pingservletlargecontentlength;
    @Mock
    HttpServletRequest req;
    @Mock
    HttpServletResponse res;
    @Mock
    HttpServletRequest mockHttpServletRequest;
    @Mock
    HttpServletResponse mockHttpServletResponse;
    @InjectMocks
    PingServletLargeContentLength pingServletLargeContentLength;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Set up expected behavior for the mock ServletConfig object
        when(config.getInitParameter("paramName")).thenReturn("paramValue");
        // Call the method to be tested
        pingservletlargecontentlength.init(config);
        // Add meaningful assertions here
        verify(config, times(1)).getInitParameter("paramName");
        // Add more assertions as needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_wkRk0() throws ServletException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        ServletConfig config = new MockServletConfig();
        servlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_NullServletConfig_nFUj1() throws ServletException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        try {
            servlet.init(null);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_MultipleInvocations_uYEX4() throws ServletException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        ServletConfig config = new MockServletConfig();
        servlet.init(config);
        servlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_MultipleThreads_RACo5() throws ServletException, InterruptedException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        ServletConfig config = new MockServletConfig();
        Thread t1 = new Thread(() -> {
            try {
                servlet.init(config);
            } catch (ServletException e) {
                e.printStackTrace();
            }
        });
        Thread t2 = new Thread(() -> {
            try {
                servlet.init(config);
            } catch (ServletException e) {
                e.printStackTrace();
            }
        });
        t1.start();
        t2.start();
        t1.join();
        t2.join();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_trnC0() throws ServletException, IOException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getContentLengthLong()).thenReturn(100L);
        servlet.doPost(request, response);
        verify(request, times(1)).getContentLengthLong();
        verify(response, times(0)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNegativeLength_HWSR1() throws ServletException, IOException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getContentLengthLong()).thenReturn(-1L);
        servlet.doPost(request, response);
        verify(request, times(1)).getContentLengthLong();
        verify(response, times(1)).getWriter();
        verify(response, times(1)).setStatus(HttpServletResponse.SC_BAD_REQUEST);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_1_sYOb1() throws Exception {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        String result = servlet.getServletInfo();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_2_QXZO2() throws Exception {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        String result = servlet.getServletInfo();
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_3_rzDl3() throws Exception {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        String result = servlet.getServletInfo();
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_4_Fdhz4() throws Exception {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        // Set up expected behavior for the mocks
        when(mockHttpServletRequest.getParameter("paramName")).thenReturn("paramValue");
        // Call the method to be tested
        pingServletLargeContentLength.doGet(mockHttpServletRequest, mockHttpServletResponse);
        // Add meaningful assertions here
        verify(mockHttpServletResponse).setStatus(HttpServletResponse.SC_OK);
        verify(mockHttpServletResponse).getWriter();
        verify(mockHttpServletResponse.getWriter()).write("PingServletLargeContentLength.doGet() called");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_WHnZ0_eKfp0() throws ServletException, IOException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
        assertEquals(200, response.getStatus());
    }
}