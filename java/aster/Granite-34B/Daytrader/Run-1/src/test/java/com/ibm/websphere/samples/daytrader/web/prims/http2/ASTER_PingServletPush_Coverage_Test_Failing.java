/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServletPush_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_CIof0() throws javax.servlet.ServletException, java.io.IOException {
        PingServletPush servlet = new PingServletPush();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(request.newPushBuilder()).thenReturn(null);
        when(response.getWriter()).thenReturn(writer);
        servlet.doGet(request, response);
        verify(request, times(1)).newPushBuilder();
        verify(writer, times(1)).write(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_lMsI3() throws javax.servlet.ServletException, java.io.IOException {
        PingServletPush servlet = new PingServletPush();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(request.newPushBuilder()).thenReturn(pushBuilder);
        when(pushBuilder.path(anyString())).thenThrow(new IllegalArgumentException());
        when(response.getWriter()).thenReturn(writer);
        servlet.doGet(request, response);
        verify(request, times(1)).newPushBuilder();
        verify(pushBuilder, times(1)).path(anyString());
        verify(writer, times(1)).write(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_hgGP4() throws javax.servlet.ServletException, java.io.IOException {
        PingServletPush servlet = new PingServletPush();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(request.newPushBuilder()).thenReturn(pushBuilder);
        when(pushBuilder.path(anyString())).thenThrow(new IllegalStateException());
        when(response.getWriter()).thenReturn(writer);
        servlet.doGet(request, response);
        verify(request, times(1)).newPushBuilder();
        verify(pushBuilder, times(1)).path(anyString());
        verify(writer, times(1)).write(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_ZnVH5() throws javax.servlet.ServletException, java.io.IOException {
        PingServletPush servlet = new PingServletPush();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(request.newPushBuilder()).thenThrow(new IllegalStateException());
        when(response.getWriter()).thenReturn(writer);
        servlet.doGet(request, response);
        verify(request, times(1)).newPushBuilder();
        verify(writer, times(1)).write(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_LsNg2_yETV0() throws javax.servlet.ServletException, java.io.IOException {
        PingServletPush servlet = new PingServletPush();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(request.newPushBuilder()).thenReturn(pushBuilder);
        when(pushBuilder.path(anyString())).thenReturn(pushBuilder);
        doNothing().when(pushBuilder).push();
        when(response.getWriter()).thenReturn(writer);
        servlet.doGet(request, response);
        verify(request, times(1)).newPushBuilder();
        verify(pushBuilder, times(1)).path(anyString());
        verify(pushBuilder, times(1)).push();
        verify(writer, times(1)).write(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_ZMhG1_XglW0() throws javax.servlet.ServletException, java.io.IOException {
        PingServletPush servlet = new PingServletPush();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(request.newPushBuilder()).thenReturn(pushBuilder);
        when(pushBuilder.path(anyString())).thenReturn(pushBuilder);
        doThrow(new IOException()).when(pushBuilder).push();
        when(response.getWriter()).thenReturn(writer);
        servlet.doGet(request, response);
        verify(request, times(1)).newPushBuilder();
        verify(pushBuilder, times(1)).path(anyString());
        verify(pushBuilder, times(1)).push();
        verify(writer, times(1)).write(anyString());
    }
}