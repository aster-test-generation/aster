/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession2_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingSession2 pingsession2;
    @Mock
    ServletConfig config;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    HttpSession session;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        pingsession2 = new PingSession2();
        hitCount = 0;
        initTime = new java.util.Date().toString();
        when(config.getInitParameter("test")).thenReturn("test");
        pingsession2.init(config);
        assertEquals(0, hitCount);
        assertEquals(initTime, new java.util.Date().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.openMocks(this);
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        pingsession2.doPost(request, response);
        Mockito.verify(response).getWriter();
        Mockito.verify(response.getWriter()).println("Mocked response");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_sLRO0() {
        PingSession2 obj = new PingSession2();
        String actual = obj.getServletInfo();
        assertEquals("HTTP Session Key: Tests management of a read/write unique id", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo1_hWlA1() {
        PingSession2 obj = new PingSession2();
        String actual = obj.getServletInfo();
        assertEquals("Tests management of a read/write unique id", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        pingsession2 = new PingSession2();
        hitCount = 0;
        initTime = new java.util.Date().toString();
        when(config.getInitParameter("test")).thenReturn("test");
        pingsession2.init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        pingsession2 = new PingSession2();
        hitCount = 0;
        initTime = new java.util.Date().toString();
        when(config.getInitParameter("test")).thenReturn("test");
        pingsession2.init(config);
        assertEquals(initTime, new java.util.Date().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_fid1() throws Exception {
        MockitoAnnotations.openMocks(this);
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        Mockito.doNothing().when(pingsession2).doPost(request, response);
        pingsession2.doPost(request, response);
        Mockito.verify(response).getWriter();
        Mockito.verify(response.getWriter()).println("Mocked response");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_ssJB0_KukK0() throws ServletException, IOException {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingSession2.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_withNullRequest_xbBK2_VcMG0() throws ServletException, IOException {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingSession2.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_withNullResponse_VXXw3_jsSJ0() throws ServletException, IOException {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        pingSession2.doPost(request, response);
    }
}