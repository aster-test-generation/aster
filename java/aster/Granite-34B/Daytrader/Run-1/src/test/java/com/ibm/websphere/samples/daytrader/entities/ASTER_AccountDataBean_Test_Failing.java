/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_wgpJ0_2() {
        AccountDataBean account = AccountDataBean.getRandomInstance();
        assertNotNull(account.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_wgpJ0_3() {
        AccountDataBean account = AccountDataBean.getRandomInstance();
        assertNotNull(account.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_wgpJ0_4() {
        AccountDataBean account = AccountDataBean.getRandomInstance();
        assertNotNull(account.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_DgSP2() {
        AccountDataBean account = new AccountDataBean();
        Date creationDate = account.getCreationDate();
        assertNotNull(creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_gxYo4() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = account.getHoldings();
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_juov6() {
        AccountDataBean account = new AccountDataBean();
        Integer accountID = account.getAccountID();
        assertNotNull(accountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfileID_TREm7() {
        AccountDataBean account = new AccountDataBean();
        String profileID = account.getProfileID();
        assertNotNull(profileID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_VovA8() {
        AccountDataBean account = new AccountDataBean();
        Collection<OrderDataBean> orders = account.getOrders();
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLogin_kHol9() {
        AccountDataBean account = new AccountDataBean();
        Date lastLogin = account.getLastLogin();
        assertNotNull(lastLogin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBalance_DTpm10() {
        AccountDataBean account = new AccountDataBean();
        BigDecimal balance = account.getBalance();
        assertNotNull(balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_rVOL11() {
        AccountDataBean account = new AccountDataBean();
        AccountProfileDataBean profile = account.getProfile();
        assertNotNull(profile);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_VNay12() {
        AccountDataBean account = new AccountDataBean();
        BigDecimal openBalance = account.getOpenBalance();
        assertNotNull(openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastLoginInvalid_KqWN2() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        Date lastLogin = new Date(0L);
        account.setLastLogin(lastLogin);
        assertNotEquals(lastLogin, account.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithCorrectPassword_TlBK0() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
        account.login("password");
        account.logout();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullLastLogin_WESs5() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, null, new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
        account.login("password");
        account.logout();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullCreationDate_bjcA6() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), null, new BigDecimal(100), new BigDecimal(100), "profileID");
        account.login("password");
        account.logout();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullBalance_dKsd7() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), null, new BigDecimal(100), "profileID");
        account.login("password");
        account.logout();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullOpenBalance_TeeV8() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), null, "profileID");
        account.login("password");
        account.logout();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_ymHE0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile123");
        String expected = "	Account Data for account: 1		   loginCount:2		  logoutCount:3		    lastLogin:Mon Jul 08 06:56:08 UTC 2024		 creationDate:Mon Jul 08 06:56:08 UTC 2024		      balance:100		  openBalance:50		    profileID:profile123";
        assertEquals(expected, accountDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDateNull_NFjc1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, null, new Date(), new BigDecimal(100.0), new BigDecimal(50.0), "12345");
        Date creationDate = accountDataBean.getCreationDate();
        assertEquals(null, creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_fzSq0() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        String expected = "<BR>Account Data for account: <B>1</B>" + "<LI>   loginCount:2</LI>" + "<LI>  logoutCount:3</LI>" + "<LI>    lastLogin:</LI>" + "<LI> creationDate:</LI>" + "<LI>      balance:100.00</LI>" + "<LI>  openBalance:50.00</LI>" + "<LI>    profileID:profile1</LI>";
        assertEquals(expected, account.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SUyo0() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        String expected = "\n\tAccount Data for account: 1\n\t\t   loginCount:2\n\t\t  logoutCount:3\n\t\t    lastLogin:null\n\t\t creationDate:null\n\t\t      balance:100.00\n\t\t  openBalance:50.00\n\t\t    profileID:profile1";
        assertEquals(expected, account.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullOrders_dzkq2() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "1");
        account.setOrders(null);
        Collection<OrderDataBean> orders = account.getOrders();
        assertEquals(0, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalanceWithNoOpenBalance_eoVT1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), null, "profile1");
        BigDecimal openBalance = accountDataBean.getOpenBalance();
        assertNull(new BigDecimal(100.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithCorrectPassword_TlBK0_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
        account.login("password");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullLastLogin_WESs5_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, null, new Date(), new BigDecimal(100), new BigDecimal(100), "profileID");
        account.login("password");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullCreationDate_bjcA6_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), null, new BigDecimal(100), new BigDecimal(100), "profileID");
        account.login("password");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullBalance_dKsd7_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), null, new BigDecimal(100), "profileID");
        account.login("password");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullOpenBalance_TeeV8_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100), null, "profileID");
        account.login("password");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_ymHE0_fid1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile123");
        String expected = "AccountDataBean [accountID=1, loginCount=2, logoutCount=3, lastLogin=Mon Jan 01 00:00:00 EST 1970, creationDate=Mon Jan 01 00:00:00 EST 1970, balance=100.00, openBalance=50.00, profileID=profile123]";
        assertEquals(expected, accountDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDateNull_NFjc1_fid1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, null, new Date(), new BigDecimal(100.0), new BigDecimal(50.0), "12345");
        Date creationDate = accountDataBean.getCreationDate();
        assertNull(creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_pSnN0_fid1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1");
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutCoverage_SOtT1_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        account.logout();
        account.logout();
        account.logout();
        account.logout();
        account.logout();
        account.logout();
        account.logout();
        account.logout();
        account.logout();
        account.logout();
        assertEquals(10, account.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_MCzw0_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "1");
        Collection<OrderDataBean> orders = account.getOrders();
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNoOrders_KIui1_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "1");
        Collection<OrderDataBean> orders = account.getOrders();
        assertTrue(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullOrders_dzkq2_fid1() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "1");
        account.setOrders(null);
        Collection<OrderDataBean> orders = account.getOrders();
        assertTrue(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalanceWithNoOpenBalance_eoVT1_fid1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), null, "profile1");
        BigDecimal openBalance = accountDataBean.getOpenBalance();
        assertEquals(new BigDecimal(100.00), openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_wgpJ0() {
        AccountDataBean account = AccountDataBean.getRandomInstance();
        assertNotNull(account);
        assertNotNull(account.getHoldings());
        assertNotNull(account.getOrders());
        assertNotNull(account.getProfile());
    }
}