/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.EncodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonEncoder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_WEDA0() throws EncodeException {
        JsonMessage message = new JsonMessage();
        message.setKey("key");
        message.setValue("value");
        JsonEncoder jsonEncoder = new JsonEncoder();
        String actual = jsonEncoder.encode(message);
        String expected = "{\"key\":\"key\",\"value\":\"value\"}";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullKey_qeRb1() throws EncodeException {
        JsonMessage message = new JsonMessage();
        message.setKey(null);
        message.setValue("value");
        JsonEncoder jsonEncoder = new JsonEncoder();
        String actual = jsonEncoder.encode(message);
        String expected = "{\"key\":null,\"value\":\"value\"}";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullValue_kzuw2() throws EncodeException {
        JsonMessage message = new JsonMessage();
        message.setKey("key");
        message.setValue(null);
        JsonEncoder jsonEncoder = new JsonEncoder();
        String actual = jsonEncoder.encode(message);
        String expected = "{\"key\":\"key\",\"value\":null}";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithBothNull_zDTS3() throws EncodeException {
        JsonMessage message = new JsonMessage();
        message.setKey(null);
        message.setValue(null);
        JsonEncoder jsonEncoder = new JsonEncoder();
        String actual = jsonEncoder.encode(message);
        String expected = "{\"key\":null,\"value\":null}";
        assertEquals(expected, actual);
    }
}