/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.json.JsonObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_0_ZizN0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal result = marketSummaryDataBean.getGainPercent();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_1_tNTZ1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(0), new BigDecimal(0), 0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        BigDecimal result = marketSummaryDataBean.getGainPercent();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NheF0() {
        MarketSummaryDataBean marketSummaryData = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(200), 1000, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        String expected = "\n\tMarket Summary at: " + marketSummaryData.getSummaryDate() + "\n\t\t        TSIA:" + marketSummaryData.getTSIA() + "\n\t\t    openTSIA:" + marketSummaryData.getOpenTSIA() + "\n\t\t        gain:" + marketSummaryData.getGainPercent() + "\n\t\t      volume:" + marketSummaryData.getVolume();
        assertEquals(expected, marketSummaryData.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryDateWithNullObject_xVQq2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, null, 0, null, null);
        Date actual = marketSummaryDataBean.getSummaryDate();
        Date expected = new Date();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_jBXZ0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolumeWithNegativeVolume_uPaZ2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("90.00"), -1000.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        double volume = marketSummaryDataBean.getVolume();
        assertEquals(0.0, volume);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSON_Eato0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertNotNull(jsonObject);
        assertEquals(BigDecimal.ONE.toString(), jsonObject.getString("tsia"));
        assertEquals(1000.0, jsonObject.getJsonNumber("volume").doubleValue());
        assertEquals(0, jsonObject.getJsonObject("topLosers").size());
        assertEquals(0, jsonObject.getJsonObject("topGainers").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSONWithGainers_xxYV1() {
        Collection<QuoteDataBean> gainers = new ArrayList<>();
        gainers.add(new QuoteDataBean());
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                gainers, new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertNotNull(jsonObject);
        assertEquals(1, jsonObject.getJsonObject("topGainers").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSONWithLosers_ipWY2() {
        Collection<QuoteDataBean> losers = new ArrayList<>();
        losers.add(new QuoteDataBean());
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), losers);
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertNotNull(jsonObject);
        assertEquals(1, jsonObject.getJsonObject("topLosers").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeWith100PercentCoverage_EBkK1_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        double volume = 100.0;
        marketSummaryDataBean.setVolume(volume);
        marketSummaryDataBean.setVolume(0.0);
        marketSummaryDataBean.setVolume(-100.0);
        assertEquals(volume, marketSummaryDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeWith100PercentCoverage_EBkK1_2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        double volume = 100.0;
        marketSummaryDataBean.setVolume(volume);
        marketSummaryDataBean.setVolume(0.0);
        marketSummaryDataBean.setVolume(-100.0);
        assertEquals(0.0, marketSummaryDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSON_Eato0_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertNotNull(jsonObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSON_Eato0_2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertEquals(BigDecimal.ONE.toString(), jsonObject.getString("tsia"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSON_Eato0_3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertEquals(1000.0, jsonObject.getJsonNumber("volume").doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSON_Eato0_4() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertEquals(0, jsonObject.getJsonObject("topLosers").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSON_Eato0_5() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertEquals(0, jsonObject.getJsonObject("topGainers").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSONWithGainers_xxYV1_1() {
        Collection<QuoteDataBean> gainers = new ArrayList<>();
        gainers.add(new QuoteDataBean());
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                gainers, new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertNotNull(jsonObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSONWithGainers_xxYV1_2() {
        Collection<QuoteDataBean> gainers = new ArrayList<>();
        gainers.add(new QuoteDataBean());
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                gainers, new ArrayList<QuoteDataBean>());
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertEquals(1, jsonObject.getJsonObject("topGainers").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSONWithLosers_ipWY2_1() {
        Collection<QuoteDataBean> losers = new ArrayList<>();
        losers.add(new QuoteDataBean());
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), losers);
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertNotNull(jsonObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToJSONWithLosers_ipWY2_2() {
        Collection<QuoteDataBean> losers = new ArrayList<>();
        losers.add(new QuoteDataBean());
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(
                                BigDecimal.ONE, BigDecimal.TEN, 1000.0,
                                new ArrayList<QuoteDataBean>(), losers);
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        assertEquals(1, jsonObject.getJsonObject("topLosers").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_0_ZizN0_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal result = marketSummaryDataBean.getGainPercent();
        assertEquals(new BigDecimal(0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeWith100PercentCoverage_EBkK1_2_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        double volume = 10 - 100.0;
        marketSummaryDataBean.setVolume(volume);
        marketSummaryDataBean.setVolume(-100.0);
        marketSummaryDataBean.setVolume(-10 - 100.0);
        assertEquals(-100.0, marketSummaryDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolumeWithNegativeVolume_uPaZ2_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("10-1000.00"), new BigDecimal("9-1000.00"), -100 - 1000.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        double volume = marketSummaryDataBean.getVolume();
        assertEquals(-1000.0, volume);
    }
}