/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2EntityCollection_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet2Session2EntityCollection pingservlet2session2entitycollection;
    private TradeServices tradeSLSBLocal;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithNullConfig_PhRN1() {
        PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
        try {
            servlet.init(null);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        pingservlet2session2entitycollection = new PingServlet2Session2EntityCollection();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingservlet2session2entitycollection.doPost(request, response);
        verify(request, times(1)).getParameter("param");
        verify(response, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_Iwdg0() throws ServletException, IOException {
        PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
        assertEquals(200, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_EtLf0() {
        PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
        String result = servlet.getServletInfo();
        assertEquals("web primitive, tests Servlet to Session to Entity returning a collection of Entity EJBs", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_HoldingsNull_cByg1() throws Exception {
        PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getContextPath()).thenReturn("/Trade2");
        when(request.getPathInfo()).thenReturn("/app");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        verify(response).getWriter();
        verify(request).getContextPath();
        verify(request).getPathInfo();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_KAdb0_1() throws Exception {
        pingservlet2session2entitycollection = mock(PingServlet2Session2EntityCollection.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2session2entitycollection).init(config);
        pingservlet2session2entitycollection.init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_KAdb0_2() throws Exception {
        pingservlet2session2entitycollection = mock(PingServlet2Session2EntityCollection.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2session2entitycollection).init(config);
        pingservlet2session2entitycollection.init(config);
        assertEquals(initTime, new java.util.Date().toString());
    }
}