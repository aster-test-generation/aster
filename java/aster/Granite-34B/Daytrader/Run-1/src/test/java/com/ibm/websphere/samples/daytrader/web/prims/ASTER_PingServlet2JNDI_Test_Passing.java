/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2JNDI_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingServlet2JNDI pingservlet2jndi;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @InjectMocks
    PingServlet2JNDI pingServlet2JNDI;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithException_JbLl2() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        ServletConfig config = new MockServletConfig();
        try {
            servlet.init(config);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        // Set up expected behavior for the mocks
        when(request.getParameter("param1")).thenReturn("value1");
        when(request.getParameter("param2")).thenReturn("value2");
        // Call the method to be tested
        pingServlet2JNDI.doPost(request, response);
        // Add meaningful assertions here
        verify(response).setStatus(HttpServletResponse.SC_OK);
        verify(response).getWriter();
        verify(response.getWriter()).write("Mocked response");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_ejZL0() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals("Basic JNDI look up of a JDBC DataSource", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_null_hTLR1() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_empty_VwrW2() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertNotEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_returnsCorrectValue_withMockData_TUQo4() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals("Mock Data", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_xyEe0_1() throws Exception {
        pingservlet2jndi = mock(PingServlet2JNDI.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2jndi).init(config);
        pingservlet2jndi.init(config);
        verify(pingservlet2jndi, times(1)).init(config);
        assertEquals(initTime, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_xyEe0_2() throws Exception {
        pingservlet2jndi = mock(PingServlet2JNDI.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2jndi).init(config);
        pingservlet2jndi.init(config);
        verify(pingservlet2jndi, times(1)).init(config);
        assertEquals(hitCount, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_bCEK0_jzXT0() throws ServletException, IOException {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }
}