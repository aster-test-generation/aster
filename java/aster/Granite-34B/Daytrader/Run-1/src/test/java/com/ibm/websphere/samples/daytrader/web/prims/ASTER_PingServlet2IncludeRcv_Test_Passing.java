/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2IncludeRcv_Test_Passing {
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @InjectMocks
    PingServlet2IncludeRcv pingservlet2includercv;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Set up expected behavior for the mocks
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        // Call the method to be tested
        pingservlet2includercv.doPost(request, response);
        // Add meaningful assertions here
        Mockito.verify(response).setStatus(HttpServletResponse.SC_OK);
        Mockito.verify(response).getWriter();
        Mockito.verify(response).getWriter().println("Mocked response");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_zplw3() throws ServletException, IOException {
        PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        MockitoAnnotations.openMocks(this);
        // Set up expected behavior for the mocks
        when(request.getParameter("paramName")).thenReturn("paramValue");
        // Call the method to be tested
        pingservlet2includercv.doGet(request, response);
        // Add meaningful assertions here
        verify(response).getWriter();
        verify(request, times(1)).getParameter("paramName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_EMvb0() throws ServletException, IOException {
        PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_vrwO0_BuvE0() throws ServletException, IOException {
        PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_YFot2_KGsn0() throws ServletException, IOException {
        PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }
}