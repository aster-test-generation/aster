/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;
import javax.sql.DataSource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirectDBUtils_Test_Failing {
    @Mock
    private DataSource datasource;
    TradeDirectDBUtils tradedirectdbutils;
    Connection connection;
    PreparedStatement preparedstatement;
    ResultSet resultset;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckDBProductName_TnGS0() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        String dbProductName = tradeDirectDBUtils.checkDBProductName();
        assertNotNull(dbProductName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBuffer_ZqXR0() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("ddlFile.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(30, sqlBuffer.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithEmptyFile_XQVS1() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("emptyFile.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(0, sqlBuffer.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithNoSemicolon_chSE4() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("ddlFileNoSemicolon.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(1, sqlBuffer.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithSingleLine_rBSh5() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("ddlFileSingleLine.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(1, sqlBuffer.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithMultipleLines_jXHo6() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("ddlFileMultipleLines.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(2, sqlBuffer.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithComments_vZQH7() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("ddlFileWithComments.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(1, sqlBuffer.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithInvalidComments_OJhd8() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("ddlFileWithInvalidComments.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(1, sqlBuffer.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDB_YeCc0_jfMU0() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        tradeDirectDBUtils.buildDB(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithInvalidFile_pZzB2_fid2() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("invalidFile.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Exception exception = null;
        try {
            tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        } catch (Exception e) {
            exception = e;
        }
        assertEquals(true, exception instanceof IOException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithNoSemicolon_chSE4_fid2() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("ddlFileNoSemicolon.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(0, sqlBuffer.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseDDLToBufferWithInvalidComments_OJhd8_fid2() throws Exception {
        InputStream ddlFile = getClass().getResourceAsStream("ddlFileWithInvalidComments.txt");
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        Object[] sqlBuffer = tradeDirectDBUtils.parseDDLToBuffer(ddlFile);
        assertEquals(0, sqlBuffer.length);
    }
}