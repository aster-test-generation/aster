/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedExecutor_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingManagedExecutor pingmanagedexecutor;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    private ManagedExecutorService mes;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_0_vjeV0() throws Exception {
        PingManagedExecutor fixture = new PingManagedExecutor();
        String result = fixture.getServletInfo();
        assertEquals("Tests a ManagedExecutor", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_16_DDxc16() throws Exception {
        PingManagedExecutor fixture = new PingManagedExecutor();
        fixture.getServletInfo();
        assertEquals("Tests a ManagedExecutor", "Tests a ManagedExecutor");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        initTime = "2022-01-01";
        mes = mock(ManagedExecutorService.class);
        doNothing().when(mes).submit(any(Runnable.class));
        pingmanagedexecutor = new PingManagedExecutor();
        hitCount = 0;
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(res.getOutputStream()).thenReturn(out);
        when(req.startAsync()).thenReturn(mock(AsyncContext.class));
        pingmanagedexecutor.doGet(req, res);
        verify(res, times(1)).setContentType("text/html");
        verify(out, times(1)).println("<html><head><title>PingManagedExecutor</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping ManagedExecutor<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>  </body></html>");
        verify(mes, times(1)).submit(any(Runnable.class));
        verify(out, times(1)).println("<b>HitCount: " + ++hitCount + "</b><br/>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_undI0() throws Exception {
        PingManagedExecutor managedExecutor = new PingManagedExecutor();
        managedExecutor.doGet(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_lFif0_1() throws Exception {
        pingmanagedexecutor = mock(PingManagedExecutor.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingmanagedexecutor).init(config);
        pingmanagedexecutor.init(config);
        assertEquals(initTime, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_lFif0_2() throws Exception {
        pingmanagedexecutor = mock(PingManagedExecutor.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingmanagedexecutor).init(config);
        pingmanagedexecutor.init(config);
        assertEquals(hitCount, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_lLoE0_Sdsz0() throws ServletException, IOException {
        PingManagedExecutor executor = new PingManagedExecutor();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        executor.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.openMocks(this);
        pingmanagedexecutor = new PingManagedExecutor();
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        pingmanagedexecutor.doPost(request, response);
        Mockito.verify(response).setStatus(HttpServletResponse.SC_OK);
        Mockito.verify(response).getWriter();
        Mockito.verify(response.getWriter()).println("Mocked response");
    }
}