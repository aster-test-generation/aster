/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_pxEK0() {
        HoldingData holdingData = new HoldingData();
        double actual = holdingData.getQuantity();
        double expected = 0.0;
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantityWithPositiveValue_RcAO1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuantity(100.0);
        double actual = holdingData.getQuantity();
        double expected = 100.0;
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantityWithZeroValue_KmpR3() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuantity(0.0);
        double actual = holdingData.getQuantity();
        double expected = 0.0;
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithNull_tdeF1() {
        HoldingData holdingData = new HoldingData();
        String quoteID = holdingData.getQuoteID();
        assertNull(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithInvalidValue_nrLw4() {
        HoldingData holdingData = new HoldingData();
        String quoteID = holdingData.getQuoteID();
        assertNotEquals("67890", quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_mDNd0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal("100.00");
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceNull_zJoA1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = null;
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceZero_xRUe2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = BigDecimal.ZERO;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceZero_xRUe2_fid1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = BigDecimal.ZERO;
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_jcbl0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = new BigDecimal("100.00");
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceNull_hJCE1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = null;
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceZero_OlHL2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = BigDecimal.ZERO;
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDateWithNullPurchaseDate_tcUI1() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = holdingData.getPurchaseDate();
        assertNull(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDateWithNonNullPurchaseDate_KzGW2() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date();
        holdingData.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holdingData.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBasis_gJdW0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal basis = new BigDecimal("100.00");
        holdingData.setBasis(basis);
        assertEquals(basis, holdingData.getBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBasisWithZeroValue_AImN1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal basis = BigDecimal.ZERO;
        holdingData.setBasis(basis);
        assertEquals(basis, holdingData.getBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_HPHP0() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date();
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithNullDate_VDnx1() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = null;
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithFutureDate_cOoV2() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date(System.currentTimeMillis() + 1000000);
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithPastDate_KCwy3() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date(System.currentTimeMillis() - 1000000);
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithRandomDate_QPAU5() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date(1234567890);
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithTodayDate_ryTw6() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date(System.currentTimeMillis());
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithYesterdayDate_OJGn7() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date(System.currentTimeMillis() - 86400000);
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithTomorrowDate_DsSx8() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date(System.currentTimeMillis() + 86400000);
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithMaxDate_okis9() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date(253402300799999L);
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithMinDate_ZvDj10() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date(-253402300800000L);
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_AxLF0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = new BigDecimal("100.00");
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNull_HUGn1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setGain(null);
        assertNull(holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithZero_hzHf2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = BigDecimal.ZERO;
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_skEb0() {
        HoldingData holdingData = new HoldingData();
        String quoteID = "12345";
        holdingData.setQuoteID(quoteID);
        assertEquals(quoteID, holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteIDNull_rFis1() {
        HoldingData holdingData = new HoldingData();
        String quoteID = null;
        holdingData.setQuoteID(quoteID);
        assertEquals(quoteID, holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteIDEmpty_lyzC2() {
        HoldingData holdingData = new HoldingData();
        String quoteID = "";
        holdingData.setQuoteID(quoteID);
        assertEquals(quoteID, holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_ewfK0() {
        HoldingData hd = new HoldingData();
        hd.setPrice(new BigDecimal(100));
        assertEquals(new BigDecimal(100), hd.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketValue_positiveValue_Hgmd2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setMarketValue(BigDecimal.ONE);
        BigDecimal marketValue = holdingData.getMarketValue();
        assertEquals(BigDecimal.ONE, marketValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketValue_negativeValue_APsi3() {
        HoldingData holdingData = new HoldingData();
        holdingData.setMarketValue(BigDecimal.ONE.negate());
        BigDecimal marketValue = holdingData.getMarketValue();
        assertEquals(BigDecimal.ONE.negate(), marketValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketValue_nullValue_Ywdp4() {
        HoldingData holdingData = new HoldingData();
        holdingData.setMarketValue(null);
        BigDecimal marketValue = holdingData.getMarketValue();
        assertNull(marketValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingIDWithRandomObject_iiQk2() {
        HoldingData holdingData = new HoldingData();
        Integer actual = holdingData.getHoldingID();
        Integer expected = new Random().nextInt();
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_gbke0() {
        HoldingData holdingData = new HoldingData();
        double quantity = 100.0;
        holdingData.setQuantity(quantity);
        assert holdingData.getQuantity() == quantity;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithZeroValue_qmKp2() {
        HoldingData holdingData = new HoldingData();
        double quantity = 0.0;
        holdingData.setQuantity(quantity);
        assert holdingData.getQuantity() == quantity;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeValue_yEfb3() {
        HoldingData holdingData = new HoldingData();
        double quantity = -100.0;
        holdingData.setQuantity(quantity);
        assert holdingData.getQuantity() == quantity;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValue_bEBP0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal("100.00");
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueNull_EtvF1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = null;
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueZero_yZIa2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = BigDecimal.ZERO;
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueNegative_NOox3() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal("-100.00");
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_gQmS0() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = 1;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDNull_QiNO1() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = null;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDNegative_cULg2() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = -1;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDZero_WSvj3() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = 0;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDPositive_uOBI4() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = 100;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDMax_pNgv5() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = Integer.MAX_VALUE;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDMin_xumE6() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = Integer.MIN_VALUE;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_dXCR0_etRU0() {
        HoldingData holdingData = new HoldingData();
        Integer actual = holdingData.getHoldingID();
        Integer expected = holdingData.getHoldingID();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithMultipleThreads_mfiK8() throws InterruptedException {
        HoldingData holdingData = new HoldingData();
        Thread thread1 = new Thread(() -> {
            String quoteID1 = holdingData.getQuoteID();
            assertNotNull(quoteID1);
        });
        Thread thread2 = new Thread(() -> {
            String quoteID2 = holdingData.getQuoteID();
            assertNotNull(quoteID2);
        });
        thread1.start();
        thread2.start();
        thread1.join();
        thread2.join();
    }
}