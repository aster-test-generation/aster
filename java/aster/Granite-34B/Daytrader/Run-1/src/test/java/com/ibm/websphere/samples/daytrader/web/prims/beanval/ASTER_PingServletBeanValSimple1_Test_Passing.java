/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple1_Test_Passing {
    private static LocalDateTime initTime;
    PingServletBeanValSimple1 pingservletbeanvalsimple1;
    @Mock
    HttpServletRequest mockHttpServletRequest;
    @Mock
    HttpServletResponse mockHttpServletResponse;
    @InjectMocks
    PingServletBeanValSimple1 pingServletBeanValSimple1;
    private static int hitCount = 0;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithNullConfig_vlVK1() {
        PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
        try {
            servlet.init(null);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithMultipleConfigsAndNull_vaFG8() {
        PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
        ServletConfig config1 = new MockServletConfig();
        ServletConfig config2 = null;
        try {
            servlet.init(config1);
            servlet.init(config2);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_Sduq0() throws ServletException, IOException {
        PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_RVOK0() {
        PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        pingservletbeanvalsimple1 = mock(PingServletBeanValSimple1.class);
        initTime = LocalDateTime.now();
        hitCount = 0;
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        SimpleBean1 simpleBean1 = mock(SimpleBean1.class);
        when(res.getOutputStream()).thenReturn(out);
        when(new SimpleBean1()).thenReturn(simpleBean1);
        pingservletbeanvalsimple1.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(simpleBean1).checkInjectionValidation();
        verify(out).println("<html><head><title>Ping Servlet Bean Validation Simple</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet Bean Validation Simple<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>  <B>Hit Count: " + ++hitCount + "</B></body></html>");
    }
}