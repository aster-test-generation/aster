/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataBean_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen2_wdIn1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("processing");
        boolean actual = orderDataBean.isOpen();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen3_Krgd2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("completed");
        boolean actual = orderDataBean.isOpen();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_HcIf0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        boolean actual = orderDataBean.equals(null);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNonOrderDataBeanObject_gVYi1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        boolean actual = orderDataBean.equals(new Object());
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithOrderDataBeanObjectWithDifferentOrderID_llXQ2() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        OrderDataBean orderDataBean2 = new OrderDataBean(2, "orderType", "orderStatus", new Date(), new Date(), 2.0, new BigDecimal(2.0), new BigDecimal(2.0), "symbol");
        boolean actual = orderDataBean1.equals(orderDataBean2);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithOrderDataBeanObjectWithNullOrderID_Pfgl3() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        OrderDataBean orderDataBean2 = new OrderDataBean(null, "orderType", "orderStatus", new Date(), new Date(), 2.0, new BigDecimal(2.0), new BigDecimal(2.0), "symbol");
        boolean actual = orderDataBean1.equals(orderDataBean2);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithOrderDataBeanObjectWithSameOrderID_kBBv4() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 2.0, new BigDecimal(2.0), new BigDecimal(2.0), "symbol");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "orderType", "orderStatus", new Date(), new Date(), 2.0, new BigDecimal(2.0), new BigDecimal(2.0), "symbol");
        boolean actual = orderDataBean1.equals(orderDataBean2);
        boolean expected = true;
        assertEquals(expected, actual);
    }
}