/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingServlet2Session pingservlet2session;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @InjectMocks
    PingServlet2Session pingServlet2Session;
    private TradeServices tradeSLSBLocal;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.openMocks(this);
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        Mockito.doNothing().when(pingServlet2Session).doGet(request, response);
        pingServlet2Session.doPost(request, response);
        Mockito.verify(pingServlet2Session, Mockito.times(1)).doGet(request, response);
        Mockito.verify(request, Mockito.times(1)).getParameter("param1");
        Mockito.verify(request, Mockito.times(1)).getParameter("param2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_DXkP3() throws ServletException, IOException {
        PingServlet2Session servlet = new PingServlet2Session();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_Kpjk0() {
        PingServlet2Session servlet = new PingServlet2Session();
        String expected = "web primitive, configured with trade runtime configs, tests Servlet to Session EJB path";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_Null_cdqX1() {
        PingServlet2Session servlet = new PingServlet2Session();
        String expected = null;
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_Empty_ynGp2() {
        PingServlet2Session servlet = new PingServlet2Session();
        String expected = "";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_Tab_EpNc4() {
        PingServlet2Session servlet = new PingServlet2Session();
        String expected = "\t";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_Newline_gKYS5() {
        PingServlet2Session servlet = new PingServlet2Session();
        String expected = "\n";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_CarriageReturn_FkaT6() {
        PingServlet2Session servlet = new PingServlet2Session();
        String expected = "\r";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_AHlF0() throws Exception {
        PingServlet2Session servlet = new PingServlet2Session();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_esuh0_1() throws Exception {
        pingservlet2session = mock(PingServlet2Session.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2session).init(config);
        pingservlet2session.init(config);
        verify(pingservlet2session, times(1)).init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_esuh0_2() throws Exception {
        pingservlet2session = mock(PingServlet2Session.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2session).init(config);
        pingservlet2session.init(config);
        verify(pingservlet2session, times(1)).init(config);
        assertEquals(initTime, new java.util.Date().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_jWlO0_LImv0() throws ServletException, IOException {
        PingServlet2Session servlet = new PingServlet2Session();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_Fmsn1_pWfx0() throws ServletException, IOException {
        PingServlet2Session servlet = new PingServlet2Session();
        HttpServletRequest request = null;
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_Khgc2_MkhX0() throws ServletException, IOException {
        PingServlet2Session servlet = new PingServlet2Session();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }
}