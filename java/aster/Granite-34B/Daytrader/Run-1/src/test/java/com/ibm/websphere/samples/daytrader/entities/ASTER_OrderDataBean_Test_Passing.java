/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
    OrderDataBean orderdatabean;
    private String symbol;
    private Integer orderID;
    private BigDecimal price;
    @Mock
    Log log;
    private HoldingDataBean holding;
    @Mock
    AccountDataBean accountDataBean;
    @Mock
    HoldingDataBean holdingDataBean;
    @Mock
    QuoteDataBean quoteDataBean;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    private QuoteDataBean quote;
    private String orderStatus;
    private AccountDataBean account;
    private Date openDate;
    private Date completionDate;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_1() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_5() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_6() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_7() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_8() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_9() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_10() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_11() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_12() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_13() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_fqHc0() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(OrderDataBean.class, order.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_uvOV1() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(order.hashCode(), order.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_Kbde3() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(null, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_KqpS6() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(null, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_hysm7() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_KKLq13() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(null, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetSymbol() throws Exception {
        orderdatabean = new OrderDataBean();
        symbol = "TESTSYMBOL";
        orderdatabean.setSymbol(symbol);
        assertEquals(symbol, orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_LcDQ0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        orderDataBean.setSymbol("TEST2");
        assertEquals("TEST2", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolNull_sJvJ1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        orderDataBean.setSymbol(null);
        assertEquals(null, orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolEmpty_oXpm2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        orderDataBean.setSymbol("");
        assertEquals("", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "Symbol");
        int expected = 1;
        int actual = orderdatabean.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_ykgL0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        int expected = 1;
        int actual = order.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullOrderID_kUVT1() {
        OrderDataBean order = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        int expected = 0;
        int actual = order.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "TEST");
        assertEquals(new BigDecimal(100.0), orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_Tccd0() {
        OrderDataBean order = new OrderDataBean();
        order.setPrice(new BigDecimal(100.00));
        assertEquals(new BigDecimal(100.00), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_Nlqd0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        order.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithNullValues_QikX1() {
        OrderDataBean order = new OrderDataBean();
        order.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithAllValues_pNox2() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(10.0), "ProfileID");
        QuoteDataBean quote = new QuoteDataBean("Symbol", "CompanyName", 100.0, new BigDecimal(10.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 10.0);
        HoldingDataBean holding = new HoldingDataBean(100.0, new BigDecimal(10.0), new Date(), account, quote);
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        order.setAccount(account);
        order.setQuote(quote);
        order.setHolding(holding);
        order.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = new HoldingDataBean();
        orderdatabean.setHolding(holding);
        assertEquals(holding, orderdatabean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_ZSHI0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingNull_XrDQ1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(null);
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType_rLFY12_fid1() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBoolean() ? "buy" : "sell", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcancel() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "NEW", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " IBM");
        orderdatabean.cancel();
        assertEquals("cancelled", orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancel_unTI0() {
        OrderDataBean order = new OrderDataBean();
        order.cancel();
        assertEquals("cancelled", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderID() throws Exception {
        orderdatabean = new OrderDataBean();
        Integer orderID = 1;
        orderdatabean.setOrderID(orderID);
        assertEquals(orderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_KBFC0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(1);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDNull_XvQp1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = null;
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDZero_dQua2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(0);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDMaxInt_aiHC3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(Integer.MAX_VALUE);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDMinInt_smYK4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(Integer.MIN_VALUE);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuantity(10.0);
        assertEquals(10.0, orderdatabean.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_ijpC0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(100.0, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest2_KfXD1() {
        OrderDataBean order = new OrderDataBean(2, "SELL", "EXECUTED", new Date(), new Date(), 200.0, new BigDecimal(20.0), new BigDecimal(2.0), "Symbol");
        assertEquals(200.0, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest3_JyrV2() {
        OrderDataBean order = new OrderDataBean(3, "BUY", " CLOSED", new Date(), new Date(), 300.0, new BigDecimal(30.0), new BigDecimal(3.0), "Symbol");
        assertEquals(300.0, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(5.0), "XYZ");
        assertEquals(new BigDecimal(5.0), orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_BzYP0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "XYZ");
        BigDecimal orderFee = order.getOrderFee();
        assertEquals(new BigDecimal(0.0), orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeWithPositiveOrderFee_wKCw4() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        BigDecimal orderFee = order.getOrderFee();
        assertEquals(new BigDecimal(1.0), orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderType() throws Exception {
        orderdatabean = new OrderDataBean();
        String orderType = "buy";
        orderdatabean.setOrderType(orderType);
        assertEquals(orderType, orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderType_Fvwq0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("BUY");
        assertEquals("BUY", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithNull_GENB1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType(null);
        assertNull(orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithEmpty_QFcb2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("");
        assertEquals("", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithSpecialCharacter_RUFX3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("^&*()_+");
        assertEquals("^&*()_+", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithMaximumLength_lGNg4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderType = "BUY";
        orderDataBean.setOrderType(orderType);
        assertEquals(orderType, orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithMinimumLength_ijfb6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderType = "BU";
        orderDataBean.setOrderType(orderType);
        assertEquals(orderType, orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() throws Exception {
        quote = mock(QuoteDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);
        QuoteDataBean actualQuote = orderdatabean.getQuote();
        assertEquals(quote, actualQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithNullParams_vOvP2() {
        OrderDataBean orderDataBean = new OrderDataBean(null, null, null, null, null, 0.0, null, null, null);
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPrice() throws Exception {
        orderdatabean = new OrderDataBean();
        BigDecimal price = new BigDecimal(100.00);
        orderdatabean.setPrice(price);
        assertEquals(price, orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_zEYL0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setPrice(BigDecimal.TEN);
        assertEquals(BigDecimal.TEN, orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNull_qEFi1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setPrice(null);
        assertNull(orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        OrderDataBean other = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertTrue(orderdatabean.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_UyEy0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        boolean actual = orderDataBean.equals(null);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectOfDifferentType_aYSE1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        boolean actual = orderDataBean.equals("test");
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectOfSameTypeAndDifferentOrderID_DRMd2() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        OrderDataBean orderDataBean2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        boolean actual = orderDataBean1.equals(orderDataBean2);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectOfSameTypeAndSameOrderID_MCxp3() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        boolean actual = orderDataBean1.equals(orderDataBean2);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectOfSameTypeAndNullOrderID_vsRx4() {
        OrderDataBean orderDataBean1 = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        OrderDataBean orderDataBean2 = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        boolean actual = orderDataBean1.equals(orderDataBean2);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderStatus() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " SYMBOL");
        assertEquals("OPEN", orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderStatusTest_mEOG0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        String orderStatus = orderDataBean.getOrderStatus();
        assertEquals("OPEN", orderStatus);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderStatusTest2_vUMU1() {
        OrderDataBean orderDataBean = new OrderDataBean(2, "SELL", "EXECUTED", new Date(), new Date(), 50.0, new BigDecimal(20.0), new BigDecimal(2.0), "Symbol");
        String orderStatus = orderDataBean.getOrderStatus();
        assertEquals("EXECUTED", orderStatus);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderStatus() throws Exception {
        orderdatabean = new OrderDataBean();
        String newOrderStatus = "New Status";
        orderdatabean.setOrderStatus(newOrderStatus);
        assertEquals(newOrderStatus, orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_yVwY0() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("testStatus");
        assertEquals("testStatus", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusNull_UXth1() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus(null);
        assertEquals(null, order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusEmpty_LxOK2() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("");
        assertEquals("", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusMaxLength_BPhk4() {
        OrderDataBean order = new OrderDataBean();
        String maxLengthStatus = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget est vel nisl eleifend eleifend. Integer ac orci euismod, bibendum velit vel, suscipit velit. Vivamus auctor, est et suscipit commodo, nisl velit bibendum velit, a efficitur turpis velit id nisl. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Fusce auctor, est et suscipit commodo, nisl velit bibendum velit, a efficitur turpis velit id nisl. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.";
        order.setOrderStatus(maxLengthStatus);
        assertEquals(maxLengthStatus, order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol() throws Exception {
        quote = mock(QuoteDataBean.class);
        symbol = "TEST_SYMBOL";
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);
        orderdatabean.setSymbol(symbol);
        when(quote.getSymbol()).thenReturn(symbol);
        assertEquals(symbol, orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderID() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), " SYMBOL");
        assertEquals(1, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_mEmg0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertEquals(1, order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderIDWithNoParameter_dMbR1() {
        OrderDataBean order = new OrderDataBean();
        assertEquals(null, order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderIDWithHolding_Yfgg2() {
        HoldingDataBean holding = new HoldingDataBean(100.0, new BigDecimal(10.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1000.0), new BigDecimal(1000.0), "123"), new QuoteDataBean("XYZ"));
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1000.0), new BigDecimal(1000.0), "123"), new QuoteDataBean("XYZ"), holding);
        assertEquals(null, order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullValues_cwtN1() {
        OrderDataBean order = new OrderDataBean();
        String expected = "Order null\n\t      orderType: null\n\t    orderStatus: null\n\t       openDate: null\n\t completionDate: null\n\t       quantity: 0.0\n\t          price: null\n\t       orderFee: null\n\t         symbol: null";
        assertEquals(expected, order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_MiTJ0() {
        AccountDataBean account = new AccountDataBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setAccount(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderFee() throws Exception {
        orderdatabean = new OrderDataBean();
        BigDecimal orderFee = new BigDecimal(100.00);
        orderdatabean.setOrderFee(orderFee);
        assertEquals(orderFee, orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_ZJXw0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(100.00));
        assertEquals(new BigDecimal(100.00), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFeeWithNull_LAqN1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(null);
        assertNull(orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFeeWithNegativeValue_xWfT2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(-100.00));
        assertEquals(new BigDecimal(-100.00), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFeeWithZeroValue_nHDB3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(0.00));
        assertEquals(new BigDecimal(0.00), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate() throws Exception {
        openDate = new Date();
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", openDate, null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(openDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_THDQ0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(new Date(), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDateWithNullOpenDate_jToh1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", null, null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(null, order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOpenDate() throws Exception {
        orderdatabean = new OrderDataBean();
        Date newOpenDate = new Date();
        orderdatabean.setOpenDate(newOpenDate);
        assertEquals(newOpenDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_aJoZ0() {
        OrderDataBean order = new OrderDataBean();
        Date date = new Date();
        order.setOpenDate(date);
        assertEquals(date, order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateWithNull_oQFU1() {
        OrderDataBean order = new OrderDataBean();
        order.setOpenDate(null);
        assertEquals(null, order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateWithInvalidDate_EgnS2() {
        OrderDataBean order = new OrderDataBean();
        Date date = new Date(Long.MIN_VALUE);
        order.setOpenDate(date);
        assertEquals(date, order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_zuna0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        orderDataBean.setHolding(holdingDataBean);
        assertEquals(orderDataBean.getHolding(), holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingNull_nWUM1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(null);
        assertEquals(orderDataBean.getHolding(), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompletionDate_hbDi0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertEquals(new Date(), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompletionDateNull_CJxc1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertEquals(null, order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisSell() throws Exception {
        orderdatabean = new OrderDataBean(1, "sell", "open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "symbol");
        boolean result = orderdatabean.isSell();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSellWithSellOrderType_Hzay0() {
        OrderDataBean order = new OrderDataBean("sell", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
        boolean actual = order.isSell();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSellWithNonSellOrderType_BYwJ1() {
        OrderDataBean order = new OrderDataBean("buy", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
        boolean actual = order.isSell();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderType() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderType("buy");
        assertEquals("buy", orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderTypeTest1_pJlE0() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1"), new QuoteDataBean("1", "1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0), new HoldingDataBean(100.0, new BigDecimal(100.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1"), new QuoteDataBean("1", "1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0)));
        String orderType = order.getOrderType();
        assertEquals("BUY", orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderTypeTest2_IAqe1() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1"), new QuoteDataBean("1", "1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0), new HoldingDataBean(100.0, new BigDecimal(100.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1"), new QuoteDataBean("1", "1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0)));
        String orderType = order.getOrderType();
        assertNotEquals("SELL", orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderTypeTest3_nPTv2() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1"), new QuoteDataBean("1", "1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0), new HoldingDataBean(100.0, new BigDecimal(100.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "1"), new QuoteDataBean("1", "1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0)));
        String orderType = order.getOrderType();
        assertNotNull(orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("completed");
        assertTrue(orderdatabean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithCompletedStatus_hxHt0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "completed", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertTrue(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithAlertCompletedStatus_VWCb1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "alertcompleted", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertTrue(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithCancelledStatus_dbUP2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "cancelled", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertTrue(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithOtherStatus_IIBR3() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertFalse(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithEmptyStatus_Oszo5() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertFalse(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_vKOr0() {
        QuoteDataBean quote = new QuoteDataBean("symbol");
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteNull_uKen1() {
        QuoteDataBean quote = null;
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteVolume_lwjl2() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(100.0, order.getQuote().getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuotePrice_KNHV3() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 0.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 0.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(new BigDecimal(10.0), order.getQuote().getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteOpen_zrzw4() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 0.0, new BigDecimal(0.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 0.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(new BigDecimal(10.0), order.getQuote().getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteLow_uQcP5() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(10.0), new BigDecimal(10.0), 0.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(new BigDecimal(10.0), order.getQuote().getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteHigh_iJlz6() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(10.0), 0.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(new BigDecimal(10.0), order.getQuote().getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteChange_RMZZ7() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 10.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(10.0, order.getQuote().getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteCompanyName_LNTj8() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals("companyName", order.getQuote().getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteSymbol_KSFU9() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals("symbol", order.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuantity() throws Exception {
        orderdatabean = new OrderDataBean();
        double quantity = 10.0;
        orderdatabean.setQuantity(quantity);
        assertEquals(quantity, orderdatabean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_nkPX0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(100.0);
        assertEquals(100.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithZeroValue_WcKh2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(0.0);
        assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithMaxDoubleValue_aTKU4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(Double.MAX_VALUE);
        assertEquals(Double.MAX_VALUE, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithMinDoubleValue_zTRK5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(Double.MIN_VALUE);
        assertEquals(Double.MIN_VALUE, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisBuy() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderType("buy");
        assertTrue(orderdatabean.isBuy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuyWithBuyOrderType_aIoq0() {
        OrderDataBean order = new OrderDataBean("buy", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
        assertTrue(order.isBuy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuyWithSellOrderType_bEhv1() {
        OrderDataBean order = new OrderDataBean("sell", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
        assertFalse(order.isBuy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompletionDate() throws Exception {
        orderdatabean = new OrderDataBean();
        Date newCompletionDate = new Date();
        orderdatabean.setCompletionDate(newCompletionDate);
        assertEquals(newCompletionDate, orderdatabean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_GjGk0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        Date completionDate = new Date();
        orderDataBean.setCompletionDate(completionDate);
        assertEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateNull_mHCK1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        orderDataBean.setCompletionDate(null);
        assertNull(orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateAfterCompletion_OWPl3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        Date completionDate = new Date();
        orderDataBean.setCompletionDate(completionDate);
        orderDataBean.setOrderStatus("Completed");
        assertEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount() throws Exception {
        account = AccountDataBean.getRandomInstance();
        orderdatabean = new OrderDataBean(null, null, null, null, null, 0, null, null, null);
        orderdatabean.setAccount(account);
        assertEquals(account, orderdatabean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountForCoverage_xtmF1() {
        OrderDataBean orderData = new OrderDataBean();
        orderData.getAccount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCancelled() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("cancelled");
        assertTrue(orderdatabean.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelledTrue_Gfzk0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "cancelled", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertTrue(order.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelledFalse_BcBN1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertFalse(order.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertEquals(0, holdingDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(HoldingDataBean.getRandomInstance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_10() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDMinLong_YBtf6_lRTZ0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Long orderID = Long.MIN_VALUE;
        orderDataBean.setOrderID(orderID.intValue());
        assertEquals(orderID.intValue(), orderDataBean.getOrderID());
    }
}