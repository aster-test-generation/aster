/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletCDIEvent_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingServletCDIEvent pingservletcdievent;
    @Mock
    ServletConfig config;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        pingservletcdievent = new PingServletCDIEvent();
        when(config.getInitParameter("param1")).thenReturn("value1");
        when(config.getInitParameter("param2")).thenReturn("value2");
        pingservletcdievent.init(config);
        assertEquals("value1", pingservletcdievent.getInitParameter("param1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        pingservletcdievent = new PingServletCDIEvent();
        when(config.getInitParameter("param1")).thenReturn("value1");
        when(config.getInitParameter("param2")).thenReturn("value2");
        pingservletcdievent.init(config);
        assertEquals("value2", pingservletcdievent.getInitParameter("param2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnEvent_KBLY0() {
        PingServletCDIEvent pingServletCDIEvent = new PingServletCDIEvent();
        String event = "event";
        pingServletCDIEvent.onEvent(event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnEventWithNullEvent_LFJu1() {
        PingServletCDIEvent pingServletCDIEvent = new PingServletCDIEvent();
        String event = null;
        pingServletCDIEvent.onEvent(event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnEventWithEmptyEvent_PxDn2() {
        PingServletCDIEvent pingServletCDIEvent = new PingServletCDIEvent();
        String event = "";
        pingServletCDIEvent.onEvent(event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        pingservletcdievent = mock(PingServletCDIEvent.class);
        hitCount = 0;
        initTime = "2022-01-01";
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter pw = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(pw);
        pingservletcdievent.doGet(request, response);
        verify(pingservletcdievent, times(1)).doGet(request, response);
        verify(response, times(1)).getWriter();
        verify(pw, times(1)).write(anyString());
        verify(pw, times(1)).flush();
        verify(pw, times(1)).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_dntO0() throws Exception {
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_kIHa0_yjYo0_1() throws Exception {
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.init(null);
        Field initTimeField = PingServletCDIEvent.class.getDeclaredField("initTime");
        initTimeField.setAccessible(true);
        Field hitCountField = PingServletCDIEvent.class.getDeclaredField("hitCount");
        hitCountField.setAccessible(true);
        assertNotNull(initTimeField.get(servlet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_kIHa0_yjYo0_2() throws Exception {
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.init(null);
        Field initTimeField = PingServletCDIEvent.class.getDeclaredField("initTime");
        initTimeField.setAccessible(true);
        Field hitCountField = PingServletCDIEvent.class.getDeclaredField("hitCount");
        hitCountField.setAccessible(true);
        assertEquals(0, hitCountField.get(servlet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        pingservletcdievent = new PingServletCDIEvent();
        when(config.getInitParameter("param1")).thenReturn("value1");
        when(config.getInitParameter("param2")).thenReturn("value2");
        pingservletcdievent.init(config);
        assertEquals("value1", pingservletcdievent.getInitParameter("param1"));
        assertEquals("value2", pingservletcdievent.getInitParameter("param2"));
    }
}