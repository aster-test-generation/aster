/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ListIterator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_KeyBlock_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_sHxV0() {
        KeyBlock keyBlock = new KeyBlock(1, 10);
        assertEquals(10 - 1 + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithNoArgs_UKOG1() {
        KeyBlock keyBlock = new KeyBlock();
        assertEquals(1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithNegativeArgs_azBZ2() {
        KeyBlock keyBlock = new KeyBlock(-1, -10);
        assertEquals(-10 - (-1) + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithSameArgs_nXPq3() {
        KeyBlock keyBlock = new KeyBlock(5, 5);
        assertEquals(5 - 5 + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithZeroArgs_zgkQ4() {
        KeyBlock keyBlock = new KeyBlock(0, 0);
        assertEquals(0 - 0 + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithMaxIntArgs_Fumy5() {
        KeyBlock keyBlock = new KeyBlock(Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE - Integer.MAX_VALUE + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithMinIntArgs_LmyC6() {
        KeyBlock keyBlock = new KeyBlock(Integer.MIN_VALUE, Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE - Integer.MIN_VALUE + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithMaxIntAndMinIntArgs_vEHl7() {
        KeyBlock keyBlock = new KeyBlock(Integer.MAX_VALUE, Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE - Integer.MAX_VALUE + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithMaxIntAndZeroArgs_asDR8() {
        KeyBlock keyBlock = new KeyBlock(Integer.MAX_VALUE, 0);
        assertEquals(0 - Integer.MAX_VALUE + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithMinIntAndZeroArgs_vedQ9() {
        KeyBlock keyBlock = new KeyBlock(Integer.MIN_VALUE, 0);
        assertEquals(0 - Integer.MIN_VALUE + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithMaxIntAndNegativeArgs_Qvub10() {
        KeyBlock keyBlock = new KeyBlock(Integer.MAX_VALUE, -1);
        assertEquals(-1 - Integer.MAX_VALUE + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithMinIntAndNegativeArgs_wUdc11() {
        KeyBlock keyBlock = new KeyBlock(Integer.MIN_VALUE, -1);
        assertEquals(-1 - Integer.MIN_VALUE + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIterator_jixH0_ewcA0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(5);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIterator_jixH0_ewcA0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(5);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithNegativeIndex_kLqH1_ebmt0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(-1);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithNegativeIndex_kLqH1_ebmt0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(-1);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexGreaterThanSize_dHTD2_BrBB0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(15);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexGreaterThanSize_dHTD2_BrBB0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(15);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }
}