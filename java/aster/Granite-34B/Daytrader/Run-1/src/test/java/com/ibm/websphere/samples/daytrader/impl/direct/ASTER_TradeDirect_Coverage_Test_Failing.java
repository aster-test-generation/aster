/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeDirect_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_ShHb0() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.updateQuotePriceVolume("symbol", new BigDecimal(100.00), 1000000.00);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest1_RuBP0() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest2_GWMW1() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid2");
        Assertions.assertNull(trade.getAccountData("uid2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest5_bPHC4() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest6_YNpx5() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest7_xJww6() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest8_VtuM7() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_HXmC0() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.cancelOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_jAXg1() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.cancelOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder4_PCXe3() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.cancelOrder(4, false);
        Assertions.assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder5_mbVV4() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.cancelOrder(5, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder1_QyQb0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_UUQY1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 2;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_zjoX2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 1;
        boolean twoPhase = false;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder4_GLPA3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder6_MlhS5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 2;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder8_nGZW7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeDirect.queueOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder11_WqfK10() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 1;
        boolean twoPhase = false;
        tradeDirect.queueOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_aryI0() throws java.lang.Exception {
        TradeDirect t = new TradeDirect();
        AccountProfileDataBean accountProfileData = null;
        try {
            accountProfileData = t.getAccountProfileData("uid1");
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assertions.assertNotNull(accountProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_rhAO1() throws java.lang.Exception {
        TradeDirect t = new TradeDirect();
        AccountProfileDataBean accountProfileData = null;
        try {
            accountProfileData = t.getAccountProfileData("uid2");
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assertions.assertNotNull(accountProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_fstb2() throws java.lang.Exception {
        TradeDirect t = new TradeDirect();
        AccountProfileDataBean accountProfileData = null;
        try {
            accountProfileData = t.getAccountProfileData("uid3");
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assertions.assertNotNull(accountProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_ZzwS3() throws java.lang.Exception {
        TradeDirect t = new TradeDirect();
        AccountProfileDataBean accountProfileData = null;
        try {
            accountProfileData = t.getAccountProfileData("uid4");
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assertions.assertNotNull(accountProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_BPLN4() throws java.lang.Exception {
        TradeDirect t = new TradeDirect();
        AccountProfileDataBean accountProfileData = null;
        try {
            accountProfileData = t.getAccountProfileData("uid5");
        } catch (Exception e) {
            e.printStackTrace();
        }
        Assertions.assertNotNull(accountProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals("symbol", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest2_GWMW1_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest3_DNcl2() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest4_Igce3() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.logout("uid4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_Zwrz2() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.cancelOrder(3, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder4_PCXe3_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.cancelOrder(4, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder6_ShzE5() throws Exception {
        TradeDirect trade = new TradeDirect();
        trade.cancelOrder(6, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals("symbol", quoteData.getSymbol());
        assertEquals("companyName", quoteData.getCompanyName());
        assertEquals(0.0, quoteData.getVolume(), 0.0);
        assertEquals(new BigDecimal(100), quoteData.getPrice());
        assertEquals(new BigDecimal(100), quoteData.getOpen());
        assertEquals(new BigDecimal(100), quoteData.getLow());
        assertEquals(new BigDecimal(100), quoteData.getHigh());
        assertEquals(0.0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals("symbol", quoteData.getSymbol());
        assertEquals(null, quoteData.getCompanyName());
        assertEquals(0.0, quoteData.getVolume(), 0.0);
        assertEquals(new BigDecimal(100), quoteData.getPrice());
        assertEquals(new BigDecimal(100), quoteData.getOpen());
        assertEquals(new BigDecimal(100), quoteData.getLow());
        assertEquals(new BigDecimal(100), quoteData.getHigh());
        assertEquals(0.0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals("symbol", quoteData.getSymbol());
        assertEquals("companyName", quoteData.getCompanyName());
        assertEquals(0.0, quoteData.getVolume(), 0.0);
        assertEquals(new BigDecimal(0), quoteData.getPrice());
        assertEquals(new BigDecimal(0), quoteData.getOpen());
        assertEquals(new BigDecimal(0), quoteData.getLow());
        assertEquals(new BigDecimal(0), quoteData.getHigh());
        assertEquals(0.0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_sNie0() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertNotNull(orderData);
        } catch (Exception e) {
            fail("Test failed");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_Lggz1() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertNotNull(orderData.getOrderID());
        } catch (Exception e) {
            fail("Test failed");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_sGgA2() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertEquals(orderData.getOrderType(), orderType);
        } catch (Exception e) {
            fail("Test failed");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_ycjv3() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertEquals(orderData.getOrderStatus(), "open");
        } catch (Exception e) {
            fail("Test failed");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest5_wmkD4() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertNotNull(orderData.getOpenDate());
        } catch (Exception e) {
            fail("Test failed");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest6_LqKT5() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertEquals(orderData.getQuantity(), quantity);
        } catch (Exception e) {
            fail("Test failed");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest7_mBuT6() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = trade.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertEquals(orderData.getPrice(), quoteData.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
        } catch (Exception e) {
            fail("Test failed");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_AnfI0() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        try {
            AccountDataBean accountData = trade.register("uid1", "pass1", "fn1", "ad1", "mail1", "cc1", new BigDecimal(1000.00));
            Assertions.assertEquals(new Integer(1000001), accountData.getAccountID());
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_ySgk1() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        try {
            AccountDataBean accountData = trade.register("uid2", "pass2", "fn2", "ad2", "mail2", "cc2", new BigDecimal(2000.00));
            Assertions.assertEquals(new Integer(1000002), accountData.getAccountID());
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister3_bSbM2() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        try {
            AccountDataBean accountData = trade.register("uid3", "pass3", "fn3", "ad3", "mail3", "cc3", new BigDecimal(3000.00));
            Assertions.assertEquals(new Integer(1000003), accountData.getAccountID());
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister4_tnws3() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        try {
            AccountDataBean accountData = trade.register("uid4", "pass4", "fn4", "ad4", "mail4", "cc4", new BigDecimal(4000.00));
            Assertions.assertEquals(new Integer(1000004), accountData.getAccountID());
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister5_eKRs4() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        try {
            AccountDataBean accountData = trade.register("uid5", "pass5", "fn5", "ad5", "mail5", "cc5", new BigDecimal(5000.00));
            Assertions.assertEquals(new Integer(1000005), accountData.getAccountID());
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister6_kPjX5() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        try {
            AccountDataBean accountData = trade.register("uid6", "pass6", "fn6", "ad6", "mail6", "cc6", new BigDecimal(6000.00));
            Assertions.assertEquals(new Integer(1000006), accountData.getAccountID());
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister7_rVJz6() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        try {
            AccountDataBean accountData = trade.register("uid7", "pass7", "fn7", "ad7", "mail7", "cc7", new BigDecimal(7000.00));
            Assertions.assertEquals(new Integer(1000007), accountData.getAccountID());
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister8_ypGj7() throws java.lang.Exception {
        TradeDirect trade = new TradeDirect();
        try {
            AccountDataBean accountData = trade.register("uid8", "pass8", "fn8", "ad8", "mail8", "cc8", new BigDecimal(8000.00));
            Assertions.assertEquals(new Integer(1000008), accountData.getAccountID());
        } catch (Exception e) {
            Assertions.fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin0_CCIj0() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid0", "uid0");
        Assertions.assertEquals(accountData.getProfileID(), "uid0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin1_bXyc1() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid1", "uid1");
        Assertions.assertEquals(accountData.getProfileID(), "uid1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin2_TalG2() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid2", "uid2");
        Assertions.assertEquals(accountData.getProfileID(), "uid2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin3_OuxF3() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid3", "uid3");
        Assertions.assertEquals(accountData.getProfileID(), "uid3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin4_QnNm4() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid4", "uid4");
        Assertions.assertEquals(accountData.getProfileID(), "uid4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin5_OIUA5() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid5", "uid5");
        Assertions.assertEquals(accountData.getProfileID(), "uid5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin6_KotF6() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid6", "uid6");
        Assertions.assertEquals(accountData.getProfileID(), "uid6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin7_FCBi7() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid7", "uid7");
        Assertions.assertEquals(accountData.getProfileID(), "uid7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin8_LEve8() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid8", "uid8");
        Assertions.assertEquals(accountData.getProfileID(), "uid8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin9_FFhs9() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid9", "uid9");
        Assertions.assertEquals(accountData.getProfileID(), "uid9");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin10_aZBN10() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid10", "uid10");
        Assertions.assertEquals(accountData.getProfileID(), "uid10");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin11_KlnZ11() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid11", "uid11");
        Assertions.assertEquals(accountData.getProfileID(), "uid11");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin12_eKbO12() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid12", "uid12");
        Assertions.assertEquals(accountData.getProfileID(), "uid12");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin13_GXJq13() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid13", "uid13");
        Assertions.assertEquals(accountData.getProfileID(), "uid13");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin14_IOTB14() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid14", "uid14");
        Assertions.assertEquals(accountData.getProfileID(), "uid14");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin15_egGa15() throws Exception {
        TradeDirect trade = new TradeDirect();
        AccountDataBean accountData = trade.login("uid15", "uid15");
        Assertions.assertEquals(accountData.getProfileID(), "uid15");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0_2_fid3() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals("companyName", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0_3() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals(0.0, quoteData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0_4() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals(new BigDecimal(100), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0_5() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals(new BigDecimal(100), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0_6() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals(new BigDecimal(100), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0_7() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals(new BigDecimal(100), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_hkej0_8() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(100));
        assertEquals(0.0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals("symbol", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals(null, quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1_3() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals(0.0, quoteData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1_4() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals(new BigDecimal(100), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1_5() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals(new BigDecimal(100), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1_6() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals(new BigDecimal(100), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1_7() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals(new BigDecimal(100), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_GBWc1_8() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", null, new BigDecimal(100));
        assertEquals(0.0, quoteData.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals("symbol", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals("companyName", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4_3() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals(0.0, quoteData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4_4() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals(new BigDecimal(0), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4_5() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals(new BigDecimal(0), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4_6() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals(new BigDecimal(0), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4_7() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals(new BigDecimal(0), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_oBCt4_8() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = trade.createQuote("symbol", "companyName", new BigDecimal(0));
        assertEquals(0.0, quoteData.getChange(), 0.0);
    }
}