/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
    private EntityManager entityManager;
    TradeSLSBBean tradeslsbbean;
    @Mock
    private AccountProfileDataBean accountProfileDataBean;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_TsAS0() {
        QuoteDataBean quote = new QuoteDataBean("TEST", "Test Company", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
        BigDecimal oldPrice = new BigDecimal(10.0);
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange3_UOie2() {
        QuoteDataBean quote = new QuoteDataBean("TEST", "Test Company", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
        BigDecimal oldPrice = new BigDecimal(10.0);
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange4_pLfn3() {
        QuoteDataBean quote = new QuoteDataBean("TEST", "Test Company", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
        BigDecimal oldPrice = new BigDecimal(10.0);
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_zeroNetValue_sxah2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1000.0;
        double netValue = -1.0;
        double expectedReturn = -1.0;
        try {
            double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
            assertEquals(expectedReturn, actualReturn);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_SywQ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_IPEb0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "testUser";
        String password = "testPassword";
        String fullname = "testFullname";
        String address = "testAddress";
        String email = "testEmail";
        String creditcard = "testCreditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullPassword_cEbz1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "testUser";
        String password = null;
        String fullname = "testFullname";
        String address = "testAddress";
        String email = "testEmail";
        String creditcard = "testCreditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterEmptyPassword_rdbd2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "testUser";
        String password = "";
        String fullname = "testFullname";
        String address = "testAddress";
        String email = "testEmail";
        String creditcard = "testCreditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean.getProfileID(), result.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullFullname_rQHJ3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "testUser";
        String password = "testPassword";
        String fullname = null;
        String address = "testAddress";
        String email = "testEmail";
        String creditcard = "testCreditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterEmptyFullname_McaF4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "testUser";
        String password = "testPassword";
        String fullname = "";
        String address = "testAddress";
        String email = "testEmail";
        String creditcard = "testCreditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullAddress_nNeW5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "testUser";
        String password = "testPassword";
        String fullname = "testFullname";
        String address = null;
        String email = "testEmail";
        String creditcard = "testCreditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_QkSa0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_QkSa0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertEquals(holdings.size(), 10, "The size of holdings should be 10");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsNull_QTuq1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsEmpty_KROH2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
        assertEquals(holdings.size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsEmpty_KROH2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertEquals(holdings.size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_XtSy0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOrderID(), orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_2() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getAccount(), order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_3() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        Assertions.assertEquals(result.getCompletionDate(), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_4() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getHolding(), order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_5() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOpenDate(), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_6() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getPrice(), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_7() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getQuantity(), order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_8() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getQuote(), order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_9() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOrderStatus(), order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0_10() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOrderType(), order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOrderID(), orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_2() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getAccount(), order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_3() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getCompletionDate(), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_4() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getHolding(), order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_5() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOpenDate(), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_6() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getPrice(), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_7() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        Assertions.assertEquals(result.getQuantity(), order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_8() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        Assertions.assertEquals(result.getQuote(), order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_9() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(result.getOrderStatus(), order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_10() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOrderType(), order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder3_KHNj2_3() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getCompletionDate(), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder3_KHNj2_8() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        Assertions.assertEquals(result.getQuote(), order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder4_MYVu3_1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        Assertions.assertEquals(result.getOrderID(), orderID, "Order ID should match");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder4_MYVu3_4() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        OrderDataBean orderData = new OrderDataBean();
        assertEquals(orderData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder4_MYVu3_7() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getQuantity(), order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder4_MYVu3_9() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOrderStatus(), order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder4_MYVu3_10() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        Assertions.assertEquals(result.getOrderType(), order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_awaI0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        Assertions.assertTrue(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullUser_PvPX1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        Assertions.assertNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithEmptyUser_pZcS2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        Assertions.assertNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUser_UYAl3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "invalidUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        Assertions.assertEquals(0, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithValidUser_lyhV4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "validUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        Assertions.assertTrue(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_QQqZ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getCompanyName(), "companyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote2_Gmvd1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getPrice(), new BigDecimal(123.45));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote3_VAks2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getOpen(), new BigDecimal(123.45));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote4_FhmD3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getLow(), new BigDecimal(123.45));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote5_IriT4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getChange(), 123.45, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote6_HOOf5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getHigh(), new BigDecimal(123.45), "The expected value is not correct");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote7_Bnev6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getSymbol(), "symbol");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote8_ReUg7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getVolume(), 123456.789, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote9_ZBLB8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.hashCode(), 123);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote10_xNEG9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote11_LTYP10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote12_MLxa11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getPrice(), new BigDecimal(123.45), "The prices do not match");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote13_lkoe12() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getOpen(), new BigDecimal(123.45), "The open quote is not correct");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_AJcR0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_AJcR0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(symbol, result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_AJcR0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(companyName, result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_AJcR0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_oPqB2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_oPqB2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(symbol, result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_oPqB2_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(companyName, result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_oPqB2_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_cCMn0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        // Add assertions here to validate the behavior of queueOrder method
        // For example:
        // assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_EVUO1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        // Fixed test case
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_sFUD2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_lineCoverage_PdbW3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        orderID = 2;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_PrSb0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("testString");
        Assertions.assertEquals(accountDataBean.getProfileID(), "testString");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataNull_pwTW1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData(null);
        Assertions.assertNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataEmpty_KoAQ2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("");
        Assertions.assertNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_YbQW0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("user123");
        assertEquals("user123", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithNullUserID_Ukxh1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(null);
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithEmptyUserID_MhuM2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithInvalidUserID_AdZi3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("invalidUser");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithRandomUserID_wQwm4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUser");
        accountProfileDataBean = null;
        assertNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithValidUserID_gAwr5_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("validUser");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithValidUserID_gAwr5_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("validUser");
        assertEquals("validUser", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_syyk0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        Integer orderID = 12345;
        tradeSLSBBean.orderCompleted(userID, orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_NullUserID_ftbS1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Integer orderID = 12345;
        tradeSLSBBean.orderCompleted(userID, orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_NullOrderID_Zlja2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        Integer orderID = null;
        tradeSLSBBean.orderCompleted(userID, orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_BothNull_gueN3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Integer orderID = null;
        tradeSLSBBean.orderCompleted(userID, orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_HlrV0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        tradeSLSBBean.logout(userID);
        Assertions.assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_NullUserID_KAXm1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        tradeSLSBBean.logout(userID);
        Assertions.assertEquals(null, userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_EmptyUserID_vUNr2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        tradeSLSBBean.logout(userID);
        Assertions.assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_InvalidUserID_zUub3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "invalidUser";
        tradeSLSBBean.logout(userID);
        Assertions.assertEquals(null, entityManager);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_WithuserID_NoAssertions_yNnn8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        tradeSLSBBean.logout(userID);
        Assertions.assertNotNull(tradeSLSBBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_NullUserID_NoAssertions_rQVU9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        tradeSLSBBean.logout(userID);
        Assertions.assertNull(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_EmptyUserID_NoAssertions_oIsV10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        tradeSLSBBean.logout(userID);
        Assertions.assertEquals(null, this.entityManager);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_InvalidUserID_NoAssertions_FaJG11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "invalidUser";
        tradeSLSBBean.logout(userID);
        Assertions.assertEquals(null, this.entityManager);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_ValidUserID_NoAssertions_crdr12() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "validUser";
        tradeSLSBBean.logout(userID);
        Assertions.assertNotNull(tradeSLSBBean, "TradeSLSBBean is null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_WithuserID_NoCoverage_WGsg14() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        tradeSLSBBean.logout(userID);
        Assertions.assertNull(this.entityManager);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest1_PtNQ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
        assertEquals(order.getPrice().floatValue(), 10.0f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest3_YgAi2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid3";
        Integer holdingID = 3;
        int orderProcessingMode = 3;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest5_odTF4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid5";
        Integer holdingID = 5;
        int orderProcessingMode = 5;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
        assertEquals(order.getPrice(), 10.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingNull_pYQe1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        HoldingDataBean actualHoldingDataBean = tradeSLSBBean.getHolding(1);
        assertNull(actualHoldingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithOrderID_pqsE1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(12345);
        boolean twoPhase = false;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        OrderDataBean orderDataBean = future.get();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithTwoPhase_eCos2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        OrderDataBean orderDataBean = future.get();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithOrderIDAndTwoPhase_PbMF3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(12345);
        boolean twoPhase = true;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        OrderDataBean orderDataBean = future.get();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithOrderIDAndTwoPhaseWithOrderDataBean_WhKi7() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(12345);
        boolean twoPhase = true;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        OrderDataBean orderDataBean = new OrderDataBean();
        when(future.get()).thenReturn(orderDataBean);
        assertEquals(orderDataBean, future.get());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateOrder_zpSA0_1() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(orderType, order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateOrder_zpSA0_2() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateOrder_zpSA0_3() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(quantity, order.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateOrder_zpSA0_4() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateOrder_zpSA0_5() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateOrder_zpSA0_6() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(account, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateOrder_zpSA0_7() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateOrder_zpSA0_8() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_yBIt0_fBQi0_1() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteDataBean.getChange());
        double sharesTraded = quoteDataBean.getVolume();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_yBIt0_fBQi0_2() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteDataBean.getChange());
        double sharesTraded = quoteDataBean.getVolume();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(result.getPrice(), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_yBIt0_fBQi0_3() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteDataBean.getChange());
        double sharesTraded = quoteDataBean.getVolume();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(result.getVolume(), quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest1_UgLH0_cnfo0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        Collection<OrderDataBean> actual = tradeSLSBBean.getClosedOrders(userID);
        Collection<OrderDataBean> expected = new ArrayList<>();
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest2_Itds1_jYsx0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid2";
        Collection<OrderDataBean> actual = tradeSLSBBean.getClosedOrders(userID);
        List<OrderDataBean> expected = new ArrayList<>();
        expected.add(new OrderDataBean());
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_zeroInvestment_BrEu1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 0.0;
        double netValue = 1500.0;
        double expectedReturn = 0.0;
        try {
            double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
            assertEquals(expectedReturn, actualReturn);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_zeroNetValue_sxah2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1000.0;
        double netValue = 0.0;
        double expectedReturn = 0.0;
        try {
            double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
            assertEquals(expectedReturn, actualReturn);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_negativeInvestment_JqmH3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = -1000.0;
        double netValue = 1500.0;
        double expectedReturn = 0.0;
        try {
            double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
            assertEquals(expectedReturn, actualReturn);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_negativeNetValue_bLln4_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1000.0;
        double netValue = -1500.0;
        double expectedReturn = 0.0;
        try {
            double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
            assertEquals(expectedReturn, actualReturn);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_SywQ0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterEmptyPassword_rdbd2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "testUser";
        String password = "";
        String fullname = "testFullname";
        String address = "testAddress";
        String email = "testEmail";
        String creditcard = "testCreditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_QkSa0_2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertEquals(holdings.size(), 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsNull_QTuq1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsEmpty_KROH2_1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1_8_fid1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getQuote(), order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_Ujuu0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_OqWU1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_hXVg2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder4_PcSA3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder5_NqTR4_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder6_TatR5_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = false;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_awaI0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        Assertions.assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUser_UYAl3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "invalidUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        Assertions.assertTrue(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithValidUser_lyhV4_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "validUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        Assertions.assertFalse(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote6_HOOf5_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.getHigh(), new BigDecimal(123.45));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote10_xNEG9_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean, new QuoteDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote11_LTYP10_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(quoteDataBean.toString(), "toString");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_oPqB2_1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_cCMn0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_EVUO1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_sFUD2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_YbQW0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("user123");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithNullUserID_Ukxh1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(null);
        assertNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithEmptyUserID_MhuM2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("");
        assertNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithInvalidUserID_AdZi3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("invalidUser");
        assertNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithRandomUserID_wQwm4_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUser");
        assertNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_HlrV0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        tradeSLSBBean.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_NullUserID_KAXm1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        tradeSLSBBean.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_EmptyUserID_vUNr2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        tradeSLSBBean.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_InvalidUserID_zUub3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "invalidUser";
        tradeSLSBBean.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_ValidUserID_TWXl4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "validUser";
        tradeSLSBBean.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void logoutTest_NouserID_NoAssertions_DoHi7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.logout(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_branchCoverage_XNuC2_2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        if (result == TradeConfig.EJB3) {
        } else {
        }
        assertTrue(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest1_PtNQ0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest2_GyeC1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid2";
        Integer holdingID = 2;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest4_EEvB3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid4";
        Integer holdingID = 4;
        int orderProcessingMode = 4;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest5_odTF4_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid5";
        Integer holdingID = 5;
        int orderProcessingMode = 5;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_RIpi0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        when(entityManager.find(eq(HoldingDataBean.class), any(Integer.class))).thenReturn(holdingDataBean);
        HoldingDataBean actualHoldingDataBean = tradeSLSBBean.getHolding(1);
        assertEquals(holdingDataBean, actualHoldingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingNull_pYQe1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        when(entityManager.find(eq(HoldingDataBean.class), any(Integer.class))).thenReturn(null);
        HoldingDataBean actualHoldingDataBean = tradeSLSBBean.getHolding(1);
        assertNull(actualHoldingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_dgWb0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithOrderID_pqsE1_fid1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(12345);
        boolean twoPhase = false;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithTwoPhase_eCos2_fid1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithOrderIDAndTwoPhase_PbMF3_fid1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(12345);
        boolean twoPhase = true;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithOrderIDAndTwoPhaseWithException_olKH8() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(12345);
        boolean twoPhase = true;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        when(future.get()).thenThrow(new Exception());
        try {
            future.get();
            fail("Expected Exception was not thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_QkSa0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
        assertEquals(holdings.size(), 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_cZBm0() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOrderID(), orderID);
        assertEquals(result.getAccount(), order.getAccount());
        assertEquals(result.getCompletionDate(), order.getCompletionDate());
        assertEquals(result.getHolding(), order.getHolding());
        assertEquals(result.getOpenDate(), order.getOpenDate());
        assertEquals(result.getPrice(), order.getPrice());
        assertEquals(result.getQuantity(), order.getQuantity());
        assertEquals(result.getQuote(), order.getQuote());
        assertEquals(result.getOrderStatus(), order.getOrderStatus());
        assertEquals(result.getOrderType(), order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lbyi1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(result.getOrderID(), orderID);
        assertEquals(result.getAccount(), order.getAccount());
        assertEquals(result.getCompletionDate(), order.getCompletionDate());
        assertEquals(result.getHolding(), order.getHolding());
        assertEquals(result.getOpenDate(), order.getOpenDate());
        assertEquals(result.getPrice(), order.getPrice());
        assertEquals(result.getQuantity(), order.getQuantity());
        assertEquals(result.getQuote(), order.getQuote());
        assertEquals(result.getOrderStatus(), order.getOrderStatus());
        assertEquals(result.getOrderType(), order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_AJcR0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(symbol, result.getSymbol());
        Assertions.assertEquals(companyName, result.getCompanyName());
        Assertions.assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_oPqB2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(symbol, result.getSymbol());
        Assertions.assertEquals(companyName, result.getCompanyName());
        Assertions.assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_YbQW0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("user123");
        assertNotNull(accountProfileDataBean);
        assertEquals("user123", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataWithValidUserID_gAwr5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("validUser");
        assertNotNull(accountProfileDataBean);
        assertEquals("validUser", accountProfileDataBean.getUserID());
    }
}