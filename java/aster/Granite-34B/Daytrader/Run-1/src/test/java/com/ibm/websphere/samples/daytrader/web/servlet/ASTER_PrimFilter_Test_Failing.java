/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrimFilter_Test_Failing {
    private FilterConfig filterConfig = null;
    PrimFilter primfilter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoFilter() throws Exception {
        primfilter = new PrimFilter();
        filterConfig = mock(FilterConfig.class);
        when(filterConfig.getInitParameter(Mockito.anyString())).thenReturn("value");
        ServletRequest req = mock(ServletRequest.class);
        ServletResponse resp = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);
        primfilter.doFilter(req, resp, chain);
        verify(filterConfig, times(1)).getInitParameter(Mockito.anyString());
        verify(chain, times(1)).doFilter(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoFilter_NCNe0() throws ServletException, IOException {
        PrimFilter primFilter = new PrimFilter();
        ServletRequest req = mock(ServletRequest.class);
        ServletResponse resp = mock(ServletResponse.class);
        FilterChain chain = mock(FilterChain.class);
        primFilter.doFilter(req, resp, chain);
        verify(chain).doFilter(req, resp);
    }
}