/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPStreaming_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingJSONPStreaming pingjsonpstreaming;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_with_ServletException_TWhr3() {
        PingJSONPStreaming obj = new PingJSONPStreaming();
        javax.servlet.ServletException e = new javax.servlet.ServletException();
        try {
            obj.init(null);
        } catch (javax.servlet.ServletException ex) {
            assertEquals(e.getMessage(), ex.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        Mockito.doNothing().when(pingjsonpstreaming).doGet(request, response);
        pingjsonpstreaming.doPost(request, response);
        Mockito.verify(pingjsonpstreaming, Mockito.times(1)).doGet(request, response);
        Mockito.verify(request, Mockito.times(1)).getParameter("param1");
        Mockito.verify(request, Mockito.times(1)).getParameter("param2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_EpbZ0() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_null_fcxQ1() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_empty_puOX2() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_tabs_xjRJ4() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals("\t\t", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_newlines_hmSP5() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals("\n\n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_unicode_yRZd6() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals("\u00A9", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_length_pUPl7() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals(37, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_case_NNhh8() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals("BASIC JSON GENERATION AND PARSING IN A SERVLET", result.toUpperCase());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_reverse_TtsF9() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String result = servlet.getServletInfo();
        assertEquals("TSPICNAPARGENI JSON NA SREBTAE", new StringBuilder(result).reverse().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_Fjyd0() throws Exception {
        PingJSONPStreaming obj = new PingJSONPStreaming();
        obj.doGet(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_powA0_1() throws Exception {
        pingjsonpstreaming = mock(PingJSONPStreaming.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        pingjsonpstreaming.init(mock(ServletConfig.class));
        verify(pingjsonpstreaming, times(1)).init(any(ServletConfig.class));
        assertEquals(initTime, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_powA0_2() throws Exception {
        pingjsonpstreaming = mock(PingJSONPStreaming.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        pingjsonpstreaming.init(mock(ServletConfig.class));
        verify(pingjsonpstreaming, times(1)).init(any(ServletConfig.class));
        assertEquals(hitCount, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_zVQw0_usjF0() throws ServletException {
        PingJSONPStreaming obj = new PingJSONPStreaming();
        obj.init(new MockServletConfig());
    }
}