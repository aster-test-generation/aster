/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.jms.ConnectionFactory;
import javax.jms.Queue;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBQueue_Test_Failing {
    private static String initTime;
    private static int hitCount;
    @Mock
    private ServletConfig config;
    private PingServlet2MDBQueue pingservlet2mdbqueue;
    private ConnectionFactory queueConnectionFactory;
    private Queue tradeBrokerQueue;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        pingservlet2mdbqueue = mock(PingServlet2MDBQueue.class);
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doCallRealMethod().when(pingservlet2mdbqueue).doPost(request, response);
        pingservlet2mdbqueue.doPost(request, response);
        verify(pingservlet2mdbqueue, times(1)).doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_ANqU0() throws ServletException, IOException {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_hsId0() {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        String result = servlet.getServletInfo();
        assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_lineCoverage_Ekly1() {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        servlet.getServletInfo();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_branchCoverage_WPxn2() {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        if (servlet.getServletInfo() != null) {
            System.out.println("Branch coverage achieved");
        }
    }

    @Test
    @Timeout(value = 2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_jPNd0_WOZf0() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_fid1() throws Exception {
        PingServlet2MDBQueue pingservlet2mdbqueue = mock(PingServlet2MDBQueue.class);
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doCallRealMethod().when(pingservlet2mdbqueue).doPost(request, response);
        pingservlet2mdbqueue.doPost(request, response);
        verify(pingservlet2mdbqueue, times(1)).doPost(request, response);
    }
}