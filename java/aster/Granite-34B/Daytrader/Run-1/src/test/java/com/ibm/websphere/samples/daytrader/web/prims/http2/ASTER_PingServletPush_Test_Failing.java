/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletPush_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServletPush pingservletpush;
    @Mock
    ServletConfig config;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        pingservletpush = new PingServletPush();
        initTime = null;
        hitCount = 0;
        when(config.getInitParameter("initTime")).thenReturn("2023-01-01");
        when(config.getInitParameter("hitCount")).thenReturn("100");
        pingservletpush.init(config);
        assertEquals("2023-01-01", initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        pingservletpush = new PingServletPush();
        initTime = null;
        hitCount = 0;
        when(config.getInitParameter("initTime")).thenReturn("2023-01-01");
        when(config.getInitParameter("hitCount")).thenReturn("100");
        pingservletpush.init(config);
        assertEquals(100, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_jdBW0() throws Exception {
        hitCount = 0;
        initTime = "sometime";
        pingservletpush = mock(PingServletPush.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PrintWriter printWriter = mock(PrintWriter.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(req.newPushBuilder()).thenReturn(pushBuilder);
        when(pushBuilder.path("images/graph.gif")).thenReturn(pushBuilder);
        doThrow(new IOException()).when(pushBuilder).push();
        when(resp.getWriter()).thenReturn(printWriter);
        pingservletpush.doGet(req, resp);
        verify(req, times(1)).newPushBuilder();
        verify(pushBuilder, times(1)).path("images/graph.gif");
        verify(pushBuilder, times(1)).push();
        verify(resp, times(1)).getWriter();
        verify(printWriter, times(1)).write(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        pingservletpush = new PingServletPush();
        initTime = null;
        hitCount = 0;
        when(config.getInitParameter("initTime")).thenReturn("2023-01-01");
        when(config.getInitParameter("hitCount")).thenReturn("100");
        pingservletpush.init(config);
        assertEquals("2023-01-01", initTime);
        assertEquals(100, hitCount);
    }
}