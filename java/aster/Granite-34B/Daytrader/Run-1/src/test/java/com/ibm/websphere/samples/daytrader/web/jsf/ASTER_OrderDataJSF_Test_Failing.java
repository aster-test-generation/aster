/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataJSF_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrders_DqRW0() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertNotNull(allOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithNoOrders_jySx1() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(0, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithOneOrder_YGiB2() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(1, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithTwoOrders_PNEO3() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(2, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithThreeOrders_uzxu4() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(3, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithFourOrders_FhBK5() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(4, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithFiveOrders_FDRc6() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(5, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithSixOrders_nyVi7() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(6, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithSevenOrders_FhNj8() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(7, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithEightOrders_RpvX9() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(8, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithNineOrders_uFTF10() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(9, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithTenOrders_yjTU11() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(10, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithElevenOrders_hmNk12() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(11, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithTwelveOrders_sjoA13() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(12, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithThirteenOrders_zFRh14() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertEquals(13, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrders_DqRW0_fid1() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        Assertions.assertNull(allOrders);
    }
}