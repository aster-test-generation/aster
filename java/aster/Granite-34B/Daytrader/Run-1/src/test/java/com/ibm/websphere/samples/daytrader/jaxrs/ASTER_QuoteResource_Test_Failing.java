/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.jaxrs;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteResource_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost3_vpuz2() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        assertEquals(1, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost4_dBqM3() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertNotNull(quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost5_eChh4() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(0, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost6_GXMP5() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(1, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost7_aUUU6() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(2, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost8_zZvD7() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(3, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost9_qEoV8() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(4, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost10_DXHi9() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(5, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost11_Ymml10() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(6, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost12_njkP11() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(7, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost13_XwMJ12() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(8, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost14_XnKZ13() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(9, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost15_ArVl14() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(10, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost16_sekW15() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesPost("symbols");
        QuoteDataBean quote = quotes.get(0);
        assertEquals(11, quote.getPrice());
    }
}