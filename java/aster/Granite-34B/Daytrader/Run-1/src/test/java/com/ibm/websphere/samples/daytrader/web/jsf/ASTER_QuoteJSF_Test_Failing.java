/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteJSF_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_MyVu0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity1_ucLK1() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(1);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity2_aFnk2() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(2);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 2;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuotesWithNullServices_OUuV1() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        QuoteData[] quotes = quoteJSF.getQuotes();
        Assertions.assertNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_xOqc0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesCoverage_jChH1() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.getQuotesBySymbols();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_uOaM0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(0);
        assertEquals(0, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity1_RJWS1() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(1);
        assertEquals(1, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity2_FUzU2() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(2);
        assertEquals(2, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity3_AgTO3() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(3);
        assertEquals(3, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity4_ROpm4() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(4);
        assertEquals(4, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity5_vEWp5() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(5);
        assertEquals(5, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity6_UwBp6() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(6);
        assertEquals(6, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity7_kdFL7() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(7);
        assertEquals(7, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity8_GMim8() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(8);
        assertEquals(8, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity9_jEVw9() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(9);
        assertEquals(9, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity10_NWrw10() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(10);
        assertEquals(10, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity11_ofkF11() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(11);
        assertEquals(11, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity12_hiWm12() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(12);
        assertEquals(12, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity13_bDSn13() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(13);
        assertEquals(13, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity14_hyGU14() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(14);
        assertEquals(14, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity15_YzEg15() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(15);
        assertEquals(15, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity16_HEsq16() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(16);
        assertEquals(16, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity17_ErPk17() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(17);
        assertEquals(17, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity18_dwqz18() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(18);
        assertEquals(18, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity13_bDSn13_fid2() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(13);
        int expected = 13;
        int actual = quoteJSF.getQuantity();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity14_hyGU14_fid2() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(14);
        int expected = 14;
        int actual = quoteJSF.getQuantity();
        assertEquals(expected, actual);
    }
}