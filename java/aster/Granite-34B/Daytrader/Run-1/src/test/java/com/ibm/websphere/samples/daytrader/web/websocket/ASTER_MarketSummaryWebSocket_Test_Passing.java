/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.Log;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_MarketSummaryWebSocket_Test_Passing {
    private static List<Session> sessions = new CopyOnWriteArrayList<>();
    MarketSummaryWebSocket marketsummarywebsocket;
    @Mock
    private Instance<TradeServices> services;
    @Mock
    private Session currentSession;
    private TradeServices tradeAction;
    private CountDownLatch latch = new CountDownLatch(1);
    private Log log;
    @Mock
    private MarketSummaryWebSocket marketSummaryWebSocket;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnMarketSummarytUpdate_DCmc0() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        marketSummaryWebSocket.onMarketSummarytUpdate("event");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnStockChange_ORcX0() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        String event = "mockEvent";
        marketSummaryWebSocket.onStockChange(event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnStockChangeWithNullEvent_FCTg1() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        marketSummaryWebSocket.onStockChange(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnStockChangeWithEmptyEvent_DLkx2() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        marketSummaryWebSocket.onStockChange("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSendMarketSummary_1_SSll0_Tqve0() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        Session session = mock(Session.class);
        marketSummaryWebSocket.sendMarketSummary(new ActionMessage(), session);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnOpen_jVjL0_hJVO0() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        Session session = mock(Session.class);
        marketSummaryWebSocket.onOpen(session, null);
    }
}