/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_LLOm0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100.00), "type", 100.00, "symbol");
        assertEquals(new BigDecimal(100.00), orderData.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_BFjJ0() {
        OrderData orderData = new OrderData(1, "OPEN", new Date(), new Date(), new BigDecimal(10.0), "MARKET", 100.0, "AAPL", new BigDecimal(150.0));
        assertEquals(100.0, orderData.getQuantity(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantityWithNoQuantityParameter_kDkb1() {
        OrderData orderData = new OrderData(1, "OPEN", new Date(), new Date(), new BigDecimal(10.0), "MARKET", 0.0, "AAPL");
        assertEquals(0.0, orderData.getQuantity(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantityWithNoOrderTypeParameter_wqvL2() {
        OrderData orderData = new OrderData(1, "OPEN", new Date(), new Date(), new BigDecimal(10.0), "", 100.0, "AAPL", new BigDecimal(150.0));
        assertEquals(100.0, orderData.getQuantity(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantityWithNoSymbolParameter_omek3() {
        OrderData orderData = new OrderData(1, "OPEN", new Date(), new Date(), new BigDecimal(10.0), "MARKET", 100.0, "", new BigDecimal(150.0));
        assertEquals(100.0, orderData.getQuantity(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderType_TqRG0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        orderData.setOrderType("newType");
        assertEquals("newType", orderData.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithNull_Akgt1() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        orderData.setOrderType(null);
        assertEquals(null, orderData.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithEmpty_qBOk2() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        orderData.setOrderType("");
        assertEquals("", orderData.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_fozB0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "type", 100.0, "symbol");
        orderData.setPrice(new BigDecimal(20.0));
        assertEquals(new BigDecimal(20.0), orderData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNullPrice_ssGe1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(10.0), "type", 100.0, "symbol");
        orderData.setPrice(null);
        assertEquals(null, orderData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_vbaa0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol", new BigDecimal(10.0));
        orderData.setOrderStatus("complete");
        assertEquals("complete", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusWithNullStatus_fNJk1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol", new BigDecimal(10.0));
        orderData.setOrderStatus(null);
        assertEquals(null, orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusWithEmptyStatus_xARy2() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol", new BigDecimal(10.0));
        orderData.setOrderStatus("");
        assertEquals("", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_FEJR0() {
        OrderData orderData = new OrderData(1, "Complete", new Date(), new Date(), new BigDecimal(10.0), "Limit", 100.0, "AAPL", new BigDecimal(150.0));
        assertEquals("Complete", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithNoOrderType_cmXi1() {
        OrderData orderData = new OrderData(1, "Complete", new Date(), new Date(), new BigDecimal(10.0), null, 100.0, "AAPL");
        assertEquals("Complete", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithNoPrice_aJft2() {
        OrderData orderData = new OrderData(1, "Complete", new Date(), new Date(), new BigDecimal(10.0), "Limit", 100.0, "AAPL");
        assertEquals("Complete", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_XvwI0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 100.0, "symbol", new BigDecimal(100.0));
        assertEquals("symbol", orderData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNoSymbolParameter_gOgA1() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 100.0, "symbol");
        assertEquals("symbol", orderData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_Ebmi0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(10.0), "Type", 100.0, "Symbol", new BigDecimal(100.0));
        assertEquals(new Integer(1), orderData.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderIDWithNoOrderFee_mnen1() {
        OrderData orderData = new OrderData(2, "Open", new Date(), new Date(), null, "Type", 100.0, "Symbol");
        assertEquals(new Integer(2), orderData.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_yrgO0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        orderData.setSymbol("newSymbol");
        assertEquals("newSymbol", orderData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithNull_hIEp1() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        orderData.setSymbol(null);
        assertEquals(null, orderData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithEmpty_MLbZ2() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        orderData.setSymbol("");
        assertEquals("", orderData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_FKZP0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        orderData.setOrderFee(new BigDecimal(20.0));
        assertEquals(new BigDecimal(20.0), orderData.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_rWWQ0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        Date openDate = orderData.getOpenDate();
        assertNotNull(openDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDateWithNullOpenDate_HvbO1() {
        OrderData orderData = new OrderData(1, "status", null, new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        Date openDate = orderData.getOpenDate();
        assertNull(openDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_ekvP0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        Date openDate = new Date();
        orderData.setOpenDate(openDate);
        assertEquals(openDate, orderData.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateWithNull_xpSL1() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        orderData.setOpenDate(null);
        assertEquals(null, orderData.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompletionDateTest_scFy0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "Type", 100.00, "Symbol");
        Date completionDate = orderData.getCompletionDate();
        assertEquals(true, completionDate != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompletionDateTest_NullCompletionDate_ZKCb1() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal(100.00), "Type", 100.00, "Symbol");
        Date completionDate = orderData.getCompletionDate();
        assertEquals(true, completionDate == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompletionDateTest_CompletedOrder_VhGL2() {
        OrderData orderData = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal(100.00), "Type", 100.00, "Symbol");
        Date completionDate = orderData.getCompletionDate();
        assertEquals(true, completionDate != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompletionDateTest_PartialOrder_dsCn4() {
        OrderData orderData = new OrderData(1, "Partial", new Date(), null, new BigDecimal(100.00), "Type", 100.00, "Symbol");
        Date completionDate = orderData.getCompletionDate();
        assertEquals(true, completionDate == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrice_1_pAbM0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(100), "type", 100, "symbol", new BigDecimal(100));
        assertEquals(new BigDecimal(100), orderData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrice_2_Mcrp1() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(100), "type", 100, "symbol");
        assertEquals(null, orderData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderTypeTest_gqaU0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "Limit", 100.00, "AAPL", new BigDecimal(150.00));
        assertEquals("Limit", orderData.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_DndX0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol", new BigDecimal(100.0));
        orderData.setOrderID(1);
        assertEquals(1, orderData.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNull_iXym1() {
        OrderData orderData = new OrderData(null, "status", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol", new BigDecimal(100.0));
        orderData.setOrderID(null);
        assertEquals(null, orderData.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithZero_gUTp2() {
        OrderData orderData = new OrderData(0, "status", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol", new BigDecimal(100.0));
        orderData.setOrderID(0);
        assertEquals(0, orderData.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_awmC0() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(0), "type", 100.0, "symbol", new BigDecimal(100));
        orderData.setQuantity(200.0);
        assertEquals(200.0, orderData.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithZeroValue_ZpJu1() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(0), "type", 100.0, "symbol", new BigDecimal(100));
        orderData.setQuantity(0.0);
        assertEquals(0.0, orderData.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeValue_mVfo2() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(0), "type", 100.0, "symbol", new BigDecimal(100));
        orderData.setQuantity(-100.0);
        assertEquals(-100.0, orderData.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_dbUh0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "Limit", 100.0, "AAPL", new BigDecimal(150.00));
        assertEquals(new BigDecimal(15000.00), orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalWithNoOrderFee_yLMl1() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), null, "Limit", 100.0, "AAPL", new BigDecimal(150.00));
        assertEquals(new BigDecimal(15000.00), orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalWithNoQuantity_bdwn3() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "Limit", 0.0, "AAPL", new BigDecimal(150.00));
        assertEquals(new BigDecimal(0.00), orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotal_yFwJ0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol");
        orderData.setTotal(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalWithNullParameter_eozX1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol");
        orderData.setTotal(null);
        assertEquals(null, orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalWithZeroValue_AxDa2() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100.0), "type", 100.0, "symbol");
        orderData.setTotal(new BigDecimal(0.0));
        assertEquals(new BigDecimal(0.0), orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_ehWg0() {
        OrderData orderData = new OrderData(1, "OPEN", new Date(), null, new BigDecimal(100.00), "MARKET", 100.00, "AAPL", new BigDecimal(150.00));
        Date completionDate = new Date();
        orderData.setCompletionDate(completionDate);
        assertEquals(completionDate, orderData.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateNull_QfYf1() {
        OrderData orderData = new OrderData(1, "OPEN", new Date(), null, new BigDecimal(100.00), "MARKET", 100.00, "AAPL", new BigDecimal(150.00));
        orderData.setCompletionDate(null);
        assertNull(orderData.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateAfterCompletion_ZLSe2() {
        OrderData orderData = new OrderData(1, "OPEN", new Date(), null, new BigDecimal(100.00), "MARKET", 100.00, "AAPL", new BigDecimal(150.00));
        Date completionDate = new Date();
        orderData.setCompletionDate(completionDate);
        orderData.setCompletionDate(new Date());
        assertEquals(completionDate, orderData.getCompletionDate());
    }
}