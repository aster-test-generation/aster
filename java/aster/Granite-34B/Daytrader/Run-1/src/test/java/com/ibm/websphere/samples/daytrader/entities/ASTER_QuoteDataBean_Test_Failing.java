/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_9_fid1() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertTrue(bean.getChange() >= -100 && bean.getChange() <= 100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceDefault_CfEp3() {
        QuoteDataBean bean = new QuoteDataBean();
        assertEquals(new BigDecimal(0.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceDefault_QzPl6() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(null);
        assertEquals(new BigDecimal(0.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_dLJd0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST", "Test Company", 1000.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
        String expectedHTML = "<BR>Quote Data for: TEST<LI> companyName: Test Company</LI>" + "<LI>      volume: 1000.0</LI>" + "<LI>       price: 10.0</LI>" + "<LI>        open1: 10.0</LI>" + "<LI>         low: 10.0</LI>" + "<LI>        high: 10.0</LI>" + "<LI>      change1: 10.0</LI>";
        assertEquals(expectedHTML, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithNoData_gkZb1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        String expectedHTML = "<BR>Quote Data for: <LI> companyName: </LI>" + "<LI>      volume: 0.0</LI>" + "<LI>       price: 0.0</LI>" + "<LI>        open1: 0.0</LI>" + "<LI>         low: 0.0</LI>" + "<LI>        high: 0.0</LI>" + "<LI>      change1: 0.0</LI>";
        assertEquals(expectedHTML, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLowDefault_yPwM1() {
        QuoteDataBean bean = new QuoteDataBean();
        assertEquals(bean.getLow(), new BigDecimal("0.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh3_sZkr2() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(100.0));
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh4_VgjO3() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setOpen(new BigDecimal(100.0));
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh5_Kpfg4() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setLow(new BigDecimal(100.0));
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh6_JMsB5() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setChange(100.0);
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh7_ILTh6() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setVolume(100.0);
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh8_eAQF7() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setCompanyName("TEST");
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh9_fPcS8() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setSymbol("TEST");
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh10_uYYJ9() {
        QuoteDataBean bean = new QuoteDataBean();
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }
}