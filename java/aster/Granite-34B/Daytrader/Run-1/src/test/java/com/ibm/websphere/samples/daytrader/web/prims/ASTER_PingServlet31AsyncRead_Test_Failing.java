/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31AsyncRead_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet31AsyncRead pingservlet31asyncread;
    @Mock
    ServletConfig config;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_Zbeq0() throws Exception {
        PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_ZhaH0() {
        PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        // Set up expected behavior for the mocks
        Mockito.when(request.getParameter("input")).thenReturn("expectedInput");
        // Call the method being tested
        pingservlet31asyncread.doGet(request, response);
        // Verify the expected behavior
        Mockito.verify(response).getWriter();
        Mockito.verify(response.getWriter()).println("Expected output");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SbXa0() throws ServletException, IOException {
        PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
        assertEquals(200, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullRequest_Zuur1() throws ServletException, IOException {
        PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
        HttpServletRequest request = null;
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
        assertEquals(500, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullResponse_pfvT2() throws ServletException, IOException {
        PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = null;
        servlet.doGet(request, response);
        assertEquals(500, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_aXtQ0_1() throws Exception {
        pingservlet31asyncread = new PingServlet31AsyncRead();
        initTime = new java.util.Date().toString();
        hitCount = 0;
        when(config.getInitParameter("test")).thenReturn("test");
        pingservlet31asyncread.init(config);
        assertEquals(initTime, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_aXtQ0_2() throws Exception {
        pingservlet31asyncread = new PingServlet31AsyncRead();
        initTime = new java.util.Date().toString();
        hitCount = 0;
        when(config.getInitParameter("test")).thenReturn("test");
        pingservlet31asyncread.init(config);
        assertEquals(hitCount, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_fid2() throws Exception {
        // Set up expected behavior for the mocks
        Mockito.when(request.getParameter("input")).thenReturn("expectedInput");
        // Create an instance of the class being tested
        PingServlet31AsyncRead pingservlet31asyncread = new PingServlet31AsyncRead();
        // Call the method being tested
        pingservlet31asyncread.doGet(request, response);
        // Verify the expected behavior
        Mockito.verify(response).getWriter();
        Mockito.verify(response.getWriter()).println("Expected output");
    }
}