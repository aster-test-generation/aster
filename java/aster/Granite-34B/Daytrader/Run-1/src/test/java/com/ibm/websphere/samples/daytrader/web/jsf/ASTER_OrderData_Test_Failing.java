/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeWithNoOrderFee_qLQW1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "type", 100.00, "symbol");
        assertEquals(new BigDecimal(0.00), orderData.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantityWithNoPriceParameter_mXCx4() {
        OrderData orderData = new OrderData(1, "OPEN", new Date(), new Date(), new BigDecimal(10.0), "MARKET", 100.0, "AAPL", null);
        assertEquals(100.0, orderData.getQuantity(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateWithInvalidDate_YjCL2() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(10.0), "type", 10.0, "symbol", new BigDecimal(10.0));
        Date invalidDate = new Date("Invalid Date");
        orderData.setOpenDate(invalidDate);
        assertEquals(null, orderData.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompletionDateTest_NullOrder_HXjS5() {
        OrderData orderData = null;
        Date completionDate = orderData.getCompletionDate();
        assertEquals(true, completionDate == null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalWithNoPrice_kkJX2() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "Limit", 100.0, "AAPL", null);
        assertEquals(new BigDecimal(10000.00), orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeWithNoOrderFee_qLQW1_fid1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), null, "type", 100.00, "symbol");
        assertNull(new BigDecimal(0.00));
    }
}