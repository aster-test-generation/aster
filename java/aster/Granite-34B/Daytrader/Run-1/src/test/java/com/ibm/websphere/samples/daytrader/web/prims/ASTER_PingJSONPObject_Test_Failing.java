/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObject_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingJSONPObject pingjsonpobject;
    @Mock
    HttpServletRequest req;
    @Mock
    HttpServletResponse res;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.initMocks(this);
        Mockito.when(req.getParameter("param1")).thenReturn("value1");
        Mockito.when(req.getParameter("param2")).thenReturn("value2");
        pingjsonpobject.doPost(req, res);
        Mockito.verify(res).setContentType("application/json");
        Mockito.verify(res).setCharacterEncoding("UTF-8");
        Mockito.verify(res).getWriter().write(Mockito.eq("{\"result\":\"success\"}"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_XBkf0() throws ServletException, IOException {
        PingJSONPObject obj = new PingJSONPObject();
        obj.doPost(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_yivK0() {
        PingJSONPObject obj = new PingJSONPObject();
        String expected = "Basic JSON generation and parsing in a servlet";
        String actual = obj.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_null_pVNm1() {
        PingJSONPObject obj = new PingJSONPObject();
        String expected = null;
        String actual = obj.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_empty_xDOA2() {
        PingJSONPObject obj = new PingJSONPObject();
        String expected = "";
        String actual = obj.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_specialChars_AQCF4() {
        PingJSONPObject obj = new PingJSONPObject();
        String expected = "!";
        String actual = obj.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        pingjsonpobject = mock(PingJSONPObject.class);
        hitCount = 10;
        initTime = "2022-01-01";
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        pingjsonpobject.doGet(request, response);
        JsonObject json = Json.createObjectBuilder().add("initTime", initTime).add("hitCount", hitCount).build();
        String generatedJSON = json.toString();
        JsonReader jsonReader = Json.createReader(new StringReader(generatedJSON));
        String parsedJSON = jsonReader.readObject().toString();
        verify(response, times(1)).setContentType("text/html");
        verify(response, times(1)).getOutputStream();
        verify(out, times(1)).println("<html><head><title>Ping JSONP</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping JSONP</FONT><BR>Generated JSON: " + generatedJSON + "<br>Parsed JSON: " + parsedJSON + "</body></html>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_fid1() throws Exception {
        MockitoAnnotations.initMocks(this);
        Mockito.when(req.getParameter("param1")).thenReturn("value1");
        Mockito.when(req.getParameter("param2")).thenReturn("value2");
        pingjsonpobject = new PingJSONPObject();
        pingjsonpobject.doPost(req, res);
        Mockito.verify(res).setContentType("application/json");
        Mockito.verify(res).setCharacterEncoding("UTF-8");
        Mockito.verify(res).getWriter().write(Mockito.eq("{\"result\":\"success\"}"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_HKRL0_1() throws Exception {
        pingjsonpobject = mock(PingJSONPObject.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        pingjsonpobject.init(mock(ServletConfig.class));
        verify(pingjsonpobject, times(1)).init(any(ServletConfig.class));
        assertEquals(initTime, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_HKRL0_2() throws Exception {
        pingjsonpobject = mock(PingJSONPObject.class);
        initTime = new java.util.Date().toString();
        hitCount = 0;
        pingjsonpobject.init(mock(ServletConfig.class));
        verify(pingjsonpobject, times(1)).init(any(ServletConfig.class));
        assertEquals(hitCount, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_siFv0_Kois0_1() throws ServletException, NoSuchFieldException, IllegalAccessException {
        PingJSONPObject obj = new PingJSONPObject();
        obj.init(null);
        Field initTimeField = PingJSONPObject.class.getDeclaredField("initTime");
        initTimeField.setAccessible(true);
        Field hitCountField = PingJSONPObject.class.getDeclaredField("hitCount");
        hitCountField.setAccessible(true);
        assertNotNull(initTimeField.get(obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_siFv0_Kois0_2() throws ServletException, NoSuchFieldException, IllegalAccessException {
        PingJSONPObject obj = new PingJSONPObject();
        obj.init(null);
        Field initTimeField = PingJSONPObject.class.getDeclaredField("initTime");
        initTimeField.setAccessible(true);
        Field hitCountField = PingJSONPObject.class.getDeclaredField("hitCount");
        hitCountField.setAccessible(true);
        assertEquals(0, hitCountField.getInt(obj));
    }
}