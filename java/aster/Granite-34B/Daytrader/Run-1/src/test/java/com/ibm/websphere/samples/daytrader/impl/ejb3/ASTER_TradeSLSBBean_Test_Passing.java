/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
    private EntityManager entityManager;
    TradeSLSBBean tradeslsbbean;
    @Mock
    private AccountProfileDataBean accountProfileDataBean;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenTSIA_XwJN0() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertEquals(marketSummaryDataBean.getOpenTSIA(), marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_uuJO1() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertEquals(marketSummaryDataBean.getGainPercent(), marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryDate_xnbU2() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertEquals(marketSummaryDataBean.getSummaryDate(), marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_uRuX3() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertEquals(marketSummaryDataBean.getTSIA(), marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_QmxH4() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertEquals(marketSummaryDataBean.getVolume(), marketSummaryDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopGainers_qVoE5() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertEquals(marketSummaryDataBean.getTopGainers(), marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosers_fPss6() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertEquals(marketSummaryDataBean.getTopLosers(), marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_oiDp0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1000.0;
        double netValue = 1500.0;
        double expectedReturn = 0.5;
        try {
            double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
            assertEquals(expectedReturn, actualReturn);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_negativeInvestment_JqmH3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = -1000.0;
        double netValue = 1500.0;
        double expectedReturn = -2.5;
        try {
            double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
            assertEquals(expectedReturn, actualReturn);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_negativeNetValue_bLln4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1000.0;
        double netValue = -1500.0;
        double expectedReturn = -2.5;
        try {
            double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
            assertEquals(expectedReturn, actualReturn);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterEmptyAddress_aIRq6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "testUser";
        String password = "testPassword";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_Ujuu0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Expected exception, handle it accordingly
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_OqWU1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Expected exception, handle accordingly
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_hXVg2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Handle the exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder4_PcSA3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Handle the null pointer exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder5_NqTR4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Expected exception, handle accordingly
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder6_TatR5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = false;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Expected exception, handle accordingly
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder7_rTtw6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Handle the null pointer exception
            // Replace the erroneous assertion and regenerate the fixed test case
            // Change the expected or actual value to pass the assertion
            // Change the assertion type to match the return type if needed
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder9_XBoC8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (Exception e) {
            // Handle the exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder10_JuPT9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (Exception e) {
            // Handle the exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder12_zzCF11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = false;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Expected exception, handle or ignore as needed
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder13_nSrI12() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Handle the exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder16_ScGZ15() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Expected exception, handle it accordingly
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteNullPrice_ezoi1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = null;
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteNullCompanyName_grQf3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = null;
        BigDecimal price = quoteDataBean.getPrice();
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteEmptyCompanyName_uXcv4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = "";
        BigDecimal price = quoteDataBean.getPrice();
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteNullSymbol_eeRY5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = null;
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteEmptySymbol_HvnQ6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "";
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected EJBException");
        } catch (EJBException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_pDqx0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        assertEquals(TradeConfig.EJB3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_branchCoverage_XNuC2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        if (result == TradeConfig.EJB3) {
        } else {
        }
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_branchCoverage_XNuC2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        if (result == TradeConfig.EJB3) {
        } else {
        }
        assertFalse(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithNullOrderID_HTyW4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = false;
        try {
            tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
            fail("Expected Exception was not thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithNullTwoPhase_eDai5() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        try {
            tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
            fail("Expected Exception was not thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void completeOrder(Integer orderID, boolean twoPhase) {
        try {
        } catch (Exception e) {
            Log.error("TradeSLSBBean.completeOrder", e);
            throw new EJBException("TradeSLSBBean.completeOrder - error", e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void completeOrder_fid1(Integer orderID, boolean twoPhase) {
        try {
        } catch (Exception e) {
            Log.error("TradeSLSBBean.completeOrder_fid1", e);
            throw new EJBException("TradeSLSBBean.completeOrder_fid1 - error", e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_branchCoverage_XNuC2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        if (result == TradeConfig.EJB3) {
            assertTrue(true);
        } else {
            assertTrue(false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void completeOrder_fid3(Integer orderID, boolean twoPhase) {
        try {
        } catch (Exception e) {
            Log.error("TradeSLSBBean.completeOrder_fid3", e);
            throw new EJBException("TradeSLSBBean.completeOrder_fid3 - error", e);
        }
    }
}