/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import java.io.IOException;
import java.sql.Connection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2DB_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingServlet2DB pingservlet2db;
    Connection connection;
    TradeDirect tradedirect;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        connection = mock(Connection.class);
        tradedirect = mock(TradeDirect.class);
        pingservlet2db = new PingServlet2DB();
        when(tradedirect.getConnPublic()).thenReturn(connection);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingservlet2db.doPost(req, res);
        verify(tradedirect, times(1)).getConnPublic();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_RjsI3() throws ServletException, IOException {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_linecoverage_mUmx2() {
        PingServlet2DB servlet = new PingServlet2DB();
        servlet.getServletInfo();
        servlet.getServletInfo();
        servlet.getServletInfo();
        servlet.getServletInfo();
        servlet.getServletInfo();
        servlet.getServletInfo();
        servlet.getServletInfo();
        servlet.getServletInfo();
        servlet.getServletInfo();
        servlet.getServletInfo();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_branchcoverage_sgbL3() {
        PingServlet2DB servlet = new PingServlet2DB();
        servlet.getServletInfo();
        assertEquals("Coverage", servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_hyir0_1() throws Exception {
        pingservlet2db = mock(PingServlet2DB.class);
        hitCount = 0;
        initTime = new java.util.Date().toString();
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2db).init(config);
        pingservlet2db.init(config);
        verify(pingservlet2db, times(1)).init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_hyir0_2() throws Exception {
        pingservlet2db = mock(PingServlet2DB.class);
        hitCount = 0;
        initTime = new java.util.Date().toString();
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2db).init(config);
        pingservlet2db.init(config);
        verify(pingservlet2db, times(1)).init(config);
        assertEquals(new java.util.Date().toString(), initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_oXtl0_ngBi0() throws ServletException, IOException {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_LTva1_HLfL0() throws ServletException, IOException {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_Njyu2_dMsG0() throws ServletException, IOException {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void doGetTest_WPJn0_rUCG0() throws ServletException, IOException {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getParameter("symbol")).thenReturn("TEST");
        servlet.doGet(request, response);
        verify(response, atLeast(1)).setContentType("text/html");
        verify(response, atLeast(1)).getWriter();
        verify(request, atLeast(1)).getParameter("symbol");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_branchcoverage_sgbL3_fid2() {
        PingServlet2DB servlet = new PingServlet2DB();
        servlet.getServletInfo();
        if (servlet.getServletInfo() != null) {
            System.out.println("Coverage");
        }
    }
}