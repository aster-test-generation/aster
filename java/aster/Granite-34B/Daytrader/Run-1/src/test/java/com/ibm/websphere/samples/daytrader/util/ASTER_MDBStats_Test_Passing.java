/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MDBStats_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_Rago0() {
        MDBStats instance = MDBStats.getInstance();
        assertNotNull(instance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTiming_IFYL0_KOjW0() {
        MDBStats mdbStats = MDBStats.getInstance();
        String type = "testType";
        long sendTime = 1000;
        long recvTime = 2000;
        TimerStat timerStat = mdbStats.addTiming(type, sendTime, recvTime);
        assertNotNull(timerStat);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingWithZeroSendTime_OBeM2_PRZv0() {
        MDBStats mdbStats = MDBStats.getInstance();
        String type = "testType";
        long sendTime = 0;
        long recvTime = 2000;
        TimerStat timerStat = mdbStats.addTiming(type, sendTime, recvTime);
        assertNotNull(timerStat);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingWithZeroRecvTime_sYwi3_zxCb0() {
        MDBStats mdbStats = MDBStats.getInstance();
        String type = "testType";
        long sendTime = 1000;
        long recvTime = 0;
        TimerStat timerStat = mdbStats.addTiming(type, sendTime, recvTime);
        assertNotNull(timerStat);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingWithNegativeSendTime_qcFz4_YAJD0() {
        MDBStats mdbStats = MDBStats.getInstance();
        String type = "testType";
        long sendTime = -1000;
        long recvTime = 2000;
        TimerStat timerStat = mdbStats.addTiming(type, sendTime, recvTime);
        assertNotNull(timerStat);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingWithNegativeRecvTime_jFDY5_sEgZ0() {
        MDBStats mdbStats = MDBStats.getInstance();
        String type = "testType";
        long sendTime = 1000;
        long recvTime = -2000;
        TimerStat timerStat = mdbStats.addTiming(type, sendTime, recvTime);
        assertNotNull(timerStat);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddTimingWithSendTimeGreaterThanRecvTime_EYfK6_CABX0() {
        MDBStats mdbStats = MDBStats.getInstance();
        String type = "testType";
        long sendTime = 2000;
        long recvTime = 1000;
        TimerStat timerStat = mdbStats.addTiming(type, sendTime, recvTime);
        assertNotNull(timerStat);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_ysRN0_mJZQ0() {
        MDBStats.getInstance().reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetWithClear_ZAJV2_KVAu0() {
        MDBStats.getInstance().reset();
        MDBStats.getInstance().clear();
    }
}