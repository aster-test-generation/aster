/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessMode_whenModeIsPrivate_thenReturns1_QDYm0() {
        int expected = 1;
        int actual = TradeConfig.getAccessMode();
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessMode_whenModeIsProtected_thenReturns3_FoKI2() {
        int expected = 3;
        int actual = TradeConfig.getAccessMode();
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessMode_whenModeIsPublic_thenReturns4_XChI3() {
        int expected = 4;
        int actual = TradeConfig.getAccessMode();
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_ZtUY0() {
        String[] expected = {"mode1", "mode2", "mode3"}; // Replace with actual expected values
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_single_wZyb3() {
        String[] expected = {"mode1"}; // Replace with actual expected value
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_multiple_VYXs4() {
        String[] expected = {"mode1", "mode2", "mode3", "mode4", "mode5"}; // Replace with actual expected values
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_duplicate_lkip5() {
        String[] expected = {"mode1", "mode1", "mode1"}; // Replace with actual expected values
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_random_pvPv6() {
        String[] expected = {"mode1", "mode2", "mode3", "mode4", "mode5", "mode6", "mode7", "mode8", "mode9", "mode10"}; // Replace with actual expected values
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_sorted_TihD7() {
        String[] expected = {"mode1", "mode10", "mode2", "mode3", "mode4", "mode5", "mode6", "mode7", "mode8", "mode9"}; // Replace with actual expected values
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_reverse_tdai8() {
        String[] expected = {"mode10", "mode9", "mode8", "mode7", "mode6", "mode5", "mode4", "mode3", "mode2", "mode1"}; // Replace with actual expected values
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_kbrX0() {
        assertEquals("647 Oak St.", TradeConfig.rndAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_PfqL0() {
        String actual = TradeConfig.rndFullName();
        assertEquals("first:512 last:504", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_PUSI0() {
        assertEquals(147.0f, TradeConfig.rndQuantity(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndPrice_nZND0() {
        assertEquals(87.0f, TradeConfig.rndPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioAction5_Ynxy4() {
        char result = TradeConfig.getScenarioAction(true);
        assertEquals('h', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setPrimIterations_whenIterIsNegative_thenPrimIterationsIsZero_njHQ2() {
        TradeConfig.setPrimIterations(-1);
        assert TradeConfig.getPrimIterations() == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_Alqq0() {
        String expectedUserID = "uid:0";
        String actualUserID = TradeConfig.nextUserID();
        assertEquals(expectedUserID, actualUserID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndSymbols_withOneSymbol_returnsCorrectString_SwiG0() {
        String expected = "s:1503614976,s:1787632768,s:631623488,s:1633642496,s:2082388992,s:1238290944,s:146820992,s:802984384,s:1787103104,s:1700910848";
        String actual = TradeConfig.rndSymbols();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndSymbols_withMaxSymbols_returnsCorrectString_hPuz1() {
        String expected = "s:1273449344,s:1933218816,s:2064400256,s:1225809536,s:1004382016,s:308340000,s:1211291392,s:1922995712";
        String actual = TradeConfig.rndSymbols();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_anBP0() {
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        BigDecimal expected = new BigDecimal("1.09");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserIDWithRND_USERTrue_ZRSK0() {
        System.setProperty("RND_USER", "true");
        assertEquals("user" + (int) (Math.random() * 1000), TradeConfig.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmail_EkLP0() {
        String userID = "user:123";
        String expected = "user123@74.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithEmptyUserID_Yqds1() {
        String userID = "";
        String expected = "@29.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithNullUserID_KkNZ2() {
        String userID = null;
        String expected = "@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDLengthMoreThanOne_ugVa3() {
        String userID = "user:123:456";
        String expected = "user123456@25.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDLengthOne_WPwt4() {
        String userID = "u";
        String expected = "u@32.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDLengthZero_LiQp5() {
        String userID = "";
        String expected = "@48.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsSpecialCharacters_LpkX6() {
        String userID = "user!@#$%^&*()_+";
        String expected = "user!@#$%^&*()_+@41.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsNumbers_NcZR7() {
        String userID = "user123";
        String expected = "user123@15.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsUppercaseLetters_aquT8() {
        String userID = "User";
        String expected = "User@82.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsLowercaseLetters_EdTZ9() {
        String userID = "user";
        String expected = "user@42.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsBothUppercaseAndLowercaseLetters_VMPM10() {
        String userID = "UsEr";
        String expected = "UsEr@34.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsBothUppercaseAndLowercaseLettersAndNumbers_MiTn11() {
        String userID = "UsEr123";
        String expected = "UsEr123@20.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsBothUppercaseAndLowercaseLettersAndNumbersAndSpecialCharacters_nTGI12() {
        String userID = "UsEr123!@#$%^&*()_+";
        String expected = "UsEr123!@#$%^&*()_+@89.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_whenInputIsMaxInteger_thenOutputIsMaxInteger_NAvf7() {
        String result = TradeConfig.rndBalance();
        org.junit.jupiter.api.Assertions.assertEquals(String.valueOf(Integer.MAX_VALUE), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_whenInputIsMinInteger_thenOutputIsMinInteger_gMvy8() {
        String result = TradeConfig.rndBalance();
        org.junit.jupiter.api.Assertions.assertEquals(String.valueOf(Integer.MIN_VALUE), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPrimIterationsTest_agCw0_rnUy0() {
        int expected = Integer.parseInt(TradeConfig.rndBalance());
        int actual = TradeConfig.getPrimIterations();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserIDWithMaxUsers_jZkb1_iVxm0() {
        String expectedUserID = "uid:1001";
        for (int i = 0; i < 1000; i++) {
            TradeConfig.nextUserID();
        }
        String actualUserID = TradeConfig.nextUserID();
        assertEquals(expectedUserID, actualUserID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeNames_miEq0_FPRN0() {
        String[] expected = {"Sync", "LIFO", "MATCH"};
        String[] actual = TradeConfig.getOrderProcessingModeNames();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserIDWithRND_USERFalse_VxQq1_QHlx0() {
        System.setProperty("RND_USER", "false");
        assertEquals("uid:417", TradeConfig.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBigDecimal_Wxpa1_XBiZ0() {
        float f = 1000000.0f;
        BigDecimal expected = (new BigDecimal(TradeConfig.random() * f)).setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal actual = TradeConfig.rndBigDecimal(f);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBigDecimal_yWfm3_RHFa0() {
        float f = Float.MAX_VALUE;
        BigDecimal expected = (new BigDecimal(Math.random() * f)).setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal actual = TradeConfig.rndBigDecimal(f);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_null_ySxU1_fid1() {
        String[] expected = null;
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_empty_HQBv2() {
        String[] expected = {};
        String[] actual = TradeConfig.getRunTimeModeNames();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_kbrX0_fid1() {
        assertEquals("1000 Oak St.", TradeConfig.rndAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_PfqL0_fid1() {
        String actual = TradeConfig.rndFullName();
        assertEquals("first:1000 last:5000", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_USERS_kXdH0_fid1() {
        assertEquals(Integer.valueOf(TradeConfig.getMAX_USERS()), Integer.valueOf(100));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_PUSI0_fid1() {
        assertEquals(1.0f, TradeConfig.rndQuantity(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongRunForBranchCoverage_cwlL1_fid1() {
        boolean expected = false;
        boolean actual = TradeConfig.getLongRun();
        assertTrue(actual == expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndPrice_nZND0_fid1() {
        assertEquals(1.0f, TradeConfig.rndPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioAction5_Ynxy4_fid1() {
        char result = TradeConfig.getScenarioAction(true);
        assertEquals('b', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBoolean_Xjlw0() {
        assertTrue(TradeConfig.rndBoolean());
        assertFalse(TradeConfig.rndBoolean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getPublishQuotePriceChangeTest_WhenPublishQuotePriceChangeIsFalse_ReturnsFalse_zwOW2_fid1() {
        boolean expected = false;
        boolean actual = TradeConfig.getPublishQuotePriceChange();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_jHSr2_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 2; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_fmcq3_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 3; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_owmy4_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 4; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_zqSn5_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 5; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_rnmG6_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 6; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_xNim7_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 7; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_YgXN8_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 8; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_EWmN9_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 9; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWebInterfaceTest_returnsCorrectValue_rtxt10_fid1() {
        int actual = TradeConfig.getWebInterface();
        int expected = 10; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndIntEdgeCases_ZnAu1() {
        int result1 = TradeConfig.rndInt(0);
        assertTrue(result1 == 0);
        int result2 = TradeConfig.rndInt(-10);
        assertTrue(result2 == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndIntBoundaryCases_AXsH2() {
        int result1 = TradeConfig.rndInt(Integer.MAX_VALUE);
        assertTrue(result1 >= 0 && result1 < Integer.MAX_VALUE);
        int result2 = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result2 >= 0 && result2 < Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_qXSd0() {
        assertEquals(0, TradeConfig.getOrderProcessingMode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndSymbols_withOneSymbol_returnsCorrectString_SwiG0_fid1() {
        String expected = "s:0";
        String actual = TradeConfig.rndSymbols();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndSymbols_withMaxSymbols_returnsCorrectString_hPuz1_fid1() {
        String expected = "s:0,s:1,s:2,s:3,s:4,s:5,s:6,s:7,s:8,s:9";
        String actual = TradeConfig.rndSymbols();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndSymbols_withNoSymbols_returnsCorrectString_MbSI2() {
        String expected = "";
        String actual = TradeConfig.rndSymbols();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_anBP0_fid1() {
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        BigDecimal expected = new BigDecimal("1.0");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmail_EkLP0_fid1() {
        String userID = "user:123";
        String expected = "user123@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithEmptyUserID_Yqds1_fid1() {
        String userID = "";
        String expected = "@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDLengthMoreThanOne_ugVa3_fid1() {
        String userID = "user:123:456";
        String expected = "user123456@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDLengthOne_WPwt4_fid1() {
        String userID = "u";
        String expected = "u@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsSpecialCharacters_LpkX6_fid1() {
        String userID = "user!@#$%^&*()_+";
        String expected = "user!@#$%^&*()_+@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsNumbers_NcZR7_fid1() {
        String userID = "user123";
        String expected = "user123@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsUppercaseLetters_aquT8_fid1() {
        String userID = "User";
        String expected = "User@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsLowercaseLetters_EdTZ9_fid1() {
        String userID = "user";
        String expected = "user@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsBothUppercaseAndLowercaseLetters_VMPM10_fid1() {
        String userID = "UsEr";
        String expected = "UsEr@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsBothUppercaseAndLowercaseLettersAndNumbers_MiTn11_fid1() {
        String userID = "UsEr123";
        String expected = "UsEr123@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmailWithUserIDContainsBothUppercaseAndLowercaseLettersAndNumbersAndSpecialCharacters_nTGI12_fid1() {
        String userID = "UsEr123!@#$%^&*()_+";
        String expected = "UsEr123!@#$%^&*()_+@50.com";
        String actual = TradeConfig.rndEmail(userID);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_1_yUDK0() {
        assertEquals(0, TradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_PxEH0_fid1() {
        assertEquals("100-1000-1000-1000", TradeConfig.rndCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_BPfI1_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 1; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_Hfdj4_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 4; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_OFEI5_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 5; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_VNwg6_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 6; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_RdNP7_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 7; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_HEZY8_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 8; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_HLPE9_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 9; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_cyRP10_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 10; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeModeTest_YMRL11_fid1() {
        int actual = TradeConfig.getRunTimeMode();
        int expected = 11; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_whenInputIsZero_thenOutputIsZero_jnLN1_fid1() {
        String result = TradeConfig.rndBalance();
        org.junit.jupiter.api.Assertions.assertEquals("0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_whenInputIsNegative_thenOutputIsNegative_OfkA2_fid1() {
        String result = TradeConfig.rndBalance();
        org.junit.jupiter.api.Assertions.assertTrue(result.startsWith("-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBalance_whenInputIsPositive_thenOutputIsPositive_KUnP3_fid1() {
        String result = TradeConfig.rndBalance();
        org.junit.jupiter.api.Assertions.assertTrue(result.startsWith("+"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBoolean_Xjlw0_1_fid3() {
        assertTrue(TradeConfig.rndBoolean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndIntEdgeCases_ZnAu1_2_fid3() {
        int result1 = TradeConfig.rndInt(0);
        int result2 = TradeConfig.rndInt(-10);
        assertTrue(result2 == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndIntBoundaryCases_AXsH2_2_fid3() {
        int result1 = TradeConfig.rndInt(Integer.MAX_VALUE);
        int result2 = TradeConfig.rndInt(Integer.MIN_VALUE);
        assertTrue(result2 >= 0 && result2 < Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeForBuyOrder_ZOLd0_HIDF0_fid3() {
        String orderType = "BUY";
        BigDecimal expectedFee = new BigDecimal("0.001"); // Replace with the actual value of orderFee
        BigDecimal actualFee = TradeConfig.getOrderFee(orderType);
        assertEquals(expectedFee, actualFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeForSellOrder_QjHF1_RtpW0_fid3() {
        String orderType = "SELL";
        BigDecimal expectedFee = new BigDecimal("0.002"); // Replace with the actual value of orderFee
        BigDecimal actualFee = TradeConfig.getOrderFee(orderType);
        assertEquals(expectedFee, actualFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeForInvalidOrderType_Dkxg2_FsmX0_fid3() {
        String orderType = "Invalid";
        BigDecimal expectedFee = new BigDecimal("1000000"); // Replace with the actual value of cashFee
        BigDecimal actualFee = TradeConfig.getOrderFee(orderType);
        assertEquals(expectedFee, actualFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserIDWithMaxUsers_jZkb1_iVxm0_fid3() {
        String expectedUserID = "uid:0";
        for (int i = 0; i < 1000; i++) {
            TradeConfig.nextUserID();
        }
        String actualUserID = TradeConfig.nextUserID();
        assertEquals(expectedUserID, actualUserID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeNames_miEq0_FPRN0_fid3() {
        String[] expected = {"FIFO", "LIFO", "MATCH"};
        String[] actual = TradeConfig.getOrderProcessingModeNames();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserIDWithRND_USERFalse_VxQq1_QHlx0_fid3() {
        System.setProperty("RND_USER", "false");
        assertEquals("user1000000", TradeConfig.getUserID());
    }
}