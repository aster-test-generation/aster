/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Include_Test_Passing {
    private static int hitCount;
    private static String initTime;
    PingServlet2Include pingservlet2include;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @InjectMocks
    PingServlet2Include pingServlet2Include;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.openMocks(this);
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        Mockito.doNothing().when(pingServlet2Include).doGet(request, response);
        pingServlet2Include.doPost(request, response);
        Mockito.verify(pingServlet2Include, Mockito.times(1)).doGet(request, response);
        Mockito.verify(request, Mockito.times(1)).getParameter("param1");
        Mockito.verify(request, Mockito.times(1)).getParameter("param2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_OxAj3() throws ServletException, IOException {
        PingServlet2Include servlet = new PingServlet2Include();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_cqth0_1() throws Exception {
        pingservlet2include = mock(PingServlet2Include.class);
        doCallRealMethod().when(pingservlet2include).init(any(ServletConfig.class));
        pingservlet2include.init(mock(ServletConfig.class));
        verify(pingservlet2include, times(1)).init(any(ServletConfig.class));
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_cqth0_2() throws Exception {
        pingservlet2include = mock(PingServlet2Include.class);
        doCallRealMethod().when(pingservlet2include).init(any(ServletConfig.class));
        pingservlet2include.init(mock(ServletConfig.class));
        verify(pingservlet2include, times(1)).init(any(ServletConfig.class));
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_mpyP0_RTHs0() throws ServletException, IOException {
        PingServlet2Include servlet = new PingServlet2Include();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_iBnC1_DymF0() throws ServletException, IOException {
        PingServlet2Include servlet = new PingServlet2Include();
        HttpServletRequest request = null;
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_fqyx2_QkRC0() throws ServletException, IOException {
        PingServlet2Include servlet = new PingServlet2Include();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }
}