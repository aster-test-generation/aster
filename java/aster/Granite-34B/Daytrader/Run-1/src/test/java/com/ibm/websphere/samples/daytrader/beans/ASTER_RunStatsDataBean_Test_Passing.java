/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeUserCount_qyix0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(100);
        assertEquals(100, runStatsDataBean.getTradeUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_ogtP0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(100);
        assertEquals(100, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_zeroValue_tVsF1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(0);
        assertEquals(0, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_negativeValue_bUDI2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(-10);
        assertEquals(-10, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_maxValue_dvkY3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_minValue_fYfM4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCount_wXYv0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(10);
        assertEquals(10, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountWithZeroValue_hBRm1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(0);
        assertEquals(0, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountWithNegativeValue_nkaB2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(-10);
        assertEquals(-10, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountWithMaximumValue_kYFo3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountWithMinimumValue_TAHe4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTradeUserCount_validInput_setsTradeUserCount_CwIq0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeUserCount = 100;
        runStatsDataBean.setTradeUserCount(tradeUserCount);
        assert runStatsDataBean.getTradeUserCount() == tradeUserCount;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_jdYU0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(10);
        int actual = runStatsDataBean.getOrderCount();
        int expected = 10;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCountWithZeroValue_UktA1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(0);
        int actual = runStatsDataBean.getOrderCount();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCountWithNegativeValue_mEgH2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(-10);
        int actual = runStatsDataBean.getOrderCount();
        int expected = -10;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOpenOrderCountTest_PJXF0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(10);
        int actual = runStatsDataBean.getOpenOrderCount();
        int expected = 10;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOpenOrderCountTest_Min_lsTM1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(Integer.MIN_VALUE);
        int actual = runStatsDataBean.getOpenOrderCount();
        int expected = Integer.MIN_VALUE;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOpenOrderCountTest_Max_CThf2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(Integer.MAX_VALUE);
        int actual = runStatsDataBean.getOpenOrderCount();
        int expected = Integer.MAX_VALUE;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOpenOrderCountTest_Zero_TTGF3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(0);
        int actual = runStatsDataBean.getOpenOrderCount();
        int expected = 0;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOpenOrderCount_validInput_setsOpenOrderCount_AtsD0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOpenOrderCount_invalidInput_doesNotSetOpenOrderCount_tPdt1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetTradeStockCount_IFVb0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetTradeStockCount_maxValue_gJfz1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetTradeStockCount_minValue_jqVX2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetTradeStockCount_zero_wJNO3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetTradeStockCount_negativeValue_PnPi4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(-100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetTradeStockCount_randomValue_GxQC9() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(1234567890);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetSumLoginCount_wrhK0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetSumLoginCount_zero_EZDH1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetSumLoginCount_negative_UGvw2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(-100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest1_yaEs0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest2_pMBy1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(50);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest3_HIbw2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCancelledOrderCount_dcsg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(10);
        int actual = runStatsDataBean.getCancelledOrderCount();
        int expected = 10;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCancelledOrderCount_zero_yywE1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(0);
        int actual = runStatsDataBean.getCancelledOrderCount();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCancelledOrderCount_negative_EXQY2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(-10);
        int actual = runStatsDataBean.getCancelledOrderCount();
        int expected = -10;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_Tmei0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(100);
        assertEquals(100, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCountZero_ZcIa1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(0);
        assertEquals(0, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCountNegative_HYgy2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(-100);
        assertEquals(-100, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Gpen0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: " + runStatsDataBean.getTradeUserCount() + "\n\t\t        newUserCount: " + runStatsDataBean.getNewUserCount() + "\n\t\t       sumLoginCount: " + runStatsDataBean.getSumLoginCount() + "\n\t\t      sumLogoutCount: " + runStatsDataBean.getSumLogoutCount() + "\n\t\t        holdingCount: " + runStatsDataBean.getHoldingCount() + "\n\t\t          orderCount: " + runStatsDataBean.getOrderCount() + "\n\t\t       buyOrderCount: " + runStatsDataBean.getBuyOrderCount() + "\n\t\t      sellOrderCount: " + runStatsDataBean.getSellOrderCount() + "\n\t\t cancelledOrderCount: " + runStatsDataBean.getCancelledOrderCount() + "\n\t\t      openOrderCount: " + runStatsDataBean.getOpenOrderCount() + "\n\t\t   deletedOrderCount: " + runStatsDataBean.getDeletedOrderCount();
        assertEquals(expected, runStatsDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCount_AfFp0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(100);
        assertEquals(100, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCountZero_Uesx1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
        assertEquals(0, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCountNegative_asKO2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(-100);
        assertEquals(-100, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getDeletedOrderCountTest_ESaL0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getDeletedOrderCount();
        int expected = 0; // Initialize the expected value based on the method implementation
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getDeletedOrderCountTest_lineCoverage_aEGP1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getDeletedOrderCount();
        org.junit.jupiter.api.Assertions.assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getDeletedOrderCountTest_branchCoverage_1_BXTL2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getDeletedOrderCount();
        org.junit.jupiter.api.Assertions.assertTrue(actual == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLogoutCount_rtKg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getSumLogoutCount();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewUserCount_whenValidInput_shouldSetNewUserCount_nZLE0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewUserCount_whenInvalidInput_shouldThrowException_kOsj1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_AkFs0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_MaxOrderCount_dLFZ1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_MinOrderCount_WmUm2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_ZeroOrderCount_VJmh3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_NegativeOrderCount_uFmg4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(-100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_RandomOrderCount_SUPl6() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(new Double(Math.random() * 100).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_HalfOrderCount_VFTv7() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(50);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_QuarterOrderCount_PKjQ8() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(25);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderCount_ThreeQuarterOrderCount_wgCm9() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(75);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLoginCount_zvUF0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getSumLoginCount();
        int expected = 0; // Initialize the expected value based on the method implementation
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLoginCount_withPositiveValue_FLbN1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(10);
        int actual = runStatsDataBean.getSumLoginCount();
        int expected = 10;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLoginCount_withNegativeValue_Mvjp2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(-5);
        int actual = runStatsDataBean.getSumLoginCount();
        int expected = -5;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLoginCount_withZeroValue_RkFz3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(0);
        int actual = runStatsDataBean.getSumLoginCount();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_Scdb0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_zero_AGDh1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_negative_MnjP2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_maxValue_hbWo3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_minValue_gXVl4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLogoutCountTest_fkbq0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLogoutCountTest_Zero_nblQ1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLogoutCountTest_Negative_jQlP2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(-100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLogoutCountTest_MaxInt_CoPK3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLogoutCountTest_MinInt_DMwB4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLogoutCountTest_Random_ADTF5() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(new Double(Math.random() * (Integer.MAX_VALUE - Integer.MIN_VALUE) + Integer.MIN_VALUE).intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_pYlT0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = 10;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_zero_pdSN1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(0);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = 0;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_negative_plss2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(-1);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = -1;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_positive_XuaP3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(1);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = 1;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCount_yoJA0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(10);
        assertEquals(10, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCountNegative_zXcw2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(-10);
        assertEquals(-10, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getDeletedOrderCountTest_branchCoverage_2_KEKk3_fid1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getDeletedOrderCount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_nfQK0_tkOW0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getNewUserCount();
        int expected = runStatsDataBean.getNewUserCount();
        assertEquals(expected, actual);
    }
}