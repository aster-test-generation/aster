/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet_Test_Passing {
    private static int hitCount;
    private static String initTime;
    PingServlet pingservlet;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @InjectMocks
    PingServlet pingServlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        Mockito.doNothing().when(pingServlet).doGet(request, response);
        pingServlet.doPost(request, response);
        Mockito.verify(pingServlet, Mockito.times(1)).doGet(request, response);
        Mockito.verify(request, Mockito.times(1)).getParameter("param1");
        Mockito.verify(request, Mockito.times(1)).getParameter("param2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_IGaU0() {
        PingServlet servlet = new PingServlet();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_null_jcnD1() {
        PingServlet servlet = new PingServlet();
        String result = servlet.getServletInfo();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        pingservlet = mock(PingServlet.class);
        hitCount = 0;
        initTime = "2022-01-01";
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        pingservlet.doGet(request, response);
        verify(response, times(1)).setContentType("text/html");
        verify(out, times(1)).println("<html><head><title>Ping Servlet</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>  <B>Hit Count: " + hitCount + "</B></body></html>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_bbzR0() throws ServletException, IOException {
        PingServlet servlet = new PingServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        servlet.doGet(request, response);
        verify(response, times(1)).setContentType("text/html");
        verify(out, times(1)).println("<html><head><title>Ping Servlet</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>  <B>Hit Count: " + hitCount + "</B></body></html>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_iVmA1() throws ServletException, IOException {
        PingServlet servlet = new PingServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenThrow(new IOException("Test exception"));
        servlet.doGet(request, response);
        verify(response, times(1)).setContentType("text/html");
        verify(response, times(1)).sendError(500, "Test exception");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_NhPX0_1() throws Exception {
        pingservlet = mock(PingServlet.class);
        doCallRealMethod().when(pingservlet).init(any(ServletConfig.class));
        pingservlet.init(mock(ServletConfig.class));
        verify(pingservlet, times(1)).init(any(ServletConfig.class));
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_NhPX0_2() throws Exception {
        pingservlet = mock(PingServlet.class);
        doCallRealMethod().when(pingservlet).init(any(ServletConfig.class));
        pingservlet.init(mock(ServletConfig.class));
        verify(pingservlet, times(1)).init(any(ServletConfig.class));
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_kbSd0_flVB0_1() throws Exception {
        PingServlet servlet = new PingServlet();
        servlet.init(new MockServletConfig());
        Field initTimeField = PingServlet.class.getDeclaredField("initTime");
        initTimeField.setAccessible(true);
        Field hitCountField = PingServlet.class.getDeclaredField("hitCount");
        hitCountField.setAccessible(true);
        assertNotNull(initTimeField.get(servlet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_kbSd0_flVB0_2() throws Exception {
        PingServlet servlet = new PingServlet();
        servlet.init(new MockServletConfig());
        Field initTimeField = PingServlet.class.getDeclaredField("initTime");
        initTimeField.setAccessible(true);
        Field hitCountField = PingServlet.class.getDeclaredField("hitCount");
        hitCountField.setAccessible(true);
        assertEquals(0, hitCountField.getInt(servlet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_wRtf0_xuaf0() throws ServletException, IOException {
        PingServlet servlet = new PingServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }
}