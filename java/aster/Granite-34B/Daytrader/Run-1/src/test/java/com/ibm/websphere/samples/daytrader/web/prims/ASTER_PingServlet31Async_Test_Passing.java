/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31Async_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingServlet31Async pingservlet31async;
    @Mock
    ServletConfig config;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @Mock
    ServletInputStream servletInputStream;
    @Mock
    AsyncContext asyncContext;
    @InjectMocks
    PingServlet31Async pingServlet31Async;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.initMocks(this);
        pingservlet31async = new PingServlet31Async();
        Mockito.when(request.startAsync()).thenReturn(asyncContext);
        Mockito.when(request.getInputStream()).thenReturn(servletInputStream);
        Mockito.when(servletInputStream.isReady()).thenReturn(true);
        Mockito.when(servletInputStream.read()).thenReturn(1);
        pingservlet31async.doPost(request, response);
        Mockito.verify(response).setContentType("text/html");
        Mockito.verify(asyncContext).addListener(Mockito.any());
        Mockito.verify(servletInputStream).setReadListener(Mockito.any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_RCTa0() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_cHAi1() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_EQyu2() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_oche3() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertFalse(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_TItQ4() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertNotEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_OLca5() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_GdLL6() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_MFEt7() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_rjvg8() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_bMTU9() {
        PingServlet31Async servlet = new PingServlet31Async();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_vzVL0() throws ServletException, IOException {
        PingServlet31Async servlet = new PingServlet31Async();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
    }
}