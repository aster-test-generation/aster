/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Failing {
    OrderDataBean orderdatabean;
    private String symbol;
    private Integer orderID;
    private BigDecimal price;
    @Mock
    Log log;
    private HoldingDataBean holding;
    @Mock
    AccountDataBean accountDataBean;
    @Mock
    HoldingDataBean holdingDataBean;
    @Mock
    QuoteDataBean quoteDataBean;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    private QuoteDataBean quote;
    private String orderStatus;
    private AccountDataBean account;
    private Date openDate;
    private Date completionDate;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_2() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_3() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_4() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_eSuZ2() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_ruvh4() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndQuantity(), order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_uznd5() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_UwVz8() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol(), order.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_idFN9() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(new Integer(TradeConfig.rndInt(100000)), order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_pfht10() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompletionDate_FUmF11() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType_rLFY12() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBoolean() ? "buy" : "buy", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithHolding_ArqZ1() {
        HoldingDataBean holding = new HoldingDataBean();
        holding.setPurchasePrice(new BigDecimal(100.00));
        OrderDataBean order = new OrderDataBean();
        order.setHolding(holding);
        assertNull(new BigDecimal(100.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithQuote_GyDV2() {
        QuoteDataBean quote = new QuoteDataBean();
        quote.setPrice(new BigDecimal(100.00));
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertNull(new BigDecimal(100.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNull(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance() throws Exception {
        orderdatabean = OrderDataBean.getRandomInstance();
        assertNotNull(orderdatabean);
        assertNotNull(orderdatabean.getAccount());
        assertNotNull(orderdatabean.getHolding());
        assertNotNull(orderdatabean.getQuote());
        assertNotNull(orderdatabean.getSymbol());
        assertNotNull(orderdatabean.getOpenDate());
        assertNotNull(orderdatabean.getCompletionDate());
        assertNotNull(orderdatabean.getOrderType());
        assertNotNull(orderdatabean.getOrderStatus());
        assertNotNull(orderdatabean.getPrice());
        assertNotNull(orderdatabean.getQuantity());
        assertNotNull(orderdatabean.getOrderFee());
        assertNotNull(orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithHolding_ArqZ1_fid1() {
        HoldingDataBean holding = new HoldingDataBean();
        holding.setPurchasePrice(new BigDecimal(100.00));
        OrderDataBean order = new OrderDataBean();
        order.setHolding(holding);
        assertEquals(new BigDecimal(100.00), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithQuote_GyDV2_fid1() {
        QuoteDataBean quote = new QuoteDataBean();
        quote.setPrice(new BigDecimal(100.00));
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(new BigDecimal(100.00), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_ZSHI0_fid1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertEquals(0, holdingDataBean.getHoldingID());
        assertEquals(0, holdingDataBean.hashCode());
        assertNotNull(HoldingDataBean.getRandomInstance());
        assertNotNull(holdingDataBean.getQuote());
        assertNotNull(holdingDataBean.getAccount());
        assertNotNull(holdingDataBean.toString());
        assertNotNull(holdingDataBean.getHoldingID());
        assertNotNull(holdingDataBean.getPurchaseDate());
        assertNotNull(holdingDataBean.getPurchasePrice());
        assertNotNull(holdingDataBean.getQuantity());
        assertNotNull(holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoHTML() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0),
                                new BigDecimal(1.0), "XYZ");
        Mockito.when(accountDataBean.getProfileID()).thenReturn("XXX");
        Mockito.when(holdingDataBean.getQuoteID()).thenReturn("XXX");
        Mockito.when(quoteDataBean.getSymbol()).thenReturn("XXX");
        Mockito.when(orderdatabean.getAccount()).thenReturn(accountDataBean);
        Mockito.when(orderdatabean.getHolding()).thenReturn(holdingDataBean);
        Mockito.when(orderdatabean.getQuote()).thenReturn(quoteDataBean);
        String expected = "<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>"
                                + "<LI>       openDate: " + orderdatabean.getOpenDate() + "</LI>"
                                + "<LI> completionDate: " + orderdatabean.getCompletionDate() + "</LI>"
                                + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 10.0</LI>"
                                + "<LI>       orderFee: 1.0</LI>" + "<LI>         symbol: XXX</LI>";
        Assertions.assertEquals(expected, orderdatabean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_RuxF0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String expected = "<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + new Date() + "</LI>" + "<LI> completionDate: " + new Date() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 10.0</LI>" + "<LI>       orderFee: 1.0</LI>" + "<LI>         symbol: XYZ</LI>";
        assertEquals(expected, order.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithNullValues_rzMK1() {
        OrderDataBean order = new OrderDataBean();
        String expected = "<BR>Order <B></B>" + "<LI>      orderType: </LI>" + "<LI>    orderStatus: </LI>" + "<LI>       openDate: </LI>" + "<LI> completionDate: </LI>" + "<LI>       quantity: </LI>" + "<LI>          price: </LI>" + "<LI>       orderFee: </LI>" + "<LI>         symbol: </LI>";
        assertEquals(expected, order.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeWithNullOrderFee_svdK1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), null, "XYZ");
        BigDecimal orderFee = order.getOrderFee();
        assertEquals(new BigDecimal(0.0), orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeWithNegativeOrderFee_PByU2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(-1.0), "XYZ");
        BigDecimal orderFee = order.getOrderFee();
        assertEquals(new BigDecimal(0.0), orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithMaximumLengthPlusOne_gkdZ5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderType = "BUY1";
        orderDataBean.setOrderType(orderType);
        assertNotEquals(orderType, orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderTypeWithMinimumLengthMinusOne_Flaq7() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderType = "B";
        orderDataBean.setOrderType(orderType);
        assertNotEquals(orderType, orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_eXhb0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithParams_GMWO1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean);
        assertEquals(1, quoteDataBean.getVolume());
        assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithRandomParams_DZnz3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean);
        assertTrue(quoteDataBean.getVolume() > 0);
        assertNotNull(quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithAllParams_pXlV4() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean);
        assertEquals(1, quoteDataBean.getVolume());
        assertEquals("symbol", quoteDataBean.getSymbol());
        assertEquals(new BigDecimal(1.0), quoteDataBean.getPrice());
        assertEquals(new BigDecimal(1.0), quoteDataBean.getOpen());
        assertEquals(new BigDecimal(1.0), quoteDataBean.getLow());
        assertEquals(1.0, quoteDataBean.getChange());
        assertEquals(new BigDecimal(1.0), quoteDataBean.getHigh());
        assertEquals("type", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean);
        assertNotEquals(0, quoteDataBean.getVolume());
        assertNotEquals("", quoteDataBean.getSymbol());
        assertNotEquals(new BigDecimal(0.0), quoteDataBean.getPrice());
        assertNotEquals(new BigDecimal(0.0), quoteDataBean.getOpen());
        assertNotEquals(new BigDecimal(0.0), quoteDataBean.getLow());
        assertNotEquals(0.0, quoteDataBean.getChange());
        assertNotEquals(new BigDecimal(0.0), quoteDataBean.getHigh());
        assertNotEquals("", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithNegativeParams_vNvf6() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean);
        assertTrue(quoteDataBean.getVolume() > 0);
        assertNotNull(quoteDataBean.getSymbol());
        assertTrue(quoteDataBean.getPrice().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(quoteDataBean.getOpen().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(quoteDataBean.getLow().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(quoteDataBean.getChange() != 0.0);
        assertTrue(quoteDataBean.getHigh().compareTo(BigDecimal.ZERO) > 0);
        assertNotNull(quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatustoolong_pWCx5() {
        OrderDataBean order = new OrderDataBean();
        String tooLongStatus = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget est vel nisl eleifend eleifend. Integer ac orci euismod, bibendum velit vel, suscipit velit. Vivamus auctor, est et suscipit commodo, nisl velit bibendum velit, a efficitur turpis velit id nisl. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Fusce auctor, est et suscipit commodo, nisl velit bibendum velit, a efficitur turpis velit id nisl. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.1";
        try {
            order.setOrderStatus(tooLongStatus);
            fail("Should have thrown an exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen1_Cvij0() {
        OrderDataBean order = new OrderDataBean(null, null, null, null, null, 0, null, null, null);
        boolean actual = order.isOpen();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoString() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "TEST");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + orderdatabean.getOpenDate() + "\n\t completionDate: " + orderdatabean.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: TEST";
        assertEquals(expected, orderdatabean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_KPND0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ABC");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: ABC";
        assertEquals(expected, order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount() throws Exception {
        account = mock(AccountDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        AccountDataBean account = mock(AccountDataBean.class);
        orderdatabean.setAccount(account);
        verify(orderdatabean, times(1)).setAccount(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate() throws Exception {
        orderdatabean = new OrderDataBean();
        completionDate = new Date();
        doReturn(completionDate).when(orderdatabean).getCompletionDate();
        assertEquals(completionDate, orderdatabean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithNullStatus_nDmS4() {
        OrderDataBean order = new OrderDataBean(1, "BUY", null, new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        assertFalse(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuote() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = mock(QuoteDataBean.class);
        orderdatabean.setQuote(quote);
        verify(quote, times(1)).getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeValue_TGSe1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(-100.0);
        assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNaNValue_LPSv6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(Double.NaN);
        assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithPositiveInfinityValue_MQrm7() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(Double.POSITIVE_INFINITY);
        assertEquals(Double.MAX_VALUE, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeInfinityValue_pCgK8() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(Double.NEGATIVE_INFINITY);
        assertEquals(0.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateInvalid_eoIf2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        Date completionDate = new Date(0);
        orderDataBean.setCompletionDate(completionDate);
        assertNotEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateAfterCompletionInvalid_mkgr4() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        Date completionDate = new Date();
        orderDataBean.setCompletionDate(completionDate);
        orderDataBean.setOrderStatus("Completed");
        Date newCompletionDate = new Date(0);
        orderDataBean.setCompletionDate(newCompletionDate);
        assertEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_tDRs0() {
        OrderDataBean orderData = new OrderDataBean();
        AccountDataBean accountData = orderData.getAccount();
        assertNotNull(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_1_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertEquals(0, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_7() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_8() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_9() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCoverage_eDhh2_11() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(new HoldingDataBean());
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithParams_GMWO1_1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithParams_GMWO1_2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertEquals(1, quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithParams_GMWO1_3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithRandomParams_DZnz3_2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertTrue(quoteDataBean.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithRandomParams_DZnz3_3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithAllParams_pXlV4_4() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertEquals(new BigDecimal(1.0), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithAllParams_pXlV4_5() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertEquals(new BigDecimal(1.0), quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithAllParams_pXlV4_6() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertEquals(new BigDecimal(1.0), quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithAllParams_pXlV4_7() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertEquals(1.0, quoteDataBean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithAllParams_pXlV4_8() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertEquals(new BigDecimal(1.0), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithAllParams_pXlV4_9() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertEquals("type", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5_2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotEquals(0, quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5_3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotEquals("", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5_4() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotEquals(new BigDecimal(0.0), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5_5() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotEquals(new BigDecimal(0.0), quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5_6() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotEquals(new BigDecimal(0.0), quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5_7() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotEquals(0.0, quoteDataBean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5_8() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotEquals(new BigDecimal(0.0), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithInvalidParams_gAAk5_9() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotEquals("", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithNegativeParams_vNvf6_4() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertTrue(quoteDataBean.getPrice().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithNegativeParams_vNvf6_5() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertTrue(quoteDataBean.getOpen().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithNegativeParams_vNvf6_6() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertTrue(quoteDataBean.getLow().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithNegativeParams_vNvf6_7() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertTrue(quoteDataBean.getChange() != 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithNegativeParams_vNvf6_8() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertTrue(quoteDataBean.getHigh().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteWithNegativeParams_vNvf6_9() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_hHNF0_1() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        assertTrue(orderdatabean.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_hHNF0_3() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        assertFalse(orderdatabean.isOpen());
    }
}