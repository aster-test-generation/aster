/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServletCDI_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet2_XNdd1() throws IOException {
        PingServletCDI servlet = new PingServletCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter pw = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(pw);
        servlet.doGet(request, response);
        verify(response).getWriter();
        verify(pw, times(2)).write(anyString());
        verify(pw).flush();
        verify(pw).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet3_EnYK2() throws IOException {
        PingServletCDI servlet = new PingServletCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter pw = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(pw);
        servlet.doGet(request, response);
        verify(response).getWriter();
        verify(pw, atLeast(1)).write(anyString());
        verify(pw).flush();
        verify(pw).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet4_xZHp3() throws IOException {
        PingServletCDI servlet = new PingServletCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter pw = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(pw);
        servlet.doGet(request, response);
        verify(response).getWriter();
        verify(pw, atMost(1)).write(anyString());
        verify(pw).flush();
        verify(pw).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet5_lSer4() throws IOException {
        PingServletCDI servlet = new PingServletCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter pw = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(pw);
        servlet.doGet(request, response);
        verify(response).getWriter();
        verify(pw, times(0)).write(anyString());
        verify(pw).flush();
        verify(pw).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet6_YQNo5() throws IOException {
        PingServletCDI servlet = new PingServletCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter pw = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(pw);
        servlet.doGet(request, response);
        verify(response).getWriter();
        verify(pw, never()).write(anyString());
        verify(pw).flush();
        verify(pw).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet7_TMHo6() throws IOException {
        PingServletCDI servlet = new PingServletCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter pw = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(pw);
        servlet.doGet(request, response);
        verify(response).getWriter();
        verify(pw, only()).write(anyString());
        verify(pw).flush();
        verify(pw).close();
    }
}