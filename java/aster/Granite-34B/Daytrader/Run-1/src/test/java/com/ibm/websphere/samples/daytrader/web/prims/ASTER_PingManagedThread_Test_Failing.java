/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedThread_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingManagedThread pingmanagedthread;
    @Mock
    HttpServletRequest mockHttpServletRequest;
    @Mock
    HttpServletResponse mockHttpServletResponse;
    private ManagedThreadFactory managedThreadFactory;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.openMocks(this);
        // Set up expected behavior for the mocks
        Mockito.when(mockHttpServletRequest.getParameter("param1")).thenReturn("value1");
        Mockito.when(mockHttpServletRequest.getParameter("param2")).thenReturn("value2");
        // Create an instance of PingManagedThread
        PingManagedThread pingmanagedthread = new PingManagedThread();
        // Call the method to be tested
        pingmanagedthread.doPost(mockHttpServletRequest, mockHttpServletResponse);
        // Add meaningful assertions here
        Mockito.verify(mockHttpServletResponse).setStatus(HttpServletResponse.SC_OK);
        Mockito.verify(mockHttpServletResponse).getWriter();
        Mockito.verify(mockHttpServletResponse.getWriter()).write("Success");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_ETeN3() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_Lpyp0() {
        PingManagedThread servlet = new PingManagedThread();
        String expected = "Tests a ManagedThread asynchronous servlet";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfoNull_odFI2() {
        PingManagedThread servlet = new PingManagedThread();
        String expected = null;
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfoEmpty_xUwl3() {
        PingManagedThread servlet = new PingManagedThread();
        String expected = "";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_addS0() throws Exception {
        managedThreadFactory = mock(ManagedThreadFactory.class);
        pingmanagedthread = new PingManagedThread();
        initTime = "2022-01-01";
        hitCount = 0;
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        AsyncContext asyncContext = mock(AsyncContext.class);
        when(req.startAsync()).thenReturn(asyncContext);
        when(res.getOutputStream()).thenReturn(out);
        when(res.getContentType()).thenReturn("text/html");
        pingmanagedthread.doGet(req, res);
        verify(res, times(1)).setContentType("text/html");
        verify(out, times(1)).println("<html><head><title>Ping ManagedThread</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping ManagedThread<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR/><BR/></FONT>");
        verify(managedThreadFactory, times(1)).newThread(any(Runnable.class));
        verify(out, times(1)).println("<b>HitCount: " + ++hitCount + "</b><br/>");
        verify(asyncContext, times(1)).complete();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_Tvza0_1() throws Exception {
        PingManagedThread pingmanagedthread = mock(PingManagedThread.class);
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingmanagedthread).init(config);
        pingmanagedthread.init(config);
        verify(pingmanagedthread, times(1)).init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_Tvza0_2() throws Exception {
        PingManagedThread pingmanagedthread = mock(PingManagedThread.class);
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingmanagedthread).init(config);
        pingmanagedthread.init(config);
        verify(pingmanagedthread, times(1)).init(config);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_fvMb0_FucS0() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_GGJD1_KVdm0() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_AmgH2_gvLM0() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithIOException_hENz8_uVhP0() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doNothing().when(response).sendError(anyInt(), anyString());
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_fid1() throws Exception {
        MockitoAnnotations.openMocks(this);
        // Set up expected behavior for the mocks
        Mockito.when(mockHttpServletRequest.getParameter("param1")).thenReturn("value1");
        Mockito.when(mockHttpServletRequest.getParameter("param2")).thenReturn("value2");
        // Call the method to be tested
        pingmanagedthread.doPost(mockHttpServletRequest, mockHttpServletResponse);
        // Add meaningful assertions here
        Mockito.verify(mockHttpServletResponse).setStatus(HttpServletResponse.SC_OK);
        Mockito.verify(mockHttpServletResponse).getWriter();
        Mockito.verify(mockHttpServletResponse.getWriter()).write("Success");
    }
}