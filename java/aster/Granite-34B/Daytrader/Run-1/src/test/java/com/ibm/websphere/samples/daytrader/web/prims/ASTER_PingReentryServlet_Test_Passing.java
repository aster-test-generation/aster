/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.BufferedReader;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingReentryServlet_Test_Passing {
    @Mock
    ServletConfig config;
    @InjectMocks
    PingReentryServlet pingreentryservlet;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @InjectMocks
    PingReentryServlet pingReentryServlet;
    @Mock
    ServletOutputStream out;
    @Mock
    HttpURLConnection con;
    @Mock
    BufferedReader in;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        // Set up expected behavior for the mock ServletConfig object
        when(config.getInitParameter("paramName")).thenReturn("paramValue");
        // Call the init method on the PingReentryServlet object
        pingreentryservlet.init(config);
        // Add meaningful assertions here to verify the behavior of the init method
        // For example:
        verify(config, times(1)).getInitParameter("paramName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        // Set up expected behavior for the mocks
        when(request.getParameter("param1")).thenReturn("value1");
        when(request.getParameter("param2")).thenReturn("value2");
        // Call the method being tested
        pingReentryServlet.doPost(request, response);
        // Add meaningful assertions here
        verify(response).setStatus(HttpServletResponse.SC_OK);
        verify(response).getWriter();
        verify(request, times(2)).getParameter(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_WDKw0() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
        assertEquals(200, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_eIZL1() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = null;
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
        assertEquals(500, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_GymQ2() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = null;
        servlet.doPost(request, response);
        assertEquals(500, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_cDiH0() {
        PingReentryServlet servlet = new PingReentryServlet();
        String result = servlet.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfoWithNullInput_CmgX2() {
        PingReentryServlet servlet = new PingReentryServlet();
        String result = servlet.getServletInfo();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfoWithEmptyInput_netD3() {
        PingReentryServlet servlet = new PingReentryServlet();
        String result = servlet.getServletInfo();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_5_takM4() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn("1");
        when(request.getParameter("sleep")).thenReturn("4000");
        servlet.doGet(request, response);
        verify(response, times(1)).setContentType("text/html");
        verify(out, times(1)).println(1);
    }
}