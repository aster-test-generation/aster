/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.jms.ConnectionFactory;
import javax.jms.Topic;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBTopic_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingServlet2MDBTopic pingservlet2mdbtopic;
    @Mock
    HttpServletRequest mockHttpServletRequest;
    @Mock
    HttpServletResponse mockHttpServletResponse;
    @InjectMocks
    PingServlet2MDBTopic pingServlet2MDBTopic;
    private ConnectionFactory topicConnectionFactory;
    private Topic tradeStreamerTopic;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        pingservlet2mdbtopic = new PingServlet2MDBTopic();
        ServletConfig config = mock(ServletConfig.class);
        pingservlet2mdbtopic.init(config);
        verify(config, times(1)).getInitParameterNames();
        verify(config, times(1)).getInitParameter("name");
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        // Set up expected behavior for the mocks
        Mockito.when(mockHttpServletRequest.getParameter("param1")).thenReturn("value1");
        Mockito.when(mockHttpServletRequest.getParameter("param2")).thenReturn("value2");
        // Call the method to be tested
        pingServlet2MDBTopic.doPost(mockHttpServletRequest, mockHttpServletResponse);
        // Add meaningful assertions here
        Mockito.verify(mockHttpServletResponse).setStatus(HttpServletResponse.SC_OK);
        Mockito.verify(mockHttpServletResponse).getWriter();
        Mockito.verify(mockHttpServletResponse).getWriter().println("Success");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_JeVH0() throws ServletException, IOException {
        PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_WVOB1() throws Exception {
        PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doThrow(new IOException()).when(response).getWriter();
        servlet.doGet(request, response);
        verify(response, times(1)).sendError(500, "Error writing response");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        pingservlet2mdbtopic = new PingServlet2MDBTopic();
        ServletConfig config = mock(ServletConfig.class);
        pingservlet2mdbtopic.init(config);
        verify(config, times(1)).getInitParameterNames();
        verify(config, times(1)).getInitParameter("name");
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        pingservlet2mdbtopic = new PingServlet2MDBTopic();
        ServletConfig config = mock(ServletConfig.class);
        pingservlet2mdbtopic.init(config);
        verify(config, times(1)).getInitParameterNames();
        verify(config, times(1)).getInitParameter("name");
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo2_dArK1() {
        PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
        String result = servlet.getServletInfo();
        assertEquals("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path", result);
    }
}