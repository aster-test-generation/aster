/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValCDI_Test_Passing {
    private static LocalDateTime initTime;
    PingServletBeanValCDI pingservletbeanvalcdi;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @InjectMocks
    PingServletBeanValCDI pingServletBeanValCDI;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_oTbu0() {
        PingServletBeanValCDI obj = new PingServletBeanValCDI();
        String result = obj.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_viHn1() throws Exception {
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        doReturn(out).when(response).getOutputStream();
        doThrow(new Exception()).when(response).setContentType("text/html");
        servlet.doGet(request, response);
        verify(response).sendError(500, "java.lang.Exception");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithServletException_ApdI3() throws Exception {
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        doReturn(out).when(response).getOutputStream();
        doThrow(new ServletException()).when(response).sendError(500, "java.lang.Exception");
        servlet.doGet(request, response);
        verify(response, never()).sendError(500, "java.lang.Exception");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_gNNX0() throws Exception {
        pingservletbeanvalcdi = mock(PingServletBeanValCDI.class);
        initTime = LocalDateTime.now();
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservletbeanvalcdi).init(config);
        pingservletbeanvalcdi.init(config);
        verify(pingservletbeanvalcdi, times(1)).init(config);
        assertEquals(initTime, initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_owgz0_BBqZ0() throws ServletException, IOException {
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_zJnO1_cvYC0() throws ServletException, IOException {
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_XMMt2_szzD0() throws ServletException, IOException {
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }
}