/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeScenarioServlet_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_wTXZ0() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.doGet(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask_wYBU1() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_sIKO0() {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        String expected = "TradeScenarioServlet emulates a population of web users";
        String actual = tradeScenarioServlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_URsj0() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            tradeScenarioServlet.doPost(request, response);
        } catch (ServletException | IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask_ywLX1() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            tradeScenarioServlet.performTask(request, response);
        } catch (ServletException | IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionN_EKYh1() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "n"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionL_ZJoX2() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "l"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionQ_WlXR3() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "q"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionA_MJRp4() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "a"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionU_jwcH5() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "u"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionH_KhCZ6() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "h"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionP_zHlR7() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "p"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionR_vsNk8() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "r"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionS_ODkb9() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "s"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskWithActionB_etmY10() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(new MockHttpServletRequest("action", "b"), new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit1_fJTK0() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        verify(config, times(1)).getInitParameterNames();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit2_pyQZ1() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        verify(config, times(1)).getInitParameter(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit3_ArCD2() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        verify(config, times(1)).getInitParameterNames();
        verify(config, times(1)).getInitParameter(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit4_YQZe3() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        verify(config, times(1)).getInitParameterNames();
        verify(config, times(1)).getInitParameter(anyString());
        TradeConfig.setConfigParam(anyString(), anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit5_OnxL4_raPl0() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        verify(config, times(1)).getInitParameterNames();
        verify(config, times(1)).getInitParameter(anyString());
        TradeConfig.setConfigParam(anyString(), anyString());
        tradeScenarioServlet.init(config);
    }
}