/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2CMROne2Many_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingServlet2Session2CMROne2Many pingservlet2session2cmrone2many;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    private TradeServices tradeSLSBLocal;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithNullConfig_LqAR1() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        try {
            servlet.init(null);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        // Set up expected behavior for the mocks
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        // Call the method to be tested
        pingservlet2session2cmrone2many.doPost(request, response);
        // Add meaningful assertions here
        Mockito.verify(response).getWriter();
        Mockito.verify(request, Mockito.times(1)).getParameter("param1");
        Mockito.verify(request, Mockito.times(1)).getParameter("param2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        pingservlet2session2cmrone2many = new PingServlet2Session2CMROne2Many();
        tradeSLSBLocal = mock(TradeServices.class);
        initTime = "initTime";
        hitCount = 0;
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getParameter("uid")).thenReturn("uid");
        when(tradeSLSBLocal.getOrders("uid")).thenReturn(new ArrayList<>());
        pingservlet2session2cmrone2many.doGet(request, response);
        verify(response, times(1)).setContentType("text/html");
        verify(response, times(1)).getWriter();
        verify(request, times(1)).getParameter("uid");
        verify(tradeSLSBLocal, times(1)).getOrders("uid");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_HRdp0_1() throws Exception {
        pingservlet2session2cmrone2many = mock(PingServlet2Session2CMROne2Many.class);
        hitCount = 0;
        initTime = new java.util.Date().toString();
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2session2cmrone2many).init(config);
        pingservlet2session2cmrone2many.init(config);
        verify(pingservlet2session2cmrone2many, times(1)).init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_HRdp0_2() throws Exception {
        pingservlet2session2cmrone2many = mock(PingServlet2Session2CMROne2Many.class);
        hitCount = 0;
        initTime = new java.util.Date().toString();
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2session2cmrone2many).init(config);
        pingservlet2session2cmrone2many.init(config);
        verify(pingservlet2session2cmrone2many, times(1)).init(config);
        assertEquals(initTime, new java.util.Date().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_mBHU0_FMCi0() throws ServletException, IOException {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_UMtj0_YOcZ0() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        String result = servlet.getServletInfo();
        String expected = "web primitive, tests Servlet to Entity EJB path";
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_null_coverage_nnCy2_ZEcF0() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        String result = servlet.getServletInfo();
        org.junit.jupiter.api.Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_empty_coverage_opLU3_OrRf0() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        String result = servlet.getServletInfo();
        org.junit.jupiter.api.Assertions.assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_length_coverage_BsMW4_kken0() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        String result = servlet.getServletInfo();
        org.junit.jupiter.api.Assertions.assertEquals(47, result.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_indexof_coverage_Degt5_IoBw0() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        String result = servlet.getServletInfo();
        org.junit.jupiter.api.Assertions.assertTrue(result.indexOf("web primitive") >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_startswith_coverage_qCLX6_sbgC0() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        String result = servlet.getServletInfo();
        org.junit.jupiter.api.Assertions.assertTrue(result.startsWith("web primitive"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_endswith_coverage_biZf7_mYzP0() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        String result = servlet.getServletInfo();
        org.junit.jupiter.api.Assertions.assertTrue(result.endsWith("Servlet to Entity EJB path"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_substring_coverage_bbCz8_yUdn0() {
        PingServlet2Session2CMROne2Many servlet = new PingServlet2Session2CMROne2Many();
        String result = servlet.getServletInfo();
        org.junit.jupiter.api.Assertions.assertEquals("web primitive", result.substring(0, 13));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_fid2() throws Exception {
        // Set up expected behavior for the mocks
        Mockito.when(request.getParameter("param1")).thenReturn("value1");
        Mockito.when(request.getParameter("param2")).thenReturn("value2");
        // Create an instance of the class under test
        PingServlet2Session2CMROne2Many pingservlet2session2cmrone2many = new PingServlet2Session2CMROne2Many();
        // Call the method to be tested
        pingservlet2session2cmrone2many.doPost(request, response);
        // Add meaningful assertions here
        Mockito.verify(response).getWriter();
        Mockito.verify(request, Mockito.times(1)).getParameter("param1");
        Mockito.verify(request, Mockito.times(1)).getParameter("param2");
    }
}