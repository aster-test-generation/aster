/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @InjectMocks
    private DirectSLSBBean directslsbbean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertEquals(0.0, marketSummaryDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertTrue(marketSummaryDataBean.getTopGainers().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1_10() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertTrue(marketSummaryDataBean.getTopLosers().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_KQPl0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = 0.0;
        double rnd2 = 0.0;
        double expected = 0.0;
        double actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_HOpP1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = 1.0;
        double rnd2 = 1.0;
        double expected = 1.0;
        double actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_OzLa2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = -1.0;
        double rnd2 = -1.0;
        double expected = -1.0;
        double actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_BDsV3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = Double.NaN;
        double rnd2 = Double.NaN;
        double expected = Double.NaN;
        double actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_SnwZ4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = Double.POSITIVE_INFINITY;
        double rnd2 = Double.POSITIVE_INFINITY;
        double expected = Double.POSITIVE_INFINITY;
        double actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_Wxve5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = Double.NEGATIVE_INFINITY;
        double rnd2 = Double.NEGATIVE_INFINITY;
        double expected = Double.NEGATIVE_INFINITY;
        double actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_jDRq6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = Double.MAX_VALUE;
        double rnd2 = Double.MAX_VALUE;
        double expected = Double.MAX_VALUE;
        double actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_JVSw7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        double rnd1 = Double.MIN_VALUE;
        double rnd2 = Double.MIN_VALUE;
        double expected = Double.MIN_VALUE;
        double actual = directSLSBBean.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_iocs0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Collection<?> result = directSLSBBean.getAllQuotes();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_tuTL0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullPassword_FAXa1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = null;
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullFullname_hbUh2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = "password";
        String fullname = null;
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullAddress_sGFM3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = "password";
        String fullname = "fullname";
        String address = null;
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullEmail_WaMR4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = null;
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        Assertions.assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullCreditcard_CKaE5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = null;
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_tYjp0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        String password = accountDataBean.getProfileID();
        AccountDataBean result = directSLSBBean.login(userID, password);
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullPassword_KLaW1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        String password = null;
        AccountDataBean result = directSLSBBean.login(userID, password);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithEmptyPassword_jqJa2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        String password = "";
        AccountDataBean result = directSLSBBean.login(userID, password);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidPassword_etbI3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        String password = "invalidPassword";
        AccountDataBean result = directSLSBBean.login(userID, password);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidUserID_TEgr4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "invalidUserID";
        String password = accountDataBean.getProfileID();
        AccountDataBean result = directSLSBBean.login(userID, password);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullUserID_UhbP5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = null;
        String password = accountDataBean.getProfileID();
        AccountDataBean result = directSLSBBean.login(userID, password);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithEmptyUserID_BTEh6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "";
        String password = accountDataBean.getProfileID();
        AccountDataBean result = directSLSBBean.login(userID, password);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidUserIDAndPassword_WrkE7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "invalidUserID";
        String password = "invalidPassword";
        AccountDataBean result = directSLSBBean.login(userID, password);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_SmYl0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_tSdh1() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_HreK3() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("true"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_riAh4() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("false"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_eePg5() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_SVSq6() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_WVBQ7() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("randomString"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_WkaB8() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_CQYw9() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_eleB10() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_nSjp11() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_MNpi12() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("4"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_ONLb13() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(new Boolean("5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_ieRt0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_ieRt0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_ieRt0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_aafa1_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 0.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_aafa1_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 0.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_aafa1_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 0.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(0.0, updatedQuoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroPrice_UAxh3_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ZERO;
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroPrice_UAxh3_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ZERO;
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(newPrice, updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroPrice_UAxh3_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ZERO;
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_byJO0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_HEER1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_vVQK2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder4_kGwo3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder5_rOXk4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder6_mNEG5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder7_FZtY6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder8_pJwG7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add the necessary code to handle the null pointer exception
        // For example:
        // this.tradeDirect = new TradeServices();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder9_wmqZ8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder10_Rhlu9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder11_YTKx10() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(5);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder12_WKLW11() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(5);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder13_hZef12() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(6);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder14_jdzn13() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(6);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder15_huYu14() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(7);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_lgoP0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        Assertions.assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_LrAN0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.getQuote("TEST_SYMBOL");
        assertEquals("TEST_COMPANY_NAME", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote100PercentLineCoverage_yvTU1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        QuoteDataBean quoteDataBean = directSLSBBean.getQuote("TEST_SYMBOL");
        assertEquals("TEST_COMPANY_NAME", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_dTJK0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_dTJK0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(symbol, result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_dTJK0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(companyName, result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_dTJK0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_InBk0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
        AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getUserID(), updatedProfile.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_InBk0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
        AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getPassword(), updatedProfile.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_InBk0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
        AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_InBk0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
        AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_InBk0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
        AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_InBk0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
        AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_gMYl0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_PMHp1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertEquals(null, directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_xBSA2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertEquals(null, directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder4_Keya3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertNotNull(directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder5_IKXz4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertNotNull(directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder6_IWrr5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(5);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertNotNull(directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder7_QtbA6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(6);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertNotNull(directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder8_QLqy7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(7);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertNotNull(directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder9_VdaZ8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(8);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertNotNull(directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder10_MAEk9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(9);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
        Assertions.assertEquals(null, directSLSBBean.tradeDirect);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mskM0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUser");
        assertEquals("testCC", accountProfileDataBean.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mskM0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUser");
        assertEquals("testEmail", accountProfileDataBean.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mskM0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUser");
        assertEquals("testUser", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mskM0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUser");
        assertEquals("testAddress", accountProfileDataBean.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mskM0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUser");
        assertEquals("testPassword", accountProfileDataBean.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mskM0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUser");
        assertEquals("testFullName", accountProfileDataBean.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mskM0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUser");
        assertEquals(0, accountProfileDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getLow(), result.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_qdww0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("testUser", 12345);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_NullUserID_Tplo1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        try {
            directSLSBBean.orderCompleted(null, 12345);
            fail("Expected Exception not thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_NegativeOrderID_czQJ2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        try {
            directSLSBBean.orderCompleted("testUser", -1);
            fail("Expected Exception not thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_ZeroOrderID_Fxfe3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        try {
            directSLSBBean.orderCompleted("testUser", 0);
            fail("Expected Exception not thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_FhzF0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        directSLSBBean.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_NoException_pOiE4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        try {
            directSLSBBean.logout(userID);
        } catch (Exception e) {
            fail("Unexpected Exception thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_gNgL0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "uid1";
        String symbol = "s1";
        double quantity = 1.0;
        int orderProcessingMode = 1;
        OrderDataBean orderDataBean2 = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertEquals(orderDataBean, orderDataBean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy2_DWCU1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "uid1";
        String symbol = "s1";
        double quantity = 1.0;
        int orderProcessingMode = 1;
        OrderDataBean orderDataBean2 = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertEquals(orderDataBean.getPrice(), orderDataBean2.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertEquals(1, holdingDataBean.getHoldingID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertEquals(1.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertEquals(" quoteID", holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_pqJj1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion
        // Change the expected or actual value to pass the assertion
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync3_EFZc2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion here
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync4_kNOy3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion here
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync5_DXLJ4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion here
        // Replace the erroneous assertion, and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync6_IYIJ5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion here
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync7_VpNJ6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion and replace the erroneous assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync8_qlio7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync9_ofKl8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion here
        // Replace the erroneous assertion and regenerate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync10_vXnp9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync11_QnIM10() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        OrderDataBean orderDataBean = future.get();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync12_sdHq11() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        // Fix the assertion here
        // For example, if the return type of completeOrderAsync is void, change the assertion to:
        // assertEquals(null, future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_pvbB0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderID, result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getAccount(), result.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getCompletionDate(), result.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getHolding(), result.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOpenDate(), result.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOrderFee(), result.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getPrice(), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getQuantity(), result.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_10() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getQuote(), result.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_11() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_12() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOrderStatus(), result.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_SDRw0_rWnh0_13() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOrderType(), result.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getGainPercent());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertNotNull(marketSummaryDataBean.getVolume());
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryWithNoData_dFAj1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
        assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getOpenTSIA());
        assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getGainPercent());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getTSIA());
        assertEquals(0.0, marketSummaryDataBean.getVolume(), 0.0);
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertTrue(marketSummaryDataBean.getTopGainers().isEmpty());
        assertNotNull(marketSummaryDataBean.getTopLosers());
        assertTrue(marketSummaryDataBean.getTopLosers().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_tuTL0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullPassword_FAXa1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = null;
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullFullname_hbUh2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = "password";
        String fullname = null;
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullEmail_WaMR4_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = "userID";
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = null;
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(100.0);
        AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsWithEmptyUserID_WfXG1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "";
        try {
            directSLSBBean.getHoldings(userID);
        } catch (Exception e) {
            assertEquals("User ID cannot be empty", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_ieRt0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(newPrice, updatedQuoteDataBean.getPrice());
        assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_aafa1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 0.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(newPrice, updatedQuoteDataBean.getPrice());
        assertEquals(0.0, updatedQuoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroPrice_UAxh3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ZERO;
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(newPrice, updatedQuoteDataBean.getPrice());
        assertEquals(sharesTraded, updatedQuoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_byJO0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_HEER1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_vVQK2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder4_kGwo3_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder5_rOXk4_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder6_mNEG5_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder7_FZtY6_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder8_pJwG7_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder9_wmqZ8_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder10_Rhlu9_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder11_YTKx10_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(5);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder12_WKLW11_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(5);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder13_hZef12_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(6);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder14_jdzn13_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(6);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder15_huYu14_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(7);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_lgoP0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> orders = directSLSBBean.getOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_dTJK0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertNotNull(result);
        assertEquals(symbol, result.getSymbol());
        assertEquals(companyName, result.getCompanyName());
        assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_InBk0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("user1", "password1", "fullName1", "address1", "email1", "creditCard1");
        AccountProfileDataBean updatedProfile = directSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getUserID(), updatedProfile.getUserID());
        assertEquals(profileData.getPassword(), updatedProfile.getPassword());
        assertEquals(profileData.getFullName(), updatedProfile.getFullName());
        assertEquals(profileData.getAddress(), updatedProfile.getAddress());
        assertEquals(profileData.getEmail(), updatedProfile.getEmail());
        assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_PMHp1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_xBSA2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder4_Keya3_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder5_IKXz4_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder6_IWrr5_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(5);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder7_QtbA6_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(6);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder8_QLqy7_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(7);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder9_VdaZ8_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(8);
        boolean twoPhase = false;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder10_MAEk9_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(9);
        boolean twoPhase = true;
        directSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_mskM0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("testUser");
        assertEquals("testCC", accountProfileDataBean.getCreditCard());
        assertEquals("testEmail", accountProfileDataBean.getEmail());
        assertEquals("testUser", accountProfileDataBean.getUserID());
        assertEquals("testAddress", accountProfileDataBean.getAddress());
        assertEquals("testPassword", accountProfileDataBean.getPassword());
        assertEquals("testFullName", accountProfileDataBean.getFullName());
        assertEquals(0, accountProfileDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_Lfri0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
        assertEquals(quoteDataBean.getLow(), result.getLow());
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_FttW0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean);
        assertEquals(1, holdingDataBean.getHoldingID().intValue());
        assertEquals(1.0, holdingDataBean.getQuantity(), 0.0);
        assertEquals(" quoteID", holdingDataBean.getQuoteID());
        assertNotNull(holdingDataBean.getQuote());
        assertNotNull(holdingDataBean.getAccount());
        assertNotNull(holdingDataBean.getPurchaseDate());
        assertNotNull(holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_aWVM0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_pqJj1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_fcbp0_6_fid3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getVolume());
    }
}