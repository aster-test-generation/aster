/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.jaxrs;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_XMLObject_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_YCjm3() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_Iutq5() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_juFN6() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(true, result.length() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_SWbw10() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(true, result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_mNmX13() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals("someString", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_ObTT14() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(true, result.equals("someString"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0016_with_null_object_Drmg9() {
        XMLObject xmlObject = null;
        String result = xmlObject.getProp0016();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0006WithMaximumLengthPlusOne_IYXm6() {
        XMLObject xmlObject = new XMLObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1001; i++) {
            sb.append("a");
        }
        try {
            xmlObject.setProp0006(sb.toString());
            fail("Expected exception was not thrown");
        } catch (Exception e) {
            assertEquals("Length of value exceeds maximum limit", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0006WithMaximumLengthPlusOneAndWhitespaces_PlcM7() {
        XMLObject xmlObject = new XMLObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1001; i++) {
            sb.append("a");
        }
        sb.append("   ");
        try {
            xmlObject.setProp0006(sb.toString());
            fail("Expected exception was not thrown");
        } catch (Exception e) {
            assertEquals("Length of value exceeds maximum limit", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0006WithMaximumLengthPlusOneAndSpecialCharacters_eTky8() {
        XMLObject xmlObject = new XMLObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1001; i++) {
            sb.append("a");
        }
        sb.append("!@#$%^&*()_+");
        try {
            xmlObject.setProp0006(sb.toString());
            fail("Expected exception was not thrown");
        } catch (Exception e) {
            assertEquals("Length of value exceeds maximum limit", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0005WithInvalidValues_AggE11() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0005("invalid value");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidLength_RmAQ8() {
        XMLObject xmlObject = new XMLObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1001; i++) {
            sb.append("a");
        }
        try {
            xmlObject.setProp0002(sb.toString());
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidCharacters_ilKu9() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0002("<script>alert('XSS')</script>");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidFormat_WSvl10() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0002("2022-01-01");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidValue_mwQL11() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0002("invalid");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0016WithMaximumLengthPlusOneAndNull_yLHr9_HRZg0() {
        XMLObject xmlObject = new XMLObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1001; i++) {
            sb.append("a");
        }
        try {
            xmlObject.setProp0016(sb.toString());
            fail("Expected exception was not thrown");
        } catch (Exception e) {
            assertEquals("Length of value exceeds maximum limit", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0005WithInvalidType_avvg7_Skcp0() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0016("123");
            fail("Expected ClassCastException");
        } catch (ClassCastException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0008_not_null_HPbz5_ohYu0() {
        XMLObject xmlObject = new XMLObject();
        xmlObject.setProp0016("test");
        String actual = xmlObject.getProp0008();
        org.junit.jupiter.api.Assertions.assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0016WithInvalidInput_UIGv12_Asix0() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0016("test");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0003_qSBq0_fid1() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0003();
        assertEquals(result, "expectedValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_YCjm3_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(true, result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_Agls4_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(false, result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_juFN6_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(false, result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_Jjgr7_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(true, result.length() == 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_DotU8_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(false, result.length() == 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_gniN9_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(true, result.length() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_SWbw10_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(false, result.length() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_VYDs11_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(true, result.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_hjhf12_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(false, result.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0002_ObTT14_fid1() {
        XMLObject xMLObject = new XMLObject();
        String result = xMLObject.getProp0002();
        assertEquals(false, result.equals("someString"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0005WithInvalidValues_AggE11_fid1() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0005("invalid value");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidCharacters_ilKu9_fid1() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0002("<script>alert('XSS')</script>");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidFormat_WSvl10_fid1() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0002("2022-01-01");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidValue_mwQL11_fid1() {
        XMLObject xmlObject = new XMLObject();
        try {
            xmlObject.setProp0002("invalid");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0008_zZbb0_juJk0() {
        XMLObject xmlObject = new XMLObject();
        String actual = xmlObject.getProp0008();
        String expected = "expected value";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
}