/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_1() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_2() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_3() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_4() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertTrue(bean.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_5() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_6() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_7() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_8() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_hmWX0_9() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_QeQW0() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setSymbol("TEST");
        assertEquals("TEST", bean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithCoverage_MbkK1() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
        bean.setSymbol("TEST");
        bean.getSymbol();
        bean.getCompanyName();
        bean.getVolume();
        bean.getPrice();
        bean.getOpen();
        bean.getLow();
        bean.getHigh();
        bean.getChange();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_PIkM0() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        bean.setHigh(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHighNull_vjxk1() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        bean.setHigh(null);
        assertEquals(null, bean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHighZero_ZXOc2() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        bean.setHigh(new BigDecimal(0.0));
        assertEquals(new BigDecimal(0.0), bean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHighMax_SUEu3() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        bean.setHigh(new BigDecimal(Double.MAX_VALUE));
        assertEquals(new BigDecimal(Double.MAX_VALUE), bean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHighMin_oEKh4() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        bean.setHigh(new BigDecimal(Double.MIN_VALUE));
        assertEquals(new BigDecimal(Double.MIN_VALUE), bean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHighNegative_zNZr5() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        bean.setHigh(new BigDecimal(-100.0));
        assertEquals(new BigDecimal(-100.0), bean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompanyName_kAvg0() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 10.0);
        assertEquals("testCompanyName", bean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompanyName_null_SxgC1() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setCompanyName(null);
        assertEquals(null, bean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompanyName_empty_Moru2() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setCompanyName("");
        assertEquals("", bean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_gNmP0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
        int expected = 0;
        expected += (quoteDataBean.getSymbol() != null ? quoteDataBean.getSymbol().hashCode() : 0);
        assertEquals(expected, quoteDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithCompanyName_HBLn1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST", "TEST", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        int expected = 0;
        expected += (quoteDataBean.getSymbol() != null ? quoteDataBean.getSymbol().hashCode() : 0);
        assertEquals(expected, quoteDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetVolume_vinc0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST", "TEST", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        quoteDataBean.setVolume(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_ewTg0() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST COMPANY", 100.0, new BigDecimal(10.0), new BigDecimal(5.0), new BigDecimal(2.0), new BigDecimal(15.0), 50.0);
        assertEquals(new BigDecimal(10.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceNull_xUXK1() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(null);
        assertEquals(null, bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceNotNull_ZSCM2() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(10.0));
        assertNotNull(bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_SOOT4() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(10.0));
        assertEquals(new BigDecimal(10.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_auDu0() {
        QuoteDataBean bean = new QuoteDataBean("TEST");
        bean.print();
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithAllData_sKfu1() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 2.0);
        bean.print();
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithNoData_iKtF2() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.print();
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_sJTB0() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 100.0);
        bean.setOpen(new BigDecimal("100.0"));
        assertEquals(bean.getOpen(), new BigDecimal("100.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenNull_JprW1() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 100.0);
        bean.setOpen(null);
        assertEquals(bean.getOpen(), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenZero_XsyT2() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 100.0);
        bean.setOpen(new BigDecimal("0.0"));
        assertEquals(bean.getOpen(), new BigDecimal("0.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenMax_MUFA3() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 100.0);
        bean.setOpen(new BigDecimal("1.7976931348623157E308"));
        assertEquals(bean.getOpen(), new BigDecimal("1.7976931348623157E308"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenMin_CPgO4() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 100.0);
        bean.setOpen(new BigDecimal("-1.7976931348623157E308"));
        assertEquals(bean.getOpen(), new BigDecimal("-1.7976931348623157E308"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenNegative_Cttf5() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 100.0);
        bean.setOpen(new BigDecimal("-100.0"));
        assertEquals(bean.getOpen(), new BigDecimal("-100.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange_zMnn0() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setChange(100.0);
        assertEquals(100.0, bean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithNoSymbol_WqKy1() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setChange(100.0);
        assertEquals(100.0, bean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithAllParameters_QtIC2() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        bean.setChange(100.0);
        assertEquals(100.0, bean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeForLineCoverage_MttF3() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setChange(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeForBranchCoverage_FKeU4() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setChange(0.0);
        bean.setChange(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpen_CSnI0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(11.0), new BigDecimal(9.0), new BigDecimal(12.0), 5.0);
        assertEquals(new BigDecimal(11.0), quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenWithNoParameters_eOnv1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        assertEquals(null, quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLow_VcvZ0() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompany", 100.0, new BigDecimal("10.0"), new BigDecimal("11.0"), new BigDecimal("12.0"), new BigDecimal("13.0"), 100.0);
        assertEquals(bean.getLow(), new BigDecimal("12.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_nuAJ0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(5.0), new BigDecimal(2.0), new BigDecimal(15.0), 5.0);
        double change = quoteDataBean.getChange();
        assertEquals(5.0, change, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithNoChange_HsUI1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 0.0);
        double change = quoteDataBean.getChange();
        assertEquals(0.0, change, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithNegativeChange_Lzrl2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(15.0), new BigDecimal(20.0), new BigDecimal(10.0), -5.0);
        double change = quoteDataBean.getChange();
        assertEquals(-5.0, change, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh_ptsg0() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHigh2_GQnX1() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setHigh(new BigDecimal(100.0));
        BigDecimal result = bean.getHigh();
        assertEquals(new BigDecimal(100.0), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_WDVM0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        quoteDataBean.setPrice(new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice2_QSyq1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setPrice(new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice3_qWPA2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 0, new BigDecimal(0), new BigDecimal(0), new BigDecimal(0), new BigDecimal(0), 0);
        quoteDataBean.setPrice(new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_xDUZ0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
        assertFalse(quoteDataBean.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNonQuoteDataBeanObject_vgwc1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
        assertFalse(quoteDataBean.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_qdWr2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
        assertTrue(quoteDataBean.equals(quoteDataBean));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithEqualObject_Bben3() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("TEST");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("TEST");
        assertTrue(quoteDataBean1.equals(quoteDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNonEqualObject_wsSL4() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("TEST1");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("TEST2");
        assertFalse(quoteDataBean1.equals(quoteDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_iFqN0() {
        QuoteDataBean bean = new QuoteDataBean("TEST");
        assertEquals("TEST", bean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolDefaultConstructor_UxLP1() {
        QuoteDataBean bean = new QuoteDataBean();
        assertEquals(null, bean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolFullConstructor_uhyY2() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
        assertEquals("TEST", bean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolCoverage_ItDX3() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vGPO0() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), new BigDecimal("2.0"), new BigDecimal("3.0"), 100.0);
        String actual = bean.toString();
        String expected = "\n\tQuote Data for: testSymbol\n\t\t companyName: testCompanyName\n\t\t      volume: 100.0\n\t\t       price: 10.0\n\t\t        open1: 1.0\n\t\t         low: 2.0\n\t\t        high: 3.0\n\t\t      change1: 100.0";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNull_eJjP1() {
        QuoteDataBean bean = new QuoteDataBean();
        String actual = bean.toString();
        String expected = "\n\tQuote Data for: null\n\t\t companyName: null\n\t\t      volume: 0.0\n\t\t       price: null\n\t\t        open1: null\n\t\t         low: null\n\t\t        high: null\n\t\t      change1: 0.0";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNoChange_xmEL2() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, new BigDecimal("10.0"), new BigDecimal("1.0"), new BigDecimal("2.0"), new BigDecimal("3.0"), 0.0);
        String actual = bean.toString();
        String expected = "\n\tQuote Data for: testSymbol\n\t\t companyName: testCompanyName\n\t\t      volume: 100.0\n\t\t       price: 10.0\n\t\t        open1: 1.0\n\t\t         low: 2.0\n\t\t        high: 3.0\n\t\t      change1: 0.0";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNoVolume_gvZk3() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 0.0, new BigDecimal("10.0"), new BigDecimal("1.0"), new BigDecimal("2.0"), new BigDecimal("3.0"), 100.0);
        String actual = bean.toString();
        String expected = "\n\tQuote Data for: testSymbol\n\t\t companyName: testCompanyName\n\t\t      volume: 0.0\n\t\t       price: 10.0\n\t\t        open1: 1.0\n\t\t         low: 2.0\n\t\t        high: 3.0\n\t\t      change1: 100.0";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringNoPrice_Fzlz4() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompanyName", 100.0, null, new BigDecimal("1.0"), new BigDecimal("2.0"), new BigDecimal("3.0"), 100.0);
        String actual = bean.toString();
        String expected = "\n\tQuote Data for: testSymbol\n\t\t companyName: testCompanyName\n\t\t      volume: 100.0\n\t\t       price: null\n\t\t        open1: 1.0\n\t\t         low: 2.0\n\t\t        high: 3.0\n\t\t      change1: 100.0";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_WNqH0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        BigDecimal low = new BigDecimal(100.0);
        quoteDataBean.setLow(low);
        assertEquals(low, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithNull_ZtSV1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        quoteDataBean.setLow(null);
        assertEquals(null, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithZero_VlBl2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        BigDecimal low = new BigDecimal(0.0);
        quoteDataBean.setLow(low);
        assertEquals(low, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCompanyName_gaEg0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setCompanyName("Test Company");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCompanyNameWithCoverage_EvRv1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setCompanyName(null);
        quoteDataBean.setCompanyName("");
        quoteDataBean.setCompanyName("Test Company");
        quoteDataBean.setCompanyName("Another Test Company");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_xEAw0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(5.0), new BigDecimal(2.0), new BigDecimal(15.0), 5.0);
        assertEquals(100.0, quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolumeWithNoParams_EabW1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        assertEquals(0.0, quoteDataBean.getVolume(), 0.0);
    }
}