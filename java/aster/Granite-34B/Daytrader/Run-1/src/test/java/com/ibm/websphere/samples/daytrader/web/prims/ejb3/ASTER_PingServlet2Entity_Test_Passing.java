/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Entity_Test_Passing {
    private static int hitCount;
    private static String initTime;
    PingServlet2Entity pingservlet2entity;
    @Mock
    HttpServletRequest mockHttpServletRequest;
    @Mock
    HttpServletResponse mockHttpServletResponse;
    @InjectMocks
    PingServlet2Entity pingServlet2Entity;
    private EntityManager em;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        MockitoAnnotations.openMocks(this);
        // Set up expected behavior for the mocks
        when(mockHttpServletRequest.getParameter("param1")).thenReturn("value1");
        when(mockHttpServletRequest.getParameter("param2")).thenReturn("value2");
        // Call the method to be tested
        pingServlet2Entity.doPost(mockHttpServletRequest, mockHttpServletResponse);
        // Add meaningful assertions here
        verify(mockHttpServletResponse).setStatus(HttpServletResponse.SC_OK);
        verify(mockHttpServletResponse).getWriter();
        verify(mockHttpServletResponse).getWriter().write("Success");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_RUcW3() throws ServletException, IOException {
        PingServlet2Entity servlet = new PingServlet2Entity();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_0_CfmT0() throws Exception {
        PingServlet2Entity obj0 = new PingServlet2Entity();
        String result = obj0.getServletInfo();
        assertEquals("web primitive, tests Servlet to Entity EJB path", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_qGdp0() throws Exception {
        PingServlet2Entity servlet = new PingServlet2Entity();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_GBcu0_1() throws Exception {
        pingservlet2entity = mock(PingServlet2Entity.class);
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2entity).init(config);
        pingservlet2entity.init(config);
        verify(pingservlet2entity, times(1)).init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_GBcu0_2() throws Exception {
        pingservlet2entity = mock(PingServlet2Entity.class);
        ServletConfig config = mock(ServletConfig.class);
        doCallRealMethod().when(pingservlet2entity).init(config);
        pingservlet2entity.init(config);
        verify(pingservlet2entity, times(1)).init(config);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_SqMx0_gstw0() throws ServletException, IOException {
        PingServlet2Entity servlet = new PingServlet2Entity();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_cepO1_Amaz0() throws ServletException, IOException {
        PingServlet2Entity servlet = new PingServlet2Entity();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_hZvj2_rcTG0() throws ServletException, IOException {
        PingServlet2Entity servlet = new PingServlet2Entity();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }
}