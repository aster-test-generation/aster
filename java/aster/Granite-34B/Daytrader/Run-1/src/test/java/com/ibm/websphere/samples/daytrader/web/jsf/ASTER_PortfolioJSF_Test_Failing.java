/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PortfolioJSF_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberHoldings_WnFq0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        Integer result = portfolioJSF.getNumberHoldings();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberHoldingsWithCoverage_WXoj1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(10);
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(new Integer(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPortfolio_0_jIkJ0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.getPortfolio();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_wgIG0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal openBalance = new BigDecimal(0);
        portfolioJSF.setOpenBalance(openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance2_tUMm1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal openBalance = new BigDecimal(100);
        portfolioJSF.setOpenBalance(openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSumOfCashHoldings_BPZF0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal expected = portfolioJSF.getSumOfCashHoldings();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalance_ktHI0() {
        PortfolioJSF portfolio = new PortfolioJSF(null);
        BigDecimal balance = new BigDecimal("100.00");
        portfolio.setBalance(balance);
        assertEquals(balance, portfolio.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceWithZeroBalance_dXng1() {
        PortfolioJSF portfolio = new PortfolioJSF(null);
        BigDecimal balance = BigDecimal.ZERO;
        portfolio.setBalance(balance);
        assertEquals(balance, portfolio.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceWithNegativeBalance_qZaA2() {
        PortfolioJSF portfolio = new PortfolioJSF(null);
        BigDecimal balance = new BigDecimal("-100.00");
        portfolio.setBalance(balance);
        assertEquals(balance, portfolio.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceWithNullBalance_GGtZ3() {
        PortfolioJSF portfolio = new PortfolioJSF(null);
        BigDecimal balance = null;
        portfolio.setBalance(balance);
        assertEquals(balance, portfolio.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalBasis_OfeL0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalBasis = new BigDecimal(0);
        portfolioJSF.setTotalBasis(totalBasis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalBasis2_MTrI1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalBasis = new BigDecimal(1);
        portfolioJSF.setTotalBasis(totalBasis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_dVWa0_UzBQ0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal actualTotalBasis = portfolioJSF.getTotalBasis();
        BigDecimal expectedTotalBasis = null; // Initialize the expected total basis
        assertEquals(expectedTotalBasis, actualTotalBasis);
    }
}