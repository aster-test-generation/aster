/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingReentryServlet_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_AaIy0() throws javax.servlet.ServletException {
        PingReentryServlet servlet = new PingReentryServlet();
        servlet.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithException_tsoi1() throws javax.servlet.ServletException {
        PingReentryServlet servlet = new PingReentryServlet();
        servlet.init(null);
        servlet.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_bQqs0() {
        PingReentryServlet servlet = new PingReentryServlet();
        String expected = "Basic dynamic HTML generation through a servlet";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_CvXK0() throws javax.servlet.ServletException, java.io.IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        try {
            servlet.doPost(req, res);
        } catch (ServletException | IOException e) {
            e.printStackTrace();
        }
        assertEquals(200, res.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithException_MFyS1() throws javax.servlet.ServletException, java.io.IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        try {
            servlet.doPost(req, res);
        } catch (ServletException | IOException e) {
            assertEquals("Exception message", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doGet_1_XDpf0() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn(null);
        when(request.getParameter("sleep")).thenReturn(null);
        servlet.doGet(request, response);
        verify(out).println(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doGet_2_ORhg1() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn("1");
        when(request.getParameter("sleep")).thenReturn("1000");
        servlet.doGet(request, response);
        verify(out).println(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doGet_3_AiqG2() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn("2");
        when(request.getParameter("sleep")).thenReturn("2000");
        servlet.doGet(request, response);
        verify(out).println(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doGet_4_UzZk3() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn("3");
        when(request.getParameter("sleep")).thenReturn("3000");
        servlet.doGet(request, response);
        verify(out).println(3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doGet_5_pEWd4() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn("4");
        when(request.getParameter("sleep")).thenReturn("4000");
        servlet.doGet(request, response);
        verify(out).println(4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doGet_6_Ebai5() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn("5");
        when(request.getParameter("sleep")).thenReturn("5000");
        servlet.doGet(request, response);
        verify(out).println(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doGet_7_PAGX6() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn("6");
        when(request.getParameter("sleep")).thenReturn("6000");
        servlet.doGet(request, response);
        verify(out).println(6);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_doGet_8_GwIr7() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("numReentries")).thenReturn("7");
        when(request.getParameter("sleep")).thenReturn("7000");
        servlet.doGet(request, response);
        verify(out).println(7);
    }
}