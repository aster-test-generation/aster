/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.jaxrs;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TestJSONObject_Test_Failing {
    private String prop0013;
    TestJSONObject testJSONObject = new TestJSONObject();
    private String prop0001;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0004_QTev0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0004();
        String expected = "expected value";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0003_tFPV0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0003();
        String expected = "expectedValue";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0013_HGlh0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0013();
        String expected = "expected value";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0013_empty_KDVR3() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0013();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0013_length_VbnB4() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0013();
        assertTrue(actual.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0015_OKMd0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0015();
        assertEquals(result, "default");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0011_NFWj1() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0011();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0011_IHYc2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0011();
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0011_Jczl3() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0011();
        assertEquals("1", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0011_Ggtb4() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0011();
        assertEquals("0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0011_YJLM5() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0011();
        assertEquals("false", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0004WithMaximumLengthPlusOne_YHRu6() {
        TestJSONObject testJSONObject = new TestJSONObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1001; i++) {
            sb.append("a");
        }
        try {
            testJSONObject.setProp0004(sb.toString());
            fail("Expected an exception to be thrown");
        } catch (Exception e) {
            assertEquals("Input string is too long", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0004WithMaximumLengthPlusTwo_eDag7() {
        TestJSONObject testJSONObject = new TestJSONObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1002; i++) {
            sb.append("a");
        }
        try {
            testJSONObject.setProp0004(sb.toString());
            fail("Expected an exception to be thrown");
        } catch (Exception e) {
            assertEquals("Input string is too long", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0004WithMaximumLengthPlusThree_uPJE8() {
        TestJSONObject testJSONObject = new TestJSONObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1003; i++) {
            sb.append("a");
        }
        try {
            testJSONObject.setProp0004(sb.toString());
            fail("Expected an exception to be thrown");
        } catch (Exception e) {
            assertEquals("Input string is too long", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0004WithMaximumLengthPlusFour_tCcF9() {
        TestJSONObject testJSONObject = new TestJSONObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1004; i++) {
            sb.append("a");
        }
        try {
            testJSONObject.setProp0004(sb.toString());
            fail("Expected an exception to be thrown");
        } catch (Exception e) {
            assertEquals("Input string is too long", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0006_LAfc0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0006();
        String expected = "expected value";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0006_empty_Cgct3() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0006();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0006_length_cmuJ4() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0006();
        assertTrue(actual.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0006_exception_WpMg5() {
        TestJSONObject testJSONObject = new TestJSONObject();
        try {
            testJSONObject.getProp0006();
            fail("Expected Exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithMaximumLengthPlusOne_NkPb6() {
        TestJSONObject testJSONObject = new TestJSONObject();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 1001; i++) {
            sb.append("a");
        }
        try {
            testJSONObject.setProp0002(sb.toString());
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input length should not exceed 1000 characters", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithMinimumLengthMinusOne_rneg8() {
        TestJSONObject testJSONObject = new TestJSONObject();
        try {
            testJSONObject.setProp0002("");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input length should not be less than 1 character", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidCharacters_YXXe9() {
        TestJSONObject testJSONObject = new TestJSONObject();
        try {
            testJSONObject.setProp0002("12345");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input should only contain alphabets", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0002WithInvalidCharactersAndSpecialCharacters_AElW10() {
        TestJSONObject testJSONObject = new TestJSONObject();
        try {
            testJSONObject.setProp0002("12345!@#$%^&*()_+");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Input should only contain alphabets", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0001_emptyValue_MpPe2_HEiZ0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0001();
        assert result.isEmpty();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0001_multipleInstances_GKfK9_leju0() {
        TestJSONObject testJSONObject1 = new TestJSONObject();
        TestJSONObject testJSONObject2 = new TestJSONObject();
        String result1 = testJSONObject1.getProp0001();
        String result2 = testJSONObject2.getProp0001();
        assert result1.equals(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProp0001_multipleInvocations_AZIV10_Ojce0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result1 = testJSONObject.getProp0001();
        String result2 = testJSONObject.getProp0001();
        assert result1.equals(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0016_VGwv0_vdaR0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0016();
        String expected = "default_value";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0016_withNullParam_CkXk2_vMFd0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String param = null;
        testJSONObject.setProp0016(param);
        String actual = testJSONObject.getProp0016();
        String expected = "default_value";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0016_withEmptyParam_nppi3_wYCO0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String param = "";
        testJSONObject.setProp0016(param);
        String actual = testJSONObject.getProp0016();
        String expected = "default_value";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0016_withTabParam_ckGq5_FgYi0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String param = "\t";
        testJSONObject.setProp0016(param);
        String actual = testJSONObject.getProp0016();
        String expected = "default_value";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0004_QTev0_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0004();
        String expected = "expected value";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0013_empty_KDVR3_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0013();
        String expected = "";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0006_LAfc0_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0006();
        String expected = "expected value";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0006_length_cmuJ4_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0006();
        assertNotNull(actual);
        assertTrue(actual.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0006_empty_coverage_ystA8_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0006();
        String expected = "";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0006_length_coverage_BtgE9_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0006();
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getProp0016_VGwv0_vdaR0_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0016();
        String expected = "default_value";
        assertNull(expected);
    }
}