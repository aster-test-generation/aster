/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeSLSBBean_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAllQuotes1_sijo0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_HRGc0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderID_Znsr1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        tradeSLSBBean.cancelOrder(orderID, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithTwoPhase_ECef2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(null, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrdersTest1_Kzcl0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrdersTest2_LWMm1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid2";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrdersTest3_UHhD2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid3";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getCompanyName(), "companyName");
        assertEquals(quoteDataBean.getPrice(), new BigDecimal(123.45));
        assertEquals(quoteDataBean.getOpen(), new BigDecimal(123.45));
        assertEquals(quoteDataBean.getLow(), new BigDecimal(123.45));
        assertEquals(quoteDataBean.getChange(), 123.45, 0);
        assertEquals(quoteDataBean.getHigh(), new BigDecimal(123.45));
        assertEquals(quoteDataBean.getSymbol(), "symbol");
        assertEquals(quoteDataBean.getVolume(), 123456789, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_fhKs0() {
        QuoteDataBean quote = new QuoteDataBean();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        quote = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100));
        Assertions.assertEquals(quote.getCompanyName(), "companyName");
        Assertions.assertEquals(quote.getPrice(), new BigDecimal(100));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingTest_cFKh0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer holdingID = new Integer(0);
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(holdingID);
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_fsze0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("1");
        Assertions.assertEquals(accountProfileDataBean.getUserID(), "1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest2_DkbD1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("2");
        Assertions.assertEquals(accountProfileDataBean.getUserID(), "2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest3_pTRt2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("3");
        Assertions.assertEquals(accountProfileDataBean.getUserID(), "3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest1_kYbJ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid1");
        assertEquals(accountDataBean.getProfileID(), "uid1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest2_liAT1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid2");
        assertEquals(accountDataBean.getProfileID(), "uid2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest3_lWGy2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid3");
        assertEquals(accountDataBean.getProfileID(), "uid3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest4_Ncxm3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid4");
        assertEquals(accountDataBean.getProfileID(), "uid4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_lyWT0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.completeOrderAsync(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_YfPQ1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.completeOrderAsync(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_Becp0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_TrXX1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(order.getOrderType(), "BUY");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_yqJi2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(order.getQuantity(), 100.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_uCWW3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(order.getPrice(), quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest5_MRoF4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(order.getOrderFee(), TradeConfig.getOrderFee(orderType));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest1_DvCl0() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        String password = "pwd1";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertEquals(accountDataBean.getProfileID(), userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest2_OxpA1() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid2";
        String password = "pwd2";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertEquals(accountDataBean.getProfileID(), userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest3_LuFL2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid3";
        String password = "pwd3";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertEquals(accountDataBean.getProfileID(), userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest4_SYYt3() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid4";
        String password = "pwd4";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertEquals(accountDataBean.getProfileID(), userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest5_Obce4() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid5";
        String password = "pwd5";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertEquals(accountDataBean.getProfileID(), userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest6_CzlW5() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid6";
        String password = "pwd6";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertEquals(accountDataBean.getProfileID(), userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest7_nCVL6() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid7";
        String password = "pwd7";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertEquals(accountDataBean.getProfileID(), userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder1_ERdL0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_fgUX1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_qOBt2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder4_qtKS3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 4;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder5_wkuh4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 5;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder6_VEiI5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 6;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder7_TTSV6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 7;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder8_hzRc7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 8;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder9_srAR8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 9;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder10_MDny9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 10;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange1_UafP0() {
        QuoteDataBean quote = new QuoteDataBean();
        BigDecimal oldPrice = new BigDecimal(0);
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister0_LYtR0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register(" userID0", "password0", "fullname0", "address0", "email0", "creditcard0", new BigDecimal(0));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_Oygq1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(1));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_bPqr2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID2", "password2", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(2));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister3_mQKz3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID3", "password3", "fullname3", "address3", "email3", "creditcard3", new BigDecimal(3));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister4_emgH4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID4", "password4", "fullname4", "address4", "email4", "creditcard4", new BigDecimal(4));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister5_uvxF5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID5", "password5", "fullname5", "address5", "email5", "creditcard5", new BigDecimal(5));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister6_aAhu6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID6", "password6", "fullname6", "address6", "email6", "creditcard6", new BigDecimal(6));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister7_qHLA7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID7", "password7", "fullname7", "address7", "email7", "creditcard7", new BigDecimal(7));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister8_hoCw8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID8", "password8", "fullname8", "address8", "email8", "creditcard8", new BigDecimal(8));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister9_KIqS9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID9", "password9", "fullname9", "address9", "email9", "creditcard9", new BigDecimal(9));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID9");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister10_TDit10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID10", "password10", "fullname10", "address10", "email10", "creditcard10", new BigDecimal(10));
        Assertions.assertEquals(accountDataBean.getProfileID(), "userID10");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_WGof0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(null, quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_pAsl1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(null, quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume3_hNLu2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(null, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume4_GRaj3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(null, quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume5_VXcN4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(null, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume6_RgEg5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(0, quoteDataBean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume7_ITDQ6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(null, quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume8_xphz7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(null, quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume9_JPTo8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(0, quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile1_XPHj0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("uid1");
        accountProfileDataBean.setPassword("pwd1");
        accountProfileDataBean.setFullName("fn1");
        accountProfileDataBean.setAddress("ad1");
        accountProfileDataBean.setEmail("em1");
        accountProfileDataBean.setCreditCard("cc1");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile2_wONg1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("uid2");
        accountProfileDataBean.setPassword("pwd2");
        accountProfileDataBean.setFullName("fn2");
        accountProfileDataBean.setAddress("ad2");
        accountProfileDataBean.setEmail("em2");
        accountProfileDataBean.setCreditCard("cc2");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile3_GCRv2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("uid3");
        accountProfileDataBean.setPassword("pwd3");
        accountProfileDataBean.setFullName("fn3");
        accountProfileDataBean.setAddress("ad3");
        accountProfileDataBean.setEmail("em3");
        accountProfileDataBean.setCreditCard("cc3");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile4_eZSR3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("uid4");
        accountProfileDataBean.setPassword("pwd4");
        accountProfileDataBean.setFullName("fn4");
        accountProfileDataBean.setAddress("ad4");
        accountProfileDataBean.setEmail("em4");
        accountProfileDataBean.setCreditCard("cc4");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile5_zWkU4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("uid5");
        accountProfileDataBean.setPassword("pwd5");
        accountProfileDataBean.setFullName("fn5");
        accountProfileDataBean.setAddress("ad5");
        accountProfileDataBean.setEmail("em5");
        accountProfileDataBean.setCreditCard("cc5");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile6_oOKz5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("uid6");
        accountProfileDataBean.setPassword("pwd6");
        accountProfileDataBean.setFullName("fn6");
        accountProfileDataBean.setAddress("ad6");
        accountProfileDataBean.setEmail("em6");
        accountProfileDataBean.setCreditCard("cc6");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile7_Cevg6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("uid7");
        accountProfileDataBean.setPassword("pwd7");
        accountProfileDataBean.setFullName("fn7");
        accountProfileDataBean.setAddress("ad7");
        accountProfileDataBean.setEmail("em7");
        accountProfileDataBean.setCreditCard("cc7");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy1_imbV0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        String symbol = "s1";
        double quantity = 1.0;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(order, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_NrJM0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell2_trua1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid2";
        Integer holdingID = 2;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell3_ISGj2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid3";
        Integer holdingID = 3;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell4_IebY3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid4";
        Integer holdingID = 4;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell5_yYCa4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid5";
        Integer holdingID = 5;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell6_OxuG5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid6";
        Integer holdingID = 6;
        int orderProcessingMode = 3;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell7_KpeN6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid7";
        Integer holdingID = 7;
        int orderProcessingMode = 3;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell8_RxaI7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid8";
        Integer holdingID = 8;
        int orderProcessingMode = 4;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell9_qKEF8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid9";
        Integer holdingID = 9;
        int orderProcessingMode = 4;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell10_iOSY9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid10";
        Integer holdingID = 10;
        int orderProcessingMode = 5;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell11_pmSj10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid11";
        Integer holdingID = 11;
        int orderProcessingMode = 5;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell12_cTVT11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid12";
        Integer holdingID = 12;
        int orderProcessingMode = 6;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest1_gWVH0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.getClosedOrders("12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getCompanyName(), "companyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getPrice(), new BigDecimal(123.45));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getOpen(), new BigDecimal(123.45));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getLow(), new BigDecimal(123.45));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getChange(), 123.45, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getHigh(), new BigDecimal(123.45));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getSymbol(), "symbol");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(quoteDataBean.getVolume(), 123456789, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_fhKs0_1() {
        QuoteDataBean quote = new QuoteDataBean();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        quote = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100));
        Assertions.assertEquals(quote.getCompanyName(), "companyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_fhKs0_2() {
        QuoteDataBean quote = new QuoteDataBean();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        quote = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100));
        Assertions.assertEquals(quote.getPrice(), new BigDecimal(100));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderID_Znsr1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        tradeSLSBBean.cancelOrder(orderID, false);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrdersTest3_UHhD2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid3";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        // Replace the erroneous assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_5_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        Assertions.assertEquals(null, quoteDataBean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_NUuX0_7_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_fhKs0_1_fid2() {
        QuoteDataBean quote = new QuoteDataBean();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        quote = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100));
        Assertions.assertEquals("companyName", quote.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingTest_cFKh0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer holdingID = new Integer(0);
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(holdingID);
        assertNotNull(holdingDataBean);
        assertEquals(holdingDataBean.getQuantity(), new Double(0.0), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest1_fsze0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("1");
        Assertions.assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountProfileDataTest3_pTRt2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("3");
        Assertions.assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest1_kYbJ0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid1");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest2_liAT1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid2");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest4_Ncxm3_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("uid4");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_Becp0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_uCWW3_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(order.getPrice(), quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), "Order price does not match the expected value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest2_OxpA1_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid2";
        String password = "pwd2";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest4_SYYt3_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid4";
        String password = "pwd4";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest5_Obce4_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid5";
        String password = "pwd5";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest6_CzlW5_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid6";
        String password = "pwd6";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loginTest7_nCVL6_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid7";
        String password = "pwd7";
        AccountDataBean accountDataBean = tradeSLSBBean.login(userID, password);
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_fgUX1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_qOBt2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        // Add assertions here to verify the expected behavior
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder8_hzRc7_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 8;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder10_MDny9_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 10;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister0_LYtR0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID0", "password0", "fullname0", "address0", "email0", "creditcard0", new BigDecimal(0));
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_bPqr2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID2", "password2", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(2));
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister4_emgH4_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID4", "password4", "fullname4", "address4", "email4", "creditcard4", new BigDecimal(4));
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister5_uvxF5_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID5", "password5", "fullname5", "address5", "email5", "creditcard5", new BigDecimal(5));
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister7_qHLA7_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID7", "password7", "fullname7", "address7", "email7", "creditcard7", new BigDecimal(7));
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister10_TDit10_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.register("userID10", "password10", "fullname10", "address10", "email10", "creditcard10", new BigDecimal(10));
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_pAsl1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "TEST";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals("", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume3_hNLu2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertNull(quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume6_RgEg5_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "ABC";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(0, quoteDataBean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile6_oOKz5_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("uid6");
        accountProfileDataBean.setPassword("pwd6");
        accountProfileDataBean.setFullName("fn6");
        accountProfileDataBean.setAddress("ad6");
        accountProfileDataBean.setEmail("em6");
        accountProfileDataBean.setCreditCard("cc6");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
        assertEquals("uid6", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_NrJM0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell3_ISGj2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid3";
        Integer holdingID = 3;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell4_IebY3_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid4";
        Integer holdingID = 4;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell6_OxuG5_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid6";
        Integer holdingID = 6;
        int orderProcessingMode = 3;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        // Add assertions to validate the expected behavior
        // For example:
        // assertEquals(expectedValue, order.getPrice());
        // assertTrue(order.getCompletionDate() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell11_pmSj10_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid11";
        Integer holdingID = 11;
        int orderProcessingMode = 5;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell12_cTVT11_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid12";
        Integer holdingID = 12;
        int orderProcessingMode = 6;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest15_rQht14_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("12345");
        Assertions.assertNotNull(closedOrders);
    }
}