/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PingJDBCRead_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_hpFv0() throws javax.servlet.ServletException, java.io.IOException {
        PingJDBCRead ping = new PingJDBCRead();
        HttpServletRequest req = null;
        HttpServletResponse res = null;
        ping.doPost(req, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_cJCT4() {
        fail("Not yet implemented");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_ZMgr5() {
        PingJDBCRead testObject = new PingJDBCRead();
        String expected = "Basic JDBC Read using a prepared statment, makes use of TradeJDBC class";
        String actual = testObject.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_WWfY0() throws javax.servlet.ServletException, java.io.IOException {
        PingJDBCRead ping = new PingJDBCRead();
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
        ping.doGet(null, null);
    }
}