/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.DecodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonDecoder_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_QktI0_1() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": \"key1\", \"value\": \"value1\"}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals("key1", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_QktI0_2() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": \"key1\", \"value\": \"value1\"}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals("value1", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyKey_UeTf1_1() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": \"\", \"value\": \"value1\"}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals("", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyKey_UeTf1_2() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": \"\", \"value\": \"value1\"}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals("value1", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyValue_oqxw2_1() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": \"key1\", \"value\": \"\"}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals("key1", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyValue_oqxw2_2() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": \"key1\", \"value\": \"\"}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals("", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyKeyAndValue_OQbt3_1() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": \"\", \"value\": \"\"}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals("", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyKeyAndValue_OQbt3_2() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": \"\", \"value\": \"\"}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals("", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullKeyAndValue_jwaN4_1() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": null, \"value\": null}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals(null, message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullKeyAndValue_jwaN4_2() throws javax.websocket.DecodeException {
        JsonDecoder jsonDecoder = new JsonDecoder();
        String json = "{\"key\": null, \"value\": null}";
        JsonMessage message = jsonDecoder.decode(json);
        assertEquals(null, message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWillDecodeWithValidJson_MQyG0_fid1() {
        JsonDecoder jsonDecoder = new JsonDecoder();
        boolean actual = jsonDecoder.willDecode("{\"key\":\"value\"}");
        assertTrue(actual);
    }
}