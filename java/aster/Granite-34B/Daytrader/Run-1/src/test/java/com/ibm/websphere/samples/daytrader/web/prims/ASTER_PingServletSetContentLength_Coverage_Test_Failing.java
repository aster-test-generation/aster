/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_PingServletSetContentLength_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_bZoF0() throws javax.servlet.ServletException, java.io.IOException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_wjTe0() {
        PingServletSetContentLength obj = new PingServletSetContentLength();
        String expected = "Basic dynamic HTML generation through a servlet, with " + "contentLength set by contentLength parameter.";
        assertEquals(expected, obj.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_nSWu0() throws javax.servlet.ServletException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        ServletConfig config = new MockServletConfig();
        servlet.init(config);
        assertEquals(1, 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet2_sxyv1() throws Exception {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("contentLength")).thenReturn("100");
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet3_xjvt2() throws Exception {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet4_ZWdH3() throws Exception {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        when(request.getParameter("contentLength")).thenReturn("100");
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet5_qHlF4() throws Exception {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet6_wpHw5() throws Exception {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        when(request.getParameter("contentLength")).thenReturn("100");
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet7_jPSw6() throws Exception {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(out);
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getContentType()).thenReturn("text/html");
        servlet.doGet(request, response);
    }
}