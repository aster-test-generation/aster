/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead2JSP_Test_Passing {
    @Mock
    ServletConfig config;
    @InjectMocks
    PingJDBCRead2JSP pingjdbcread2jsp;
    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    QuoteDataBean quoteData;
    HttpServletRequest req;
    HttpServletResponse res;
    ServletContext ctx;
    String symbol;
    int iter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        // Set up expected behavior for the mock ServletConfig object
        when(config.getInitParameter("paramName")).thenReturn("paramValue");
        // Call the method to be tested
        pingjdbcread2jsp.init(config);
        // Add meaningful assertions here
        // For example:
        verify(config, times(1)).getInitParameter("paramName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_eypj0() throws ServletException {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        obj.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithConfig_YmxJ1() throws ServletException {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        ServletConfig config = new MockServletConfig();
        obj.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithException_DIFp2() throws ServletException {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        ServletConfig config = new MockServletConfig();
        try {
            obj.init(config);
        } catch (ServletException e) {
            assertEquals("Error message", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithAllMethods_FOsd4() throws ServletException {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        obj.init(null);
        obj.init(new MockServletConfig());
        try {
            obj.init(new MockServletConfig());
        } catch (ServletException e) {
            assertEquals("Error message", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_CEej0() throws Exception {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        obj.doPost(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_oMNc0() {
        PingJDBCRead2JSP ping = new PingJDBCRead2JSP();
        String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class";
        String actual = ping.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_lineCoverage_ffhh1() {
        PingJDBCRead2JSP ping = new PingJDBCRead2JSP();
        String actual = ping.getServletInfo();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_branchCoverage_osBq2() {
        PingJDBCRead2JSP ping = new PingJDBCRead2JSP();
        if (ping.getServletInfo() != null) {
            System.out.println("Branch coverage achieved");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet2_cvNn1() throws ServletException, IOException {
        PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletContext ctx = mock(ServletContext.class);
        when(TradeConfig.rndSymbol()).thenThrow(new Exception("Test Exception"));
        servlet.doGet(req, res);
        verify(req, atLeast(1)).setAttribute("quoteData", null);
        verify(ctx, atLeast(1)).getRequestDispatcher("/quoteDataPrimitive.jsp");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithHttpServletRequest_peRi1_cpHn0() throws Exception {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        obj.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithHttpServletResponse_FURd2_AahK0() throws Exception {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        obj.doPost(null, new MockHttpServletResponse());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_Heni0_sUHJ0() throws ServletException, IOException {
        PingJDBCRead2JSP servlet = new PingJDBCRead2JSP();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletConfig config = mock(ServletConfig.class);
        ServletContext ctx = mock(ServletContext.class);
        when(config.getServletContext()).thenReturn(ctx);
        when(ctx.getRequestDispatcher("/quoteDataPrimitive.jsp")).thenReturn(null);
        when(TradeConfig.rndSymbol()).thenReturn("symbol");
        when(TradeConfig.getPrimIterations()).thenReturn(1);
        servlet.init(config);
        servlet.doGet(req, res);
        verify(req, atLeast(1)).setAttribute("quoteData", null);
        verify(ctx, atLeast(1)).getRequestDispatcher("/quoteDataPrimitive.jsp");
    }
}