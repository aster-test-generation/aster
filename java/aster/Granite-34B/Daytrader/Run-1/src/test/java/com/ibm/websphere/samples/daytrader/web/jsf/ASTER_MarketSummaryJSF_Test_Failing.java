/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotSame;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryJSF_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_rTfY0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = new QuoteData[5];
        marketSummaryJSF.setTopGainers(topGainers);
        assertEquals(topGainers, marketSummaryJSF.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_NullParameter_CHkd1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setTopGainers(null);
        assertEquals(null, marketSummaryJSF.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_EmptyArrayParameter_AJMb2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = new QuoteData[0];
        marketSummaryJSF.setTopGainers(topGainers);
        assertEquals(topGainers, marketSummaryJSF.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_SingleElementArrayParameter_QPHX3() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = new QuoteData[1];
        marketSummaryJSF.setTopGainers(topGainers);
        assertEquals(topGainers, marketSummaryJSF.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_CToK0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_yAuM1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_WPAx2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(-1.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_goNX3() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(Double.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_BDHn4() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(Double.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_jLeI5() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(Double.NaN);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_uKPt6() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(Double.POSITIVE_INFINITY);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_UDFH7() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(Double.NEGATIVE_INFINITY);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSummaryDateTest_GQak0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Date expected = marketSummaryJSF.getSummaryDate();
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_XIxx0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        double volume = marketSummaryJSF.getVolume();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopLosers_dENV0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topLosers = new QuoteData[10];
        marketSummaryJSF.setTopLosers(topLosers);
        QuoteData[] actual = marketSummaryJSF.getTopLosers();
        QuoteData[] expected = topLosers;
        assertNotSame(expected, actual);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosers_qXzS0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
        QuoteData[] expected = null;
        assertEquals(expected, topLosers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketSummary_0_uhqw0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.getMarketSummary();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSummaryDateTest_Coverage_LmKH1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Date expected = marketSummaryJSF.getSummaryDate();
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
        assertEquals(expected, marketSummaryJSF.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopLosers_dENV0_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topLosers = new QuoteData[10];
        marketSummaryJSF.setTopLosers(topLosers);
        assertEquals(topLosers, marketSummaryJSF.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosers_qXzS0_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
        assertEquals(null, topLosers);
    }
}