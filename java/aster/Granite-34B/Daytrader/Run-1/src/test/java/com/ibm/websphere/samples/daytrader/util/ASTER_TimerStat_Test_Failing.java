/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs5_thenReturns5_TzbR1_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 5;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs10_thenReturns10_pzuT2_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 10;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs15_thenReturns15_SthK3_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 15;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs20_thenReturns20_ruAT4_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 20;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs25_thenReturns25_CyjT5_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 25;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs30_thenReturns30_tGMw6_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 30;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs35_thenReturns35_vgXN7_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 35;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs40_thenReturns40_gMDM8_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 40;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIs45_thenReturns45_ftXZ9_fid2() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 45;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxSecs_futI0_fid2() {
        TimerStat timerStat = new TimerStat();
        double max = 1000.0;
        double expected = max / 1000.0;
        double actual = timerStat.getMaxSecs();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, 0.0);
    }
}