/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_nIel1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        String expected = TradeConfig.rndSymbol();
        String actual = holdingDataBean.getQuoteID();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_GdFd2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        QuoteDataBean expected = new QuoteDataBean(TradeConfig.rndSymbol());
        QuoteDataBean actual = holdingDataBean.getQuote();
        assertEquals(expected.getSymbol(), actual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID_CHDy0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 0;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID2_FmqS1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 1;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID3_VGhE2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = -1;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID5_mbxH4() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 2147483647;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID6_TArN5() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = -2147483648;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID7_vgGY6() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 1234567890;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID8_fuGV7() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = -1234567890;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeValue_bWbI1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(-100.0);
        assertEquals(0.0, holdingDataBean.getQuantity(), -100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountForNotNull_QTXJ2() {
        HoldingDataBean holdingData = new HoldingDataBean();
        AccountDataBean accountData = holdingData.getAccount();
        AccountDataBean expected = new AccountDataBean();
        assertEquals(expected, accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountForNotNullAccountData_MRLH6() {
        HoldingDataBean holdingData = new HoldingDataBean();
        AccountDataBean accountData = holdingData.getAccount();
        AccountDataBean expectedAccountData = new AccountDataBean();
        assertEquals(expectedAccountData, accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountForNotNullAccountDataBean_rmkt8() {
        HoldingDataBean holdingData = new HoldingDataBean();
        AccountDataBean accountData = holdingData.getAccount();
        assertNotNull(accountData, "The account data should not be null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountForNotNullAccountDataBeanRandomInstance3_nPQx16() {
        HoldingDataBean holdingData = new HoldingDataBean();
        AccountDataBean accountData = holdingData.getAccount();
        assertNotNull(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote5_fAZQ4_fid1() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(quote);
        QuoteDataBean result = holdingDataBean.getQuote();
        assertEquals("org.apache.geronimo.testsuite.beans.EmployeeDataBean", result.getClass().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_kzSH0_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        double expected = TradeConfig.rndQuantity();
        double actual = holdingDataBean.getQuantity();
        assertEquals(expected, actual, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_GdFd2_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        QuoteDataBean expected = new QuoteDataBean(TradeConfig.rndSymbol());
        QuoteDataBean actual = holdingDataBean.getQuote();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_eyhe4_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        Date expected = new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE));
        Date actual = holdingDataBean.getPurchaseDate();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_KyNb6_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        int expected = holdingDataBean.getHoldingID().hashCode();
        int actual = holdingDataBean.hashCode();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID_CHDy0_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID2_FmqS1_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID3_VGhE2_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID5_mbxH4_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 2147483647;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID6_TArN5_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = -2147483648;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID7_vgGY6_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 1234567890;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID8_fuGV7_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = -1234567890;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID9_Hstc8_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 987654321;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID10_iagC9_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = -987654321;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeValue_bWbI1_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(-100.0);
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithMinDoubleValue_ZOMM5_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(Double.MIN_VALUE);
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNaNValue_EyQx6() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(Double.NaN);
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithInfiniteValue_hevD7_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(Double.POSITIVE_INFINITY);
        assertEquals(Double.MAX_VALUE, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNegativeInfiniteValue_DCnR8() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(Double.NEGATIVE_INFINITY);
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }
}