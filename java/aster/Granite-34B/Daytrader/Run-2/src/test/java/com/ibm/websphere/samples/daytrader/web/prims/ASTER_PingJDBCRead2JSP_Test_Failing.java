/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead2JSP_Test_Failing {
    PingJDBCRead2JSP pingjdbcread2jsp;
    HttpServlet httpservlet;
    ServletConfig servletconfig;
    HttpServletRequest httpservletrequest;
    ServletContext servletcontext;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcread2jsp = new PingJDBCRead2JSP();
        ServletConfig servletconfig = mock(ServletConfig.class);
        when(httpservlet.getServletConfig()).thenReturn(servletconfig);
        pingjdbcread2jsp.init(servletconfig);
        verify(httpservlet, times(1)).getServletConfig();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_yDgr0() throws ServletException {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        obj.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_LQcf0() {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class";
        assertEquals(expected, pingJDBCRead2JSP.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_pZQz0_Sxvo0() {
        PingJDBCRead2JSP ping = new PingJDBCRead2JSP();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletContext ctx = mock(ServletContext.class);
        QuoteDataBean quoteData = new QuoteDataBean();
        String symbol = "TEST";
        try {
            for (int i = 0; i < 100; i++) {
                quoteData = new QuoteDataBean();
                req.setAttribute("quoteData", quoteData);
                ctx.getRequestDispatcher("/quoteDataPrimitive.jsp").include(req, res);
            }
        } catch (Exception e) {
            fail("Exception in testDoGet(): " + e.getMessage());
        }
    }
}