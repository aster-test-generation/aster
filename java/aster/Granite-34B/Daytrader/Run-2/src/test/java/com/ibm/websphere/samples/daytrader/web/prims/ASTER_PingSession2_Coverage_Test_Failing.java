/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingSession2_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_miWD0() {
        PingSession2 testee = new PingSession2();
        String actual = testee.getServletInfo();
        String expected = "HTTP Session Key: Tests management of a read/write unique id";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_OgES0() throws javax.servlet.ServletException, java.io.IOException {
        PingSession2 obj = new PingSession2();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        obj.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_btSz1_nomY0() throws javax.servlet.ServletException, java.io.IOException {
        PingSession2 obj = new PingSession2();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        obj.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_YSYz1_aWsv0() throws javax.servlet.ServletException, java.io.IOException {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        doNothing().when(res).sendError(anyInt(), anyString());
        doNothing().when(res).setContentType(anyString());
        doNothing().when(res).setHeader(anyString(), anyString());
        doNothing().when(res).getWriter();
        when(req.getSession(anyBoolean())).thenReturn(null);
        pingSession2.doGet(req, res);
        Assertions.assertEquals(null, req.getSession(anyBoolean()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_YSYz1_aWsv0_fid3() throws javax.servlet.ServletException, java.io.IOException {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        doNothing().when(res).sendError(anyInt(), anyString());
        doNothing().when(res).setContentType(anyString());
        doNothing().when(res).setHeader(anyString(), anyString());
        doNothing().when(res).getWriter();
        when(req.getSession(anyBoolean())).thenReturn(null);
        pingSession2.doGet(req, res);
    }
}