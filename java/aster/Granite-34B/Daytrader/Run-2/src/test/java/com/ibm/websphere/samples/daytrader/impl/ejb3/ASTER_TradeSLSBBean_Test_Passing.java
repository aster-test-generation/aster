/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
    private EntityManager entityManager;
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @InjectMocks
    private TradeSLSBBean tradeslsbbean;
    @Mock
    private AccountProfileDataBean accountProfileDataBean;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_HanF0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1000.0;
        double netValue = 1500.0;
        double expected = 0.5;
        double actual = tradeSLSBBean.investmentReturn(investment, netValue);
        assertEquals(expected, actual, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_nThN0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_NullOrder_AbzO1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
            fail("Exception is expected");
        } catch (Exception e) {
            // Expected exception
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_TwoPhaseFalse_ahYZ3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
        } catch (NullPointerException e) {
            // Expected exception, handle accordingly
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteNullPrice_KDkP1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = null;
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected an exception to be thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteNullSymbol_eFCR3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = null;
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected an exception to be thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteEmptySymbol_IPBN4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "";
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected an exception to be thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteNullCompanyName_fOIt5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = null;
        BigDecimal price = quoteDataBean.getPrice();
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected an exception to be thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteEmptyCompanyName_iwCX6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = "";
        BigDecimal price = quoteDataBean.getPrice();
        try {
            tradeSLSBBean.createQuote(symbol, companyName, price);
            Assertions.fail("Expected an exception to be thrown");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseWithNullSymbol_nHos1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.pingTwoPhase(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseWithEmptySymbol_aUPz2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.pingTwoPhase("");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_zubs0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int actual = tradeSLSBBean.getImpl();
        int expected = TradeConfig.EJB3;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_EJB3_vDqh1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int actual = tradeSLSBBean.getImpl();
        assertEquals(TradeConfig.EJB3, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync14_yATW13() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidParameterTypes_ImQV5_BLTw0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Object[] invalidParameters = {123, new Object(), new java.sql.Date(System.currentTimeMillis())};
        for (Object parameter : invalidParameters) {
            try {
                tradeSLSBBean.getOrders(parameter.toString());
                fail("Expected exception for invalid parameter type: " + parameter.getClass().getName());
            } catch (Exception e) {
            }
        }
    }
}