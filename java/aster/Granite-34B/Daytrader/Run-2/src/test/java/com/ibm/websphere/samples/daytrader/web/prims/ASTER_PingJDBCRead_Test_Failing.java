/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingJDBCRead pingjdbcread;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithNullConfig_Jatf1() {
        try {
            PingJDBCRead ping = new PingJDBCRead();
            ping.init(null);
            fail("ServletException is expected");
        } catch (ServletException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_fjEE0() {
        PingJDBCRead ping = new PingJDBCRead();
        String result = ping.getServletInfo();
        assertEquals("Basic JDBC Read using a prepared statment, makes use of TradeJDBC class", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_lineCoverage_WvMo1() {
        PingJDBCRead ping = new PingJDBCRead();
        ping.getServletInfo();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_branchCoverage_PdJd2() {
        PingJDBCRead ping = new PingJDBCRead();
        if (ping.getServletInfo() != null) {
            System.out.println("Branch coverage achieved");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_XxKO0_Bvba0() throws ServletException, IOException {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingJDBCRead.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_withNullRequest_jsFG2_QBOW0() throws ServletException, IOException {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingJDBCRead.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_withNullResponse_fvRu3_GUFi0() throws ServletException, IOException {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        pingJDBCRead.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_zktm0_Owxa0() throws ServletException, IOException {
        PingJDBCRead ping = new PingJDBCRead();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ping.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithSymbol_BKgo1_jWJx0() throws ServletException, IOException {
        PingJDBCRead ping = new PingJDBCRead();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        request.getParameter("symbol");
        ping.doGet(request, response);
    }
}