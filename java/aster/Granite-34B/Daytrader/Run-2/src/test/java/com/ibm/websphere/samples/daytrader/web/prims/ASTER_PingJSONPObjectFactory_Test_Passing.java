/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.JsonBuilderFactory;
import javax.json.JsonReaderFactory;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObjectFactory_Test_Passing {
    private static int hitCount;
    private static String initTime;
    PingJSONPObjectFactory pingjsonpobjectfactory;
    ServletConfig servletconfig;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    HttpServlet httpservlet;
    private static JsonBuilderFactory toJSONObjectFactory = Json.createBuilderFactory(null);
    private static JsonReaderFactory toJSONReaderFactory = Json.createReaderFactory(null);
    private static final JsonReaderFactory jSONReaderFactory = Json.createReaderFactory(null);
    private static final JsonBuilderFactory jSONObjectFactory = Json.createBuilderFactory(null);

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        servletconfig = mock(ServletConfig.class);
        pingjsonpobjectfactory = new PingJSONPObjectFactory();
        pingjsonpobjectfactory.init(servletconfig);
        verify(servletconfig, times(1)).getInitParameter(eq("initTime"));
        verify(servletconfig, times(1)).getInitParameter(eq("hitCount"));
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        pingjsonpobjectfactory = new PingJSONPObjectFactory();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingjsonpobjectfactory.doPost(null, httpservletresponse);
        verify(httpservletresponse, times(1)).getOutputStream();
        verify(servletoutputstream, times(1)).println("Pong");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_ASkl0() throws ServletException, IOException {
        PingJSONPObjectFactory obj = new PingJSONPObjectFactory();
        obj.doPost(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_eyyw0() {
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        String result = factory.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        pingjsonpobjectfactory = new PingJSONPObjectFactory();
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingjsonpobjectfactory.doGet(null, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).getOutputStream();
        verify(servletoutputstream, times(1)).println(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        servletconfig = mock(ServletConfig.class);
        pingjsonpobjectfactory = new PingJSONPObjectFactory();
        pingjsonpobjectfactory.init(servletconfig);
        verify(servletconfig, times(1)).getInitParameter(eq("initTime"));
        verify(servletconfig, times(1)).getInitParameter(eq("hitCount"));
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        servletconfig = mock(ServletConfig.class);
        pingjsonpobjectfactory = new PingJSONPObjectFactory();
        pingjsonpobjectfactory.init(servletconfig);
        verify(servletconfig, times(1)).getInitParameter(eq("initTime"));
        verify(servletconfig, times(1)).getInitParameter(eq("hitCount"));
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithAllParameters_rrkj1_VLec0() throws ServletException, IOException {
        PingJSONPObjectFactory obj = new PingJSONPObjectFactory();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        obj.doPost(req, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_uODS2_imlS0() throws ServletException, IOException {
        PingJSONPObjectFactory obj = new PingJSONPObjectFactory();
        HttpServletResponse res = mock(HttpServletResponse.class);
        obj.doPost(null, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithException_HJMI5_XGLs0() throws ServletException, IOException {
        PingJSONPObjectFactory obj = new PingJSONPObjectFactory();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        doNothing().when(res).sendError(anyInt(), anyString());
        try {
            obj.doPost(req, res);
        } catch (ServletException | IOException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNoException_TuKs6_eJTo0() throws ServletException, IOException {
        PingJSONPObjectFactory obj = new PingJSONPObjectFactory();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        try {
            obj.doPost(req, res);
        } catch (ServletException | IOException e) {
            fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithThreeParameters_lfWh10_fcDL0() throws ServletException, IOException {
        PingJSONPObjectFactory obj = new PingJSONPObjectFactory();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        PingJSONPObjectFactory obj2 = new PingJSONPObjectFactory();
        obj.doGet(req, res);
    }
}