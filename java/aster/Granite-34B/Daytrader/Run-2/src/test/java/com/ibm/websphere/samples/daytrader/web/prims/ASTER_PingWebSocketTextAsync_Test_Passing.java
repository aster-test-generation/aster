/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

public class Aster_PingWebSocketTextAsync_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnCloseWithMockedSessionAndReason_gHiW5() {
        PingWebSocketTextAsync async = new PingWebSocketTextAsync();
        Session session = mock(Session.class);
        CloseReason reason = mock(CloseReason.class);
        async.onClose(session, reason);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnError_ffdH0() {
        PingWebSocketTextAsync async = new PingWebSocketTextAsync();
        Throwable t = new Throwable();
        async.onError(t);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnClose_Ghei0_DjXU0() {
        PingWebSocketTextAsync async = new PingWebSocketTextAsync();
        Session session = mock(Session.class);
        CloseReason reason = new CloseReason(CloseReason.CloseCodes.NORMAL_CLOSURE, "test");
        async.onClose(session, reason);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnCloseWithNullSession_qnak1_cPXQ0() {
        PingWebSocketTextAsync async = new PingWebSocketTextAsync();
        CloseReason reason = new CloseReason(CloseReason.CloseCodes.NORMAL_CLOSURE, "Normal Closure");
        async.onClose(null, reason);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnCloseWithNullReason_tuHW2_ulQy0() {
        PingWebSocketTextAsync async = new PingWebSocketTextAsync();
        Session session = mock(Session.class);
        async.onClose(session, null);
    }
}