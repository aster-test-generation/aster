/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintChangeHTML_1_wAIi0() {
        double change = -10.0;
        String htmlString = FinancialUtils.printChangeHTML(change);
        assertEquals("<FONT color=\"#ff0000\">-10.0</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintChangeHTML_2_VYWX1() {
        double change = 10.0;
        String htmlString = FinancialUtils.printChangeHTML(change);
        assertEquals("<FONT color=\"#009900\">10.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintChangeHTML_3_WSDI2() {
        double change = 0.0;
        String htmlString = FinancialUtils.printChangeHTML(change);
        assertEquals("<FONT color=\"#009900\">0.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintChangeHTML_5_ySDu4() {
        double change = 1.0;
        String htmlString = FinancialUtils.printChangeHTML(change);
        assertEquals("<FONT color=\"#009900\">1.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintChangeHTML_6_nNKU5() {
        double change = -1.0;
        String htmlString = FinancialUtils.printChangeHTML(change);
        assertEquals("<FONT color=\"#ff0000\">-1.0</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintChangeHTML_7_Pxdp6() {
        double change = 100.0;
        String htmlString = FinancialUtils.printChangeHTML(change);
        assertEquals("<FONT color=\"#009900\">100.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeHoldingsTotal_01_QZvp0_QwVP0() {
        Collection<HoldingDataBean> holdingDataBeans = null;
        BigDecimal holdingsTotal = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
        assertEquals(holdingsTotal, new BigDecimal(0.0).setScale(FinancialUtils.SCALE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeHoldingsTotal_02_Ggee1_WFhd0() {
        Collection<HoldingDataBean> holdingDataBeans = new ArrayList<HoldingDataBean>();
        BigDecimal holdingsTotal = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
        assertEquals(holdingsTotal, new BigDecimal(0.0).setScale(FinancialUtils.SCALE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeHoldingsTotal_04_cMvx3_EYKe0() {
        HoldingDataBean holdingData = new HoldingDataBean();
        Collection<HoldingDataBean> holdingDataBeans = new ArrayList<HoldingDataBean>();
        holdingDataBeans.add(holdingData);
        holdingData.setPurchasePrice(new BigDecimal(100.0));
        holdingData.setQuantity(10);
        BigDecimal holdingsTotal = FinancialUtils.computeHoldingsTotal(holdingDataBeans);
        assertEquals(holdingsTotal, new BigDecimal(1000.0).setScale(FinancialUtils.SCALE));
    }
}