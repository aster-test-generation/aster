/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.Collections;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Failing {
    TradeAppServlet tradeappservlet;
    HttpServlet httpservlet;
    ServletConfig servletconfig;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_zWoF0() throws ServletException {
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameterNames()).thenReturn(Collections.emptyEnumeration());
        TradeAppServlet tradeAppServlet = new TradeAppServlet();
        tradeAppServlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithException_bZKe1() throws ServletException {
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameterNames()).thenThrow(new RuntimeException());
        TradeAppServlet tradeAppServlet = new TradeAppServlet();
        tradeAppServlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservlet = mock(HttpServlet.class);
        servletconfig = mock(ServletConfig.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        tradeappservlet = new TradeAppServlet();
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        when(httpservlet.getServletConfig()).thenReturn(servletconfig);
        tradeappservlet.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getSession();
        verify(httpservlet, times(1)).getServletConfig();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        servletconfig = mock(ServletConfig.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        tradeappservlet = mock(TradeAppServlet.class);
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        when(httpservlet.getServletConfig()).thenReturn(servletconfig);
        tradeappservlet.doPost(httpservletrequest, httpservletresponse);
        verify(tradeappservlet, times(1)).performTask(httpservletrequest, httpservletresponse);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_jJhG0() {
        TradeAppServlet tradeAppServlet = new TradeAppServlet();
        String actual = tradeAppServlet.getServletInfo();
        String expected = "TradeAppServlet provides the standard web interface to Trade";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_YykY0() throws Exception {
        httpservlet = mock(HttpServlet.class);
        servletconfig = mock(ServletConfig.class);
        tradeappservlet = new TradeAppServlet();
        tradeappservlet.init(servletconfig);
        java.util.Enumeration<String> en = servletconfig.getInitParameterNames();
        while (en.hasMoreElements()) {
            String parm = en.nextElement();
            String value = servletconfig.getInitParameter(parm);
            TradeConfig.setConfigParam(parm, value);
        }
        try {
        } catch (Exception e) {
            Log.error(e, "TradeAppServlet:init -- Error initializing TradeDirect");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_LdcC0_OKmj0() throws Exception {
        TradeAppServlet tradeAppServlet = new TradeAppServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        tradeAppServlet.doPost(request, response);
    }
}