/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Failing {
    OrderDataBean orderdatabean;
    @Mock
    AccountDataBean accountDataBean;
    @Mock
    HoldingDataBean holdingDataBean;
    @Mock
    QuoteDataBean quoteDataBean;
    private String symbol;
    private Integer orderID;
    private BigDecimal price;
    @Mock
    Log log;
    private HoldingDataBean holding;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    private QuoteDataBean quote;
    private String orderStatus;
    private AccountDataBean account;
    private Date openDate;
    private Date completionDate;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_2() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_3() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_4() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_YzvC2() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_XsRr4() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndQuantity(), order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_lTgG5() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBigDecimal(1000.0f), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_Abef8() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndSymbol(), order.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_obmq9() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(new Integer(TradeConfig.rndInt(100000)), order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_OSid10() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompletionDate_DkAB11() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithInvalidSymbol_OGFl3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        orderDataBean.setSymbol("not equal");
        assertNotEquals("not equal", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithMaximumLengthPlusOneSymbol_xYgb5() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String maxPlusOneSymbol = "not equal";
        orderDataBean.setSymbol(maxPlusOneSymbol);
        assertNotEquals(maxPlusOneSymbol, orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice() throws Exception {
        orderdatabean = new OrderDataBean();
        price = new BigDecimal(100.00);
        when(orderdatabean.getPrice()).thenReturn(price);
        assertEquals(price, orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithDifferentValues_oziA8_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = new Integer(1);
        Integer orderID2 = new Integer(2);
        orderDataBean.setOrderID(orderID1);
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID1, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean);
        Assertions.assertNotNull(orderDataBean.getAccount());
        Assertions.assertNotNull(orderDataBean.getHolding());
        Assertions.assertNotNull(orderDataBean.getQuote());
        Assertions.assertNotNull(orderDataBean.getSymbol());
        Assertions.assertNotNull(orderDataBean.getPrice());
        Assertions.assertNotNull(orderDataBean.getQuantity());
        Assertions.assertNotNull(orderDataBean.getOrderFee());
        Assertions.assertNotNull(orderDataBean.getOrderID());
        Assertions.assertNotNull(orderDataBean.getOpenDate());
        Assertions.assertNotNull(orderDataBean.getCompletionDate());
        Assertions.assertNotNull(orderDataBean.getOrderType());
        Assertions.assertNotNull(orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithInvalidSymbol_OGFl3_fid1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        orderDataBean.setSymbol("123");
        assertNotEquals("123", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithMaximumLengthPlusOneSymbol_xYgb5_fid1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String maxPlusOneSymbol = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1";
        orderDataBean.setSymbol(maxPlusOneSymbol);
        assertNotEquals(maxPlusOneSymbol, orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNoPriceSet_lJqM1_fid1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, null, new BigDecimal(0.0), "ORCL");
        assertEquals(order.getPrice(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNoOrderFeeOrPriceSet_SGlm3_fid1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, null, null, "ORCL");
        assertEquals(order.getPrice(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoHTML() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String expected = "<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + new Date() + "</LI>" + "<LI> completionDate: " + new Date() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 10.0</LI>" + "<LI>       orderFee: 1.0</LI>" + "<LI>         symbol: XYZ</LI>";
        assertEquals(expected, orderdatabean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_PxeB0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String expectedHTML = "<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + new Date() + "</LI>" + "<LI> completionDate: " + new Date() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 10.0</LI>" + "<LI>       orderFee: 1.0</LI>" + "<LI>         symbol: XYZ</LI>";
        assertEquals(expectedHTML, order.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithNoData_RMAk1() {
        OrderDataBean order = new OrderDataBean();
        String expectedHTML = "<BR>Order <B></B>" + "<LI>      orderType: </LI>" + "<LI>    orderStatus: </LI>" + "<LI>       openDate: </LI>" + "<LI> completionDate: </LI>" + "<LI>       quantity: </LI>" + "<LI>          price: </LI>" + "<LI>       orderFee: </LI>" + "<LI>         symbol: </LI>";
        assertEquals(expectedHTML, order.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtoString() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "Symbol");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + new Date() + "\n\t completionDate: " + new Date() + "\n\t       quantity: 100.0\n\t          price: 100.0\n\t       orderFee: 10.0\n\t         symbol: Symbol";
        assertEquals(expected, orderdatabean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_PiMu0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: XYZ";
        assertEquals(expected, order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoCompletionDate_HhWT1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: null\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: XYZ";
        assertEquals(expected, order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoOpenDate_ElMR2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", null, new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: null\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: 1.0\n\t         symbol: XYZ";
        assertEquals(expected, order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoOrderFee_UGId3() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), null, "XYZ");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.0\n\t       orderFee: null\n\t         symbol: XYZ";
        assertEquals(expected, order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAccount() throws Exception {
        account = mock(AccountDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        AccountDataBean account = mock(AccountDataBean.class);
        orderdatabean.setAccount(account);
        verify(orderdatabean, times(1)).setAccount(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateInvalid_BlIw2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        Date openDate = new Date(0L);
        orderDataBean.setOpenDate(openDate);
        assertNotEquals(openDate, orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate() throws Exception {
        orderdatabean = new OrderDataBean();
        Date expected = new Date();
        when(orderdatabean.getCompletionDate()).thenReturn(expected);
        Date actual = orderdatabean.getCompletionDate();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithNullStatus_xdQD4() {
        OrderDataBean order = new OrderDataBean(1, "BUY", null, new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " IBM");
        assertFalse(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuote() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = mock(QuoteDataBean.class);
        orderdatabean.setQuote(quote);
        verify(quote, times(1)).getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateInvalid_MgJm2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        Date completionDate = new Date(0L);
        orderDataBean.setCompletionDate(completionDate);
        assertNotEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateAfterCompletionInvalid_eNuM4() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        Date completionDate = new Date(0L);
        orderDataBean.setCompletionDate(completionDate);
        assertNotEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNullThenValue_iKmb10_1_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = null;
        Integer orderID2 = new Integer(1);
        orderDataBean.setOrderID(orderID1);
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID1, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithValueThenNull_rtur11_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = new Integer(1);
        Integer orderID2 = null;
        orderDataBean.setOrderID(orderID1);
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID1, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_jGzu0_1() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        assertTrue(orderdatabean.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_jGzu0_3() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        assertFalse(orderdatabean.isOpen());
    }
}