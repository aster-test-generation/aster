/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_0_GiAs0() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong0";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_1_mxjb1() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong1";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_2_BEsD2() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong2";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_3_ovcG3() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong3";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_4_ptap4() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong4";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_5_WfhH5() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong5";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_6_fthD6() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong6";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_7_LveW7() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong7";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_8_RaNd8() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong8";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_9_IICT9() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong9";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout_10_kTVZ10() throws Exception {
        TradeServletAction tested = new TradeServletAction();
        ServletContext ctx = new MockServletContext();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse resp = new MockHttpServletResponse();
        String userID = "strong10";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoMarketSummary_IjCS0() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doMarketSummary(null, null, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome_lOoM0() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", null);
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome2_Mlwp1() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, null, null);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome3_xhWE2() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", "results");
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome4_LtSj3() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", "results");
        // Add assertions here to validate the behavior of the doHome method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome14_MAzn13() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", "results");
        // Add assertions here to validate the behavior of doHome method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome15_JhjP14() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", "results");
        // Add assertions here to validate the expected behavior of the doHome method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome18_rSBe17() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", "results");
        // Add assertions here to verify the behavior of doHome method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome19_pnnf18() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", "results");
        String expected = "expectedValue";
        String actual = "actualValue";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccount_Exception_ppUH3() {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String results = "testResults";
        doThrow(new ServletException("Test Exception")).when(req).setAttribute(anyString(), any());
        try {
            action.doAccount(ctx, req, resp, userID, results);
            verify(req).setAttribute("results", results + " exception user = " + userID);
        } catch (ServletException | IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoMarketSummary_jcnb1_WaeS0() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doMarketSummary(Mockito.mock(ServletContext.class), Mockito.mock(HttpServletRequest.class), Mockito.mock(HttpServletResponse.class), "testUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome_lOoM0_fid1() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome2_Mlwp1_fid1() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome3_xhWE2_fid1() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doHome(null, null, null, "123", "results");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoRegister4_Wshp3() throws Exception {
        TradeServletAction action = new TradeServletAction();
        action.doRegister(null, null, null, "uid4", "passwd4", "passwd4", "fullname4", "ccn4", "1000.00", "email4", "address4");
    }
}