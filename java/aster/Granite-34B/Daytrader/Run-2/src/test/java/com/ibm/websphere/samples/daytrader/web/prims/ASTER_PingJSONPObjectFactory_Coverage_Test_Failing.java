/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_PingJSONPObjectFactory_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_DHAH0() {
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        String result = factory.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_dKgc0() throws javax.servlet.ServletException {
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        factory.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithConfig_CmDj1() throws javax.servlet.ServletException {
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        factory.init(new MockServletConfig());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_TiUM0() throws javax.servlet.ServletException, java.io.IOException {
        HttpServletRequest req = null;
        HttpServletResponse res = null;
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        try {
            factory.doPost(req, res);
        } catch (ServletException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_OaKw1() throws javax.servlet.ServletException, java.io.IOException {
        HttpServletRequest req = null;
        HttpServletResponse res = null;
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        try {
            factory.doGet(req, res);
        } catch (ServletException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_bceH0() throws javax.servlet.ServletException, java.io.IOException {
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenThrow(new IOException());
        factory.doGet(req, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_SHrh1() throws javax.servlet.ServletException, java.io.IOException {
        PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
        factory.doGet(req, res);
    }
}