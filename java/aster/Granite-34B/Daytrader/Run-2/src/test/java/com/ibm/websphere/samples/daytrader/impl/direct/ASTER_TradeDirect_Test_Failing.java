/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
    TradeDirect tradedirect;
    Connection connection;
    DataSource datasource;
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
    private static Integer marketSummaryLock = new Integer(0);
    private static long nextMarketSummary = System.currentTimeMillis();
    PreparedStatement preparedstatement;
    ResultSet resultset;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    private boolean inSession = false;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private  UserTransaction txn;
    private ManagedExecutorService mes;
    private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static BigDecimal ZERO = new BigDecimal(0.0);
    private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_iqOr0() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = trade.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary8_Govv8() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = trade.getMarketSummary();
        Assertions.assertEquals(MarketSummaryDataBean.getRandomInstance(), marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_hAHn0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertEquals(0, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_grVR0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_grVR0_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertTrue(quotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_KUFn1_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        QuoteDataBean quote = new QuoteDataBean();
        quotes.add(quote);
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_KUFn1_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        QuoteDataBean quote = new QuoteDataBean();
        quotes.add(quote);
        assertTrue(quotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_KUFn1_3() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        QuoteDataBean quote = new QuoteDataBean();
        quotes.add(quote);
        assertEquals(quotes.size(), 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_mkIK1_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertNotNull(quotes);
        assertTrue(quotes.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_mkIK1_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertTrue(quotes.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_xuzU0() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_lixk1() throws Exception {
        OrderDataBean orderData = null;
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_bQja0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getOrders("uid123");
        assertEquals(5, orderDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithEmptyUserID_aYir1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getOrders("");
        assertTrue(orderDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullUserID_oNvB2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getOrders(null);
        assertTrue(orderDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUserID_BPsa3() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getOrders("invalid");
        assertTrue(orderDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithMultipleUsers_GvYA4_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans1 = trade.getOrders("uid123");
        Collection<OrderDataBean> orderDataBeans2 = trade.getOrders("uid456");
        assertEquals(5, orderDataBeans1.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithMultipleUsers_GvYA4_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans1 = trade.getOrders("uid123");
        Collection<OrderDataBean> orderDataBeans2 = trade.getOrders("uid456");
        assertEquals(5, orderDataBeans2.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidSQL_VMWh5() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getOrders("uid123");
        assertEquals(0, orderDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_Xfrl0_2() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextInt());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        if (quoteData != null) {
            quoteDataFromDB = trade.getQuote(symbol);
            if (quoteDataFromDB != null) {
            }
        }
        assertEquals(quoteData.getCompanyName(), quoteDataFromDB.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_Xfrl0_3() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextInt());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        if (quoteData != null) {
            quoteDataFromDB = trade.getQuote(symbol);
            if (quoteDataFromDB != null) {
            }
        }
        assertEquals(quoteData.getPrice(), quoteDataFromDB.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_Xfrl0_4() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextInt());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        if (quoteData != null) {
            quoteDataFromDB = trade.getQuote(symbol);
            if (quoteDataFromDB != null) {
            }
        }
        assertEquals(quoteData.getOpen(), quoteDataFromDB.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_Xfrl0_5() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextInt());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        if (quoteData != null) {
            quoteDataFromDB = trade.getQuote(symbol);
            if (quoteDataFromDB != null) {
            }
        }
        assertEquals(quoteData.getLow(), quoteDataFromDB.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_Xfrl0_6() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextInt());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        if (quoteData != null) {
            quoteDataFromDB = trade.getQuote(symbol);
            if (quoteDataFromDB != null) {
            }
        }
        assertEquals(quoteData.getHigh(), quoteDataFromDB.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_Xfrl0_7() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextInt());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        if (quoteData != null) {
            quoteDataFromDB = trade.getQuote(symbol);
            if (quoteDataFromDB != null) {
            }
        }
        assertEquals(quoteData.getChange(), quoteDataFromDB.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_Xfrl0_8() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextInt());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        if (quoteData != null) {
            quoteDataFromDB = trade.getQuote(symbol);
            if (quoteDataFromDB != null) {
            }
        }
        assertEquals(quoteData.getVolume(), quoteDataFromDB.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_iBEd0() {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        quoteData.getCompanyName();
        trade.pingTwoPhase(quoteData.getSymbol()).getCompanyName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_MUEB0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.logout("testUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_RPrG0_fid1() throws Exception {
        Object[] sqlBuffer = new Object[10];
        sqlBuffer[0] = "CREATE TABLE IF NOT EXISTS table1 (id INT PRIMARY KEY, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE IF NOT EXISTS table2 (id INT PRIMARY KEY, age INT)";
        sqlBuffer[2] = "CREATE TABLE IF NOT EXISTS table3 (id INT PRIMARY KEY, salary DECIMAL)";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        TradeDirect tradeDirect = new TradeDirect();
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_vmsW0_fid1() throws Exception {
        Object[] sqlBuffer = new Object[10];
        sqlBuffer[0] = "CREATE TABLE IF NOT EXISTS table1 (id INT PRIMARY KEY, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE IF NOT EXISTS table2 (id INT PRIMARY KEY, age INT)";
        sqlBuffer[2] = "CREATE TABLE IF NOT EXISTS table3 (id INT PRIMARY KEY, salary DECIMAL)";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        TradeDirect tradeDirect = new TradeDirect();
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        Assertions.assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTablesWithEmptySQLBuffer_rAjL1_fid1() throws Exception {
        Object[] sqlBuffer = new Object[0];
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        TradeDirect tradeDirect = new TradeDirect();
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        Assertions.assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_QAgT1() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = trade.getMarketSummary();
        Assertions.assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary2_egrr2() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = trade.getMarketSummary();
        Assertions.assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary4_ZOvR4() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = trade.getMarketSummary();
        Assertions.assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary5_zDUU5_fid1() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = trade.getMarketSummary();
        Assertions.assertEquals(0.0, marketSummaryDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_Xfrl0_1() throws Exception {
        QuoteDataBean quoteData = null;
        QuoteDataBean quoteDataFromDB = null;
        String symbol = "symbol" + new java.util.Date().getTime();
        String companyName = "companyName" + new java.util.Date().getTime();
        BigDecimal price = new BigDecimal(new java.util.Random().nextInt());
        TradeDirect trade = new TradeDirect();
        quoteData = trade.createQuote(symbol, companyName, price);
        if (quoteData != null) {
            quoteDataFromDB = trade.getQuote(symbol);
            if (quoteDataFromDB != null) {
            }
        }
        assertEquals(quoteData.getSymbol(), quoteDataFromDB.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_iBEd0_fid1() {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        assertEquals(quoteData.getCompanyName(), trade.pingTwoPhase(quoteData.getSymbol()).getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_Xbur0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(1, true);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_apst1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(2, false);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_hWNV0_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_hWNV0_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_hWNV0_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroVolume_zJzB1_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroVolume_zJzB1_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroVolume_zJzB1_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeVolume_SOyL2_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = -100;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeVolume_SOyL2_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = -100;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), changeFactor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeVolume_SOyL2_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = -100;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroChangeFactor_CDkm3_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroChangeFactor_CDkm3_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroChangeFactor_CDkm3_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeChangeFactor_VdDe4_1() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(-1);
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeChangeFactor_VdDe4_2() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(-1);
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getPrice(), BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeChangeFactor_VdDe4_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(-1);
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_KkEA0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        trade.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_CBnQ1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        trade.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_IGLg0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.orderCompleted("user123", 12345);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_nullUserID_phZl1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.orderCompleted(null, 12345);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_nullOrderID_BGgh2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.orderCompleted("user123", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_invalidUserID_cOco3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.orderCompleted("", 12345);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_invalidOrderID_unnv4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.orderCompleted("user123", -1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_qOUg0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getClosedOrders("uid123");
        for (OrderDataBean order : orderDataBeans) {
        }
        assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithNullUser_DwCw1_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getClosedOrders(null);
        assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithNullUser_DwCw1_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getClosedOrders(null);
        assertEquals(0, orderDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithEmptyUser_CYJs2_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getClosedOrders("");
        assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithEmptyUser_CYJs2_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getClosedOrders("");
        assertEquals(0, orderDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0_3() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0_4() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0_5() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0_6() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0_7() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0_8() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary3_dmBf3_ttTA0() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = trade.getMarketSummary();
        Assertions.assertEquals(new java.util.Date(0L), marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_hAHn0_wqGG0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertEquals(0, quotes.size(), "class, interface, or enum expected");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_grVR0_JqpA0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_KUFn1_UpzF0_3() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        QuoteDataBean quote = new QuoteDataBean();
        quotes.add(quote);
        assertEquals(quotes.size(), 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_mkIK1_dxmT0_1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertNotNull(quotes, "quotes is not null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoQuotes_mkIK1_dxmT0_2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<QuoteDataBean> quotes = trade.getAllQuotes();
        assertTrue(quotes.size() == 0, "quotes.size() == 0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_xuzU0_ewVs0() throws Exception {
        OrderDataBean orderData = null;
        int orderID = 1;
        boolean twoPhase = true;
        TradeDirect trade = new TradeDirect();
        orderData = trade.completeOrder(orderID, twoPhase);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_bQja0_GueD0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getOrders("uid123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUserID_BPsa3_irGn0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getOrders("0");
        assertTrue(orderDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithMultipleUsers_GvYA4_EncF0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans1 = trade.getOrders("uid123");
        Collection<OrderDataBean> orderDataBeans2 = trade.getOrders("uid456");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidSQL_VMWh5_PfPO0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getOrders("uid123");
        assertEquals(0, orderDataBeans.size(), "class, interface, or enum expected");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_apst1_YlkR0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_hWNV0_inUK0_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = quoteData.getVolume();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), sharesTraded, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeVolume_SOyL2_oTbW0_3() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = quoteData.getPrice();
        double sharesTraded = -100;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = new TradeDirect().updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteData.getVolume(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_LqCB0_wyKJ0() throws Exception {
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToTrue_yesj1_xOOT0() throws Exception {
        TradeConfig.setPublishQuotePriceChange(true);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToFalse_SMwy2_ubtA0_1() throws Exception {
        TradeConfig.setPublishQuotePriceChange(false);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(quoteData.getPrice(), updatedQuoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToFalse_SMwy2_ubtA0_2() throws Exception {
        TradeConfig.setPublishQuotePriceChange(false);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(quoteData.getVolume(), updatedQuoteData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToFalse_SMwy2_ubtA0_3() throws Exception {
        TradeConfig.setPublishQuotePriceChange(false);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(quoteData.getOpen(), updatedQuoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToFalse_SMwy2_ubtA0_4() throws Exception {
        TradeConfig.setPublishQuotePriceChange(false);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(quoteData.getHigh(), updatedQuoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToFalse_SMwy2_ubtA0_5() throws Exception {
        TradeConfig.setPublishQuotePriceChange(false);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(quoteData.getLow(), updatedQuoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithPublishQuotePriceChangeSetToFalse_SMwy2_ubtA0_6() throws Exception {
        TradeConfig.setPublishQuotePriceChange(false);
        TradeDirect trade = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuoteData = trade.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(quoteData.getChange(), updatedQuoteData.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_qOUg0() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getClosedOrders("uid123");
        assertNotNull(orderDataBeans);
        for (OrderDataBean order : orderDataBeans) {
            assertEquals("completed", order.getOrderStatus());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithNullUser_DwCw1() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getClosedOrders(null);
        assertNotNull(orderDataBeans);
        assertEquals(0, orderDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithEmptyUser_CYJs2() throws Exception {
        TradeDirect trade = new TradeDirect();
        Collection<OrderDataBean> orderDataBeans = trade.getClosedOrders("");
        assertNotNull(orderDataBeans);
        assertEquals(0, orderDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_lhhJ0() throws Exception {
        TradeDirect trade = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = trade.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        assertNotNull(marketSummaryData.getOpenTSIA());
        assertNotNull(marketSummaryData.getGainPercent());
        assertNotNull(marketSummaryData.getSummaryDate());
        assertNotNull(marketSummaryData.getTSIA());
        assertNotNull(marketSummaryData.getVolume());
        assertNotNull(marketSummaryData.getTopGainers());
        assertNotNull(marketSummaryData.getTopLosers());
    }
}