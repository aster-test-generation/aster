/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_Mwfz0_2() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_Mwfz0_3() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_Mwfz0_4() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationDate_ivMm2() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date creationDate = accountDataBean.getCreationDate();
        assertNotNull(creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_fWjo4() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_bqiz6() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Integer accountID = accountDataBean.getAccountID();
        assertNotNull(accountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfileID_tjIp7() {
        AccountDataBean accountDataBean = new AccountDataBean();
        String profileID = accountDataBean.getProfileID();
        assertNotNull(profileID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_xYrK8() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Collection<OrderDataBean> orders = accountDataBean.getOrders();
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLogin_dxup9() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date lastLogin = accountDataBean.getLastLogin();
        assertNotNull(lastLogin);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBalance_PGVT10() {
        AccountDataBean accountDataBean = new AccountDataBean();
        BigDecimal balance = accountDataBean.getBalance();
        assertNotNull(balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_eEBu11() {
        AccountDataBean accountDataBean = new AccountDataBean();
        AccountProfileDataBean profile = accountDataBean.getProfile();
        assertNotNull(profile);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_dIww12() {
        AccountDataBean accountDataBean = new AccountDataBean();
        BigDecimal openBalance = accountDataBean.getOpenBalance();
        assertNotNull(openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_uaTp0() {
        AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        String expected = "	Account Data for account: 1		   loginCount:10		  logoutCount:5		    lastLogin:Sun Jul 14 16:40:58 UTC 2024		 creationDate:Sun Jul 14 16:40:58 UTC 2024		      balance:100		  openBalance:50		    profileID:profile1";
        assertEquals(expected, account.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_YmVK0() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        String expected = "\n\tAccount Data for account: 1\n\t\t   loginCount:2\n\t\t  logoutCount:3\n\t\t    lastLogin:null\n\t\t creationDate:null\n\t\t      balance:100.00\n\t\t  openBalance:50.00\n\t\t    profileID:profile1";
        assertEquals(expected, account.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNoOrders_vALk1() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        Collection<OrderDataBean> orders = account.getOrders();
        assertEquals(0, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullOrders_KOhc2() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        account.setOrders(null);
        Collection<OrderDataBean> orders = account.getOrders();
        assertEquals(0, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLoginCountWithNegativeValue_ZhWx2_fid1() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        account.setLoginCount(-1);
        assertEquals(0, account.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLoginCountWithMinimumValue_oudN4() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        account.setLoginCount(Integer.MIN_VALUE);
        assertEquals(0, account.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithCorrectPassword_pXog0() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID");
        account.login("password");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_uaTp0_fid1() {
        AccountDataBean account = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        String expected = "AccountDataBean [accountID=1, loginCount=10, logoutCount=5, lastLogin=Mon Jan 01 00:00:00 EST 1970, creationDate=Mon Jan 01 00:00:00 EST 1970, balance=100.00, openBalance=50.00, profileID=profile1]";
        assertEquals(expected, account.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_HktE0_fid1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(100.00), "1");
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceWithNullBalance_hSYW1_fid1() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        account.setBalance(null);
        assertEquals(new BigDecimal(100.00), account.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceWithNegativeBalance_LhCf3() {
        AccountDataBean account = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal(100.00), new BigDecimal(50.00), "profile1");
        account.setBalance(new BigDecimal(-100.00));
        assertEquals(new BigDecimal(100.00), account.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_Mwfz0() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean);
        assertNotNull(accountDataBean.getHoldings());
        assertNotNull(accountDataBean.getOrders());
        assertNotNull(accountDataBean.getProfile());
    }
}