/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObject_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingJSONPObject pingjsonpobject;
    ServletConfig servletconfig;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    HttpServlet httpservlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithException_LLQW2() {
        PingJSONPObject obj = new PingJSONPObject();
        try {
            obj.init(null);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_scbR0() throws ServletException, IOException {
        PingJSONPObject obj = new PingJSONPObject();
        obj.doPost(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_DaAZ0() {
        PingJSONPObject object = new PingJSONPObject();
        String expected = "Basic JSON generation and parsing in a servlet";
        String actual = object.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        pingjsonpobject = new PingJSONPObject();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingjsonpobject.doGet(null, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).getOutputStream();
        verify(servletoutputstream, times(1)).println(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_UAjr0() throws ServletException, IOException {
        PingJSONPObject obj = new PingJSONPObject();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        obj.doGet(req, res);
        assertEquals(res.getContentType(), "text/html");
        ServletOutputStream out = res.getOutputStream();
        String expected = "<html><head><title>Ping JSONP</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping JSONP</FONT><BR>Generated JSON: {\"initTime\":0,\"hitCount\":1,\"initTime\":0,\"hitCount\":1}</body></html>";
        assertEquals(out.toString(), expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_UAjr0_1() throws ServletException, IOException {
        PingJSONPObject obj = new PingJSONPObject();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        obj.doGet(req, res);
        ServletOutputStream out = res.getOutputStream();
        String expected = "<html><head><title>Ping JSONP</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping JSONP</FONT><BR>Generated JSON: {\"initTime\":0,\"hitCount\":1,\"initTime\":0,\"hitCount\":1}</body></html>";
        assertEquals(res.getContentType(), "text/html");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_UAjr0_2() throws ServletException, IOException {
        PingJSONPObject obj = new PingJSONPObject();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        obj.doGet(req, res);
        ServletOutputStream out = res.getOutputStream();
        String expected = "<html><head><title>Ping JSONP</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping JSONP</FONT><BR>Generated JSON: {\"initTime\":0,\"hitCount\":1,\"initTime\":0,\"hitCount\":1}</body></html>";
        assertEquals(out.toString(), expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithHttpServletRequest_iboo1_UIVA0() throws ServletException, IOException {
        PingJSONPObject obj = new PingJSONPObject();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        obj.doPost(request, response);
    }
}