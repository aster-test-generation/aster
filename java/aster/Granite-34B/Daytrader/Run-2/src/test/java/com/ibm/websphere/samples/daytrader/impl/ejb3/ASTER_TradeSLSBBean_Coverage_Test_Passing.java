/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeSLSBBean_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithException_VuHz1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        try {
            tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
            fail("Expected Exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryRandomInstanceTest_jSYC9() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryRandomInstanceVolumeTest_cgHy11() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertTrue(marketSummaryDataBean.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryRandomInstanceOpenTSIATest_vAwW13() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertTrue(marketSummaryDataBean.getOpenTSIA().compareTo(new BigDecimal(0)) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryRandomInstanceTSIATest_cdLY14() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertTrue(marketSummaryDataBean.getTSIA().compareTo(new BigDecimal(0)) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryRandomInstanceSummaryDateTest_YCoo15() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertNotNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile8_rvWB7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("8");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase1_FYbO0() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        QuoteDataBean quoteData = new QuoteDataBean();
        try {
            quoteData = tradeSLSBBean.pingTwoPhase(symbol);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithZeroOrderID_EItq1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 0;
        boolean twoPhase = true;
        try {
            tradeSLSBBean.cancelOrder(orderID, twoPhase);
            fail("Expected exception not thrown");
        } catch (Exception e) {
            // Expected exception
        }
    }
}