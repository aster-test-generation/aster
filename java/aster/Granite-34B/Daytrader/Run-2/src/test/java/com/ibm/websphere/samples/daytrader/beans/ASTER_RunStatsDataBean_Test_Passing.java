/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTradeUserCount_hRdJ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getTradeUserCount();
        int expected = runStatsDataBean.getTradeUserCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCount_zdnS2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(100);
        int actual = runStatsDataBean.getTradeUserCount();
        int expected = 100;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCount_XjDl0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(10);
        assertEquals(10, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountZero_CeEf1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(0);
        assertEquals(0, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountNegative_vtnA2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(-10);
        assertEquals(-10, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountMaxInt_rMfp6() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountMinInt_MUsB7() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTradeUserCountTest1_xOlj0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTradeUserCountTest2_KxlX1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(500);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTradeUserCountTest3_QVuA2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(1000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTradeUserCountTest4_aiRu3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(5000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTradeUserCountTest5_uyfC4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderCount_fUvU0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(10);
        int actual = runStatsDataBean.getOrderCount();
        int expected = 10;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderCount_whenOrderCountIsZero_thenReturnsZero_HLCl1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(0);
        int actual = runStatsDataBean.getOrderCount();
        int expected = 0;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOrderCount_whenOrderCountIsNegative_thenReturnsNegative_CwRq2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(-10);
        int actual = runStatsDataBean.getOrderCount();
        int expected = -10;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOpenOrderCount_VJUY0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int openOrderCount = runStatsDataBean.getOpenOrderCount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOpenOrderCount_withNoOpenOrders_returnsZero_FKyn1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int openOrderCount = runStatsDataBean.getOpenOrderCount();
        org.junit.jupiter.api.Assertions.assertEquals(0, openOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_Yacl0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 0; // Replace with the expected value
        int actual = runStatsDataBean.getNewUserCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_pHmg1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = 100; // Replace with the expected value
        runStatsDataBean.setNewUserCount(expected);
        int actual = runStatsDataBean.getNewUserCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_yrBR2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = -1; // Replace with the expected value
        runStatsDataBean.setNewUserCount(expected);
        int actual = runStatsDataBean.getNewUserCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_YuqS3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = Integer.MAX_VALUE; // Replace with the expected value
        runStatsDataBean.setNewUserCount(expected);
        int actual = runStatsDataBean.getNewUserCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_CPIW4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expected = Integer.MIN_VALUE; // Replace with the expected value
        runStatsDataBean.setNewUserCount(expected);
        int actual = runStatsDataBean.getNewUserCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOpenOrderCountTest_ZNOX0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOpenOrderCountTest_Min_USGn1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOpenOrderCountTest_Max_YXot2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOpenOrderCountTest_Negative_Zrjb3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(-100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOpenOrderCountTest_Zero_kpfc4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOpenOrderCountTest_Edge_DffI6() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(Integer.MIN_VALUE);
        runStatsDataBean.setOpenOrderCount(Integer.MAX_VALUE);
        runStatsDataBean.setOpenOrderCount(0);
        runStatsDataBean.setOpenOrderCount(100);
        runStatsDataBean.setOpenOrderCount(-100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_fnuL0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_maxValue_Ssrx1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_minValue_NBVu2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_zero_UFyo3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_negativeValue_fJmV4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(-100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_randomValue_YzQF9() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(1234567890);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLoginCount_whenSumLoginCountIsZero_thenSetSumLoginCountToZero_Psxc0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLoginCount_whenSumLoginCountIsOne_thenSetSumLoginCountToOne_Vugc1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLoginCount_whenSumLoginCountIsNegative_thenSetSumLoginCountToNegative_GIRV2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLoginCount_whenSumLoginCountIsMaximumValue_thenSetSumLoginCountToMaximumValue_HPKh3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLoginCount_whenSumLoginCountIsMinimumValue_thenSetSumLoginCountToMinimumValue_dvpN4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest_XFHQ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest_Zero_OBeu1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest_Negative_irte2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(-10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest_Max_atTF3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest_Min_YChF4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setHoldingCountTest_Char_CdAv9() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount('1');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCancelledOrderCount_kJvC0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getCancelledOrderCount();
        int expected = runStatsDataBean.getCancelledOrderCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSellOrderCount_ValidInput_SellOrderCountSet_cObl0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSellOrderCount_InvalidInput_SellOrderCountNotSet_FuHU1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_bLLt0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: " + runStatsDataBean.getTradeUserCount() + "\n\t\t        newUserCount: " + runStatsDataBean.getNewUserCount() + "\n\t\t       sumLoginCount: " + runStatsDataBean.getSumLoginCount() + "\n\t\t      sumLogoutCount: " + runStatsDataBean.getSumLogoutCount() + "\n\t\t        holdingCount: " + runStatsDataBean.getHoldingCount() + "\n\t\t          orderCount: " + runStatsDataBean.getOrderCount() + "\n\t\t       buyOrderCount: " + runStatsDataBean.getBuyOrderCount() + "\n\t\t      sellOrderCount: " + runStatsDataBean.getSellOrderCount() + "\n\t\t cancelledOrderCount: " + runStatsDataBean.getCancelledOrderCount() + "\n\t\t      openOrderCount: " + runStatsDataBean.getOpenOrderCount() + "\n\t\t   deletedOrderCount: " + runStatsDataBean.getDeletedOrderCount();
        assertEquals(expected, runStatsDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCount_DzUB0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(100);
        assertEquals(100, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_gFeh0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_1_QdVW1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(10);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_2_SGCy2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(20);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(20, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_3_pHTZ3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(30);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(30, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_4_dFIo4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(40);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(40, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_5_xeNR5() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(50);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(50, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_6_aoGT6() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(60);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(60, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_7_JtnC7() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(70);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(70, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_8_VKEU8() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(80);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(80, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_9_yYBv9() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(90);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(90, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeletedOrderCount_10_TGmn10() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(100);
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(100, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLogoutCount_LgtH0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getSumLogoutCount();
        int expected = 0; // Initialize expected value based on the method's logic
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLogoutCount_withPositiveValue_CilB1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(10);
        int actual = runStatsDataBean.getSumLogoutCount();
        int expected = 10;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLogoutCount_withNegativeValue_WIlP2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(-5);
        int actual = runStatsDataBean.getSumLogoutCount();
        int expected = -5;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLogoutCount_withZeroValue_JRtv3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(0);
        int actual = runStatsDataBean.getSumLogoutCount();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLogoutCount_withMaxIntValue_qxlA4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(Integer.MAX_VALUE);
        int actual = runStatsDataBean.getSumLogoutCount();
        int expected = Integer.MAX_VALUE;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSumLogoutCount_withMinIntValue_mJOK5() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(Integer.MIN_VALUE);
        int actual = runStatsDataBean.getSumLogoutCount();
        int expected = Integer.MIN_VALUE;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCount_oIFx0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(100);
        assertEquals(100, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCountZero_ieNd1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(0);
        assertEquals(0, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCountNegative_ZEQw2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(-100);
        assertEquals(-100, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOrderCount_whenValidInput_thenOrderCountMatches_NVLc0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = 100;
        runStatsDataBean.setOrderCount(orderCount);
        assert runStatsDataBean.getOrderCount() == orderCount;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOrderCount_whenNegativeInput_thenOrderCountMatches_gkkh1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = -100;
        runStatsDataBean.setOrderCount(orderCount);
        assert runStatsDataBean.getOrderCount() == orderCount;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setOrderCount_whenZeroInput_thenOrderCountMatches_TWDD2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = 0;
        runStatsDataBean.setOrderCount(orderCount);
        assert runStatsDataBean.getOrderCount() == orderCount;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLoginCount_kBEC0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getSumLoginCount();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_qSMm0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_zeroValue_Btjp1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_negativeValue_Kxbm2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(-100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_maxValue_mlQm3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_minValue_kBYt4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_randomValue_UJCm8() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(1234567890);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_randomNegativeValue_nBYs9() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(-1234567890);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setCancelledOrderCountTest_randomValueWithSign_Eluo10() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(+1234567890);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLogoutCount_WhenSumLogoutCountIsZero_ThenSetSumLogoutCountToZero_XUBl0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(0);
        assert runStatsDataBean.getSumLogoutCount() == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSumLogoutCount_WhenSumLogoutCountIsNonZero_ThenSetSumLogoutCountToNonZero_ISZe1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(10);
        assert runStatsDataBean.getSumLogoutCount() == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_RHtb0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = 10;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_zeroValue_lfqq1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(0);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = 0;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_negativeValue_dUAf2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(-10);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = -10;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_maxValue_NELY3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(Integer.MAX_VALUE);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = Integer.MAX_VALUE;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_minValue_fpia4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(Integer.MIN_VALUE);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = Integer.MIN_VALUE;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getHoldingCountTest_randomValue_bQDD8() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(1234567890);
        int actual = runStatsDataBean.getHoldingCount();
        int expected = 1234567890;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCount_OzKM0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actual = runStatsDataBean.getSellOrderCount();
        int expected = runStatsDataBean.getSellOrderCount();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCount15_nrlr15() {
    }
}