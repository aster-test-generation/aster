/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_QuoteJSF_Test_Failing {
    private TradeServices tradeAction;
    private ExternalContext context;
    private HtmlDataTable dataTable;
    private Integer quantity = 100;
    QuoteJSF quotejsf;
    HttpSession httpsession;
    ExternalContext externalcontext;
    private String symbols = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_JUfn0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_1_Aewz1() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(1);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_2_VNTJ2() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(2);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 2;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_3_ikdy3() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(3);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 3;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_4_ioTe4() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(4);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 4;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_5_NngF5() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(5);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 5;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_6_FVWb6() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(6);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 6;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_7_fckV7() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(7);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 7;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_8_lhWg8() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(8);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 8;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_9_zwGC9() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setQuantity(9);
        Integer actual = quoteJSF.getQuantity();
        Integer expected = 9;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuotes_CPsz0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        QuoteData[] quotes = quoteJSF.getQuotes();
        assertEquals(null, quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_AurR0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        String symbols = quoteJSF.getSymbols();
        assertEquals(null, symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbols_PCIv0_jlhR0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        quoteJSF.setSymbols("symbol1,symbol2,symbol3");
        Assertions.assertEquals("symbol1,symbol2,symbol3", quoteJSF.getSymbols());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolsWithNullptr_roha2_MytM0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        quoteJSF.setSymbols(null);
        Assertions.assertEquals(null, quoteJSF.getSymbols());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataTable_nbom0_whBN0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        HtmlDataTable htmlDataTable = quoteJSF.getDataTable();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataTableWithCoverage_XUmw1_Oiub0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        quoteJSF.getDataTable();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTable_AXuc0_IyHQ0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        HtmlDataTable dataTable = new HtmlDataTable();
        quoteJSF.setDataTable(dataTable);
        assertEquals(dataTable, quoteJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuotes_Jjtl1_MOym0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        QuoteData[] quotes = quoteJSF.getQuotes();
        assertEquals(null, quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuotes_wMOU0_mUJx0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        QuoteData[] quotes = new QuoteData[5];
        quoteJSF.setQuotes(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuotesNull_PVdI1_UJnJ0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        quoteJSF.setQuotes(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuotesEmptyArray_cxjA2_dYEj0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        quoteJSF.setQuotes(new QuoteData[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_CYzR1_HkjQ0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setSymbols("TEST");
        String symbols = quoteJSF.getSymbols();
        assertEquals("TEST", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_VaFa2_QRgd0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        String symbols = quoteJSF.getSymbols();
        assertEquals(null, symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_brhH3_cCUH0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        String symbols = quoteJSF.getSymbols();
        assertEquals("TEST", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_kczq4_tQab0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        String symbols = quoteJSF.getSymbols();
        assertEquals(null, symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_HBEk5_vbEb0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        String symbols = quoteJSF.getSymbols();
        assertEquals("TEST", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_VdSS6_QZfc0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        String symbols = quoteJSF.getSymbols();
        assertEquals("TEST", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_Bjfi7_Zzel0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        quoteJSF.setSymbols(null);
        quoteJSF.setSymbols("TEST");
        String symbols = quoteJSF.getSymbols();
        assertEquals("TEST", symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_ujzr0_MSRe0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        quoteJSF.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_Fpjx0_FVGR0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        quoteJSF.setQuantity(100);
        assertEquals(100, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithNull_RZAm2_eEXS0() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        quoteJSF.setQuantity(null);
        assertEquals(0, quoteJSF.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolsTest_AurR0_fid2() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.getSymbols();
        assertEquals(null, quoteJSF.getSymbols());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuotes_wMOU0_mUJx0_fid2() {
        QuoteJSF quoteJSF = new QuoteJSF(Mockito.mock(Instance.class));
        QuoteData[] quotes = new QuoteData[5];
        quoteJSF.setQuotes(quotes);
        QuoteData[] result = quoteJSF.getQuotes();
        assertNotEquals(null, result);
    }
}