/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeScenarioServlet_Test_Passing {
    TradeScenarioServlet tradescenarioservlet;
    HttpServlet httpservlet;
    ServletConfig servletconfig;
    @Mock
    HttpServletResponse httpservletresponse;
    @Mock
    HttpServletRequest httpservletrequest;
    @Mock
    HttpSession httpsession;
    @Mock
    ServletContext servletcontext;
    @Mock
    private static String tasPathPrefix = "/app?action=";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_uDMm0() throws ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = new MockServletConfig();
        tradeScenarioServlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit2_tcsB1() throws ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = new MockServletConfig();
        tradeScenarioServlet.init(config);
        java.util.Enumeration<String> en = config.getInitParameterNames();
        while (en.hasMoreElements()) {
            String parm = en.nextElement();
            String value = config.getInitParameter(parm);
            TradeConfig.setConfigParam(parm, value);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullRequestAndResponse_UZgE3() throws ServletException, IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        javax.servlet.http.HttpServletRequest request = null;
        javax.servlet.http.HttpServletResponse response = null;
        tradeScenarioServlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_NCJM0() {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        String actual = tradeScenarioServlet.getServletInfo();
        String expected = "TradeScenarioServlet emulates a population of web users";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_coverage_tVXI1_2() {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        String actual = tradeScenarioServlet.getServletInfo();
        String expected = "TradeScenarioServlet emulates a population of web users";
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_coverage_tVXI1_3() {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        String actual = tradeScenarioServlet.getServletInfo();
        String expected = "TradeScenarioServlet emulates a population of web users";
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_gAep0_lmtB0() throws ServletException, IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        tradeScenarioServlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullRequest_Hhbo1_Ozxt0() throws ServletException, IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        javax.servlet.http.HttpServletRequest request = null;
        javax.servlet.http.HttpServletResponse response = mock(javax.servlet.http.HttpServletResponse.class);
        tradeScenarioServlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullResponse_tRen2_dVtt0() throws ServletException, IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        tradeScenarioServlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_rAtc1_dbpl0() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        javax.servlet.http.HttpServletRequest request = null;
        javax.servlet.http.HttpServletResponse response = mock(javax.servlet.http.HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_ttbs2_tQUo0() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 3, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask_UQSj0_WuWj0() throws ServletException, IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.performTask(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_coverage_tVXI1() {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        String actual = tradeScenarioServlet.getServletInfo();
        String expected = "TradeScenarioServlet emulates a population of web users";
        assertEquals(expected, actual);
        assertEquals("", actual);
        assertEquals(null, actual);
    }
}