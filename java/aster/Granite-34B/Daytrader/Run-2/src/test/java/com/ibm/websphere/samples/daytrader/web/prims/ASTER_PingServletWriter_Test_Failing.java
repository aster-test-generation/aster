/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletWriter_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingServletWriter pingservletwriter;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingservletwriter = new PingServletWriter();
        HttpServletRequest request = mock(HttpServletRequest.class);
        pingservletwriter.doPost(request, httpservletresponse);
        verify(pingservletwriter, times(1)).doPost(request, httpservletresponse);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_nXcW3() throws ServletException, IOException {
        PingServletWriter servlet = new PingServletWriter();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_kBIn0() {
        PingServletWriter obj = new PingServletWriter();
        assertEquals("Basic dynamic HTML generation through a servlet using a PrintWriter", obj.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_HzJA0_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletwriter = new PingServletWriter();
        ServletConfig config = mock(ServletConfig.class);
        pingservletwriter.init(config);
        verify(config, times(1)).getInitParameter(anyString());
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_HzJA0_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletwriter = new PingServletWriter();
        ServletConfig config = mock(ServletConfig.class);
        pingservletwriter.init(config);
        verify(config, times(1)).getInitParameter(anyString());
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_kAvC0_Apwh0() throws ServletException, IOException {
        PingServletWriter servlet = new PingServletWriter();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_NEMK1_TJTQ0() throws ServletException, IOException {
        PingServletWriter servlet = new PingServletWriter();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_aEdL2_yiHR0() throws ServletException, IOException {
        PingServletWriter servlet = new PingServletWriter();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_pBuh0() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingservletwriter = new PingServletWriter();
        hitCount = 0;
        initTime = new java.util.Date().toString();
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(request.getParameter("test")).thenReturn("test");
        pingservletwriter.doGet(request, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).getWriter();
        verify(httpservletresponse, times(1)).sendError(500, "Error");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_kBIn0_fid2() {
        PingServletWriter obj = new PingServletWriter();
        obj.getServletInfo();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo1_jmyz1_fid2() {
        PingServletWriter obj = new PingServletWriter();
        obj.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet using a PrintWriter", obj.getServletInfo());
    }
}