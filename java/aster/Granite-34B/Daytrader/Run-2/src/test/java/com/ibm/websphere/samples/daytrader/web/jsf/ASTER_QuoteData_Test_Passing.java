/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRange_oENn0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setRange("10-20");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRangeWithFullConstructor_OkIw1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("90.00"), new BigDecimal("100.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, 10.0);
        quoteData.setRange("10-20");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_kZNb0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setSymbol("MSFT");
        assertEquals("MSFT", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithAllParameters_GUtY1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, 10.0);
        quoteData.setSymbol("MSFT");
        assertEquals("MSFT", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_xGVn0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setHigh(new BigDecimal("110.00"));
        assertEquals(new BigDecimal("110.00"), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHighWithFullConstructor_heuK1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("90.00"), new BigDecimal("100.00"), "AAPL", new BigDecimal("120.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, 10.0);
        quoteData.setHigh(new BigDecimal("110.00"));
        assertEquals(new BigDecimal("110.00"), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_lzac0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("100.00"), "TEST");
        quoteData.setGainPercent(new BigDecimal("100.00"));
        assertEquals(new BigDecimal("100.00"), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_zero_pcel1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("100.00"), "TEST");
        quoteData.setGainPercent(new BigDecimal("0.00"));
        assertEquals(new BigDecimal("0.00"), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_negative_TEGY5() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("100.00"), "TEST");
        quoteData.setGainPercent(new BigDecimal("-100.00"));
        assertEquals(new BigDecimal("-100.00"), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_scale_jUfD7() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("100.00"), "TEST");
        quoteData.setGainPercent(new BigDecimal("100.0000"));
        assertEquals(new BigDecimal("100.00"), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_scale_negative_gtxC8() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("100.00"), "TEST");
        quoteData.setGainPercent(new BigDecimal("-100.0000"));
        assertEquals(new BigDecimal("-100.00"), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChangeHTML_withNegativeChange_Zanl0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("105.00"), "ABC", new BigDecimal("110.00"), new BigDecimal("95.00"), "ABC Company", 100000.0, -5.0);
        String actual = quoteData.getChangeHTML();
        String expected = "<FONT color=\"#cc0000\">-5.00</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChangeHTML_withPositiveChange_WLWH1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("105.00"), "ABC", new BigDecimal("110.00"), new BigDecimal("95.00"), "ABC Company", 100000.0, 5.0);
        String actual = quoteData.getChangeHTML();
        String expected = "<FONT color=\"#009900\">5.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompanyName_2_CxYl1() {
        QuoteData qd = new QuoteData(new BigDecimal("101.0"), new BigDecimal("100.0"), "AAPL", new BigDecimal("102.0"), new BigDecimal("99.0"), "Apple", 1000000.0, 1.0);
        assertEquals("Apple", qd.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_iKOu0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setGain(new BigDecimal("10.00"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithVolumeAndChange_oAPc1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("90.00"), new BigDecimal("100.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, 10.0);
        quoteData.setGain(new BigDecimal("10.00"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRange_0_pBlC0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("1.0"), new BigDecimal("1.1"), "symbol");
        String range = quoteData.getRange();
        assertEquals(null, range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRange_15_myVd15() {
        QuoteData quoteData = new QuoteData(new BigDecimal("1.0"), new BigDecimal("1.1"), "symbol");
        String range = quoteData.getRange();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrice_1_BKZi0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("1.0"), new BigDecimal("2.0"), "symbol");
        BigDecimal result = quoteData.getPrice();
        assertEquals(new BigDecimal("1.0"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_cUMc0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setOpen(new BigDecimal("110.00"));
        assertEquals(new BigDecimal("110.00"), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenWithAllParameters_eNMd1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL", new BigDecimal("120.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, 10.0);
        quoteData.setOpen(new BigDecimal("110.00"));
        assertEquals(new BigDecimal("110.00"), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange_hNvq0() {
        QuoteData quoteData = new QuoteData(new BigDecimal(100.0), new BigDecimal(90.0), "ABC", new BigDecimal(110.0), new BigDecimal(80.0), "XYZ", 10000.0, 10.0);
        quoteData.setChange(15.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithZeroVolume_itmC1() {
        QuoteData quoteData = new QuoteData(new BigDecimal(100.0), new BigDecimal(90.0), "ABC", new BigDecimal(110.0), new BigDecimal(80.0), "XYZ", 0.0, 10.0);
        quoteData.setChange(15.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithZeroPrice_SwfR2() {
        QuoteData quoteData = new QuoteData(new BigDecimal(0.0), new BigDecimal(90.0), "ABC", new BigDecimal(110.0), new BigDecimal(80.0), "XYZ", 10000.0, 10.0);
        quoteData.setChange(15.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithNegativeVolume_cFrC3() {
        QuoteData quoteData = new QuoteData(new BigDecimal(100.0), new BigDecimal(90.0), "ABC", new BigDecimal(110.0), new BigDecimal(80.0), "XYZ", -10000.0, 10.0);
        quoteData.setChange(15.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithNegativePrice_RWgb4() {
        QuoteData quoteData = new QuoteData(new BigDecimal(-100.0), new BigDecimal(90.0), "ABC", new BigDecimal(110.0), new BigDecimal(80.0), "XYZ", 10000.0, 10.0);
        quoteData.setChange(15.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLowWithVolumeAndChange_BTsi1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("90.00"), new BigDecimal("100.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("90.00"), "Apple Inc.", 1000000.0, 10.0);
        assertEquals(new BigDecimal("90.00"), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithVolume_EkJB1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("105.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("95.00"), "Apple Inc.", 1000000.0, 5.0);
        double change = quoteData.getChange();
        assertEquals(5.0, change, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHigh_MUDj0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, 10.0);
        assertEquals(new BigDecimal("110.00"), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithZeroVolume_cKhE1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 0.0, 10.0);
        assertEquals(new BigDecimal("110.00"), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithNegativeChange_ZnYz2() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, -10.0);
        assertEquals(new BigDecimal("110.00"), quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_MTIh0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setPrice(new BigDecimal("110.00"));
        assertEquals(new BigDecimal("110.00"), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithAllConstructorParams_AhbM1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("90.00"), new BigDecimal("100.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, 10.0);
        quoteData.setPrice(new BigDecimal("110.00"));
        assertEquals(new BigDecimal("110.00"), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_jMwB0() {
        QuoteData quoteData = new QuoteData(new BigDecimal(100.00), new BigDecimal(90.00), "ABC");
        assertEquals("ABC", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithAllConstructorParams_XoOK1() {
        QuoteData quoteData = new QuoteData(new BigDecimal(90.00), new BigDecimal(100.00), "ABC", new BigDecimal(110.00), new BigDecimal(80.00), "XYZ", 100000.0, 10.0);
        assertEquals("ABC", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_IMrN0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setLow(new BigDecimal("80.00"));
        assertEquals(new BigDecimal("80.00"), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithNull_CQpv1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setLow(null);
        assertEquals(null, quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithZero_nJcN2() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setLow(BigDecimal.ZERO);
        assertEquals(BigDecimal.ZERO, quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithNegativeValue_Drsc3() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setLow(new BigDecimal("-10.00"));
        assertEquals(new BigDecimal("-10.00"), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithPositiveValue_KYmR4() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL");
        quoteData.setLow(new BigDecimal("20.00"));
        assertEquals(new BigDecimal("20.00"), quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyName_wvxK0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "ABC", new BigDecimal("110.00"), new BigDecimal("80.00"), null, 10000.0, 10.0);
        quoteData.setCompanyName("XYZ");
        assertEquals("XYZ", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getVolume_sxhW0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 1000000.0, 10.0);
        double volume = quoteData.getVolume();
        org.junit.jupiter.api.Assertions.assertEquals(1000000.0, volume, "Volume should be 1000000.0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getVolume_Ldbl1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("90.00"), "AAPL", new BigDecimal("110.00"), new BigDecimal("80.00"), "Apple Inc.", 0.0, 0.0);
        double volume = quoteData.getVolume();
        org.junit.jupiter.api.Assertions.assertEquals(0.0, volume, "Volume should be 0.0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_max_tuxk3_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("100.00"), "TEST");
        quoteData.setGainPercent(new BigDecimal("10000.00"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_min_Cefp4_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100.00"), new BigDecimal("100.00"), "TEST");
        quoteData.setGainPercent(new BigDecimal("-10000.00"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompanyName_1_TWur0_fid1() {
        QuoteData qd = new QuoteData(new BigDecimal("100.0"), new BigDecimal("101.0"), "AAPL");
        assertNull(qd.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrice_2_vZHa1_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("2.0"), new BigDecimal("2.0"), "symbol", new BigDecimal("3.0"), new BigDecimal("4.0"), "companyName", 5.0, 6.0);
        BigDecimal result = quoteData.getPrice();
        assertEquals(new BigDecimal("2.0"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_SDXe0_fid1() {
        QuoteData q = new QuoteData(new BigDecimal(100), new BigDecimal(100), "AAPL");
        assertNull(q.getGain());
    }
}