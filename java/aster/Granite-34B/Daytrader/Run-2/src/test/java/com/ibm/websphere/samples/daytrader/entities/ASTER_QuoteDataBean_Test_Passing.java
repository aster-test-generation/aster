/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_1() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_2() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_3() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_4() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_5() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_6() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_7() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_8() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_uuyE0_9() {
        QuoteDataBean bean = QuoteDataBean.getRandomInstance();
        assertNotNull(bean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForLineCoverage_pOGU1() {
        QuoteDataBean.getRandomInstance();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForBranchCoverage1_uPON2() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getCompanyName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForBranchCoverage2_BjEW3() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForBranchCoverage3_qaJA4() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getPrice();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForBranchCoverage4_PmHn5() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getOpen();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForBranchCoverage5_IJMc6() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getLow();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForBranchCoverage6_oNpo7() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getHigh();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForBranchCoverage7_tZjI8() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getChange();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstanceForBranchCoverage8_meJF9() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.getVolume();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_ekKR0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("TEST_SYMBOL");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_gqsc0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal high = new BigDecimal(100.0);
        quoteDataBean.setHigh(high);
        assertEquals(high, quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompanyName_Qbee0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(5.0), new BigDecimal(2.0), new BigDecimal(15.0), 5.0);
        String companyName = quoteDataBean.getCompanyName();
        assertEquals("companyName", companyName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_xgOy0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        int expected = 0;
        expected += (quoteDataBean.getSymbol() != null ? quoteDataBean.getSymbol().hashCode() : 0);
        assertEquals(expected, quoteDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithCompanyName_RSqV1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        int expected = 0;
        expected += (quoteDataBean.getSymbol() != null ? quoteDataBean.getSymbol().hashCode() : 0);
        assertEquals(expected, quoteDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetVolume_WzZI0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        quoteDataBean.setVolume(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetVolumeWithAllParameters_JJDg1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
        quoteDataBean.setVolume(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetVolumeWithNoParameters_GktU2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setVolume(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_ndFM0() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice2_PXWt1() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        bean.setPrice(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice3_anoy2() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice4_DYpa3() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice5_OoeI4() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice6_vMuT5() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice7_DNdb6() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice8_EgSx7() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice9_VHDa8() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        bean.setPrice(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_gzwH0() {
        QuoteDataBean bean = new QuoteDataBean("TEST");
        bean.print();
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint2_nrpL1() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.print();
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint3_Qwqz2() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
        bean.print();
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_liHD0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        BigDecimal open = new BigDecimal("100.00");
        quoteDataBean.setOpen(open);
        assertEquals(open, quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenWithNull_prjq1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        quoteDataBean.setOpen(null);
        assertEquals(null, quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenWithNegativeValue_INJK2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        BigDecimal open = new BigDecimal("-100.00");
        quoteDataBean.setOpen(open);
        assertEquals(open, quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange_FvVF0() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
        bean.setChange(1.0);
        assertEquals(1.0, bean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange2_tScn1() {
        QuoteDataBean bean = new QuoteDataBean();
        bean.setChange(1.0);
        assertEquals(1.0, bean.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpen_fnkO0() {
        QuoteDataBean bean = new QuoteDataBean("TEST", "TEST", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        BigDecimal open = bean.getOpen();
        assertNotNull(open);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenNull_qEbL1() {
        QuoteDataBean bean = new QuoteDataBean();
        BigDecimal open = bean.getOpen();
        assertNull(open);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLow_rLBc0() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompany", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 10.0);
        assertEquals(bean.getLow(), new BigDecimal("10.0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLowDefaultConstructor_oCrs1() {
        QuoteDataBean bean = new QuoteDataBean();
        assertNull(bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLowNull_GzXw2() {
        QuoteDataBean bean = new QuoteDataBean(null, null, 0.0, null, null, null, null, 0.0);
        assertNull(bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLowZero_CMVb3() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompany", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal(0.0), new BigDecimal("10.0"), 0.0);
        assertEquals(bean.getLow(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLowNegative_WNaC4() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol", "testCompany", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal(-10.0), new BigDecimal("10.0"), -10.0);
        assertEquals(bean.getLow(), new BigDecimal(-10.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_aBTc0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(5.0), new BigDecimal(2.0), new BigDecimal(15.0), 50.0);
        double change = quoteDataBean.getChange();
        assertEquals(50.0, change, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithZeroVolume_TimG1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 0.0, new BigDecimal(10.0), new BigDecimal(5.0), new BigDecimal(2.0), new BigDecimal(15.0), 50.0);
        double change = quoteDataBean.getChange();
        assertEquals(50.0, change, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithZeroChange_VYBV2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(5.0), new BigDecimal(2.0), new BigDecimal(15.0), 0.0);
        double change = quoteDataBean.getChange();
        assertEquals(0.0, change, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHigh_Ccni0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(5.0), new BigDecimal(7.0), new BigDecimal(8.0), 2.0);
        assertEquals(new BigDecimal(8.0), quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHighWithNoParameters_BxBt1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        assertEquals(null, quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPrice_PVyy0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setPrice(new BigDecimal(100.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPrice_eXSS1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setPrice(new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPrice_JXBf2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setPrice(new BigDecimal(-100.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPrice_cPpZ3() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setPrice(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_SeEw0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
        boolean actual = quoteDataBean.equals(null);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectOfDifferentType_lytz1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
        boolean actual = quoteDataBean.equals("TEST");
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectHavingSameSymbol_guaU2() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("TEST");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("TEST");
        boolean actual = quoteDataBean1.equals(quoteDataBean2);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectHavingDifferentSymbol_gyDJ3() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("TEST1");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("TEST2");
        boolean actual = quoteDataBean1.equals(quoteDataBean2);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectHavingNullSymbol_txwx4() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("TEST");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean();
        boolean actual = quoteDataBean1.equals(quoteDataBean2);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSymbol_0_yqoE0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol0");
        assertEquals("symbol0", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSymbol_1_FZwu1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        assertEquals(null, quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSymbol_2_LGuX2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol0", "companyName0", 0.0, new BigDecimal("0.0"), new BigDecimal("0.0"), new BigDecimal("0.0"), new BigDecimal("0.0"), 0.0);
        assertEquals("symbol0", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_MFqI0() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(100.0));
        assertEquals(new BigDecimal(100.0), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithNull_XtFu1() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(null);
        assertEquals(null, bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithZero_EKni2() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(0.0));
        assertEquals(new BigDecimal(0.0), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithNegativeValue_NONe3() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(-100.0));
        assertEquals(new BigDecimal(-100.0), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithMaxDoubleValue_DbGr5() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(Double.MAX_VALUE));
        assertEquals(new BigDecimal(Double.MAX_VALUE), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithMinDoubleValue_zOYn6() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(Double.MIN_VALUE));
        assertEquals(new BigDecimal(Double.MIN_VALUE), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithMaxFloatValue_zeCk7() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(Float.MAX_VALUE));
        assertEquals(new BigDecimal(Float.MAX_VALUE), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithMinFloatValue_XEVZ8() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(Float.MIN_VALUE));
        assertEquals(new BigDecimal(Float.MIN_VALUE), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithMaxValue_Vrbj9() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(Long.MAX_VALUE));
        assertEquals(new BigDecimal(Long.MAX_VALUE), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithMinValue_vSFK10() {
        QuoteDataBean bean = new QuoteDataBean("testSymbol");
        bean.setLow(new BigDecimal(Long.MIN_VALUE));
        assertEquals(new BigDecimal(Long.MIN_VALUE), bean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyName_nUrj0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setCompanyName("Test Company");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyNameWithCoverage_IAZu1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setCompanyName(null);
        quoteDataBean.setCompanyName("");
        quoteDataBean.setCompanyName("Test Company");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_vxUc0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), new BigDecimal("10.0"), 10.0);
        assertEquals(100.0, quoteDataBean.getVolume(), 0.0);
    }
}