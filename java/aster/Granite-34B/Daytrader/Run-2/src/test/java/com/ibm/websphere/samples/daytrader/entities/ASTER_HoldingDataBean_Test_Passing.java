/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_flxj0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(100.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        assertEquals(100.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity2_lZfF1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(new Integer(1), 100.0, new BigDecimal(100.0), new Date(), new String("1"));
        assertEquals(100.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity3_piHE2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getQuoteID_0_agjA0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(new Double(0), new BigDecimal(0), new Date(0L), new AccountDataBean(new Integer(0), 0, 0, new Date(0L), new Date(0L), new BigDecimal(0), new BigDecimal(0), "profileID0"), new QuoteDataBean("symbol0", "companyName0", 0, new BigDecimal(0), new BigDecimal(0), new BigDecimal(0), new BigDecimal(0), 0));
        assertEquals("symbol0", holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getQuoteID_1_Kcvg1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(new Double(0), new BigDecimal(0), new Date(0L), new AccountDataBean(new Integer(0), 0, 0, new Date(0L), new Date(0L), new BigDecimal(0), new BigDecimal(0), "profileID0"), new QuoteDataBean());
        assertEquals(null, holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_LkUl0() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(quote);
        QuoteDataBean result = holdingDataBean.getQuote();
        assertEquals(quote, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote2_ipoj1() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(quote);
        QuoteDataBean result = holdingDataBean.getQuote();
        assertNotEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote3_kRdJ2() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(quote);
        QuoteDataBean result = holdingDataBean.getQuote();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote4_nZZl3() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(quote);
        QuoteDataBean result = holdingDataBean.getQuote();
        assertTrue(result instanceof QuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote5_fAZQ4() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuote(quote);
        QuoteDataBean result = holdingDataBean.getQuote();
        assertEquals("com.ibm.websphere.samples.daytrader.entities.QuoteDataBean", result.getClass().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_TFcC0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        BigDecimal purchasePrice = new BigDecimal(100.0);
        holdingDataBean.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_bxfL0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        boolean actual = holdingDataBean.equals(null);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObjectTypes_iVGi1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Object object = new Object();
        boolean actual = holdingDataBean.equals(object);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_eTiu2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        boolean actual = holdingDataBean.equals(holdingDataBean);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vLYS0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(100.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        String expected = "\n\tHolding Data for holding: " + holdingDataBean.getHoldingID() + "\n\t\t      quantity:" + holdingDataBean.getQuantity() + "\n\t\t purchasePrice:" + holdingDataBean.getPurchasePrice() + "\n\t\t  purchaseDate:" + holdingDataBean.getPurchaseDate() + "\n\t\t       quoteID:" + holdingDataBean.getQuoteID();
        assertEquals(expected, holdingDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoData_BMoa1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String expected = "\n\tHolding Data for holding: " + holdingDataBean.getHoldingID() + "\n\t\t      quantity:" + holdingDataBean.getQuantity() + "\n\t\t purchasePrice:" + holdingDataBean.getPurchasePrice() + "\n\t\t  purchaseDate:" + holdingDataBean.getPurchaseDate() + "\n\t\t       quoteID:" + holdingDataBean.getQuoteID();
        assertEquals(expected, holdingDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_zAGe0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        holdingDataBean.setAccount(accountDataBean);
        assertEquals(accountDataBean, holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_kzSH0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(89.0, new java.math.BigDecimal(1000.0), new java.util.Date(1676422939), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        double expected = 89.0;
        double actual = holdingDataBean.getQuantity();
        assertEquals(expected, actual, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_sZVB3() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        BigDecimal expected = TradeConfig.rndBigDecimal(1000.0f);
        holdingDataBean.setPurchasePrice(expected);
        BigDecimal actual = holdingDataBean.getPurchasePrice();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_eyhe4() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        Date expected = new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE));
        Date actual = holdingDataBean.getPurchaseDate();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_SupC5() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        Date expected = new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE));
        holdingDataBean.setPurchaseDate(expected);
        Date actual = holdingDataBean.getPurchaseDate();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_KyNb6() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        Integer expected = holdingDataBean.getHoldingID();
        Integer actual = holdingDataBean.getHoldingID();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_yHxH7() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new AccountDataBean(), new QuoteDataBean(TradeConfig.rndSymbol()));
        Integer expected = new Integer(TradeConfig.rndInt(100000));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_tgtj0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Date purchaseDate = new Date();
        holdingDataBean.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithNull_bTxI1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Date purchaseDate = null;
        holdingDataBean.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateWithInvalidDate_pYni2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Date purchaseDate = new Date(0L);
        holdingDataBean.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_RfrF0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setHoldingID(1);
        assertEquals(1, holdingDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullHoldingID_xxtA1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertEquals(0, holdingDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuoteID_YkpC0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String quoteID = "test";
        holdingDataBean.setQuoteID(quoteID);
        assert holdingDataBean.getQuoteID().equals(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuoteIDWithNull_fNMs1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String quoteID = null;
        holdingDataBean.setQuoteID(quoteID);
        assert holdingDataBean.getQuoteID() == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuoteIDWithEmpty_bULu2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String quoteID = "";
        holdingDataBean.setQuoteID(quoteID);
        assert holdingDataBean.getQuoteID().equals(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_yOSr0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST_SYMBOL");
        holdingDataBean.setQuote(quoteDataBean);
        assertEquals(quoteDataBean, holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteWithNull_kDcv1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = null;
        holdingDataBean.setQuote(quoteDataBean);
        assertEquals(quoteDataBean, holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID4_TNKR3() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID9_Hstc8() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = 987654321;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHoldingID10_iagC9() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        Integer actual = holdingDataBean.getHoldingID();
        Integer expected = -987654321;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_PgNz0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(100.0);
        assertEquals(100.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithZeroValue_XYSL2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(0.0);
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithMaxDoubleValue_NEzG4() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(Double.MAX_VALUE);
        assertEquals(Double.MAX_VALUE, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithMinDoubleValue_ZOMM5() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(Double.MIN_VALUE);
        assertEquals(0.0, holdingDataBean.getQuantity(), 4.9E-324);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityWithInfiniteValue_hevD7() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(Double.POSITIVE_INFINITY);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHoldingID_ksVo0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = 1;
        holdingDataBean.setHoldingID(holdingID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHoldingIDWithNull_Octy1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = null;
        holdingDataBean.setHoldingID(holdingID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetHoldingIDWithNegativeValue_ujGi2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = -1;
        holdingDataBean.setHoldingID(holdingID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_Dpfy0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        BigDecimal purchasePrice = holdingDataBean.getPurchasePrice();
        assertNotNull(purchasePrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePriceNull_njMW1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        BigDecimal purchasePrice = holdingDataBean.getPurchasePrice();
        assertNull(purchasePrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePriceCoverage_pFIa2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.getPurchasePrice();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_Roqj0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(100.0, new BigDecimal(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        String expected = "<BR>Holding Data for holding: " + holdingDataBean.getHoldingID() + "</B>" + "<LI>      quantity:" + holdingDataBean.getQuantity() + "</LI>" + "<LI> purchasePrice:" + holdingDataBean.getPurchasePrice() + "</LI>" + "<LI>  purchaseDate:" + holdingDataBean.getPurchaseDate() + "</LI>" + "<LI>       quoteID:" + holdingDataBean.getQuoteID() + "</LI>";
        assertEquals(expected, holdingDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithNoData_BSXT1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String expected = "<BR>Holding Data for holding: " + holdingDataBean.getHoldingID() + "</B>" + "<LI>      quantity:" + holdingDataBean.getQuantity() + "</LI>" + "<LI> purchasePrice:" + holdingDataBean.getPurchasePrice() + "</LI>" + "<LI>  purchaseDate:" + holdingDataBean.getPurchaseDate() + "</LI>" + "<LI>       quoteID:" + holdingDataBean.getQuoteID() + "</LI>";
        assertEquals(expected, holdingDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithAllData_Epaa2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(100.0, new BigDecimal(100.0), new Date(), new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID"), new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0));
        String expected = "<BR>Holding Data for holding: " + holdingDataBean.getHoldingID() + "</B>" + "<LI>      quantity:" + holdingDataBean.getQuantity() + "</LI>" + "<LI> purchasePrice:" + holdingDataBean.getPurchasePrice() + "</LI>" + "<LI>  purchaseDate:" + holdingDataBean.getPurchaseDate() + "</LI>" + "<LI>       quoteID:" + holdingDataBean.getQuoteID() + "</LI>";
        assertEquals(expected, holdingDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_mEdv0() {
        HoldingDataBean holdingData = new HoldingDataBean();
        AccountDataBean accountData = holdingData.getAccount();
        accountData = new AccountDataBean();
        assertNotNull(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountForNull_KSSc1() {
        HoldingDataBean holdingData = new HoldingDataBean();
        AccountDataBean accountData = holdingData.getAccount();
        assertNull(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountForNotNullAccountDataBeanInstance_YgSN10() {
        HoldingDataBean holdingData = new HoldingDataBean();
        AccountDataBean accountData = holdingData.getAccount();
    }
}