/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDateWithInvalidOrderData_GRio2() {
        OrderData orderData = new OrderData(null, null, null, null, null, null, 0, null, null);
        Date openDate = orderData.getOpenDate();
        assertNull(openDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateWithInvalidDate_YBzf2_fid1() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(100), "type", 100.0, "symbol", new BigDecimal(100));
        Date invalidDate = new Date(Long.MIN_VALUE);
        orderData.setOpenDate(invalidDate);
        assertNotEquals(invalidDate, orderData.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_OiSJ0() {
        OrderData orderData1 = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "TypeA", 100.0, "SymbolA", new BigDecimal(10.00));
        assertEquals(new BigDecimal(10000.00), orderData1.getTotal());
        OrderData orderData2 = new OrderData(2, "Open", new Date(), new Date(), null, "TypeB", 200.0, "SymbolB", new BigDecimal(20.00));
        assertEquals(new BigDecimal(40000.00), orderData2.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateWithInvalidCompletionDate_xwUI2_fid1() {
        OrderData orderData = new OrderData(1, "status", new Date(), new Date(), new BigDecimal(100), "type", 100, "symbol", new BigDecimal(100));
        Date completionDate = new Date(0);
        orderData.setCompletionDate(completionDate);
        assertNotEquals(completionDate, orderData.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_OiSJ0_1_fid2() {
        OrderData orderData1 = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "TypeA", 100.0, "SymbolA", new BigDecimal(10.00));
        OrderData orderData2 = new OrderData(2, "Open", new Date(), new Date(), null, "TypeB", 200.0, "SymbolB", new BigDecimal(20.00));
        assertEquals(new BigDecimal(10000.00), orderData1.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_OiSJ0_2_fid2() {
        OrderData orderData1 = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "TypeA", 100.0, "SymbolA", new BigDecimal(10.00));
        OrderData orderData2 = new OrderData(2, "Open", new Date(), new Date(), null, "TypeB", 200.0, "SymbolB", new BigDecimal(20.00));
        assertEquals(new BigDecimal(40000.00), orderData2.getTotal());
    }
}