/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
    OrderDataBean orderdatabean;
    @Mock
    AccountDataBean accountDataBean;
    @Mock
    HoldingDataBean holdingDataBean;
    @Mock
    QuoteDataBean quoteDataBean;
    private String symbol;
    private Integer orderID;
    private BigDecimal price;
    @Mock
    Log log;
    private HoldingDataBean holding;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    private QuoteDataBean quote;
    private String orderStatus;
    private AccountDataBean account;
    private Date openDate;
    private Date completionDate;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_1() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_5() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_6() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_7() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_8() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_9() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_10() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_11() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_12() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_13() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)),
            TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)),
            new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(),
            TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        Mockito.when(accountDataBean.getAccountID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(holdingDataBean.getHoldingID()).thenReturn(new Integer(TradeConfig.rndInt(100000)));
        Mockito.when(quoteDataBean.getSymbol()).thenReturn(TradeConfig.rndSymbol());
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Assertions.assertNotNull(orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_LPby0() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(OrderDataBean.class, order.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_PUtS1() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(order.hashCode(), order.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_JRsx3() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(null, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_eKhG6() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(null, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_cNKr7() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType_bIrj12() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(TradeConfig.rndBoolean() ? "buy" : "sell", order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_Pvtu13() {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        assertEquals(null, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetSymbol() throws Exception {
        orderdatabean = new OrderDataBean();
        symbol = "TESTSYMBOL";
        orderdatabean.setSymbol(symbol);
        assertEquals(symbol, orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_JoKp0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        orderDataBean.setSymbol("ABC");
        assertEquals("ABC", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithNullSymbol_xWcx1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        orderDataBean.setSymbol(null);
        assertEquals(null, orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithEmptySymbol_pmCF2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        orderDataBean.setSymbol("");
        assertEquals("", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithMaximumLengthSymbol_wUkW4() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        String maxSymbol = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        orderDataBean.setSymbol(maxSymbol);
        assertEquals(maxSymbol, orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OZdb0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        int expectedHashCode = 1;
        int actualHashCode = orderDataBean.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullOrderID_fych1() {
        OrderDataBean orderDataBean = new OrderDataBean(null, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        int expectedHashCode = 0;
        int actualHashCode = orderDataBean.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_ADQe0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "ORCL");
        assertEquals(order.getPrice(), new BigDecimal(10.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNoPriceSet_lJqM1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, null, new BigDecimal(0.0), "ORCL");
        assertNull(order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNoOrderFeeSet_mMtH2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), null, "ORCL");
        assertEquals(order.getPrice(), new BigDecimal(10.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNoOrderFeeOrPriceSet_SGlm3() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, null, null, "ORCL");
        assertNull(order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_ExVi0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        order.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint2_Ljza1() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "Profile"), new QuoteDataBean("Symbol"), new HoldingDataBean(100.0, new BigDecimal(10.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "Profile"), new QuoteDataBean("Symbol")));
        order.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint3_VRhQ2() {
        OrderDataBean order = new OrderDataBean();
        order.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = new HoldingDataBean();
        orderdatabean.setHolding(holding);
        assertEquals(holding, orderdatabean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_ijLx0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        HoldingDataBean holding = new HoldingDataBean(1, 100.0, new BigDecimal(10.0), new Date(), "ORCL");
        order.setHolding(holding);
        assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingNull_VBRw1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        assertEquals(null, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcancel() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        orderdatabean.cancel();
        assertEquals("cancelled", orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancel_Mvhd0() {
        OrderDataBean order = new OrderDataBean();
        order.cancel();
        assertEquals("cancelled", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderID() throws Exception {
        orderdatabean = new OrderDataBean();
        Integer orderID = 1;
        orderdatabean.setOrderID(orderID);
        assertEquals(orderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_fwBA0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(1);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNull_juPW1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = null;
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNegativeValue_eMdk2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(-1);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithZeroValue_TSyS3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(0);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithMaxPositiveValue_Iqiz5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(Integer.MAX_VALUE);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithMinPositiveValue_PYjN6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(Integer.MIN_VALUE);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithRandomValue_mYEQ7() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer((int) (Math.random() * Integer.MAX_VALUE));
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithDifferentValues_oziA8_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = new Integer(1);
        Integer orderID2 = new Integer(2);
        orderDataBean.setOrderID(orderID1);
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID2, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithSameValues_Rawr9_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(1);
        orderDataBean.setOrderID(orderID);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNullThenValue_iKmb10_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = null;
        Integer orderID2 = new Integer(1);
        orderDataBean.setOrderID(orderID1);
        orderDataBean.setOrderID(orderID2);
        assertNull(orderID1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithDifferentValues_oziA8() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = new Integer(1);
        Integer orderID2 = new Integer(2);
        orderDataBean.setOrderID(orderID1);
        assertEquals(orderID1, orderDataBean.getOrderID());
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID2, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithSameValues_Rawr9() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = new Integer(1);
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
        orderDataBean.setOrderID(orderID);
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNullThenValue_iKmb10() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = null;
        Integer orderID2 = new Integer(1);
        orderDataBean.setOrderID(orderID1);
        assertEquals(orderID1, orderDataBean.getOrderID());
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID2, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithValueThenNull_rtur11() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = new Integer(1);
        Integer orderID2 = null;
        orderDataBean.setOrderID(orderID1);
        assertEquals(orderID1, orderDataBean.getOrderID());
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID2, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuantity(10.0);
        assertEquals(10.0, orderdatabean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getQuantity_YxHK0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(1), new Date(2), 3.0, new BigDecimal(4.0), new BigDecimal(5.0), "Symbol");
        assertEquals(3.0, order.getQuantity(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getQuantity2_cqlK1() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(1), new Date(2), 3.0, new BigDecimal(4.0), new BigDecimal(5.0), new AccountDataBean(1, 2, 3, new Date(4), new Date(5), new BigDecimal(6.0), new BigDecimal(7.0), "ProfileID"), new QuoteDataBean("Symbol"), new HoldingDataBean(8.0, new BigDecimal(9.0), new Date(10), new AccountDataBean(1, 2, 3, new Date(4), new Date(5), new BigDecimal(6.0), new BigDecimal(7.0), "ProfileID"), new QuoteDataBean("Symbol")));
        assertEquals(3.0, order.getQuantity(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getQuantity3_OiPB2() {
        OrderDataBean order = new OrderDataBean();
        assertEquals(0.0, order.getQuantity(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderFee(new BigDecimal(100.00));
        assertEquals(new BigDecimal(100.00), orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_Gsfi0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(0.0), "Symbol");
        assertEquals(new BigDecimal(0.0), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFeeWithNoOrderFee_OohQ1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), null, "Symbol");
        assertEquals(null, order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderType() throws Exception {
        orderdatabean = new OrderDataBean();
        String orderType = "buy";
        orderdatabean.setOrderType(orderType);
        assertEquals(orderType, orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType_Pmhv0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("LIMIT");
        assert orderDataBean.getOrderType().equals("LIMIT");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType2_jWdv1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("MARKET");
        assert orderDataBean.getOrderType().equals("MARKET");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType3_VBWn2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("STOP");
        assert orderDataBean.getOrderType().equals("STOP");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType4_oARg3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("STOP_LIMIT");
        assert orderDataBean.getOrderType().equals("STOP_LIMIT");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType5_FGQE4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("MARKET_ON_CLOSE");
        assert orderDataBean.getOrderType().equals("MARKET_ON_CLOSE");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType6_zHUZ5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("WITH_POSITION");
        assert orderDataBean.getOrderType().equals("WITH_POSITION");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType7_mcNT6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("NO_ORDER");
        assert orderDataBean.getOrderType().equals("NO_ORDER");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() throws Exception {
        quote = mock(QuoteDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuote(quote);
        QuoteDataBean result = orderdatabean.getQuote();
        assertEquals(quote, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_FzoA0() {
        QuoteDataBean quote = new QuoteDataBean("symbol");
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuote(quote);
        QuoteDataBean result = orderDataBean.getQuote();
        assertEquals(quote, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteNullCoverage_WIge2() {
        QuoteDataBean quote = null;
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuote(quote);
        QuoteDataBean result = orderDataBean.getQuote();
        assertEquals(quote, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPrice() throws Exception {
        orderdatabean = new OrderDataBean();
        BigDecimal expectedPrice = new BigDecimal(100.00);
        orderdatabean.setPrice(expectedPrice);
        BigDecimal actualPrice = orderdatabean.getPrice();
        assertEquals(expectedPrice, actualPrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_uGvp0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        order.setPrice(new BigDecimal(15.0));
        assertEquals(new BigDecimal(15.0), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceNull_zCkX1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        order.setPrice(null);
        assertEquals(null, order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceZero_zqGu2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        order.setPrice(new BigDecimal(0.0));
        assertEquals(new BigDecimal(0.0), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceNegative_AYiV3() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        order.setPrice(new BigDecimal(-5.0));
        assertEquals(new BigDecimal(-5.0), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceMax_BrcW4() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        order.setPrice(new BigDecimal(Double.MAX_VALUE));
        assertEquals(new BigDecimal(Double.MAX_VALUE), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceMin_RrsJ5() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        order.setPrice(new BigDecimal(Double.MIN_VALUE));
        assertEquals(new BigDecimal(Double.MIN_VALUE), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testequals() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        OrderDataBean other = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(orderdatabean, other);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_eTnW0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        boolean actual = orderDataBean.equals(null);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectOfDifferentType_nXcO1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        boolean actual = orderDataBean.equals("test");
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectOfSameTypeAndSameIDs_MDWn3() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "testType", "testStatus", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "testSymbol");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "testType", "testStatus", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "testSymbol");
        boolean actual = orderDataBean1.equals(orderDataBean2);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObjectOfSameTypeAndNullIDs_LrsA4() {
        OrderDataBean orderDataBean1 = new OrderDataBean(null, "testType", "testStatus", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "testSymbol");
        OrderDataBean orderDataBean2 = new OrderDataBean(null, "testType", "testStatus", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "testSymbol");
        boolean actual = orderDataBean1.equals(orderDataBean2);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderStatus() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " SYMBOL");
        assertEquals("OPEN", orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_pwFi0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("OPEN", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithNullOrder_lgaa1() {
        OrderDataBean order = new OrderDataBean();
        assertEquals(null, order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithEmptyOrder_qTyu2() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus(" ");
        assertEquals(" ", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithNullOrderType_Cswj3() {
        OrderDataBean order = new OrderDataBean(1, null, "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("OPEN", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithEmptyOrderType_DBhO4() {
        OrderDataBean order = new OrderDataBean(1, "", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("OPEN", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithInvalidOrderType_ydPI5() {
        OrderDataBean order = new OrderDataBean(1, "Invalid", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("OPEN", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithNullOrderStatus_gqIY6() {
        OrderDataBean order = new OrderDataBean(1, "BUY", null, new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(null, order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithEmptyOrderStatus_QAti7() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithInvalidOrderStatus_vxOK8() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "Invalid", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("Invalid", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithNullOpenDate_xSMd9() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", null, new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("OPEN", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithInvalidOpenDate_NYBd11() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(0), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("OPEN", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatusWithNullCompletionDate_qIjO12() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals("OPEN", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderStatus() throws Exception {
        orderdatabean = new OrderDataBean();
        String status = "Completed";
        orderdatabean.setOrderStatus(status);
        assertEquals(status, orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderStatus_MKpx0() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("New");
        assert order.getOrderStatus().equals("New");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderStatusCoverage_lQPE1() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderStatus("New");
        order.setOrderStatus("Open");
        order.setOrderStatus("Completed");
        order.setOrderStatus("Cancelled");
        order.setOrderStatus("Invalid");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = mock(QuoteDataBean.class);
        symbol = "TESTSYMBOL";
        when(quote.getSymbol()).thenReturn(symbol);
        orderdatabean.setQuote(quote);
        assertEquals(symbol, orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSymbol_with_quote_not_null_jWAM0() {
        OrderDataBean order = new OrderDataBean();
        order.setQuote(new QuoteDataBean("TEST"));
        assertEquals("TEST", order.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSymbol_with_quote_null_CFuL1() {
        OrderDataBean order = new OrderDataBean();
        order.setSymbol("TEST");
        assertEquals("TEST", order.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderID() throws Exception {
        orderdatabean = new OrderDataBean();
        Integer expected = orderdatabean.getOrderID();
        assertEquals(expected, orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_RGxx0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(new Integer(1), order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderIDWithNoOrderID_RekA1() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
        assertEquals(null, order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen1_Oqbg0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "open", new Date(1234567890), new Date(1234567890), 100.0, new BigDecimal(100.0), new BigDecimal(100.0), "ORCL");
        assertTrue(order.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen2_tGBB1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "processing", new Date(1234567890), new Date(1234567890), 100.0, new BigDecimal(100.0), new BigDecimal(100.0), "ORCL");
        assertTrue(order.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen3_rVwy2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "completed", new Date(1234567890), new Date(1234567890), 100.0, new BigDecimal(100.0), new BigDecimal(100.0), "ORCL");
        assertFalse(order.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_Gqyr0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setAccount(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderFee() throws Exception {
        orderdatabean = new OrderDataBean();
        orderFee = new BigDecimal(100.00);
        orderdatabean.setOrderFee(orderFee);
        assertEquals(orderFee, orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_Atmc0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(0));
        assertEquals(new BigDecimal(0), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee2_PbHu1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(100));
        assertEquals(new BigDecimal(100), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee3_ikiw2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(10000));
        assertEquals(new BigDecimal(10000), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee4_AecB3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(1000000));
        assertEquals(new BigDecimal(1000000), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee5_CPoP4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(100000000));
        assertEquals(new BigDecimal(100000000), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee6_bELl5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(10000000000L));
        assertEquals(new BigDecimal(10000000000L), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee7_RsYX6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(1000000000000L));
        assertEquals(new BigDecimal(1000000000000L), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee8_qRjW7() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(100000000000000L));
        assertEquals(new BigDecimal(100000000000000L), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee9_ZUEC8() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(10000000000000000L));
        assertEquals(new BigDecimal(10000000000000000L), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee10_aLof9() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderFee(new BigDecimal(1000000000000000000L));
        assertEquals(new BigDecimal(1000000000000000000L), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate() throws Exception {
        orderdatabean = new OrderDataBean();
        openDate = new Date();
        orderdatabean.setOpenDate(openDate);
        assertEquals(openDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_djiM0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(new Date(), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDateWithNullOpenDate_IGcL1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", null, null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        assertEquals(null, order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOpenDate() throws Exception {
        orderdatabean = new OrderDataBean();
        Date newOpenDate = new Date();
        orderdatabean.setOpenDate(newOpenDate);
        assertEquals(newOpenDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_tyur0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        Date openDate = new Date();
        orderDataBean.setOpenDate(openDate);
        assertEquals(openDate, orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateNull_gRBi1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        orderDataBean.setOpenDate(null);
        assertNull(orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateMax_PfSg3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        Date openDate = new Date(Long.MAX_VALUE);
        orderDataBean.setOpenDate(openDate);
        assertEquals(openDate, orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDateMin_sfXV4() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "XYZ");
        Date openDate = new Date(Long.MIN_VALUE);
        orderDataBean.setOpenDate(openDate);
        assertEquals(openDate, orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_Qrmx0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        orderDataBean.setHolding(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingNull_FTwF1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setHolding(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingWithRandomHoldingDataBean_KLng2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        orderDataBean.setHolding(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompletionDate_ltFs0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(1234567890), new Date(1234567890), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "ORCL");
        assertEquals(new Date(1234567890), order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompletionDate_null_kNrM1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(1234567890), null, 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "ORCL");
        assertEquals(null, order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisSell() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderType("sell");
        assertTrue(orderdatabean.isSell());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSell_sellOrder_SPEB0() {
        OrderDataBean order = new OrderDataBean("sell", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
        boolean actual = order.isSell();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSell_buyOrder_mzpU1() {
        OrderDataBean order = new OrderDataBean("buy", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new AccountDataBean(), new QuoteDataBean(), new HoldingDataBean());
        boolean actual = order.isSell();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderType() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderType("buy");
        assertEquals("buy", orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType_avXy0() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID"), new QuoteDataBean("symbol"), new HoldingDataBean(100.0, new BigDecimal(10.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(100.0), "profileID"), new QuoteDataBean("symbol")));
        String orderType = order.getOrderType();
        assertEquals("BUY", orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("completed");
        assertTrue(orderdatabean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithCompletedStatus_OyAQ0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "completed", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " IBM");
        assertTrue(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithAlertCompletedStatus_QYNS1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "alertcompleted", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " IBM");
        assertTrue(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithCancelledStatus_WhsN2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "cancelled", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " IBM");
        assertTrue(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithOtherStatus_zYPi3() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " IBM");
        assertFalse(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompletedWithEmptyStatus_CYmL5() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), " IBM");
        assertFalse(order.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_AYay0() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteNull_OOPa1() {
        QuoteDataBean quote = null;
        OrderDataBean order = new OrderDataBean();
        order.setQuote(quote);
        assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuantity() throws Exception {
        orderdatabean = new OrderDataBean();
        double quantity = 10.0;
        orderdatabean.setQuantity(quantity);
        assertEquals(quantity, orderdatabean.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_dNyN0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(1234567890), new Date(1234567890), 100.0, new BigDecimal(100.0), new BigDecimal(100.0), "Symbol");
        order.setQuantity(1000.0);
        assertEquals(1000.0, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity2_otvK1() {
        OrderDataBean order = new OrderDataBean("BUY", "OPEN", new Date(1234567890), new Date(1234567890), 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new AccountDataBean(1, 1, 1, new Date(1234567890), new Date(1234567890), new BigDecimal(100.0), new BigDecimal(100.0), "ProfileID"), new QuoteDataBean("Symbol"), new HoldingDataBean(1, 100.0, new BigDecimal(100.0), new Date(1234567890), "QuoteID"));
        order.setQuantity(1000.0);
        assertEquals(1000.0, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisBuy() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderType("buy");
        boolean result = orderdatabean.isBuy();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuyWithBuyOrderType_ChoX0() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderType("buy");
        assertTrue(order.isBuy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuyWithSellOrderType_vukH1() {
        OrderDataBean order = new OrderDataBean();
        order.setOrderType("sell");
        assertTrue(!order.isBuy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompletionDate() throws Exception {
        orderdatabean = new OrderDataBean();
        Date completionDate = new Date();
        orderdatabean.setCompletionDate(completionDate);
        assertEquals(completionDate, orderdatabean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_KqRp0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        Date completionDate = new Date();
        orderDataBean.setCompletionDate(completionDate);
        assertEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateNull_DzPC1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        orderDataBean.setCompletionDate(null);
        assertNull(orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateAfterCompletion_EqKA3() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        Date completionDate = new Date();
        orderDataBean.setCompletionDate(completionDate);
        assertEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount() throws Exception {
        account = mock(AccountDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        assertEquals(account, orderdatabean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_zado0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setAccount(accountDataBean);
        AccountDataBean result = orderDataBean.getAccount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountWithCoverage_wIVw1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setAccount(accountDataBean);
        orderDataBean.getAccount();
        orderDataBean.getAccount();
        orderDataBean.getAccount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCancelled() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderStatus("cancelled");
        assertTrue(orderdatabean.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelledTrue_pmwz0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "cancelled", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        assertTrue(order.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelledFalse_wRQy1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "open", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "ORCL");
        assertFalse(order.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithNullThenValue_iKmb10_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = null;
        Integer orderID2 = new Integer(1);
        orderDataBean.setOrderID(orderID1);
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID2, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDWithValueThenNull_rtur11_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID1 = new Integer(1);
        Integer orderID2 = null;
        orderDataBean.setOrderID(orderID1);
        orderDataBean.setOrderID(orderID2);
        assertEquals(orderID2, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode_WIDh0() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(10.0), new BigDecimal(1.0), "Symbol");
        int expected = orderdatabean.getOrderID();
        int actual = orderdatabean.hashCode();
        assertEquals(expected, actual);
    }
}