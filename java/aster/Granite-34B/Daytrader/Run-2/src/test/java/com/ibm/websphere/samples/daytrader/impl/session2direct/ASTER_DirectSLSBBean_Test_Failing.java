/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @InjectMocks
    private DirectSLSBBean directslsbbean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_EcSl0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(account, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_EcSl0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_EcSl0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_EcSl0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(orderType, order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_EcSl0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(quantity, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean, "The marketSummaryDataBean should not be null");
        Assertions.assertNotNull(marketSummaryDataBean.getRandomInstance(), "The randomInstance should not be null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertTrue(marketSummaryDataBean.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean.getTopLosers());
        Assertions.assertEquals(0, marketSummaryDataBean.getTopLosers().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_qEYi0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        Collection<?> quotes = directSLSBBean.getAllQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesWithNoSession_bdPF1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        Collection<?> quotes = directSLSBBean.getAllQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_jmeW0() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        assertEquals(accountData.getOpenBalance(), result.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullPassword_WKku1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", null, "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        Assertions.assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullFullname_TPJV2() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", null, "address", "email", "creditcard", accountData.getOpenBalance());
        Assertions.assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullAddress_NdTe3() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", null, "email", "creditcard", accountData.getOpenBalance());
        Assertions.assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullEmail_Qeja4() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", "address", null, "creditcard", accountData.getOpenBalance());
        Assertions.assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullCreditcard_RyPw5() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", "address", "email", null, accountData.getOpenBalance());
        Assertions.assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullOpenBalance_kJpo6() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", "address", "email", "creditcard", null);
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullUserID_kRfr7() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register(null, "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterEmptyUserID_DASW8() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        Assertions.assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterInvalidUserID_zYQD9() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("!@#$", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        Assertions.assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_LHyp0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_dKVV0() throws Exception {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean result = directSLSBBean.login("userID", "password");
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_EmptyPassword_TBdl2() throws Exception {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean result = directSLSBBean.login("userID", "");
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_NullUserID_omqH3() throws Exception {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean result = directSLSBBean.login(null, "password");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_EmptyUserID_cfPa4() throws Exception {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean result = directSLSBBean.login("", "password");
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_NoAccountFound_fDzP5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean result = directSLSBBean.login("userID", "password");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getAccount(), result.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getCompletionDate(), result.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOpenDate(), result.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOrderFee(), result.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getPrice(), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getQuantity(), result.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getQuote(), result.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_10() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOrderStatus(), result.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0_11() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getOrderType(), result.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PiRe0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PiRe0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_ruUn1_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_ruUn1_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeVolume_vppr2_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = -100;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeVolume_vppr2_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = -100;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroPrice_JXRR3_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ZERO;
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroPrice_JXRR3_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ZERO;
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativePrice_QFne4_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ONE.negate();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativePrice_QFne4_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ONE.negate();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_jkPb0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_xHxU1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_unEN2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertions here to check the behavior of cancelOrder method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder4_Koql3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder5_DLpl4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Replace the erroneous assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder6_ofHk5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder7_AtWN6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder8_xDLi7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder9_Vxpd8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder10_OUnd9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_zJKA0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_zJKA0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertTrue(orders.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatDoesNotExist_tijm3_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "nonexistentUser";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatDoesNotExist_tijm3_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "nonexistentUser";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertTrue(orders.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasMultipleOrders_higC4_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithMultipleOrders";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasMultipleOrders_higC4_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithMultipleOrders";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertTrue(orders.size() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasSingleOrder_Gafw5_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithSingleOrder";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasSingleOrder_Gafw5_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithSingleOrder";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertTrue(orders.size() == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasZeroOrders_hIBL6_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithZeroOrders";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasZeroOrders_hIBL6_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithZeroOrders";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertTrue(orders.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasOrdersInSession_PDne7_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithOrdersInSession";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasOrdersInSession_PDne7_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithOrdersInSession";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertTrue(orders.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasOrdersNotYetInSession_LjWQ8_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithOrdersNotYetInSession";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasOrdersNotYetInSession_LjWQ8_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithOrdersNotYetInSession";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertTrue(orders.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getCompanyName(), actual.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getPrice(), actual.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getOpen(), actual.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getLow(), actual.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getChange(), actual.getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getHigh(), actual.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getSymbol(), actual.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getVolume(), actual.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_tmAZ0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_tmAZ0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(symbol, result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_tmAZ0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_tZZW0() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile2_AbVI1() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("1");
        profileData.setPassword("2");
        profileData.setFullName("3");
        profileData.setAddress("4");
        profileData.setEmail("5");
        profileData.setCreditCard("6");
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_CFeJ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.queueOrder(123, true);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_xkXE1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.queueOrder(456, false);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertEquals(new Integer(100), accountDataBean.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertEquals(new Integer(50), accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertEquals(new BigDecimal(1000.0), accountDataBean.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertEquals(new BigDecimal(1000.0), accountDataBean.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertNotNull(accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertNotNull(accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertNotNull(accountDataBean.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_10() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertNotNull(accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_11() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertNotNull(accountDataBean.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataNull_acog1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData(null);
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataEmpty_XqZP2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataInvalid_hVql3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("invalid");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataEmpty_OoeU2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("");
        assertNotNull(accountProfileDataBean);
        accountProfileDataBean.setAddress("123 Main Street");
        accountProfileDataBean.setEmail("test@test.com");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("Test User");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataRandom_TIzo3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("strong0");
        AccountProfileDataBean accountProfileDataBean2 = directSLSBBean.getAccountProfileData("strong0");
        assertEquals(accountProfileDataBean, accountProfileDataBean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_DFgi0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseNull_Xqyg1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = null;
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseEmpty_eUNF2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseWhitespace_qnfN3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = " ";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseTab_KInT4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "\t";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseNewline_HNzl5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "\n";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseCarriageReturn_hVCO6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "\r";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseExclamationMark_RyCS7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "!";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseQuestionMark_qQGk8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "?";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseAsterisk_nCMJ9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "*";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_sNoU0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            directSLSBBean.orderCompleted("testUser", 12345);
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_fAGG0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.logout("testUser");
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithCoverage_VzUS1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.logout(null);
        directSLSBBean.logout("");
        directSLSBBean.logout("testUser");
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_pjum0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer holdingID = new Integer(0);
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(holdingID);
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_PxgD0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        OrderDataBean orderDataBean = future.get();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_nzuO1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        OrderDataBean orderDataBean = future.get();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_QfxQ0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_QfxQ0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertTrue(closedOrders.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_noClosedOrders_fTCH5_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertTrue(closedOrders.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_multipleClosedOrders_MvhF6_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertTrue(closedOrders.size() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_specificClosedOrder_WrkZ7_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertTrue(closedOrders.contains("specificOrderID"));
    }

    @Test
    public void testcreateOrder_LIWA0_1() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals("profileID", orderDataBean.getAccount().getProfileID());
    }

    @Test
    public void testcreateOrder_LIWA0_2() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals("symbol", orderDataBean.getSymbol());
    }

    @Test
    public void testcreateOrder_LIWA0_3() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(1, orderDataBean.getHolding().getHoldingID());
    }

    @Test
    public void testcreateOrder_LIWA0_4() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(1.0, orderDataBean.getHolding().getQuantity());
    }

    @Test
    public void testcreateOrder_LIWA0_5() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new BigDecimal(100.0), orderDataBean.getHolding().getPurchasePrice());
    }

    @Test
    public void testcreateOrder_LIWA0_6() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new java.sql.Date(System.currentTimeMillis()), orderDataBean.getHolding().getPurchaseDate());
    }

    @Test
    public void testcreateOrder_LIWA0_7() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(1, orderDataBean.getAccount().getLoginCount());
        directslsbbean.setInSession(true);
    }

    @Test
    public void testcreateOrder_LIWA0_8() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(1, orderDataBean.getAccount().getLogoutCount());
        directslsbbean.setInSession(true);
    }

    @Test
    public void testcreateOrder_LIWA0_10() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new java.sql.Date(System.currentTimeMillis()), orderDataBean.getAccount().getCreationDate());
    }

    @Test
    public void testcreateOrder_LIWA0_11() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new BigDecimal(100.0), orderDataBean.getAccount().getBalance());
    }

    @Test
    public void testcreateOrder_LIWA0_12() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new BigDecimal(100.0), orderDataBean.getAccount().getOpenBalance());
    }

    @Test
    public void testcreateOrder_LIWA0_13() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new ArrayList<HoldingDataBean>(), orderDataBean.getAccount().getHoldings());
        directslsbbean.setInSession(true);
    }

    @Test
    public void testcreateOrder_LIWA0_14() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new ArrayList<OrderDataBean>(), orderDataBean.getAccount().getOrders());
    }

    @Test
    public void testcreateOrder_LIWA0_15() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new AccountProfileDataBean(), orderDataBean.getAccount().getProfile());
    }

    @Test
    public void testcreateOrder_LIWA0_16() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals("companyName", orderDataBean.getQuote().getCompanyName());
    }

    @Test
    public void testcreateOrder_LIWA0_17() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(1.0, orderDataBean.getQuote().getVolume());
    }

    @Test
    public void testcreateOrder_LIWA0_18() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new BigDecimal(100.0), orderDataBean.getQuote().getPrice());
    }

    @Test
    public void testcreateOrder_LIWA0_19() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new BigDecimal(100.0), orderDataBean.getQuote().getOpen());
    }

    @Test
    public void testcreateOrder_LIWA0_20() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new BigDecimal(100.0), orderDataBean.getQuote().getLow());
    }

    @Test
    public void testcreateOrder_LIWA0_21() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new BigDecimal(100.0), orderDataBean.getQuote().getHigh());
    }

    @Test
    public void testcreateOrder_LIWA0_22() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(1.0, orderDataBean.getQuote().getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_ZeroGainPercent_linY2_Zhxr0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_EcSl0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertEquals(account, order.getAccount());
        assertEquals(quote, order.getQuote());
        assertEquals(holding, order.getHolding());
        assertEquals(orderType, order.getOrderType());
        assertEquals(quantity, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean);
        Assertions.assertNotNull(marketSummaryDataBean.getOpenTSIA());
        Assertions.assertNotNull(marketSummaryDataBean.getGainPercent());
        Assertions.assertNotNull(marketSummaryDataBean.getRandomInstance());
        Assertions.assertNotNull(marketSummaryDataBean.getSummaryDate());
        Assertions.assertNotNull(marketSummaryDataBean.getTSIA());
        Assertions.assertTrue(marketSummaryDataBean.getVolume() > 0);
        Assertions.assertNotNull(marketSummaryDataBean.getTopGainers());
        Assertions.assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_jmeW0_fid1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullPassword_WKku1_fid1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", null, "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullFullname_TPJV2_fid1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", null, "address", "email", "creditcard", accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullAddress_NdTe3_fid1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", null, "email", "creditcard", accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullEmail_Qeja4_fid1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", "address", null, "creditcard", accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNullCreditcard_RyPw5_fid1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("userID", "password", "fullname", "address", "email", null, accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterEmptyUserID_DASW8_fid1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterInvalidUserID_zYQD9_fid1() throws Exception {
        AccountDataBean accountData = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        AccountDataBean result = directSLSB.register("!@#$", "password", "fullname", "address", "email", "creditcard", accountData.getOpenBalance());
        assertEquals(accountData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_NullPassword_LWhU1() throws Exception {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean result = directSLSBBean.login("userID", null);
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_NullUserID_omqH3_fid1() throws Exception {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean result = directSLSBBean.login(null, "password");
        assertEquals(accountDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_QOjB0() {
        DirectSLSBBean obj = new DirectSLSBBean();
        obj.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession2_JmXj1() {
        DirectSLSBBean obj = new DirectSLSBBean();
        obj.setInSession(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_WOvZ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        boolean twoPhase = true;
        OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(orderDataBean.getAccount(), result.getAccount());
        assertEquals(orderDataBean.getCompletionDate(), result.getCompletionDate());
        assertEquals(orderDataBean.getOpenDate(), result.getOpenDate());
        assertEquals(orderDataBean.getOrderFee(), result.getOrderFee());
        assertEquals(orderDataBean.getPrice(), result.getPrice());
        assertEquals(orderDataBean.getQuantity(), result.getQuantity());
        assertEquals(orderDataBean.getQuote(), result.getQuote());
        assertEquals(orderDataBean.getSymbol(), result.getSymbol());
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
        assertEquals(orderDataBean.getOrderStatus(), result.getOrderStatus());
        assertEquals(orderDataBean.getOrderType(), result.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PiRe0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_ruUn1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeVolume_vppr2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = -100;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroPrice_JXRR3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ZERO;
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativePrice_QFne4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        BigDecimal newPrice = BigDecimal.ONE.negate();
        double sharesTraded = quoteDataBean.getVolume();
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_jkPb0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_xHxU1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_unEN2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder4_Koql3_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder5_DLpl4_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder7_AtWN6_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder9_Vxpd8_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = false;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder10_OUnd9_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_zJKA0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertTrue(orders.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatDoesNotExist_tijm3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "nonexistentUser";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertTrue(orders.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasMultipleOrders_higC4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithMultipleOrders";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertTrue(orders.size() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasSingleOrder_Gafw5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithSingleOrder";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertTrue(orders.size() == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasZeroOrders_hIBL6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithZeroOrders";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertTrue(orders.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasOrdersInSession_PDne7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithOrdersInSession";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertTrue(orders.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithUserIDThatHasOrdersNotYetInSession_LjWQ8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "userWithOrdersNotYetInSession";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertTrue(orders.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JpbE0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String symbol = "TEST";
        QuoteDataBean expected = QuoteDataBean.getRandomInstance();
        QuoteDataBean actual = directSLSBBean.getQuote(symbol);
        assertEquals(expected.getCompanyName(), actual.getCompanyName());
        assertEquals(expected.getPrice(), actual.getPrice());
        assertEquals(expected.getOpen(), actual.getOpen());
        assertEquals(expected.getLow(), actual.getLow());
        assertEquals(expected.getChange(), actual.getChange());
        assertEquals(expected.getHigh(), actual.getHigh());
        assertEquals(expected.getSymbol(), actual.getSymbol());
        assertEquals(expected.getVolume(), actual.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_tmAZ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertNotNull(result);
        assertEquals(symbol, result.getSymbol());
        assertEquals(companyName, result.getCompanyName());
        assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_tZZW0_fid1() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertNotNull(accountDataBean);
        assertEquals("12345", accountDataBean.getProfileID());
        assertEquals(new Integer(100), accountDataBean.getLoginCount());
        assertEquals(new Integer(50), accountDataBean.getLogoutCount());
        assertEquals(new BigDecimal(1000.0), accountDataBean.getBalance());
        assertEquals(new BigDecimal(1000.0), accountDataBean.getOpenBalance());
        assertNotNull(accountDataBean.getCreationDate());
        assertNotNull(accountDataBean.getLastLogin());
        assertNotNull(accountDataBean.getHoldings());
        assertNotNull(accountDataBean.getOrders());
        assertNotNull(accountDataBean.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataNull_acog1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData(null);
        assertNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataEmpty_XqZP2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("");
        assertNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountDataInvalid_hVql3_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("invalid");
        assertNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_arFx0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("strong0");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataNull_lzEY1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData(null);
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataEmpty_OoeU2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataCoverage_uBfS4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("strong0");
        accountProfileDataBean.getCreditCard();
        accountProfileDataBean.getRandomInstance();
        accountProfileDataBean.getEmail();
        accountProfileDataBean.getUserID();
        accountProfileDataBean.hashCode();
        accountProfileDataBean.getAddress();
        accountProfileDataBean.getPassword();
        accountProfileDataBean.getFullName();
        accountProfileDataBean.getAccount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_DFgi0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseNull_Xqyg1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = null;
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseEmpty_eUNF2_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseTab_KInT4_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "\t";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseNewline_HNzl5_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "\n";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseCarriageReturn_hVCO6_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "\r";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseExclamationMark_RyCS7_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "!";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhaseQuestionMark_qQGk8_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "?";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhasePlusSign_aQGV10_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = "+";
        QuoteDataBean result = directSLSBBean.pingTwoPhase(symbol);
        assertEquals(quoteDataBean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_PxgD0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_nzuO1_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_QfxQ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
        assertTrue(closedOrders.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_noClosedOrders_fTCH5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
        assertTrue(closedOrders.size() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_multipleClosedOrders_MvhF6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
        assertTrue(closedOrders.size() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_specificClosedOrder_WrkZ7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "testUser";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
        assertTrue(closedOrders.contains("specificOrderID"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_4_fid3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean.getRandomInstance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_JKog0_8_fid3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNotNull(marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_tmAZ0_3_fid3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
        assertEquals(companyName, result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_EMbw0_2_fid3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.getAccountData("12345");
        assertEquals("12345", accountDataBean.getProfileID());
    }

    @Test
    public void testcreateOrder_LIWA0_7_fid3() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(1, orderDataBean.getAccount().getLoginCount());
    }

    @Test
    public void testcreateOrder_LIWA0_8_fid3() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(1, orderDataBean.getAccount().getLogoutCount());
    }

    @Test
    public void testcreateOrder_LIWA0_9() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new java.sql.Date(System.currentTimeMillis()), orderDataBean.getAccount().getLastLogin());
    }

    @Test
    public void testcreateOrder_LIWA0_13_fid3() throws Exception {
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getHoldingID()).thenReturn(1);
        when(holding.getQuantity()).thenReturn(1.0);
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal(100.0));
        when(holding.getPurchaseDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getLoginCount()).thenReturn(1);
        when(account.getLogoutCount()).thenReturn(1);
        when(account.getLastLogin()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getCreationDate()).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(account.getBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getOpenBalance()).thenReturn(new BigDecimal(100.0));
        when(account.getHoldings()).thenReturn(new ArrayList<HoldingDataBean>());
        when(account.getOrders()).thenReturn(new ArrayList<OrderDataBean>());
        when(account.getProfile()).thenReturn(new AccountProfileDataBean());
        when(quote.getCompanyName()).thenReturn("companyName");
        when(quote.getVolume()).thenReturn(1.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(quote.getOpen()).thenReturn(new BigDecimal(100.0));
        when(quote.getLow()).thenReturn(new BigDecimal(100.0));
        when(quote.getHigh()).thenReturn(new BigDecimal(100.0));
        when(quote.getChange()).thenReturn(1.0);
        OrderDataBean orderDataBean = directslsbbean.createOrder(account, quote, holding, "orderType", 1.0);
        assertEquals(new ArrayList<HoldingDataBean>(), orderDataBean.getAccount().getHoldings());
    }
}