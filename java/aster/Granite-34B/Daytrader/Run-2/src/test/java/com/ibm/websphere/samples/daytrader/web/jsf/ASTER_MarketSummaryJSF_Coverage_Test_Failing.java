/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryJSF_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Crwn0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.getMarketSummary();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_pxXN1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Exception e = new Exception();
        marketSummaryJSF.getMarketSummary();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_YHne2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Exception e = new Exception();
        e.printStackTrace();
        marketSummaryJSF.getMarketSummary();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_brPm4() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Exception e = new Exception();
        e.printStackTrace();
        MarketSummaryDataBean marketSummaryData = new MarketSummaryDataBean();
        marketSummaryJSF.setSummaryDate(marketSummaryData.getSummaryDate());
        marketSummaryJSF.setTSIA(marketSummaryData.getTSIA());
        marketSummaryJSF.setVolume(marketSummaryData.getVolume());
        marketSummaryJSF.setGainPercent(marketSummaryData.getGainPercent());
        Collection<?> topGainers = marketSummaryData.getTopGainers();
        Iterator<?> gainers = topGainers.iterator();
        int count = 0;
        QuoteData[] gainerjsfs = new QuoteData[5];
        while (gainers.hasNext() && (count < 5)) {
            QuoteDataBean quote = (QuoteDataBean) gainers.next();
            QuoteData r = new QuoteData(quote.getPrice(), quote.getOpen(), quote.getSymbol());
            gainerjsfs[count] = r;
            count++;
        }
        marketSummaryJSF.setTopGainers(gainerjsfs);
        Collection<?> topLosers = marketSummaryData.getTopLosers();
        QuoteData[] loserjsfs = new QuoteData[5];
        count = 0;
        Iterator<?> losers = topLosers.iterator();
        while (losers.hasNext() && (count < 5)) {
            QuoteDataBean quote = (QuoteDataBean) losers.next();
            QuoteData r = new QuoteData(quote.getPrice(), quote.getOpen(), quote.getSymbol());
            loserjsfs[count] = r;
            count++;
        }
        marketSummaryJSF.setTopLosers(loserjsfs);
        marketSummaryJSF.getMarketSummary();
    }
}