/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingUpgradeServlet_Test_Passing {
    PingUpgradeServlet pingupgradeservlet;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;
    @Mock
    HttpServletRequest req;
    @Mock
    HttpServletResponse res;
    @InjectMocks
    PingUpgradeServlet pingUpgradeServlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingupgradeservlet = new PingUpgradeServlet();
        when(httpservletrequest.getHeader("Upgrade")).thenReturn("echo");
        doNothing().when(httpservletresponse).setHeader(anyString(), anyString());
        doNothing().when(httpservletresponse).setStatus(anyInt());
        doNothing().when(httpservletrequest).upgrade(any());
        pingupgradeservlet.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getHeader("Upgrade");
        verify(httpservletresponse, times(1)).setHeader("Upgrade", "echo");
        verify(httpservletresponse, times(1)).setHeader("Connection", "Upgrade");
        verify(httpservletresponse, times(1)).setStatus(101);
        verify(httpservletrequest, times(1)).upgrade(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingupgradeservlet = new PingUpgradeServlet();
        // Mock the behavior of the doPost method in the PingUpgradeServlet class
        doCallRealMethod().when(pingupgradeservlet).doPost(httpservletrequest, httpservletresponse);
        // Call the doGet method and assert the expected behavior
        pingupgradeservlet.doGet(httpservletrequest, httpservletresponse);
        verify(pingupgradeservlet, times(1)).doPost(httpservletrequest, httpservletresponse);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_Fwad0_LXWL0() throws ServletException, IOException {
        PingUpgradeServlet servlet = new PingUpgradeServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_withValidRequest_shouldReturnExpectedResponse_DNLf1_cjNY0() throws ServletException, IOException {
        PingUpgradeServlet servlet = new PingUpgradeServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
        assertEquals(200, response.getStatus());
    }
}