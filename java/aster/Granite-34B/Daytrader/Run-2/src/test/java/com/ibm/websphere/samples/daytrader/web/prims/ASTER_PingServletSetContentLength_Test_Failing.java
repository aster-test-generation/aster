/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletSetContentLength_Test_Failing {
    PingServletSetContentLength pingservletsetcontentlength;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    ServletOutputStream servletoutputstream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletsetcontentlength = new PingServletSetContentLength();
        ServletConfig servletconfig = mock(ServletConfig.class);
        pingservletsetcontentlength.init(servletconfig);
        verify(httpservlet, times(1)).init(servletconfig);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_eixg0() throws ServletException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        ServletConfig config = new MockServletConfig();
        servlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_NullServletConfig_CyEY1() {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        try {
            servlet.init(null);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_MultipleInvocations_nFqD4() throws ServletException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        ServletConfig config = new MockServletConfig();
        servlet.init(config);
        servlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_MultipleThreads_ggzN5() throws ServletException, InterruptedException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        ServletConfig config = new MockServletConfig();
        Thread t1 = new Thread(() -> {
            try {
                servlet.init(config);
            } catch (ServletException e) {
                e.printStackTrace();
            }
        });
        Thread t2 = new Thread(() -> {
            try {
                servlet.init(config);
            } catch (ServletException e) {
                e.printStackTrace();
            }
        });
        t1.start();
        t2.start();
        t1.join();
        t2.join();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_fIHT0() throws ServletException, IOException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_YOJx1() throws ServletException, IOException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = null;
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_MITP2() throws ServletException, IOException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_OJua0() {
        PingServletSetContentLength obj = new PingServletSetContentLength();
        String actual = obj.getServletInfo();
        String expected = "Basic dynamic HTML generation through a servlet, with " + "contentLength set by contentLength parameter.";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        pingservletsetcontentlength = new PingServletSetContentLength();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        when(httpservletrequest.getParameter("contentLength")).thenReturn("100");
        pingservletsetcontentlength.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletrequest, times(1)).getParameter("contentLength");
        verify(httpservletresponse, times(1)).getOutputStream();
        verify(servletoutputstream, times(1)).println("<html><head><title>Ping Servlet</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066\">" + "aa" + "</B></body></html>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithLengthParam_tRks0() throws ServletException, IOException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream output = mock(ServletOutputStream.class);
        when(request.getParameter("contentLength")).thenReturn("100");
        when(response.getOutputStream()).thenReturn(output);
        servlet.doGet(request, response);
        assertEquals(100, output.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithoutLengthParam_wvnW1() throws ServletException, IOException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream output = mock(ServletOutputStream.class);
        when(request.getParameter("contentLength")).thenReturn(null);
        when(response.getOutputStream()).thenReturn(output);
        servlet.doGet(request, response);
        assertEquals(0, output.toString().length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_BXVR2() throws ServletException, IOException {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getParameter("contentLength")).thenThrow(NumberFormatException.class);
        try {
            servlet.doGet(request, response);
        } catch (NumberFormatException e) {
            assertEquals("For input string: \"null\"", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_fid2() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        pingservletsetcontentlength = new PingServletSetContentLength();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingservletsetcontentlength.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).getOutputStream();
    }
}