/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
    private int rndInt(int max) {
        return 0; // Placeholder return value
    }
    private static final int MAX_QUOTES = 100;
    private static final int QUOTES_PER_PAGE = 10;

    private String rndUserID() {
        return "random user id";
    }

    private String nextUserID() {
        return "next user id";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessModeTest_returnsMaxInt_lsrT4() {
        int expectedAccessMode = Integer.MAX_VALUE;
        int actualAccessMode = TradeConfig.getAccessMode();
        org.junit.jupiter.api.Assertions.assertEquals(expectedAccessMode, actualAccessMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessModeTest_returnsMinInt_rqjW5() {
        int expectedAccessMode = Integer.MIN_VALUE;
        int actualAccessMode = TradeConfig.getAccessMode();
        org.junit.jupiter.api.Assertions.assertEquals(expectedAccessMode, actualAccessMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_rpaT0() {
        String[] actual = TradeConfig.getRunTimeModeNames();
        String[] expected = {"Full EJB3", "mode2", "mode3"}; // Replace with actual expected values
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_Spvk0() {
        assertEquals("15 Oak St.", TradeConfig.rndAddress());
    }

    @Test
    @Timeout(value = 2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIncrementScenarioCount_spNR0() {
        TradeConfig.incrementScenarioCount();
        assertEquals(1, TradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_lRTK4() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = Integer.MAX_VALUE; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_Pajb5() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = Integer.MIN_VALUE; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMAX_HOLDINGS_invalidInput_throwsException_QRgH1() {
        int invalidInput = -1;
        org.junit.jupiter.api.Assertions.assertThrows(IllegalArgumentException.class, () -> {
            TradeConfig.setMAX_HOLDINGS(invalidInput);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndPrice_GRJB0() {
        assertEquals(84.0f, TradeConfig.rndPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getScenarioAction_notNewUser_returnsAction_nNAt1() {
        char result = TradeConfig.getScenarioAction(false);
        assertFalse(Arrays.asList('b', 's', 'c', 'p', 'v').contains(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_rbRN0() {
        String expectedUserID = "uid:101";
        String actualUserID = TradeConfig.nextUserID();
        assertEquals(expectedUserID, actualUserID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTESWithNegativeValue_VFDa1() {
        TradeConfig.setMAX_QUOTES(-1 - 10);
        assertEquals(-10, TradeConfig.getMAX_QUOTES());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getUpdateQuotePrices_ReturnFalse_WhenUpdateQuotePricesIsCalled_qgGM1() {
        boolean expected = false;
        boolean actual = TradeConfig.getUpdateQuotePrices();
        assert actual == expected;
    }

    @Test
    @Timeout(value = 100, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getWebInterfaceTest3_FXEl3() {
        int expected = TradeConfig.getWebInterface();
        int actual = 10000;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 2147483647, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getWebInterfaceTest5_CJbu5() {
        int expected = TradeConfig.getWebInterface();
        int actual = Integer.MAX_VALUE;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandom_Tzos1() {
        double result = TradeConfig.random();
        assertTrue(result >= 0.0 && result < 0.5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndSymbols_withOneSymbol_returnsCorrectString_EVqj0() {
        int num_symbols = 1;
        String expected = "s:" + rndInt(MAX_QUOTES - 1);
        assertEquals(expected, TradeConfig.rndSymbols());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndSymbols_withThreeSymbols_returnsCorrectString_mZnL1() {
        int num_symbols = 3;
        String expected = "s:" + rndInt(MAX_QUOTES - 1) + ",s:" + rndInt(MAX_QUOTES - 1) + ",s:" + rndInt(MAX_QUOTES - 1);
        assertEquals(expected, TradeConfig.rndSymbols());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndSymbols_withMaxSymbols_returnsCorrectString_lFKL2() {
        int num_symbols = QUOTES_PER_PAGE;
        String expected = "";
        for (int i = 0; i <= num_symbols; i++) {
            expected += "s:" + rndInt(MAX_QUOTES - 1);
            if (i < num_symbols) {
                expected += ",";
            }
        }
        assertEquals(expected, TradeConfig.rndSymbols());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_oWEq0() {
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        BigDecimal expected = new BigDecimal("1.06");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserIDWhenRandomUser_OTVP0() {
        boolean RND_USER = true;
        String expectedUserID = rndUserID();
        String actualUserID = TradeConfig.getUserID();
        assertEquals(expectedUserID, actualUserID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserIDWhenNotRandomUser_Uvzs1() {
        boolean RND_USER = false;
        String expectedUserID = nextUserID();
        String actualUserID = TradeConfig.getUserID();
        assertEquals(expectedUserID, actualUserID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioCount_8_WTrz7() {
        assertEquals(5, TradeConfig.getScenarioCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_fDOE0() {
        String actual = TradeConfig.rndCreditCard();
        assertEquals("37-649-595-933", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBigDecimal_agoz0() {
        float f = 100.0f;
        BigDecimal expected = new BigDecimal(Math.random() * f).setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal actual = TradeConfig.rndBigDecimal(f);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBigDecimalWithNegativeFloat_mYQn1() {
        float f = -100.0f;
        BigDecimal expected = new BigDecimal(Math.random() * f).setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal actual = TradeConfig.rndBigDecimal(f);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioMixes_YxZx0_BnPA0() {
        int[][] expected = {{355, 28}};
        int[][] actual = TradeConfig.getScenarioMixes();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1000000, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getWebInterfaceTest9_VaFs9_RiBW0() {
        int expected = TradeConfig.getWebInterface();
        int actual = Integer.parseInt(TradeConfig.rndBalance());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeNames_lLEM0_HWYy0() {
        String[] expected = {"FIFO", "LIFO"};
        String[] actual = TradeConfig.getOrderProcessingModeNames();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_gExf1_fid1() {
        int i = 0;
        float result = TradeConfig.rndFloat(i);
        assertTrue(result >= 0 && result < i);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_COxU2_fid1() {
        int i = -100;
        float result = TradeConfig.rndFloat(i);
        assertTrue(result >= 0 && result < i);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessModeTest_returnsNegativeOne_KRls3_fid1() {
        int expectedAccessMode = -1;
        int actualAccessMode = TradeConfig.getAccessMode();
        org.junit.jupiter.api.Assertions.assertEquals(expectedAccessMode, actualAccessMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessModeTest_returnsRandomInt_JJCr6_fid1() {
        int expectedAccessMode = 42; // Replace with a random value
        int actualAccessMode = TradeConfig.getAccessMode();
        org.junit.jupiter.api.Assertions.assertEquals(expectedAccessMode, actualAccessMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessModeTest_returnsNegativeRandomInt_MPGZ7_fid1() {
        int expectedAccessMode = -42; // Replace with a random negative value
        int actualAccessMode = TradeConfig.getAccessMode();
        org.junit.jupiter.api.Assertions.assertEquals(expectedAccessMode, actualAccessMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getAccessModeTest_returnsNegativeOne_whenTradeConfigIsCreated_LvxY10_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expectedAccessMode = -1;
        int actualAccessMode = tradeConfig.getAccessMode();
        org.junit.jupiter.api.Assertions.assertEquals(expectedAccessMode, actualAccessMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_rpaT0_fid1() {
        String[] actual = TradeConfig.getRunTimeModeNames();
        String[] expected = {"mode1", "mode2", "mode3"}; // Replace with actual expected values
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_Spvk0_fid1() {
        assertEquals("1000 Oak St.", TradeConfig.rndAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_PuDG0_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 100; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_YpMk1_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 200; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_njHu2_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 0; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_MrGS3_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = -1; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_APWS6_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 1000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_Azoe7_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 10000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_ZnLc8_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 100000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_OFFU9_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 1000000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_pTDo10_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 10000000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_USERS_VYvR11_fid1() {
        int actual = TradeConfig.getMAX_USERS();
        int expected = 100000000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_QUOTES_PQfG0() {
        assertEquals(0, TradeConfig.getMAX_QUOTES());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_Nlgq0_fid1() {
        assertEquals(1.0f, TradeConfig.rndQuantity(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDisplayOrderAlerts_gktI3_fid1() {
        boolean expected = false;
        boolean actual = TradeConfig.getDisplayOrderAlerts();
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndPrice_GRJB0_fid1() {
        assertEquals(1.0f, TradeConfig.rndPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_HOLDINGS_QTtW0() {
        assertEquals(0, TradeConfig.getMAX_HOLDINGS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getScenarioAction_notNewUser_returnsAction_nNAt1_fid1() {
        char result = TradeConfig.getScenarioAction(false);
        assertTrue(Arrays.asList('b', 's', 'c', 'p', 'v').contains(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_rbRN0_fid1() {
        String expectedUserID = "uid:0";
        String actualUserID = TradeConfig.nextUserID();
        assertEquals(expectedUserID, actualUserID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTESWithNegativeValue_VFDa1_fid1() {
        TradeConfig.setMAX_QUOTES(-10);
        assertEquals(0, TradeConfig.getMAX_QUOTES());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBoolean_xduH0() {
        assertTrue(TradeConfig.rndBoolean());
        assertFalse(TradeConfig.rndBoolean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getPublishQuotePriceChange_false_fUqb1_fid1() {
        boolean expected = false;
        boolean actual = TradeConfig.getPublishQuotePriceChange();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getWebInterfaceTest2_qQRV2_fid1() {
        int expected = TradeConfig.getWebInterface();
        int actual = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getWebInterfaceTest3_FXEl3_fid1() {
        int expected = TradeConfig.getWebInterface();
        int actual = 100;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_oWEq0_fid1() {
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        BigDecimal expected = new BigDecimal("1.0");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_fDOE0_fid1() {
        String actual = TradeConfig.rndCreditCard();
        assertEquals("1-1000-1000-1000", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_QYyr2_fid1() {
        int expected = -1; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_vFbE3_fid1() {
        int expected = Integer.MAX_VALUE; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_sZqf4_fid1() {
        int expected = Integer.MIN_VALUE; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_najT5_fid1() {
        int expected = 100; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_FOTy6_fid1() {
        int expected = -100; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_pwDX7_fid1() {
        int expected = 1000; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_QIXJ8_fid1() {
        int expected = -1000; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_KazO9_fid1() {
        int expected = 10000; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getRunTimeMode_returnsCorrectValue_yLsc10_fid1() {
        int expected = -10000; // Replace with the expected value
        int actual = TradeConfig.getRunTimeMode();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryIntervalTest_myjF0_vvNo0_fid3() {
        int expected = 10;
        int actual = TradeConfig.getMarketSummaryInterval();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserIDWithMaxUsers_RKWv1_jaqW0_fid3() {
        String expectedUserID = "uid:0";
        for (int i = 0; i < 100; i++) {
            TradeConfig.nextUserID();
        }
        String actualUserID = TradeConfig.nextUserID();
        assertEquals(expectedUserID, actualUserID);
    }
}