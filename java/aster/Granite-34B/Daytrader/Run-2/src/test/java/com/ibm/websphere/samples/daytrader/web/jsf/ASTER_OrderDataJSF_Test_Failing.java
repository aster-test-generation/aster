/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataJSF_Test_Failing {
    private TradeServices tradeAction;
    private ExternalContext context;
    OrderDataJSF orderdatajsf;
    HttpSession httpsession;
    ExternalContext externalcontext;
    private OrderData orderData;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrder_VUIy0() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        orderDataJSF.getAllOrder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrder2_UASd1() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        ArrayList<Object> orderDataBeans = new ArrayList<Object>();
        orderDataJSF.getAllOrder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrder3_Yatl2() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        ArrayList<Object> orderDataBeans = new ArrayList<Object>();
        orderDataBeans.add(new OrderDataBean());
        orderDataJSF.getAllOrder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithNullParameter_XyTB4() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        assertNotNull(allOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrder_VUIy0_fid1() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(Mockito.mock(Instance.class));
        orderDataJSF.getAllOrder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllOrdersWithNullParameter_XyTB4_fid1() {
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        OrderData[] allOrders = orderDataJSF.getAllOrders();
        assertNotNull(allOrders);
        assertEquals(0, allOrders.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderDataWithNoSymbol_ZlGn1_WYfm0() {
        OrderData orderData = new OrderData(1, "status", new java.sql.Date(System.currentTimeMillis()), new java.sql.Date(System.currentTimeMillis()), new BigDecimal(100), "type", 100, null, new BigDecimal(10));
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData, orderDataJSF.getOrderData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderDataWithNoPrice_fcUK2_EyFi0() {
        OrderData orderData = new OrderData(1, "status", new java.sql.Date(System.currentTimeMillis()), new java.sql.Date(System.currentTimeMillis()), new BigDecimal(100), "type", 100, "symbol", null);
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        orderDataJSF.setOrderData(orderData);
        BigDecimal expected = new BigDecimal(100);
        BigDecimal actual = orderDataJSF.getOrderData().getPrice();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderDataWithNoOrderStatus_fxRX4_TJFW0() {
        OrderData orderData = new OrderData(1, null, new java.sql.Date(System.currentTimeMillis()), new java.sql.Date(System.currentTimeMillis()), new BigDecimal(100), "type", 100, "symbol", new BigDecimal(10));
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData, orderDataJSF.getOrderData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderDataWithNoQuantity_vTUK6_cqPA0() {
        OrderData orderData = new OrderData(1, "status", new java.sql.Date(System.currentTimeMillis()), new java.sql.Date(System.currentTimeMillis()), new BigDecimal(100), "type", 0, "symbol", new BigDecimal(10));
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData, orderDataJSF.getOrderData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderDataWithNoOpenDate_hsVp8_MWti0() {
        OrderData orderData = new OrderData(1, "status", null, new java.sql.Date(System.currentTimeMillis()), new BigDecimal(100), "type", 0, "symbol", new BigDecimal(10));
        OrderDataJSF orderDataJSF = new OrderDataJSF(Mockito.mock(Instance.class));
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData, orderDataJSF.getOrderData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderDataWithNoPrice_fcUK2_EyFi0_fid2() {
        OrderData orderData = new OrderData(1, "status", new java.sql.Date(System.currentTimeMillis()), new java.sql.Date(System.currentTimeMillis()), new BigDecimal(100), "type", 100, "symbol", null);
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData, orderDataJSF.getOrderData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderDataWithNoOpenDate_hsVp8_MWti0_fid2() {
        OrderData orderData = new OrderData(1, "status", null, new java.sql.Date(System.currentTimeMillis()), new BigDecimal(100), "type", 0, "symbol", new BigDecimal(10));
        OrderDataJSF orderDataJSF = new OrderDataJSF(null);
        orderDataJSF.setOrderData(orderData);
        assertEquals(orderData, orderDataJSF.getOrderData());
    }
}