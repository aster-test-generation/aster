/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.jaxrs;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteResource_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost_HiiO0() {
        QuoteResource resource = new QuoteResource();
        List<QuoteDataBean> result = resource.quotesPost("symbols");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithValidSymbols_YaVZ0_1() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("AAPL, IBM");
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithValidSymbols_YaVZ0_0() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("AAPL, IBM");
        assertEquals(0, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithInvalidSymbols_BEfW1_1() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("AAPL, IBM,invalid");
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithInvalidSymbols_BEfW1_0() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("AAPL, IBM,invalid");
        assertEquals(0, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithNoSymbols_zgpl2_1() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("");
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithNoSymbols_zgpl2_2() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("");
        assertEquals(0, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithNullSymbols_kCHL3_1() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet(null);
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithNullSymbols_kCHL3_2() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet(null);
        assertEquals(0, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithSingleSymbol_Avwa4_1() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("AAPL");
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithSingleSymbol_Avwa4_2() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("AAPL");
        assertEquals(1, quotes.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithDuplicateSymbols_eUnb5_1() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("AAPL,AAPL");
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithDuplicateSymbols_eUnb5_2() {
        QuoteResource quoteResource = new QuoteResource();
        List<QuoteDataBean> quotes = quoteResource.quotesGet("AAPL,AAPL");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithMaxSymbols_NMku6_1() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "";
        for (int i = 0; i < 100; i++) {
            symbols += "AAPL,";
        }
        List<QuoteDataBean> quotes = quoteResource.quotesGet(symbols);
        assertNotNull(quotes);
    }
}