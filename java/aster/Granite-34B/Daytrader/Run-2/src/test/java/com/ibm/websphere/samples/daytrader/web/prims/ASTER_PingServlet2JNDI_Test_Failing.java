/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2JNDI_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet2JNDI pingservlet2jndi;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingservlet2jndi = new PingServlet2JNDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        pingservlet2jndi.doPost(request, httpservletresponse);
        verify(httpservletresponse, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_vXfV3() throws ServletException, IOException {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_NYji0() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals("Basic JNDI look up of a JDBC DataSource", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_null_bhdq1() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_empty_Gqmf2() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_specialChar_WffU4() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals("!@#$%^&*()_+", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_numbers_UplD5() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals("1234567890", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_mix_wMIQ6() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals("!@#$%^&*()_+1234567890", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_unicode_fGoX7() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String result = servlet.getServletInfo();
        assertEquals("Hello, , ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_optK0_UzjW0() throws ServletException, IOException {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_bndY1_gDaU0() throws ServletException, IOException {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_IQzS2_RnWp0() throws ServletException, IOException {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_EYFX0_WJee0() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        try {
            servlet.doGet(req, res);
        } catch (ServletException | IOException e) {
            fail("Exception caught: " + e.toString());
        }
    }
}