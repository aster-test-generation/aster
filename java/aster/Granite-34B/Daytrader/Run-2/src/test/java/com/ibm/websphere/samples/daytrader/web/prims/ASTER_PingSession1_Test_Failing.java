/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession1_Test_Failing {
    private static String initTime;
    private static int hitCount;
    private static int count;
    PingSession1 pingsession1;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession1 = new PingSession1();
        ServletConfig servletConfig = mock(ServletConfig.class);
        pingsession1.init(servletConfig);
        verify(servletConfig, times(1)).getInitParameter(Mockito.anyString());
        assertEquals(0, count);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession1 = new PingSession1();
        ServletConfig servletConfig = mock(ServletConfig.class);
        pingsession1.init(servletConfig);
        verify(servletConfig, times(1)).getInitParameter(Mockito.anyString());
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_3() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession1 = new PingSession1();
        ServletConfig servletConfig = mock(ServletConfig.class);
        pingsession1.init(servletConfig);
        verify(servletConfig, times(1)).getInitParameter(Mockito.anyString());
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_orBp3() throws ServletException, IOException {
        PingSession1 pingSession1 = new PingSession1();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        pingSession1.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingsession1 = new PingSession1();
        initTime = "initTime";
        hitCount = 0;
        count = 1;
        when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
        when(httpsession.getAttribute(anyString())).thenReturn(new Integer(count++));
        when(httpservletresponse.getWriter()).thenReturn(mock(PrintWriter.class));
        pingsession1.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType(anyString());
        verify(httpservletresponse, times(1)).setHeader(anyString(), anyString());
        verify(httpservletresponse, times(1)).getWriter();
        verify(httpservletresponse, times(1)).sendError(anyInt(), anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_kOsD0() throws ServletException, IOException {
        PingSession1 pingSession1 = new PingSession1();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        pingSession1.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_XNcf1() throws ServletException, IOException {
        PingSession1 pingSession1 = new PingSession1();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_ondB0_XZIo0() throws ServletException, IOException {
        PingSession1 pingSession1 = new PingSession1();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingSession1.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_GjIX1_MTaF0() throws ServletException, IOException {
        PingSession1 pingSession1 = new PingSession1();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingSession1.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_msDw2_xKsr0() throws ServletException, IOException {
        PingSession1 pingSession1 = new PingSession1();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        pingSession1.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_fid2() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingsession1 = new PingSession1();
        initTime = "initTime";
        hitCount = 0;
        count = 0;
        when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
        when(httpsession.getAttribute(anyString())).thenReturn(new Integer(count++));
        when(httpservletresponse.getWriter()).thenReturn(mock(PrintWriter.class));
        pingsession1.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType(anyString());
        verify(httpservletresponse, times(1)).setHeader(anyString(), anyString());
        verify(httpservletresponse, times(1)).getWriter();
        verify(httpservletresponse, times(1)).sendError(anyInt(), anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession1 = new PingSession1();
        ServletConfig servletConfig = mock(ServletConfig.class);
        pingsession1.init(servletConfig);
        verify(servletConfig, times(1)).getInitParameter(Mockito.anyString());
        assertEquals(0, count);
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }
}