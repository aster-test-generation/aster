/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

public class Aster_TradeSLSBBean_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAllQuotesTest1_isec0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest1_bJnF0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrdersTest1_elwP0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser1";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrdersTest2_mLgr1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser2";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrdersTest3_wWjF2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser3";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_BuOD0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithZeroOrderID_EItq1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 0;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithFalseTwoPhase_eXaf2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = false;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_lVTL0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("12345");
        assertEquals(accountDataBean.getProfileID(), "12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_MQZe1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("12345");
        assertEquals(accountDataBean.getHoldings().size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_HFUz2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("12345");
        assertEquals(accountDataBean.getOrders().size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_WTHI3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("12345");
        assertEquals(accountDataBean.getLoginCount(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_kEnv0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100.00));
        Assertions.assertEquals("symbol", quoteDataBean.getSymbol());
        Assertions.assertEquals("companyName", quoteDataBean.getCompanyName());
        Assertions.assertEquals(new BigDecimal(100.00), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_Eate1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(0.00));
        Assertions.assertEquals("symbol", quoteDataBean.getSymbol());
        Assertions.assertEquals("companyName", quoteDataBean.getCompanyName());
        Assertions.assertEquals(new BigDecimal(0.00), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullPrice_SfOe2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", null);
        Assertions.assertEquals("symbol", quoteDataBean.getSymbol());
        Assertions.assertEquals("companyName", quoteDataBean.getCompanyName());
        Assertions.assertEquals(null, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrders_test1_rElX0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<OrderDataBean> results = tradeSLSBBean.getClosedOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_bvgK0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin1_KzxB0() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid1", "uid1");
        Assertions.assertEquals(accountDataBean.getProfileID(), "uid1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin2_GTet1() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid2", "uid2");
        Assertions.assertEquals(accountDataBean.getProfileID(), "uid2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin3_dMpB2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid3", "uid3");
        Assertions.assertEquals(accountDataBean.getProfileID(), "uid3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin4_mdKB3() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid4", "uid4");
        Assertions.assertEquals(accountDataBean.getProfileID(), "uid4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin5_ZQJC4() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid5", "uid5");
        Assertions.assertEquals(accountDataBean.getProfileID(), "uid5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin6_mnBz5() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid6", "uid6");
        Assertions.assertEquals(accountDataBean.getProfileID(), "uid6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin7_jBRh6() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid7", "uid7");
        Assertions.assertEquals(accountDataBean.getProfileID(), "uid7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder1_QfXJ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_nkSY1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_muHk2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(3, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder4_JgZd3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(4, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder5_vHVU4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(5, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder6_aktv5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(6, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder7_MTSQ6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(7, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder8_uImm7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(8, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder9_TUiT8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(9, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder10_SEFR9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(10, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest1_lxKw0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest2_Piib1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser2";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest3_vLkC2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser3";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest4_OKGC3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser4";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest5_BUhP4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser5";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest6_xCeJ5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser6";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest7_tMCk6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser7";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest8_Vxfy7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser8";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest9_jFyp8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser9";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest10_OSyh9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser10";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHolding_0_KJNv0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer holdingID = new Integer(0);
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(holdingID);
        Assertions.assertEquals(null, holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHolding_1_RvFZ1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer holdingID = new Integer(1);
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(holdingID);
        Assertions.assertEquals(null, holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHolding_2_JDBp2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer holdingID = new Integer(2);
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(holdingID);
        Assertions.assertEquals(null, holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHolding_3_WwCS3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer holdingID = new Integer(3);
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(holdingID);
        Assertions.assertEquals(null, holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getHolding_4_JOMm4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer holdingID = new Integer(4);
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(holdingID);
        Assertions.assertEquals(null, holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange1_ebfR0() {
        QuoteDataBean quote = new QuoteDataBean("S1", "C1", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 100.0);
        BigDecimal oldPrice = new BigDecimal(10.0);
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange2_JDdW1() {
        QuoteDataBean quote = new QuoteDataBean("S2", "C2", 200.0, new BigDecimal(20.0), new BigDecimal(20.0), new BigDecimal(20.0), new BigDecimal(20.0), 200.0);
        BigDecimal oldPrice = new BigDecimal(20.0);
        BigDecimal changeFactor = new BigDecimal(20.0);
        double sharesTraded = 200.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange3_apIQ2() {
        QuoteDataBean quote = new QuoteDataBean("S3", "C3", 300.0, new BigDecimal(30.0), new BigDecimal(30.0), new BigDecimal(30.0), new BigDecimal(30.0), 300.0);
        BigDecimal oldPrice = new BigDecimal(30.0);
        BigDecimal changeFactor = new BigDecimal(30.0);
        double sharesTraded = 300.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange4_BSaY3() {
        QuoteDataBean quote = new QuoteDataBean("S4", "C4", 400.0, new BigDecimal(40.0), new BigDecimal(40.0), new BigDecimal(40.0), new BigDecimal(40.0), 400.0);
        BigDecimal oldPrice = new BigDecimal(40.0);
        BigDecimal changeFactor = new BigDecimal(40.0);
        double sharesTraded = 400.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange5_wiZE4() {
        QuoteDataBean quote = new QuoteDataBean("S5", "C5", 500.0, new BigDecimal(50.0), new BigDecimal(50.0), new BigDecimal(50.0), new BigDecimal(50.0), 500.0);
        BigDecimal oldPrice = new BigDecimal(50.0);
        BigDecimal changeFactor = new BigDecimal(50.0);
        double sharesTraded = 500.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange6_ihrY5() {
        QuoteDataBean quote = new QuoteDataBean("S6", "C6", 600.0, new BigDecimal(60.0), new BigDecimal(60.0), new BigDecimal(60.0), new BigDecimal(60.0), 600.0);
        BigDecimal oldPrice = new BigDecimal(60.0);
        BigDecimal changeFactor = new BigDecimal(60.0);
        double sharesTraded = 600.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals("open", order.getOrderStatus());
        Assertions.assertEquals(orderType, order.getOrderType());
        Assertions.assertEquals(quantity, order.getQuantity(), 0.0);
        Assertions.assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
        Assertions.assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
        Assertions.assertEquals(account, order.getAccount());
        Assertions.assertEquals(quote, order.getQuote());
        Assertions.assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals("open", order.getOrderStatus());
        Assertions.assertEquals(orderType, order.getOrderType());
        Assertions.assertEquals(quantity, order.getQuantity(), 0.0);
        Assertions.assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
        Assertions.assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
        Assertions.assertEquals(account, order.getAccount());
        Assertions.assertEquals(quote, order.getQuote());
        Assertions.assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals("open", order.getOrderStatus());
        Assertions.assertEquals(orderType, order.getOrderType());
        Assertions.assertEquals(quantity, order.getQuantity(), 0.0);
        Assertions.assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
        Assertions.assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
        Assertions.assertEquals(account, order.getAccount());
        Assertions.assertEquals(quote, order.getQuote());
        Assertions.assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals("open", order.getOrderStatus());
        Assertions.assertEquals(orderType, order.getOrderType());
        Assertions.assertEquals(quantity, order.getQuantity(), 0.0);
        Assertions.assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
        Assertions.assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
        Assertions.assertEquals(account, order.getAccount());
        Assertions.assertEquals(quote, order.getQuote());
        Assertions.assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryTest_RbCQ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryNullTest_ulkX1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryVolumeTest_zcyE2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertTrue(marketSummaryDataBean.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryGainPercentTest_aUNv3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertTrue(marketSummaryDataBean.getGainPercent().compareTo(new BigDecimal(0)) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryOpenTSIATest_Ocwd4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertTrue(marketSummaryDataBean.getOpenTSIA().compareTo(new BigDecimal(0)) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryTSIATest_ZqGW5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertTrue(marketSummaryDataBean.getTSIA().compareTo(new BigDecimal(0)) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummarySummaryDateTest_Nhgf6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryTopGainersTest_quoT7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryTopLosersTest_ldXp8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryRandomInstanceNullTest_mdQz10() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryRandomInstanceGainPercentTest_BCeg12() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertTrue(marketSummaryDataBean.getGainPercent().compareTo(new BigDecimal(0)) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_WzLH0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid1", "pass1", "name1", "address1", "email1", "cc1", new BigDecimal(1000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_Whvu1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid2", "pass2", "name2", "address2", "email2", "cc2", new BigDecimal(2000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister3_AzgS2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid3", "pass3", "name3", "address3", "email3", "cc3", new BigDecimal(3000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister4_CMyf3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid4", "pass4", "name4", "address4", "email4", "cc4", new BigDecimal(4000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister5_LKLa4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid5", "pass5", "name5", "address5", "email5", "cc5", new BigDecimal(5000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister6_qAqc5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid6", "pass6", "name6", "address6", "email6", "cc6", new BigDecimal(6000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister7_cfHa6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid7", "pass7", "name7", "address7", "email7", "cc7", new BigDecimal(7000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister8_XZvc7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid8", "pass8", "name8", "address8", "email8", "cc8", new BigDecimal(8000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister9_xgyv8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid9", "pass9", "name9", "address9", "email9", "cc9", new BigDecimal(9000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister10_dgaO9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid10", "pass10", "name10", "address10", "email10", "cc10", new BigDecimal(10000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister11_IyNZ10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid11", "pass11", "name11", "address11", "email11", "cc11", new BigDecimal(11000.00));
        Assertions.assertEquals(null, account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getCompanyName(), "");
        Assertions.assertEquals(quoteDataBean.getPrice(), new BigDecimal(0));
        Assertions.assertEquals(quoteDataBean.getOpen(), new BigDecimal(0));
        Assertions.assertEquals(quoteDataBean.getLow(), new BigDecimal(0));
        Assertions.assertEquals(quoteDataBean.getChange(), 0.0, 0.0);
        Assertions.assertEquals(quoteDataBean.getHigh(), new BigDecimal(0));
        Assertions.assertEquals(quoteDataBean.getSymbol(), "");
        Assertions.assertEquals(quoteDataBean.getVolume(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getCompanyName(), "");
        Assertions.assertEquals(quoteDataBean.getPrice(), new BigDecimal(0));
        Assertions.assertEquals(quoteDataBean.getOpen(), new BigDecimal(0));
        Assertions.assertEquals(quoteDataBean.getLow(), new BigDecimal(0));
        Assertions.assertEquals(quoteDataBean.getChange(), 0.0, 0.0);
        Assertions.assertEquals(quoteDataBean.getHigh(), new BigDecimal(0));
        Assertions.assertEquals(quoteDataBean.getSymbol(), "");
        Assertions.assertEquals(quoteDataBean.getVolume(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile1_dSZH0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("1");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile2_YCsI1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("2");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile3_kaEI2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("3");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile4_CebE3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("4");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile5_Uwom4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("5");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile6_WqXc5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("6");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile7_qOfn6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("7");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest1_ApOV0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        String symbol = "s1";
        double quantity = 1.0;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest2_kcZT1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid2";
        String symbol = "s2";
        double quantity = 1.0;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest3_QZXA2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid3";
        String symbol = "s3";
        double quantity = 1.0;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest4_ynFI3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid4";
        String symbol = "s4";
        double quantity = 2.1;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest5_Vpyt4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid5";
        String symbol = "s5";
        double quantity = 3.2;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest6_RPxq5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid6";
        String symbol = "s6";
        double quantity = 4.3;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest7_qsGK6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid7";
        String symbol = "s7";
        double quantity = 5.4;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest8_BcMO7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid8";
        String symbol = "s8";
        double quantity = 6.5;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest9_sAYG8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid9";
        String symbol = "s9";
        double quantity = 7.6;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest10_vdsh9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid10";
        String symbol = "s10";
        double quantity = 8.7;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest11_YXRn10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid11";
        String symbol = "s11";
        double quantity = 9.8;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_001_yNZE0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getOrderStatus(), "cancelled");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_002_kRdC1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getPrice(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_003_KwUv2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getHolding().getPurchaseDate(), new java.sql.Timestamp(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_004_neUv3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_005_vHOW4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getOrderFee(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_006_poDF5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getQuote().getPrice(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_007_xLPK6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getAccount().getBalance(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_008_LmbH7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getCompletionDate(), new java.sql.Timestamp(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_009_rbOn8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getOpenDate(), new java.sql.Timestamp(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_010_SzVO9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getCompletionDate(), new java.sql.Timestamp(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_kEnv0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100.00));
        Assertions.assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_kEnv0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100.00));
        Assertions.assertEquals("companyName", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_kEnv0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100.00));
        Assertions.assertEquals(new BigDecimal(100.00), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_Eate1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(0.00));
        Assertions.assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_Eate1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(0.00));
        Assertions.assertEquals("companyName", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_Eate1_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(0.00));
        Assertions.assertEquals(new BigDecimal(0.00), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullPrice_SfOe2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", null);
        Assertions.assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullPrice_SfOe2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", null);
        Assertions.assertEquals("companyName", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullPrice_SfOe2_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", null);
        Assertions.assertEquals(null, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(orderType, order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quantity, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(account, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest1_vuHM0_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(orderType, order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quantity, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(account, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(orderType, order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quantity, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(account, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest3_eXJM2_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 300.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(orderType, order.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quantity, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(account, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest4_squY3_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 400.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getCompanyName(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getPrice(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getOpen(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getLow(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getChange(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getHigh(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getSymbol(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getVolume(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getCompanyName(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getPrice(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getOpen(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getLow(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getChange(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getHigh(), new BigDecimal(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getSymbol(), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume2_utMg1_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "symbol";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertEquals(quoteDataBean.getVolume(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_lVTL0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("12345");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_MQZe1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("12345");
        Assertions.assertEquals(0, accountDataBean.getHoldings().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_HFUz2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("12345");
        Assertions.assertEquals(0, accountDataBean.getOrders().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_WTHI3_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("12345");
        Assertions.assertEquals(0, accountDataBean.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_kEnv0_1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(100.00));
        Assertions.assertNotNull(quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithZeroPrice_Eate1_1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(0.00));
        Assertions.assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrders_test1_rElX0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<OrderDataBean> results = tradeSLSBBean.getClosedOrders(userID);
        // Add assertions to validate the results
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_bvgK0_fid2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        OrderDataBean orderDataBean = new OrderDataBean();
        when(future.get()).thenReturn(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin2_GTet1_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid2", "uid2");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin4_mdKB3_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid4", "uid4");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin5_ZQJC4_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid5", "uid5");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin6_mnBz5_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid6", "uid6");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin7_jBRh6_fid2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.login("uid7", "uid7");
        Assertions.assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_muHk2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(3, true);
        // Add assertions here to validate the behavior of queueOrder method
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder5_vHVU4_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(5, true);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder6_aktv5_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(6, false);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder7_MTSQ6_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(7, true);
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder8_uImm7_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(8, false);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest7_tMCk6_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser7";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
        if (holdings != null) {
            for (HoldingDataBean holding : holdings) {
                assertNotNull(holding.getQuantity());
                assertNotNull(holding.getQuoteID());
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest8_Vxfy7_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser8";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
        assertEquals(holdings.size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void createOrderTest2_cXBA1_3_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "SELL";
        double quantity = 200.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        Assertions.assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryOpenTSIATest_Ocwd4_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryTSIATest_ZqGW5_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        BigDecimal expectedTSIA = new BigDecimal(0);
        assertTrue(marketSummaryDataBean.getTSIA().compareTo(expectedTSIA) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMarketSummaryRandomInstanceGainPercentTest_BCeg12_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertFalse(marketSummaryDataBean.getGainPercent().compareTo(new BigDecimal(0)) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_WzLH0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid1", "pass1", "name1", "address1", "email1", "cc1", new BigDecimal(1000.00));
        Assertions.assertEquals(new BigDecimal(1000.00), account.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_Whvu1_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid2", "pass2", "name2", "address2", "email2", "cc2", new BigDecimal(2000.00));
        Assertions.assertNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister10_dgaO9_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("uid10", "pass10", "name10", "address10", "email10", "cc10", new BigDecimal(10000.00));
        Assertions.assertNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_4_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertNull(quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_6_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        Assertions.assertNull(quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_xMtS0_8_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String symbol = "";
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        QuoteDataBean quoteDataBean = tradeSLSBBean.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        quoteDataBean.setVolume(0.0);
        Assertions.assertEquals(quoteDataBean.getVolume(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile3_kaEI2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("3");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        accountProfileDataBean = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile5_Uwom4_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
        accountProfileDataBean.setUserID("5");
        accountProfileDataBean.setPassword("password");
        accountProfileDataBean.setFullName("name");
        accountProfileDataBean.setAddress("address");
        accountProfileDataBean.setEmail("email");
        accountProfileDataBean.setCreditCard("creditCard");
        accountProfileDataBean = tradeSLSBBean.updateAccountProfile(accountProfileDataBean);
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest1_ApOV0_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        String symbol = "s1";
        double quantity = 1.0;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest5_Vpyt4_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid5";
        String symbol = "s5";
        double quantity = 3.2;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest6_RPxq5_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid6";
        String symbol = "s6";
        double quantity = 4.3;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest8_BcMO7_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid8";
        String symbol = "s8";
        double quantity = 6.5;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest10_vdsh9_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid10";
        String symbol = "s10";
        double quantity = 8.7;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertEquals(order.getPrice(), 10.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void buyTest11_YXRn10_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid11";
        String symbol = "s11";
        double quantity = 9.8;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        order.setOrderID(1111);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_003_KwUv2_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(new java.sql.Timestamp(0), order.getHolding().getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_004_neUv3_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(0.0, order.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_007_xLPK6_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(order.getAccount().getBalance(), new BigDecimal(0.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_009_rbOn8_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(new java.sql.Timestamp(0), order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_010_SzVO9_fid2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid";
        Integer holdingID = 1;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        Assertions.assertEquals(new java.sql.Timestamp(0), order.getCompletionDate());
    }
}