/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import java.io.IOException;
import java.sql.Connection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2DB_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingServlet2DB pingservlet2db;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    Connection connection;
    TradeDirect tradedirect;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithNullConfig_wJBr1() {
        PingServlet2DB servlet = new PingServlet2DB();
        try {
            servlet.init(null);
            fail("Expected ServletException");
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_hzOn0() {
        PingServlet2DB servlet = new PingServlet2DB();
        String expected = "Basic JDBC Read using a prepared statment, makes use of TradeJDBC class";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_NullInput_vYtg1() {
        PingServlet2DB servlet = new PingServlet2DB();
        String expected = null;
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_EmptyInput_ZZCO2() {
        PingServlet2DB servlet = new PingServlet2DB();
        String expected = "";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_Xhyj0() throws Exception {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
        assertEquals(200, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_OdwL2() throws Exception {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
        assertEquals(500, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_kEag0_GvSH0() {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            servlet.doPost(request, response);
        } catch (ServletException | IOException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_withNullRequest_scbk2_ZPuO0() {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            servlet.doPost(request, response);
        } catch (ServletException e) {
            fail("Unexpected exception: " + e.getMessage());
        } catch (IOException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_withNullResponse_yiuf3_ndFE0() {
        PingServlet2DB servlet = new PingServlet2DB();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        try {
            servlet.doPost(request, response);
            fail("Expected ServletException");
        } catch (ServletException e) {
        } catch (IOException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_MultipleInvocations_IUab7() {
        PingServlet2DB servlet = new PingServlet2DB();
        String expected = "Basic JDBC Read using a prepared statment, makes use of TradeJDBC class";
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
        assertEquals(expected, servlet.getServletInfo());
    }
}