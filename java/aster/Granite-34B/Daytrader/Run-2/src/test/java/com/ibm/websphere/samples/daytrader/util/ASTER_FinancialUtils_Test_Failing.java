/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintGainHTMLWithPositiveGain_PNNv0_BuVT0() {
        BigDecimal gain = new BigDecimal(100.0);
        String expected = "<FONT color=\"#009900\">100.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
        assertEquals(expected, FinancialUtils.printGainHTML(gain));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintGainPercentHTMLWithNegativeGain_newH0_vNJe0() {
        BigDecimal gain = new BigDecimal(-10.5);
        String htmlString = FinancialUtils.printGainPercentHTML(gain);
        assertEquals("(<B><FONT color=\"#ff0000\">-10.5%</FONT></B>)<IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    public void testPrintGainPercentHTMLWithPositiveGain_wcMP1_canS0() {
        BigDecimal gain = new BigDecimal(20.75);
        String htmlString = FinancialUtils.printGainPercentHTML(gain);
        assertEquals("<B><FONT color=\"#009900\">+20.75%</FONT></B><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeGainPercent_FxDb0() {
        BigDecimal currentBalance = new BigDecimal(100.0);
        BigDecimal openBalance = new BigDecimal(50.0);
        BigDecimal expected = new BigDecimal(100.0);
        BigDecimal actual = FinancialUtils.computeGainPercent(currentBalance, openBalance);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeGainPercentZeroOpenBalance_UUUi1_fzLi0() {
        BigDecimal currentBalance = new BigDecimal(100.0);
        BigDecimal openBalance = BigDecimal.ZERO;
        BigDecimal expected = BigDecimal.ZERO;
        BigDecimal actual = FinancialUtils.computeGainPercent(currentBalance, openBalance);
        assertEquals(expected, actual);
    }
}