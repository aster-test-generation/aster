/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_fJEg0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST", "Test Company", 1000.0, new BigDecimal("100.00"), new BigDecimal("90.00"), new BigDecimal("80.00"), new BigDecimal("110.00"), 10.0);
        String expectedHTML = "<BR>Quote Data for: TEST<LI> companyName: Test Company</LI>" + "<LI>      volume: 1000.0</LI>" + "<LI>       price: 100.0</LI>" + "<LI>        open1: 90.0</LI>" + "<LI>         low: 80.0</LI>" + "<LI>        high: 110.0</LI>" + "<LI>      change1: 10.0</LI>";
        assertEquals(expectedHTML, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTMLWithNoData_kpKK1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        String expectedHTML = "<BR>Quote Data for: <LI> companyName: </LI>" + "<LI>      volume: 0.0</LI>" + "<LI>       price: 0.0</LI>" + "<LI>        open1: 0.0</LI>" + "<LI>         low: 0.0</LI>" + "<LI>        high: 0.0</LI>" + "<LI>      change1: 0.0</LI>";
        assertEquals(expectedHTML, quoteDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToString_UhOS0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST");
        String expected = "\n\tQuote Data for: TEST\n\t\t companyName: null\n\t\t      volume: 0.0\n\t\t       price: 0.0\n\t\t        open1: 0.0\n\t\t         low: 0.0\n\t\t        high: 0.0\n\t\t      change1: 0.0";
        String actual = quoteDataBean.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLowDefaultConstructor_oCrs1_fid1() {
        QuoteDataBean bean = new QuoteDataBean();
        assertEquals(bean.getLow(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLowNull_GzXw2_fid1() {
        QuoteDataBean bean = new QuoteDataBean(null, null, 0.0, null, null, null, null, 0.0);
        assertEquals(bean.getLow(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithAllFields_nbUw1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("TEST", "Test Company", 1000.0, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(80.0), new BigDecimal(110.0), 10.0);
        String expected = "\n\tQuote Data for: TEST\n\t\t companyName: Test Company\n\t\t      volume: 1000.0\n\t\t       price: 100.0\n\t\t        open1: 90.0\n\t\t         low: 80.0\n\t\t        high: 110.0\n\t\t      change1: 10.0";
        String actual = quoteDataBean.toString();
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
}