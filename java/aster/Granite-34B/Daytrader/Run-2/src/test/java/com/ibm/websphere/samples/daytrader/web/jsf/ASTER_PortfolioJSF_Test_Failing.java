/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PortfolioJSF_Test_Failing {
    private Integer numberHoldings;
    private TradeServices tradeAction;
    private BigDecimal totalValue = new BigDecimal(0.0);
    private ArrayList<HoldingData> holdingDatas;
    private ExternalContext context;
    private BigDecimal totalGain = new BigDecimal(0.0);
    private BigDecimal totalBasis = new BigDecimal(0.0);
    PortfolioJSF portfoliojsf;
    HttpSession httpsession;
    ExternalContext externalcontext;
    private HtmlDataTable dataTable;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTable_ZQOW0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = new HtmlDataTable();
        portfolioJSF.setDataTable(dataTable);
        Assertions.assertEquals(dataTable, portfolioJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTableWithNull_QaJo1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = null;
        portfolioJSF.setDataTable(dataTable);
        Assertions.assertEquals(dataTable, portfolioJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTableWithNegativeRows_HfyV4() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = new HtmlDataTable();
        dataTable.setRows(-10);
        portfolioJSF.setDataTable(dataTable);
        Assertions.assertEquals(dataTable, portfolioJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTableWithZeroRows_AKZY6() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = new HtmlDataTable();
        dataTable.setRows(0);
        portfolioJSF.setDataTable(dataTable);
        Assertions.assertEquals(dataTable, portfolioJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue_oeVF0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(0);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue2_hBRd1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(1);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue3_Ngow2() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(2);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue4_CfQw3() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(3);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue5_kPSK4() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(4);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue6_KBqM5() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(5);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue7_xxTo6() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(6);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue8_zlLo7() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(7);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue9_dtwY8() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(8);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue10_xoeg9() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(9);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue11_krYm10() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(10);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue12_BPlU11() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(11);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue13_pHTp12() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(12);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue14_ZBZh13() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(13);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue15_gERL14() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(14);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalValue_bbUX0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        assertEquals(null, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_dvDg0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal openBalance = new BigDecimal(0);
        portfolioJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, portfolioJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_fJCg0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_qfrI1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_LhXL2() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_lYck3() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(50);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_iQkT4() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(1000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_lVQb5() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(200);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_cMXU6() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_fbFr7() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(500);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNumberHoldingsTest_LirO8() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setNumberHoldings(10000);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingDatas_zUin0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        ArrayList<HoldingData> holdingDatas = new ArrayList<>();
        portfolioJSF.setHoldingDatas(holdingDatas);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingDatas_NullArgument_jnDv1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        portfolioJSF.setHoldingDatas(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumOfCashHoldings10_RDfS10_fSwm0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        portfolioJSF.setTotalGainPercent(new BigDecimal(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest2_NprC1_LrHy0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest3_LJIU2_EudK0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest4_Pifl3_vKnc0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest5_vfly4_qfyB0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest6_ZvjL5_LcOA0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest9_pRUl8_FWlk0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 7);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest10_jZXA9_cKtt0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 8);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest11_HYKW10_hGaL0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 9);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest12_nRoP11_xZBL0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest13_QBtv12_kRys0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 11);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setTotalGainPercentTest14_Dolo13_PYTD0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        portfolioJSF.setTotalGainPercent(new BigDecimal(12));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNumberHoldingsTest15_aYoL14_dqBp0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        Integer result = portfolioJSF.getNumberHoldings();
        assertEquals(result, 13);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setTotalGainPercentTest17_YscF16_FVHS0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal bigDecimal = new BigDecimal(10);
        portfolioJSF.setTotalGainPercent(bigDecimal);
        BigDecimal result = portfolioJSF.getTotalGainPercent();
        assertEquals(result, bigDecimal);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercentHTML_dYQe0_ZRaL0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        String result = portfolioJSF.getTotalGainPercentHTML();
        assertEquals("result", "result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercentHTML_100PercentLineCoverage_kVMd1_ttFA0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        String result = portfolioJSF.getTotalGainPercentHTML();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercentHTML_100PercentBranchCoverage_qRpv2_auvM0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        String result = portfolioJSF.getTotalGainPercentHTML();
        if (result != null) {
            assertEquals("result", "result", result);
        } else {
            fail("Result should not be null");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGain1_pkdf1_Wrup0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalGain();
        BigDecimal expected = new BigDecimal(0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGain2_GvEV2_tRqd0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalGain();
        BigDecimal expected = new BigDecimal(100);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGain4_Gacp4_fdMk0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalGain();
        BigDecimal expected = new BigDecimal(10000);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGain6_ryhN6_nEGM0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalGain();
        BigDecimal expected = new BigDecimal(1000000);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGain9_LssU9_Nrdy0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalGain();
        BigDecimal expected = new BigDecimal(1000000000);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGain10_YBVJ10_wDzf0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalGain();
        BigDecimal expected = new BigDecimal(10000000000L);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGain12_SGlW12_eGcq0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalGain();
        BigDecimal expected = new BigDecimal(1000000000000L);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGain13_ZdXB13_FJoA0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalGain();
        BigDecimal expected = new BigDecimal(10000000000000L);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingDatasTest_tewC0_eiQo0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        ArrayList<HoldingData> actual = portfolioJSF.getHoldingDatas();
        ArrayList<HoldingData> expected = portfolioJSF.getHoldingDatas();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingDatasTest_1_nzji1_CZfo0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        ArrayList<HoldingData> actual = portfolioJSF.getHoldingDatas();
        ArrayList<HoldingData> expected = new ArrayList<HoldingData>();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingDatasTest_2_AvOd2_ZlCX0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        ArrayList<HoldingData> actual = portfolioJSF.getHoldingDatas();
        portfolioJSF.setHoldingDatas(new ArrayList<HoldingData>());
        ArrayList<HoldingData> expected = portfolioJSF.getHoldingDatas();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingDatasTest_3_ghzS3_kjiI0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        ArrayList<HoldingData> actual = portfolioJSF.getHoldingDatas();
        portfolioJSF.setHoldingDatas(new ArrayList<HoldingData>());
        ArrayList<HoldingData> expected = new ArrayList<HoldingData>();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalGain_egGG0_ZHDv0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGain = new BigDecimal(0);
        portfolioJSF.setTotalGain(totalGain);
        assertEquals(totalGain, portfolioJSF.getTotalGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalGainNull_WHHK1_OgaC0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGain = null;
        portfolioJSF.setTotalGain(totalGain);
        assertEquals(totalGain, portfolioJSF.getTotalGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_QPiA0_iNwg0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = portfolioJSF.getTotalBasis();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_1_wWvz1_vFsw0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(0);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_2_nZjG2_kdXo0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(100);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_3_ZQdV3_QBbp0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(1000);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_4_mLTp4_HwqT0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(10000);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_5_iuOc5_MMZV0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(100000);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_8_nXVK8_YCqj0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(100000000);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_9_sTOe9_HDRx0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(1000000000);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_10_AolK10_IbCa0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(10000000000L);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_13_Kobs13_Iuqj0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal actual = portfolioJSF.getTotalBasis();
        BigDecimal expected = new BigDecimal(10000000000000L);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingsTotal_tHXW0_KZyt0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal holdingsTotal = new BigDecimal(0);
        portfolioJSF.setHoldingsTotal(holdingsTotal);
        assertEquals(holdingsTotal, portfolioJSF.getHoldingsTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingsTotal2_CGUq1_kJXJ0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal holdingsTotal = new BigDecimal(100);
        portfolioJSF.setHoldingsTotal(holdingsTotal);
        assertEquals(holdingsTotal, portfolioJSF.getHoldingsTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingsTotal3_irlA2_XwVJ0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal holdingsTotal = new BigDecimal(1000);
        portfolioJSF.setHoldingsTotal(holdingsTotal);
        assertEquals(holdingsTotal, portfolioJSF.getHoldingsTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setTotalGainPercentTest_DmUP0_pouk0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = new BigDecimal(0);
        portfolioJSF.setTotalGainPercent(totalGainPercent);
        BigDecimal result = portfolioJSF.getTotalGainPercent();
        Assertions.assertEquals(totalGainPercent, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setTotalGainPercentTest_Lzii0_VQPU0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        portfolioJSF.setTotalGainPercent(Mockito.mock(BigDecimal.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBalanceTest_zeroBalance_BTvw1_PrnD0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal balance = portfolioJSF.getBalance();
        assertEquals(BigDecimal.ZERO, balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBalanceTest_nonZeroBalance_JRHN2_YTil0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal balance = portfolioJSF.getBalance();
        assertNotEquals(BigDecimal.ZERO, balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBalanceTest_nullBalance_vyoh3_voZS0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        portfolioJSF.setBalance(null);
        BigDecimal balance = portfolioJSF.getBalance();
        assertNull(balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBalanceTest_negativeBalance_olUt4_Wbru0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal balance = portfolioJSF.getBalance();
        assertTrue(balance.compareTo(BigDecimal.ZERO) < 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBalanceTest_nullBalance_noTrades_Ndma7_EtsY0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal balance = portfolioJSF.getBalance();
        assertNull(balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_rClB0_MBzD0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal openBalance = portfolioJSF.getOpenBalance();
        assertNotNull(openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalanceWithPositiveBalance_GMOj1_pKTl0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        portfolioJSF.setOpenBalance(new BigDecimal(1000));
        BigDecimal openBalance = portfolioJSF.getOpenBalance();
        assertEquals(new BigDecimal(1000), openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalanceWithNegativeBalance_bnEb2_gsdn0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        portfolioJSF.setOpenBalance(new BigDecimal(-1000));
        BigDecimal openBalance = portfolioJSF.getOpenBalance();
        assertEquals(new BigDecimal(-1000), openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalanceWithZeroBalance_irFb3_edSc0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        portfolioJSF.setOpenBalance(new BigDecimal(0));
        BigDecimal openBalance = portfolioJSF.getOpenBalance();
        assertEquals(new BigDecimal(0), openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalanceWithNullBalance_Wmrn4_cfQF0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        portfolioJSF.setOpenBalance(null);
        BigDecimal openBalance = portfolioJSF.getOpenBalance();
        assertNull(openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceZero_tYOl1_oeOb0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal balance = BigDecimal.ZERO;
        portfolioJSF.setBalance(balance);
        assertEquals(balance, portfolioJSF.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalanceNull_JdHF2_Afcm0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal balance = null;
        portfolioJSF.setBalance(balance);
        assertEquals(balance, portfolioJSF.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalBasis_kHnh0_TvwX0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalBasis = new BigDecimal(0);
        portfolioJSF.setTotalBasis(totalBasis);
        assertEquals(totalBasis, portfolioJSF.getTotalBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalBasis2_mTET1_hmdO0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalBasis = new BigDecimal(1);
        portfolioJSF.setTotalBasis(totalBasis);
        assertEquals(totalBasis, portfolioJSF.getTotalBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalBasis3_Pjpu2_jrkA0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalBasis = new BigDecimal(2);
        portfolioJSF.setTotalBasis(totalBasis);
        assertEquals(totalBasis, portfolioJSF.getTotalBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTable_ZQOW0_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        HtmlDataTable dataTable = new HtmlDataTable();
        portfolioJSF.setDataTable(dataTable);
        Assertions.assertEquals(dataTable, portfolioJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTableWithNull_QaJo1_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = null;
        portfolioJSF.setDataTable(dataTable);
        HtmlDataTable actual = portfolioJSF.getDataTable();
        HtmlDataTable expected = null;
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTableWithNegativeRows_HfyV4_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = new HtmlDataTable();
        dataTable.setRows(-10);
        portfolioJSF.setDataTable(dataTable);
        HtmlDataTable actual = portfolioJSF.getDataTable();
        HtmlDataTable expected = dataTable;
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTableWithZeroRows_AKZY6_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = new HtmlDataTable();
        dataTable.setRows(0);
        portfolioJSF.setDataTable(dataTable);
        HtmlDataTable actual = portfolioJSF.getDataTable();
        HtmlDataTable expected = dataTable;
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTableWithNullObject_ioUd9_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = null;
        portfolioJSF.setDataTable(dataTable);
        HtmlDataTable actual = portfolioJSF.getDataTable();
        HtmlDataTable expected = dataTable;
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue4_CfQw3_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalValue = new BigDecimal(3);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue9_dtwY8_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalValue = new BigDecimal(8);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue10_xoeg9_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalValue = new BigDecimal(9);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue11_krYm10_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalValue = new BigDecimal(10);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue15_gERL14_fid1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalValue = new BigDecimal(14);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }
}