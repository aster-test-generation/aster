/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_0_ekEW0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal result = marketSummaryDataBean.getGainPercent();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullTopLosers_fNBJ0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), null);
        String actual = marketSummaryDataBean.toString();
        String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:100.0\n\t\t    openTSIA:100.0\n\t\t        gain:0.0\n\t\t      volume:100\n\t\t   Current Top Gainers:\n\t\t   Current Top Losers:null";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullTopGainers_vgMV1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, null, new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toString();
        String expected = "\n\tMarket Summary at: null\n\t\t        TSIA:100.0\n\t\t    openTSIA:100.0\n\t\t        gain:0.0\n\t\t      volume:100\n\t\t   Current Top Gainers:null\n\t\t   Current Top Losers:";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML2_OrQY1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(100), new BigDecimal(100), 100, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML3_gJaI2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML4_qAjE3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>" + "<BR> Current Top Gainers:";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML5_hstj4() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>" + "<BR>   Current Top Losers:";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test01_xNLy0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObject jsonObject = marketSummaryDataBean.toJSON();
        Assertions.assertNotNull(jsonObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test02_lDIj1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();
        Assertions.assertNotNull(jObjectBuilder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test03_gRfT2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();
        int i = 1;
        Assertions.assertTrue(i == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test04_cNsy3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();
        int i = 1;
        for (Iterator<QuoteDataBean> iterator = marketSummaryDataBean.getTopGainers().iterator(); iterator.hasNext(); ) {
            QuoteDataBean quote = iterator.next();
            Assertions.assertNotNull(quote);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test05_pHkE4() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();
        int i = 1;
        for (Iterator<QuoteDataBean> iterator = marketSummaryDataBean.getTopGainers().iterator(); iterator.hasNext(); ) {
            QuoteDataBean quote = iterator.next();
            jObjectBuilder.add("gainer" + i + "_stock", quote.getSymbol());
            Assertions.assertNotNull(jObjectBuilder);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test06_Kkty5() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();
        int i = 1;
        for (Iterator<QuoteDataBean> iterator = marketSummaryDataBean.getTopGainers().iterator(); iterator.hasNext(); ) {
            QuoteDataBean quote = iterator.next();
            jObjectBuilder.add("gainer" + i + "_stock", quote.getSymbol());
            jObjectBuilder.add("gainer" + i + "_price", "$" + quote.getPrice());
            Assertions.assertNotNull(jObjectBuilder);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test07_gRCM6() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();
        int i = 1;
        for (Iterator<QuoteDataBean> iterator = marketSummaryDataBean.getTopGainers().iterator(); iterator.hasNext(); ) {
            QuoteDataBean quote = iterator.next();
            jObjectBuilder.add("gainer" + i + "_stock", quote.getSymbol());
            jObjectBuilder.add("gainer" + i + "_price", "$" + quote.getPrice());
            jObjectBuilder.add("gainer" + i + "_change", quote.getChange());
            Assertions.assertNotNull(jObjectBuilder);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test08_xtCj7() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();
        int i = 1;
        for (Iterator<QuoteDataBean> iterator = marketSummaryDataBean.getTopGainers().iterator(); iterator.hasNext(); ) {
            QuoteDataBean quote = iterator.next();
            jObjectBuilder.add("gainer" + i + "_stock", quote.getSymbol());
            jObjectBuilder.add("gainer" + i + "_price", "$" + quote.getPrice());
            jObjectBuilder.add("gainer" + i + "_change", quote.getChange());
            i++;
            Assertions.assertTrue(i == 2);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test09_BIHU8() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        JsonObjectBuilder jObjectBuilder = Json.createObjectBuilder();
        int i = 1;
        for (Iterator<QuoteDataBean> iterator = marketSummaryDataBean.getTopLosers().iterator(); iterator.hasNext(); ) {
            QuoteDataBean quote = iterator.next();
            Assertions.assertNotNull(quote);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_1_WkRX1_fid1() {
        BigDecimal TSIA = new BigDecimal(0);
        BigDecimal openTSIA = new BigDecimal(0);
        double volume = 0;
        Collection<QuoteDataBean> topGainers = new ArrayList<QuoteDataBean>();
        Collection<QuoteDataBean> topLosers = new ArrayList<QuoteDataBean>();
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(TSIA, openTSIA, volume, topGainers, topLosers);
        BigDecimal result = marketSummaryDataBean.getGainPercent();
        assertEquals(null, result);
    }
}