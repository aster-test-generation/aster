/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet30Async_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet30Async pingservlet30async;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    ServletInputStream servletinputstream;
    ServletOutputStream servletoutputstream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithException_mpVE2() {
        PingServlet30Async servlet = new PingServlet30Async();
        try {
            servlet.init(null);
            fail("Expected ServletException");
        } catch (ServletException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithConfigAndException_aveD3() {
        PingServlet30Async servlet = new PingServlet30Async();
        ServletConfig config = new MockServletConfig();
        try {
            servlet.init(config);
            fail("Expected ServletException");
        } catch (ServletException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletinputstream = mock(ServletInputStream.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingservlet30async = new PingServlet30Async();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        when(httpservletrequest.getInputStream()).thenReturn(servletinputstream);
        pingservlet30async.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).getOutputStream();
        verify(httpservletrequest, times(1)).getInputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_rdPF0() throws ServletException, IOException {
        PingServlet30Async servlet = new PingServlet30Async();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_getServletInfo_fEtI0() {
        PingServlet30Async obj = new PingServlet30Async();
        String actual = obj.getServletInfo();
        String expected = "Basic dynamic HTML generation through a servlet";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_getServletInfo_jyzw1() {
        PingServlet30Async obj = new PingServlet30Async();
        String actual = obj.getServletInfo();
        String expected = "Some other string";
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_getServletInfo_ZmvX2() {
        PingServlet30Async obj = new PingServlet30Async();
        String actual = obj.getServletInfo();
        String expected = null;
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        MockitoAnnotations.initMocks(this);
        Mockito.when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        Mockito.when(httpservletrequest.getInputStream()).thenReturn(servletinputstream);
        pingservlet30async.doGet(httpservletrequest, httpservletresponse);
        Mockito.verify(httpservletresponse).getOutputStream();
        Mockito.verify(httpservletrequest).getInputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_with_null_request_and_response_ZypD3() throws ServletException, IOException {
        PingServlet30Async servlet = new PingServlet30Async();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_wbmI0_tyJm0() throws ServletException, IOException {
        PingServlet30Async servlet = new PingServlet30Async();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_with_null_request_mpmw1_jDtU0() throws ServletException, IOException {
        PingServlet30Async servlet = new PingServlet30Async();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_with_null_response_xHvf2_bMfs0() throws ServletException, IOException {
        PingServlet30Async servlet = new PingServlet30Async();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_getServletInfo_jyzw1_fid1() {
        PingServlet30Async obj = new PingServlet30Async();
        String actual = obj.getServletInfo();
        String expected = "Some other string";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_getServletInfo_ZmvX2_fid1() {
        PingServlet30Async obj = new PingServlet30Async();
        String actual = obj.getServletInfo();
        String expected = "PingServlet30Async";
        assertEquals(expected, actual);
    }
}