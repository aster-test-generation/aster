/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ListIterator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_KeyBlock_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithMinAndMax_RGhl0() {
        KeyBlock keyBlock = new KeyBlock(1, 10);
        assertEquals(10 - 1 + 1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithoutMinAndMax_thHm1() {
        KeyBlock keyBlock = new KeyBlock();
        assertEquals(1, keyBlock.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIterator_YwlW0_crfP0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(5);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIterator_YwlW0_crfP0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(5);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithNoArgs_HzMZ1_EYVR0_1() {
        KeyBlock keyBlock = new KeyBlock();
        ListIterator<Object> iterator = keyBlock.listIterator(0);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithNoArgs_HzMZ1_EYVR0_2() {
        KeyBlock keyBlock = new KeyBlock();
        ListIterator<Object> iterator = keyBlock.listIterator(0);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexZero_OUrq4_fhtO0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(0);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexZero_OUrq4_fhtO0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(0);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexAtSizeMinusOne_obcY5_ZcoO0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(10);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexAtSizeMinusOne_obcY5_ZcoO0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(10);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexAtSize_lwIa6_dtnw0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(11);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexAtSize_lwIa6_dtnw0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(11);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexAtSizePlusTwo_zTql8_YBal0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(13);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexAtSizePlusTwo_zTql8_YBal0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(13);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexAtSizePlusThree_RLRJ9_XBMW0_1() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(14);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testListIteratorWithIndexAtSizePlusThree_RLRJ9_XBMW0_2() {
        KeyBlock keyBlock = new KeyBlock(0, 10);
        ListIterator<Object> iterator = keyBlock.listIterator(14);
        assertTrue(iterator instanceof KeyBlock.KeyBlockIterator);
    }
}