/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Failing {
    private static String initTime = null;
    PingServlet2ServletRcv pingservlet2servletrcv;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingservlet2servletrcv = new PingServlet2ServletRcv();
        // Set up expected behavior for the mocks
        when(httpservletrequest.getParameter("param1")).thenReturn("value1");
        when(httpservletresponse.getWriter()).thenReturn(mock(PrintWriter.class));
        // Call the method to be tested
        pingservlet2servletrcv.doPost(httpservletrequest, httpservletresponse);
        // Add meaningful assertions here
        verify(httpservletrequest, times(1)).getParameter("param1");
        verify(httpservletresponse, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_gnuI3() throws ServletException, IOException {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_tlNW0() throws Exception {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getAttribute("ab")).thenReturn(new PingBean());
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        verify(response).getWriter();
        verify(response).sendError(500, "PingServlet2ServletRcv.doGet(...): general exception");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_wJGR0_RjVU0() throws ServletException, IOException {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_ezzm1_sdep0() throws ServletException, IOException {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_KmJo2_kigj0() throws ServletException, IOException {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithException_xkKq7_QWdr0() throws ServletException, IOException {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doNothing().when(response).sendError(anyInt(), anyString());
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithIOException_CPhr8_BWoX0() throws ServletException, IOException {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            servlet.doPost(request, response);
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithExceptionAndIOException_wUqG9_XIsl0() throws ServletException, IOException {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doThrow(new ServletException()).when(response).getWriter();
        servlet.doPost(request, response);
    }
}