/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
    private EntityManager entityManager;
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @InjectMocks
    private TradeSLSBBean tradeslsbbean;
    @Mock
    private AccountProfileDataBean accountProfileDataBean;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_ZZpc0() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
        BigDecimal oldPrice = new BigDecimal(10.0);
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
        // Add assertion here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange3_USzh2() {
        QuoteDataBean quote = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), new BigDecimal(10.0), 10.0);
        BigDecimal oldPrice = new BigDecimal(10.0);
        BigDecimal changeFactor = new BigDecimal(10.0);
        double sharesTraded = 100.0;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_1() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        quote.setPrice(new BigDecimal(10.0));
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getOrderType(), orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_2() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        quote.setPrice(new BigDecimal(10.0));
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getQuantity(), quantity);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_3() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        quote.setPrice(new BigDecimal(10.0));
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getPrice(), quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_4() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        quote.setPrice(new BigDecimal(10.0));
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getOrderFee(), TradeConfig.getOrderFee(orderType));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_5() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getAccount(), account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_6() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        quote.setPrice(new BigDecimal(10.0));
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getQuote(), quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_7() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        quote.setPrice(new BigDecimal(10.0));
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getHolding(), holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_PCvs0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
        // Replace the erroneous assertion and regenerate the fixed test case
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
        // Only generate the fixed test case
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryNull_lROp1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryNotNull_gjeP2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean, "The market summary should not be null");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryGainPercent_BjhY4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        BigDecimal expected = new BigDecimal(0.0);
        assertEquals(expected, marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryTSIA_sbkd5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        BigDecimal expected = new BigDecimal(0.0);
        assertEquals(expected, marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryOpenTSIA_WSvg6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertEquals(new BigDecimal(0.0), marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummarySummaryDate_JkRz7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturnWithNegativeInvestment_bvvp2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = -1000.0;
        double netValue = -1.0;
        double expected = -1.0;
        double actual = tradeSLSBBean.investmentReturn(investment, netValue);
        assertEquals(expected, actual, -1.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_TOJu0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Collection<QuoteDataBean> quotes = tradeSLSBBean.getAllQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsWithNullUserID_nKap1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsWithNullUserID_nKap1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertTrue(holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsWithEmptyUserID_GJWR2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsWithEmptyUserID_GJWR2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
        assertTrue(holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullPassword_wWjf1() throws RollbackException {
        AccountDataBean account = AccountDataBean.getRandomInstance();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean result = tradeSLSBBean.login(account.getProfileID(), null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_XhRU0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_tTbf1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_ZATc3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("true"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_utph4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("false"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_akme7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_pVcv8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_ecGd9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_VaPq10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_vxAP11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("4"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_zOzL12() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_ZpkK13() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean("6"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_AtOJ0() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_DjQZ1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_IpRU3_1() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_IpRU3_2() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getPrice(), quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_IpRU3_3() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getVolume(), quoteData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeChangeFactor_ZGvX4_1() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(-1);
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeChangeFactor_ZGvX4_2() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(-1);
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getPrice(), quoteData.getPrice().multiply(changeFactor));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeChangeFactor_ZGvX4_3() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(-1);
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getVolume(), quoteData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_XGfo0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertEquals(0, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullUserID_dxBk1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        orders = new ArrayList<OrderDataBean>();
        orders.add(new OrderDataBean());
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithEmptyUserID_MtHX2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUserID_DqrE3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "invalidUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullAccount_LMnr6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        AccountProfileDataBean profile = new AccountProfileDataBean();
        AccountDataBean account = new AccountDataBean();
        profile.setAccount(account);
        when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertTrue(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_kiZl0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL");
        Assertions.assertEquals("TESTSYMBOL", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote2_pmZV1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL2");
        Assertions.assertEquals("TESTSYMBOL2", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote3_japJ2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL3");
        Assertions.assertEquals("TESTSYMBOL3", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote4_fJQH3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL4");
        Assertions.assertEquals("TESTSYMBOL4", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote5_ZYYx4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL5");
        Assertions.assertEquals("TESTSYMBOL5", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote6_UrJs5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL6");
        Assertions.assertEquals("TESTSYMBOL6", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote7_wwRh6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL7");
        Assertions.assertEquals("TESTSYMBOL7", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote8_yVHU7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL8");
        Assertions.assertEquals("TESTSYMBOL8", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote9_GUpj8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL9");
        Assertions.assertEquals("TESTSYMBOL9", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote10_DkTH9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL10");
        Assertions.assertEquals("TESTSYMBOL10", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote11_RHYR10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL11");
        Assertions.assertEquals("TESTSYMBOL11", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote12_OTGm11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL12");
        Assertions.assertEquals("TESTSYMBOL12", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote13_hzTT12() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL13");
        Assertions.assertEquals("TESTSYMBOL13", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote14_TLbY13() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("TESTSYMBOL14");
        Assertions.assertEquals("TESTSYMBOL14", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_xPlj0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_xPlj0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(symbol, result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_xPlj0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(companyName, result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_xPlj0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_yJgi2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_yJgi2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(symbol, result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_yJgi2_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(companyName, result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_yJgi2_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_UWMA0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_UWMA0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getPassword(), updatedProfile.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_UWMA0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_UWMA0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_UWMA0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithNullProfileData_Wjno1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = null;
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(null, updatedProfile);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithRandomInstance_tHhL2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = AccountProfileDataBean.getRandomInstance();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfile.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithRandomInstance_tHhL2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = AccountProfileDataBean.getRandomInstance();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getPassword(), updatedProfile.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithRandomInstance_tHhL2_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = AccountProfileDataBean.getRandomInstance();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getFullName(), updatedProfile.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithRandomInstance_tHhL2_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = AccountProfileDataBean.getRandomInstance();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithRandomInstance_tHhL2_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = AccountProfileDataBean.getRandomInstance();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_QQSx0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_VGvk1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_OcTr2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ERTo0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("testString");
        Assertions.assertEquals(accountDataBean.getBalance(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ERTo0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("testString");
        Assertions.assertEquals(accountDataBean.getCreationDate(), new java.util.Date(0L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ERTo0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("testString");
        Assertions.assertEquals(accountDataBean.getLoginCount(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ERTo0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("testString");
        Assertions.assertEquals(accountDataBean.getLogoutCount(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ERTo0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("testString");
        Assertions.assertEquals(accountDataBean.getOpenBalance(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_1_fid1() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getOrderType(), orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_2_fid1() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getQuantity(), quantity);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_3_fid1() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getPrice(), quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_4_fid1() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getOrderFee(), TradeConfig.getOrderFee(orderType));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_6_fid1() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getQuote(), quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0_7_fid1() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getHolding(), holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryNull_lROp1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryVolume_ZtBi3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertEquals(0.0, marketSummaryDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryGainPercent_BjhY4_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertEquals(0.0, marketSummaryDataBean.getGainPercent().compareTo(new BigDecimal(0.0)), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryTSIA_sbkd5_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertEquals(0.0, marketSummaryDataBean.getTSIA().compareTo(new BigDecimal(0.0)), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryOpenTSIA_WSvg6_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertEquals(0.0, marketSummaryDataBean.getOpenTSIA().compareTo(new BigDecimal(0.0)), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryTopLosers_ZkCS8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummaryTopGainers_mEbV9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturnWithZeroInvestment_RmSQ1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 0.0;
        double netValue = 1500.0;
        double expected = 0.0;
        double actual = tradeSLSBBean.investmentReturn(investment, netValue);
        assertEquals(expected, actual, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturnWithNegativeInvestment_bvvp2_fid1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = -1000.0;
        double netValue = 0.0;
        double expected = 0.0;
        double actual = tradeSLSBBean.investmentReturn(investment, netValue);
        assertEquals(expected, actual, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsWithEmptyUserID_GJWR2_2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertTrue(holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_ptFI0() throws RollbackException {
        AccountDataBean account = AccountDataBean.getRandomInstance();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean result = tradeSLSBBean.login(account.getProfileID(), account.getCreationDate().toString());
        assertEquals(account, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginNullPassword_wWjf1_fid1() throws RollbackException {
        AccountDataBean account = AccountDataBean.getRandomInstance();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean result = tradeSLSBBean.login(account.getProfileID(), null);
        assertEquals(account, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_QGbA5_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setInSessionTest_mwKb6_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(new Boolean(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_AtOJ0_fid1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = true;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(order, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_DjQZ1_fid1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        Integer orderID = order.getOrderID();
        boolean twoPhase = false;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean result = tradeSLSBBean.completeOrder(orderID, twoPhase);
        assertEquals(order, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_IpRU3_3_fid1() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getVolume(), quoteData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_nThN0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_NullOrder_AbzO1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_InvalidOrder_Uewx2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_TwoPhaseFalse_ahYZ3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_XGfo0_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithNullUserID_dxBk1_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithEmptyUserID_MtHX2_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertTrue(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUserID_DqrE3_fid1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "invalidUser";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertTrue(orders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ERTo0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("testString");
        Assertions.assertEquals(accountDataBean.getProfileID(), "testString");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_LmyA0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("user123");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_LmyA0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("user123");
        assertEquals("user123", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataNull_wGnk1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData(null);
        assertNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataEmpty_LzUp2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("");
        assertNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataRandom_AEne3_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUser");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataRandom_AEne3_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUser");
        assertEquals("randomUser", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataNotFound_VEgP4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("notFoundUser");
        assertNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_IVBT0() throws Exception {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        when(quoteData.getCompanyName()).thenReturn("TestCompany");
        when(quoteData.hashCode()).thenReturn(12345);
        when(quoteData.getPrice()).thenReturn(new BigDecimal(123.45));
        when(quoteData.getOpen()).thenReturn(new BigDecimal(123.45));
        when(quoteData.getLow()).thenReturn(new BigDecimal(123.45));
        when(quoteData.getChange()).thenReturn(123.45);
        when(quoteData.getHigh()).thenReturn(new BigDecimal(123.45));
        when(quoteData.getSymbol()).thenReturn("TEST");
        when(quoteData.getVolume()).thenReturn(123.45);
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean result = tradeSLSBBean.pingTwoPhase("TEST");
        assertEquals(quoteData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_OInK0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "testUser";
        Integer orderID = 12345;
        tradeSLSBBean.orderCompleted(userID, orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getPrice(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getHolding(), new HoldingDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getQuantity(), 0.0, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getOrderFee(), new BigDecimal(0.0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getQuote(), new QuoteDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getOrderStatus(), "status");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getSymbol(), "symbol");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getOrderID(), new Integer(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getOpenDate(), new java.util.Date(0L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getCompletionDate(), new java.util.Date(0L));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getOrderType(), "type");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0_12() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getAccount(), new AccountDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_mkAg0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        when(entityManager.find(eq(HoldingDataBean.class), any(Integer.class))).thenReturn(holdingDataBean);
        HoldingDataBean actualHoldingDataBean = tradeSLSBBean.getHolding(123);
        assertEquals(holdingDataBean, actualHoldingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingNull_wJFp1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        when(entityManager.find(eq(HoldingDataBean.class), any(Integer.class))).thenReturn(null);
        HoldingDataBean actualHoldingDataBean = tradeSLSBBean.getHolding(123);
        assertNull(actualHoldingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_HbwW0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = false;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_NllE1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(0);
        boolean twoPhase = true;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync3_ySwu2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = false;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync4_ELXs3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync5_kXjE4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = false;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync6_aeJb5() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(2);
        boolean twoPhase = true;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync7_zacI6() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = false;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync8_FoZN7() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(3);
        boolean twoPhase = true;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync9_REcf8() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = false;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync10_OteZ9() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(4);
        boolean twoPhase = true;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync11_yitC10() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(5);
        boolean twoPhase = false;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync12_XAFw11() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(5);
        boolean twoPhase = true;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync13_Gfgp12() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(6);
        boolean twoPhase = false;
        tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest1_sAwl0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid1";
        Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest2_xgrF1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid2";
        Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest3_ZomW2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "uid3";
        Collection<OrderDataBean> result = tradeSLSBBean.getClosedOrders(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsell_oSlm0() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        OrderDataBean order = mock(OrderDataBean.class);
        when(tradeslsbbean.createOrder(account, quote, holding, "sell", 100.0)).thenReturn(order);
        when(order.getOrderID()).thenReturn(123);
        when(holding.getQuantity()).thenReturn(100.0);
        when(quote.getPrice()).thenReturn(new BigDecimal(10.0));
        when(order.getOrderFee()).thenReturn(new BigDecimal(1.0));
        when(account.getBalance()).thenReturn(new BigDecimal(1000.0));
        OrderDataBean result = tradeslsbbean.sell("user1", 456, 1);
        verify(order).setOrderStatus("processing");
        verify(order).setCompletionDate(any());
        verify(holding).setPurchaseDate(any());
        verify(account).setBalance(new BigDecimal(990.0));
        verify(result).setOrderID(123);
        verify(result).setOrderStatus("processing");
        verify(result).setOpenDate(any());
        verify(result).setCompletionDate(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_Isgg0_LVJy0_1() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_Isgg0_LVJy0_2() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getPrice(), quoteData.getPrice().multiply(changeFactor));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_Isgg0_LVJy0_3() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getVolume(), quoteData.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_mDfi1_EAtz0_1() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = 0;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_mDfi1_EAtz0_2() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = 0;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getPrice(), quoteData.getPrice().multiply(changeFactor));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroVolume_mDfi1_EAtz0_3() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = 0;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getVolume(), quoteData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeVolume_uYoV2_BVCp0_1() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = -100;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeVolume_uYoV2_BVCp0_2() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = -100;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getPrice(), quoteData.getPrice().multiply(changeFactor));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeVolume_uYoV2_BVCp0_3() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(quoteData.getChange());
        double sharesTraded = -100;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertEquals(updatedQuote.getVolume(), quoteData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_RoTo0() {
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean order = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), TradeConfig.getOrderFee(orderType), account, quote, holding);
        entityManager.persist(order);
        Assertions.assertEquals(order.getOrderType(), orderType);
        Assertions.assertEquals(order.getQuantity(), quantity);
        Assertions.assertEquals(order.getPrice(), quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
        Assertions.assertEquals(order.getOrderFee(), TradeConfig.getOrderFee(orderType));
        Assertions.assertEquals(order.getAccount(), account);
        Assertions.assertEquals(order.getQuote(), quote);
        Assertions.assertEquals(order.getHolding(), holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsWithNullUserID_nKap1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
        assertTrue(holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_IpRU3() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
        assertEquals(updatedQuote.getPrice(), quoteData.getPrice());
        assertEquals(updatedQuote.getVolume(), quoteData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeChangeFactor_ZGvX4() {
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        String symbol = quoteData.getSymbol();
        BigDecimal changeFactor = new BigDecimal(-1);
        double sharesTraded = quoteData.getVolume();
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
        assertEquals(updatedQuote.getPrice(), quoteData.getPrice().multiply(changeFactor));
        assertEquals(updatedQuote.getVolume(), quoteData.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithMultipleUsers_RIEC4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String[] userIDs = {"user1", "user2", "user3"};
        for (String userID : userIDs) {
            Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
            assertNotNull(orders);
            assertFalse(orders.isEmpty());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_xPlj0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(symbol, result.getSymbol());
        Assertions.assertEquals(companyName, result.getCompanyName());
        Assertions.assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteZeroPrice_yJgi2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        String companyName = quoteDataBean.getCompanyName();
        BigDecimal price = BigDecimal.ZERO;
        QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(symbol, result.getSymbol());
        Assertions.assertEquals(companyName, result.getCompanyName());
        Assertions.assertEquals(price, result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_UWMA0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfile.getAddress());
        assertEquals(profileData.getPassword(), updatedProfile.getPassword());
        assertEquals(profileData.getFullName(), updatedProfile.getFullName());
        assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
        assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithRandomInstance_tHhL2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = AccountProfileDataBean.getRandomInstance();
        AccountProfileDataBean updatedProfile = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfile.getAddress());
        assertEquals(profileData.getPassword(), updatedProfile.getPassword());
        assertEquals(profileData.getFullName(), updatedProfile.getFullName());
        assertEquals(profileData.getCreditCard(), updatedProfile.getCreditCard());
        assertEquals(profileData.getEmail(), updatedProfile.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ERTo0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("testString");
        Assertions.assertEquals(accountDataBean.getBalance(), new BigDecimal(0.0));
        Assertions.assertEquals(accountDataBean.getCreationDate(), new java.util.Date(0L));
        Assertions.assertEquals(accountDataBean.getLoginCount(), 0);
        Assertions.assertEquals(accountDataBean.getLogoutCount(), 0);
        Assertions.assertEquals(accountDataBean.getOpenBalance(), new BigDecimal(0.0));
        Assertions.assertEquals(accountDataBean.getProfileID(), "testString");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_LmyA0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("user123");
        assertNotNull(accountProfileDataBean);
        assertEquals("user123", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileDataRandom_AEne3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUser");
        assertNotNull(accountProfileDataBean);
        assertEquals("randomUser", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ppkZ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = new OrderDataBean();
        String userID = "1";
        String symbol = "2";
        double quantity = 3;
        int orderProcessingMode = 4;
        orderDataBean = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        Assertions.assertEquals(orderDataBean.getPrice(), new BigDecimal(0.0));
        Assertions.assertEquals(orderDataBean.getHolding(), new HoldingDataBean());
        Assertions.assertEquals(orderDataBean.getQuantity(), 0.0, 0.0);
        Assertions.assertEquals(orderDataBean.getOrderFee(), new BigDecimal(0.0));
        Assertions.assertEquals(orderDataBean.getQuote(), new QuoteDataBean());
        Assertions.assertEquals(orderDataBean.getOrderStatus(), "status");
        Assertions.assertEquals(orderDataBean.getSymbol(), "symbol");
        Assertions.assertEquals(orderDataBean.getOrderID(), new Integer(0));
        Assertions.assertEquals(orderDataBean.getOpenDate(), new java.util.Date(0L));
        Assertions.assertEquals(orderDataBean.getCompletionDate(), new java.util.Date(0L));
        Assertions.assertEquals(orderDataBean.getOrderType(), "type");
        Assertions.assertEquals(orderDataBean.getAccount(), new AccountDataBean());
    }
}