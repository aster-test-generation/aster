/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getQuantityTest_rWnt0() {
        HoldingData hd = new HoldingData();
        hd.setQuantity(100.0);
        double actual = hd.getQuantity();
        double expected = 100.0;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, "getQuantity should return the correct value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getQuantityTest_GAMV1() {
        HoldingData hd = new HoldingData();
        hd.setQuantity(0.0);
        double actual = hd.getQuantity();
        double expected = 0.0;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, "getQuantity should return the correct value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getQuantityTest_aEAU2() {
        HoldingData hd = new HoldingData();
        hd.setQuantity(-100.0);
        double actual = hd.getQuantity();
        double expected = -100.0;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, "getQuantity should return the correct value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getQuantityTest_HYlm3() {
        HoldingData hd = new HoldingData();
        hd.setQuantity(Double.MAX_VALUE);
        double actual = hd.getQuantity();
        double expected = Double.MAX_VALUE;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, "getQuantity should return the correct value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getQuantityTest_YSKU4() {
        HoldingData hd = new HoldingData();
        hd.setQuantity(Double.MIN_VALUE);
        double actual = hd.getQuantity();
        double expected = Double.MIN_VALUE;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, "getQuantity should return the correct value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getQuantityTest_PFZg5() {
        HoldingData hd = new HoldingData();
        hd.setQuantity(Double.NaN);
        double actual = hd.getQuantity();
        double expected = Double.NaN;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, "getQuantity should return the correct value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getQuantityTest_mLWA6() {
        HoldingData hd = new HoldingData();
        hd.setQuantity(Double.POSITIVE_INFINITY);
        double actual = hd.getQuantity();
        double expected = Double.POSITIVE_INFINITY;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, "getQuantity should return the correct value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getQuantityTest_sTuD7() {
        HoldingData hd = new HoldingData();
        hd.setQuantity(Double.NEGATIVE_INFINITY);
        double actual = hd.getQuantity();
        double expected = Double.NEGATIVE_INFINITY;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual, "getQuantity should return the correct value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDNull_CEHG1() {
        HoldingData holdingData = new HoldingData();
        assertEquals(null, holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_PPTW0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal("100.00");
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceNull_uNqI1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = null;
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceZero_Qtjl2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = BigDecimal.ZERO;
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceNegative_WVQL3() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal("-100.00");
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceMax_DtkY4() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = BigDecimal.valueOf(Long.MAX_VALUE);
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceMin_luTE5() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = BigDecimal.valueOf(Long.MIN_VALUE);
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_fyfZ0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = new BigDecimal("100.00");
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceNull_KZzE1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = null;
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceZero_RjHS2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = BigDecimal.ZERO;
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_AnWE0() {
        HoldingData hd = new HoldingData();
        Date expected = hd.getPurchaseDate();
        assertEquals(expected, hd.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDateWithNullDate_KSWh1() {
        HoldingData hd = new HoldingData();
        hd.setPurchaseDate(null);
        Date expected = null;
        assertEquals(expected, hd.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDateWithNonNullDate_OpQa2() {
        HoldingData hd = new HoldingData();
        Date date = new Date();
        hd.setPurchaseDate(date);
        assertEquals(date, hd.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDateWithInvalidDate_MZHb3() {
        HoldingData hd = new HoldingData();
        hd.setPurchaseDate(new Date(0L));
        Date expected = new Date(0L);
        assertEquals(expected, hd.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDateWithFutureDate_Doft5() {
        HoldingData hd = new HoldingData();
        hd.setPurchaseDate(new Date(System.currentTimeMillis() + 1000L));
        Date expected = new Date(System.currentTimeMillis() + 1000L);
        assertEquals(expected, hd.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDateWithLeapYearDate_MfVU7() {
        HoldingData hd = new HoldingData();
        hd.setPurchaseDate(new Date(2020, 1, 29));
        Date expected = new Date(2020, 1, 29);
        assertEquals(expected, hd.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDateWithInvalidMonthDate_gpta9() {
        HoldingData hd = new HoldingData();
        hd.setPurchaseDate(new Date(2020, 13, 1));
        Date expected = new Date(2020, 13, 1);
        assertEquals(expected, hd.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBasis_cylw0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal basis = new BigDecimal("100.00");
        holdingData.setBasis(basis);
        assertEquals(basis, holdingData.getBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_abud0() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date();
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_JOhw0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = new BigDecimal("100.00");
        holdingData.setGain(gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithZeroValue_munf1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = BigDecimal.ZERO;
        holdingData.setGain(gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNegativeValue_aWqO2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = new BigDecimal("-100.00");
        holdingData.setGain(gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_ooJv0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = holdingData.getPrice();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPriceWithNullPrice_wIHJ4() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = holdingData.getPrice();
        assertNull(price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketValue_VNkq0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = holdingData.getMarketValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketValue_positiveValue_rEXf2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setMarketValue(BigDecimal.ONE);
        BigDecimal marketValue = holdingData.getMarketValue();
        assertEquals(BigDecimal.ONE, marketValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketValue_negativeValue_SeGp3() {
        HoldingData holdingData = new HoldingData();
        holdingData.setMarketValue(BigDecimal.ONE.negate());
        BigDecimal marketValue = holdingData.getMarketValue();
        assertEquals(BigDecimal.ONE.negate(), marketValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMarketValue_nullValue_WGBQ4() {
        HoldingData holdingData = new HoldingData();
        holdingData.setMarketValue(null);
        BigDecimal marketValue = holdingData.getMarketValue();
        assertNull(marketValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBasis_bfNA0_2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setBasis(null);
        BigDecimal expectedBasis = new BigDecimal("100.00");
        holdingData.setBasis(expectedBasis);
        assertEquals(expectedBasis, holdingData.getBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_fmEC0() {
        HoldingData holdingData = new HoldingData();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_QHOC0() {
        HoldingData holdingData = new HoldingData();
        double quantity = 50.0;
        holdingData.setQuantity(quantity);
        assertEquals(quantity, holdingData.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityZero_lFUa1() {
        HoldingData holdingData = new HoldingData();
        double quantity = 0.0;
        holdingData.setQuantity(quantity);
        assertEquals(quantity, holdingData.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityNegative_EThz2() {
        HoldingData holdingData = new HoldingData();
        double quantity = -50.0;
        holdingData.setQuantity(quantity);
        assertEquals(quantity, holdingData.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValue_KWLK0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal("100.00");
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueNull_pQPc1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = null;
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueZero_MTPd2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = BigDecimal.ZERO;
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueNegative_nDYy3() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal("-100.00");
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueMax_KnAK5() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = BigDecimal.valueOf(Long.MAX_VALUE);
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueMin_hBUH6() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = BigDecimal.valueOf(Long.MIN_VALUE);
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValueRandom_JnDd7() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal("1234567890.1234567890");
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_SPpe0() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = 123;
        holdingData.setHoldingID(holdingID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDNull_QxwV1() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = null;
        holdingData.setHoldingID(holdingID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_rhUq0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setPurchasePrice(new BigDecimal("100.00"));
        assertEquals(new BigDecimal("100.00"), holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePriceWithZeroValue_PwGK1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setPurchasePrice(BigDecimal.ZERO);
        assertEquals(BigDecimal.ZERO, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePriceWithNegativeValue_MutP2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setPurchasePrice(new BigDecimal("-100.00"));
        assertEquals(new BigDecimal("-100.00"), holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainHTML_withPositiveGain_xuOG0_Mhbn0() {
        HoldingData hd = new HoldingData();
        hd.setGain(new BigDecimal(100.0));
        String actual = hd.getGainHTML();
        String expected = FinancialUtils.printGainHTML(new BigDecimal(100.0));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainHTML_withNegativeGain_QLTV1_JRGi0() {
        HoldingData hd = new HoldingData();
        hd.setGain(new BigDecimal(-50.0));
        String actual = hd.getGainHTML();
        String expected = FinancialUtils.printGainHTML(new BigDecimal(-50.0));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainHTML_withZeroGain_rcxa2_NCGG0() {
        HoldingData hd = new HoldingData();
        hd.setGain(new BigDecimal(0.0));
        String actual = hd.getGainHTML();
        String expected = FinancialUtils.printGainHTML(new BigDecimal(0.0));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_dEmz0_qaHr0() {
        HoldingData holdingData = new HoldingData();
        Integer actual = holdingData.getHoldingID();
        Integer expected = holdingData.getHoldingID();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_LOoJ1_NBVM0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(1);
        Integer actual = holdingData.getHoldingID();
        Integer expected = 1;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_QvGe2_yebt0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(null);
        Integer actual = holdingData.getHoldingID();
        Integer expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_KsUE3_ssgi0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(0);
        Integer actual = holdingData.getHoldingID();
        Integer expected = 0;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_ByYP4_xmqA0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(-1);
        Integer actual = holdingData.getHoldingID();
        Integer expected = -1;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_NDGP5_QNsk0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(Integer.MAX_VALUE);
        Integer actual = holdingData.getHoldingID();
        Integer expected = Integer.MAX_VALUE;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_psfU6_oUJK0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(Integer.MIN_VALUE);
        Integer actual = holdingData.getHoldingID();
        Integer expected = Integer.MIN_VALUE;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_wlQU7_ZKhL0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(100);
        Integer actual = holdingData.getHoldingID();
        Integer expected = 100;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_GTRE9_HuQT0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(1000);
        Integer actual = holdingData.getHoldingID();
        Integer expected = 1000;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBasis_bfNA0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setBasis(null);
        assertNull(holdingData.getBasis());
        BigDecimal expectedBasis = new BigDecimal("100.00");
        holdingData.setBasis(expectedBasis);
        assertEquals(expectedBasis, holdingData.getBasis());
    }
}