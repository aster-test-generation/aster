/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PingJDBCRead2JSP_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_sZMX0() {
        PingJDBCRead2JSP testObject = new PingJDBCRead2JSP();
        String expected = "Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of Trade JDBC class";
        String actual = testObject.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_moIl0() throws javax.servlet.ServletException {
        PingJDBCRead2JSP testee = new PingJDBCRead2JSP();
        ServletConfig config = new MockServletConfig();
        testee.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_IZzR0() throws ServletException, IOException {
        HttpServletRequest req = null;
        HttpServletResponse res = null;
        PingJDBCRead2JSP test = new PingJDBCRead2JSP();
        test.doPost(req, res);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_rMVp1() throws ServletException, IOException {
        HttpServletRequest req = null;
        HttpServletResponse res = null;
        PingJDBCRead2JSP test = new PingJDBCRead2JSP();
        test.doGet(req, res);
        assertEquals(true, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_0_cFOq0() throws Exception {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        HttpServletRequest req = null;
        HttpServletResponse res = null;
        obj.doGet(req, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_1_ndUy1() throws Exception {
        PingJDBCRead2JSP obj = new PingJDBCRead2JSP();
        HttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = new MockHttpServletResponse();
        obj.doGet(req, res);
    }
}