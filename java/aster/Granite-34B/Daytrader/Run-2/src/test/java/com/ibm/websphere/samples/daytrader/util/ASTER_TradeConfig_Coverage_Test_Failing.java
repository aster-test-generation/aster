/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomPriceChangeFactorWhenPositive_HBzu0() {
        double percentGain = 0.1;
        BigDecimal expected = new BigDecimal("1.10");
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomPriceChangeFactorWhenNegative_zzDN1() {
        double percentGain = -0.1;
        BigDecimal expected = new BigDecimal("0.90");
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndUserID1_VDun0_JVIy0() {
        int numUsers = 10;
        List<Integer> deck = new ArrayList<Integer>(numUsers);
        for (int i = 0; i < numUsers; i++) {
            deck.add(i, new Integer(i));
        }
        java.util.Collections.shuffle(deck, new Random());
        int card = 10;
        String nextUser = "uid:" + deck.get(card);
        assertEquals("uid:0", nextUser);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndUserID2_kBgA1_rJBd0() {
        int numUsers = 10;
        List<Integer> deck = new ArrayList<Integer>(numUsers);
        for (int i = 0; i < numUsers; i++) {
            deck.add(i, new Integer(i));
        }
        java.util.Collections.shuffle(deck, new java.util.Random());
        int card = 11;
        String nextUser = "uid:" + deck.get(card);
        assertEquals("uid:1", nextUser);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomPriceChangeFactorWhenPositive_HBzu0_fid2() {
        double percentGain = 0.1;
        BigDecimal expected = new BigDecimal("1.06");
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomPriceChangeFactorWhenNegative_zzDN1_fid2() {
        double percentGain = -0.1;
        BigDecimal expected = new BigDecimal("1.06");
        BigDecimal actual = TradeConfig.getRandomPriceChangeFactor();
        assertEquals(expected, actual);
    }
}