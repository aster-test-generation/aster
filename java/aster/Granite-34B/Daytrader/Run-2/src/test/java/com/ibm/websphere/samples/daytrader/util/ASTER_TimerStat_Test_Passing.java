/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCount_HeAD0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setCount(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCountWithZero_xPUa1() {
        TimerStat timerStat = new TimerStat();
        timerStat.setCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCountWithNegativeNumber_AdeZ2() {
        TimerStat timerStat = new TimerStat();
        timerStat.setCount(-10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAvgSecs_oNFw0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setTotalTime(1000.0);
        timerStat.setCount(2);
        double expected = 0.5;
        double actual = timerStat.getAvgSecs();
        assertEquals(expected, actual, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAvgSecs_zeroTotalTime_BCGi2() {
        TimerStat timerStat = new TimerStat();
        timerStat.setTotalTime(0.0);
        timerStat.setCount(2);
        double expected = 0.0;
        double actual = timerStat.getAvgSecs();
        assertEquals(expected, actual, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMax_whenMaxIsZero_thenMaxIsZero_Qpzm0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMax(0);
        assert timerStat.getMax() == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMax_whenMaxIsNegative_thenMaxIsNegative_Ylgb1() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMax(-10);
        assert timerStat.getMax() == -10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMax_whenMaxIsPositive_thenMaxIsPositive_vCth2() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMax(10);
        assert timerStat.getMax() == 10;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_valN0() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(10.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_zero_cIRW1() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_negative_UNKp2() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(-10.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_positive_hEHL3() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_max_cCaZ4() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(Double.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_min_pnLt5() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(Double.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_infinity_cUpw6() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(Double.POSITIVE_INFINITY);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_negativeInfinity_lZwG7() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(Double.NEGATIVE_INFINITY);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setMinTest_nan_QhpC8() {
        TimerStat timerStat = new TimerStat();
        timerStat.setMin(Double.NaN);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTotalTime_shouldSetTotalTime_CcJf0() {
        TimerStat timerStat = new TimerStat();
        double totalTime = 100.0;
        timerStat.setTotalTime(totalTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTotalTime_shouldNotSetNegativeTime_jGcH1() {
        TimerStat timerStat = new TimerStat();
        double totalTime = -100.0;
        timerStat.setTotalTime(totalTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setTotalTime_shouldNotSetZeroTime_IvHz2() {
        TimerStat timerStat = new TimerStat();
        double totalTime = 0.0;
        timerStat.setTotalTime(totalTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getCountTest_whenCountIsZero_thenReturnsZero_aRZt1() {
        TimerStat timerStat = new TimerStat();
        int actual = timerStat.getCount();
        int expected = 0;
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }
}