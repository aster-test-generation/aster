/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ActionMessage_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_BbYL0_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test1\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test1", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_LABE1_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test2\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test2", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_mvZn2_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test3\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test3", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_KOmh3_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test4\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test4", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_QZRj4_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test5\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test5", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_mLvY5_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test6\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test6", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_vXPW6_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test7\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test7", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_chaA7_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test8\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test8", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_abQu8_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test9\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test9", actionMessage.getDecodedAction());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_DyIS9_fid1() {
        ActionMessage actionMessage = new ActionMessage();
        String jsonText = "{\n" +
            "  \"action\": \"test10\"\n" +
            "}";
        actionMessage.doDecoding(jsonText);
        assertEquals("test10", actionMessage.getDecodedAction());
    }
}