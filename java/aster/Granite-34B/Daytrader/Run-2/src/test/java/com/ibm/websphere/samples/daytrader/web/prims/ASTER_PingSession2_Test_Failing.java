/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession2_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingSession2 pingsession2;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession2 = new PingSession2();
        ServletConfig config = mock(ServletConfig.class);
        pingsession2.init(config);
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingsession2 = new PingSession2();
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        pingsession2.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getSession(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_VQJu0() {
        PingSession2 pingSession2 = new PingSession2();
        String result = pingSession2.getServletInfo();
        assertEquals("HTTP Session Key: Tests management of a read/write unique id", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_null_NORV1() {
        PingSession2 pingSession2 = new PingSession2();
        String result = pingSession2.getServletInfo();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_empty_Pwer2() {
        PingSession2 pingSession2 = new PingSession2();
        String result = pingSession2.getServletInfo();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_tab_GcpR4() {
        PingSession2 pingSession2 = new PingSession2();
        String result = pingSession2.getServletInfo();
        assertEquals("\t", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_newLine_BenK5() {
        PingSession2 pingSession2 = new PingSession2();
        String result = pingSession2.getServletInfo();
        assertEquals("\n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        initTime = "2022-01-01";
        hitCount = 0;
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingsession2 = new PingSession2();
        when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
        when(httpsession.getAttribute("sessiontest.counter")).thenReturn(1);
        when(httpservletresponse.getWriter()).thenReturn(mock(PrintWriter.class));
        pingsession2.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getSession(anyBoolean());
        verify(httpsession, times(1)).getAttribute("sessiontest.counter");
        verify(httpservletresponse, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession2 = new PingSession2();
        ServletConfig config = mock(ServletConfig.class);
        pingsession2.init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession2 = new PingSession2();
        ServletConfig config = mock(ServletConfig.class);
        pingsession2.init(config);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_jYCw0_Ixxa0() throws ServletException, IOException {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingSession2.doPost(req, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_LMbH0_hYeh0() {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            pingSession2.doGet(request, response);
        } catch (ServletException | IOException e) {
            fail("Exception occurred while testing doGet method: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_rVLX1_Fzff0() {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            doThrow(new ServletException("Mocked ServletException")).when(request).getSession(true);
            pingSession2.doGet(request, response);
            fail("Expected ServletException not thrown");
        } catch (ServletException | IOException e) {
            assertEquals("Mocked ServletException", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithSessionInvalidation_Cdyr2_QpMr0() {
        PingSession2 pingSession2 = new PingSession2();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        HttpSession session = mock(HttpSession.class);
        when(request.getSession(true)).thenReturn(session);
        when(session.getAttribute("sessiontest.counter")).thenReturn(new Integer(5));
        try {
            pingSession2.doGet(request, response);
        } catch (ServletException | IOException e) {
            fail("Exception occurred while testing doGet method: " + e.getMessage());
        }
    }
}