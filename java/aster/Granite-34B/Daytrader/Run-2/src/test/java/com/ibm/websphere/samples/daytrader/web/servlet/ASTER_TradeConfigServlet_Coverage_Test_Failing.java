/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeConfigServlet_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_pzOz0() throws javax.servlet.ServletException {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        tradeConfigServlet.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay_JYgo0() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "results";
        tradeConfigServlet.doConfigDisplay(req, resp, results);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay2_lLGB1() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "results";
        when(req.getAttribute("tradeConfig")).thenReturn(new TradeConfig());
        tradeConfigServlet.doConfigDisplay(req, resp, results);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay3_jfgI2() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "results";
        when(req.getAttribute("tradeConfig")).thenThrow(new Exception());
        tradeConfigServlet.doConfigDisplay(req, resp, results);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_gpBW0() throws javax.servlet.ServletException, java.io.IOException {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = null;
        HttpServletResponse resp = null;
        tradeConfigServlet.service(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void doResetTradeTest1_mWSp0() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "";
        tradeConfigServlet.doResetTrade(req, resp, results);
        verify(req, atLeast(1)).setAttribute("runStatsData", any());
        verify(req, atLeast(1)).setAttribute("tradeConfig", any());
        verify(req, atLeast(1)).setAttribute("status", any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void doResetTradeTest8_ZhXK7() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "";
        tradeConfigServlet.doResetTrade(req, resp, results);
        verify(req, atLeast(1)).setAttribute("runStatsData", any());
        verify(req, atLeast(1)).setAttribute("tradeConfig", any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate1_TkVa0() throws java.lang.Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        tradeConfigServlet.doConfigUpdate(null, null);
    }
}