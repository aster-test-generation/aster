/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JSFLoginFilter_Test_Failing {
    @ExtendWith(MockitoExtension.class)
    @Mock
    private ServletRequest req;
    private FilterConfig filterConfig = null;
    JSFLoginFilter jsfloginfilter;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    HttpServletResponse httpservletresponse;

    @Mock
    private ServletResponse resp;
    @Mock
    private FilterChain chain;
    @Mock
    private HttpServletRequest request;
    @Mock
    private HttpServletResponse response;
    @Mock
    private HttpSession session;
    @InjectMocks
    private JSFLoginFilter jSFLoginFilter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoFilter() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservletresponse = mock(HttpServletResponse.class);
        jsfloginfilter = new JSFLoginFilter();
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        when(httpsession.getAttribute("uidBean")).thenReturn(null);
        when(httpservletrequest.getServletPath()).thenReturn("/home");
        FilterChain filterChain = mock(FilterChain.class);
        jsfloginfilter.doFilter(httpservletrequest, httpservletresponse, filterChain);
        verify(httpservletresponse).sendRedirect("welcome.faces");
        verify(filterChain, never()).doFilter(httpservletrequest, httpservletresponse);
    }
}