/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_TradeScenarioServlet_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_alOM0() {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        String expected = "TradeScenarioServlet emulates a population of web users";
        assertEquals(expected, tradeScenarioServlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_BngU0() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit1_mFoI0() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit2_HmrI1() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        java.util.Enumeration<String> en = config.getInitParameterNames();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit3_Kwox2() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        java.util.Enumeration<String> en = config.getInitParameterNames();
        while (en.hasMoreElements()) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit4_WYmb3() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        java.util.Enumeration<String> en = config.getInitParameterNames();
        while (en.hasMoreElements()) {
            String parm = en.nextElement();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit5_DPyX4() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        java.util.Enumeration<String> en = config.getInitParameterNames();
        while (en.hasMoreElements()) {
            String parm = en.nextElement();
            String value = config.getInitParameter(parm);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit6_MYsB5() throws javax.servlet.ServletException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        ServletConfig config = mock(ServletConfig.class);
        tradeScenarioServlet.init(config);
        java.util.Enumeration<String> en = config.getInitParameterNames();
        while (en.hasMoreElements()) {
            String parm = en.nextElement();
            String value = config.getInitParameter(parm);
            TradeConfig.setConfigParam(parm, value);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask2_jvDr1() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        ServletContext ctx = mock(ServletContext.class);
        HttpSession session = mock(HttpSession.class);
        when(req.getServletPath()).thenReturn("/TradeScenario");
        when(req.getContextPath()).thenReturn("/Trade2");
        when(req.getParameter("action")).thenReturn("n");
        when(req.getServletContext()).thenReturn(ctx);
        when(ctx.getRealPath("/WEB-INF/web.xml")).thenReturn("web.xml");
        when(req.getSession(true)).thenReturn(session);
        when(session.getAttribute("uidBean")).thenReturn(null);
        when(resp.getOutputStream()).thenThrow(new IOException("Error"));
        tradeScenarioServlet.performTask(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask3_btYB2() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        ServletContext ctx = mock(ServletContext.class);
        HttpSession session = mock(HttpSession.class);
        when(req.getServletPath()).thenReturn("/TradeScenario");
        when(req.getContextPath()).thenReturn("/Trade2");
        when(req.getParameter("action")).thenReturn("l");
        when(req.getServletContext()).thenReturn(ctx);
        when(ctx.getRealPath("/WEB-INF/web.xml")).thenReturn("web.xml");
        when(req.getSession(true)).thenReturn(session);
        when(session.getAttribute("uidBean")).thenReturn(null);
        tradeScenarioServlet.performTask(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask4_WmvE3() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        ServletContext ctx = mock(ServletContext.class);
        HttpSession session = mock(HttpSession.class);
        when(req.getServletPath()).thenReturn("/TradeScenario");
        when(req.getContextPath()).thenReturn("/Trade2");
        when(req.getParameter("action")).thenReturn("l");
        when(req.getServletContext()).thenReturn(ctx);
        when(ctx.getRealPath("/WEB-INF/web.xml")).thenReturn("web.xml");
        when(req.getSession(true)).thenReturn(session);
        when(session.getAttribute("uidBean")).thenReturn("uid");
        tradeScenarioServlet.performTask(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTask5_YTex4() throws javax.servlet.ServletException, java.io.IOException {
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        ServletContext ctx = mock(ServletContext.class);
        HttpSession session = mock(HttpSession.class);
        when(req.getServletPath()).thenReturn("/TradeScenario");
        when(req.getContextPath()).thenReturn("/Trade2");
        when(req.getParameter("action")).thenReturn("l");
        when(req.getServletContext()).thenReturn(ctx);
        when(ctx.getRealPath("/WEB-INF/web.xml")).thenReturn("web.xml");
        when(req.getSession(true)).thenReturn(session);
        when(session.getAttribute("uidBean")).thenReturn("uid");
        when(session.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(null);
        tradeScenarioServlet.performTask(req, resp);
    }
}