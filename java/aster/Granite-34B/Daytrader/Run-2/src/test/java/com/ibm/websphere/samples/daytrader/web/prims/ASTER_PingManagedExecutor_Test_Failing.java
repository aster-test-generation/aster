/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedExecutor_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingManagedExecutor pingmanagedexecutor;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    private ManagedExecutorService mes;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingmanagedexecutor = new PingManagedExecutor();
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameter("key")).thenReturn("value");
        pingmanagedexecutor.init(config);
        assertEquals("value", pingmanagedexecutor.getInitParameter("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_RWAa3() throws ServletException, IOException {
        PingManagedExecutor executor = new PingManagedExecutor();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        executor.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithMockRequestAndResponse_pInj6() throws ServletException, IOException {
        PingManagedExecutor executor = new PingManagedExecutor();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        executor.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Kacy0() {
        PingManagedExecutor managedExecutor = new PingManagedExecutor();
        String result = managedExecutor.getServletInfo();
        assertEquals("Tests a ManagedExecutor", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_DRzH1_RSxf0() throws ServletException, IOException {
        PingManagedExecutor executor = new PingManagedExecutor();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        executor.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_VjIB2_prkD0() throws ServletException, IOException {
        PingManagedExecutor executor = new PingManagedExecutor();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        executor.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_fcLX0() throws Exception {
        initTime = "initTime";
        mes = mock(ManagedExecutorService.class);
        hitCount = 0;
        pingmanagedexecutor = new PingManagedExecutor();
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingmanagedexecutor.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(servletoutputstream, times(1)).println("<html><head><title>PingManagedExecutor</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping ManagedExecutor<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>  </body></html>");
        verify(mes, times(1)).submit(any(Runnable.class));
        verify(servletoutputstream, times(1)).println("<b>HitCount: " + ++hitCount + "</b><br/>");
        verify(httpservletrequest, times(1)).startAsync();
        verify(httpservletresponse, times(1)).getOutputStream();
        verify(servletoutputstream, times(1)).close();
        verify(httpservletrequest, times(1)).startAsync();
        verify(httpservletresponse, times(1)).getOutputStream();
        verify(servletoutputstream, times(1)).close();
    }
}