/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31Async_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet31Async pingservlet31async;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    ServletInputStream servletinputstream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_YArd0() throws Exception {
        PingServlet31Async servlet = new PingServlet31Async();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_LaCO0() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expected = "Basic dynamic HTML generation through a servlet";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfoWithNullInput_rYZh1() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expected = null;
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfoWithEmptyInput_QrLG2() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expected = "";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfoWithInvalidInput_kSzK3() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expected = "Invalid input";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfoWithMultipleInputs_nkbD4() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expected1 = "Basic dynamic HTML generation through a servlet";
        String actual1 = servlet.getServletInfo();
        assertEquals(expected1, actual1);
        String expected2 = "Another expected result";
        String actual2 = servlet.getServletInfo();
        assertEquals(expected2, actual2);
        String expected3 = "Yet another expected result";
        String actual3 = servlet.getServletInfo();
        assertEquals(expected3, actual3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletinputstream = mock(ServletInputStream.class);
        pingservlet31async = new PingServlet31Async();
        when(httpservletrequest.getInputStream()).thenReturn(servletinputstream);
        pingservlet31async.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getInputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfoWithMultipleInputs_nkbD4_1() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expected1 = "Basic dynamic HTML generation through a servlet";
        String actual1 = servlet.getServletInfo();
        String expected2 = "Another expected result";
        String actual2 = servlet.getServletInfo();
        String expected3 = "Yet another expected result";
        String actual3 = servlet.getServletInfo();
        assertEquals(expected1, actual1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfoWithMultipleInputs_nkbD4_2() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expected1 = "Basic dynamic HTML generation through a servlet";
        String actual1 = servlet.getServletInfo();
        String expected2 = "Another expected result";
        String actual2 = servlet.getServletInfo();
        String expected3 = "Yet another expected result";
        String actual3 = servlet.getServletInfo();
        assertEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfoWithMultipleInputs_nkbD4_3() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expected1 = "Basic dynamic HTML generation through a servlet";
        String actual1 = servlet.getServletInfo();
        String expected2 = "Another expected result";
        String actual2 = servlet.getServletInfo();
        String expected3 = "Yet another expected result";
        String actual3 = servlet.getServletInfo();
        assertEquals(expected3, actual3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_jlyi0_tKge0() throws ServletException, IOException {
        PingServlet31Async servlet = new PingServlet31Async();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
    }
}