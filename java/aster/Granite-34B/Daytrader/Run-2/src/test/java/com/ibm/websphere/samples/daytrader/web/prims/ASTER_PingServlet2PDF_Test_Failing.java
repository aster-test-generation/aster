/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2PDF_Test_Failing {
    PingServlet2PDF pingservlet2pdf;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    private static int BUFFER_SIZE = 1024 * 8;
    private static int hitCount = 0;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingservlet2pdf = new PingServlet2PDF();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingservlet2pdf.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).getOutputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_gvYx0() throws ServletException, IOException {
        PingServlet2PDF servlet = new PingServlet2PDF();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
        assertEquals(200, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_Irsn1() throws ServletException, IOException {
        PingServlet2PDF servlet = new PingServlet2PDF();
        HttpServletRequest request = null;
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
        assertEquals(500, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_TmBD2() throws ServletException, IOException {
        PingServlet2PDF servlet = new PingServlet2PDF();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = null;
        servlet.doPost(request, response);
        assertEquals(500, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingservlet2pdf = new PingServlet2PDF();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingservlet2pdf.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("application/pdf");
        verify(httpservletresponse, times(1)).getOutputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetHttpServletRequestHttpServletResponse_Dqef0() throws Exception {
        PingServlet2PDF servlet = new PingServlet2PDF();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
        verify(request, times(1)).setAttribute(eq("ab"), any(PingBean.class));
        verify(response, times(1)).setContentType(eq("application/pdf"));
        verify(response, times(1)).getOutputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetHttpServletRequestHttpServletResponse_IOException_wTCi1() throws Exception {
        PingServlet2PDF servlet = new PingServlet2PDF();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doThrow(IOException.class).when(response).getOutputStream();
        try {
            servlet.doGet(request, response);
            fail("Expected IOException");
        } catch (IOException e) {
            verify(request, never()).setAttribute(anyString(), any());
            verify(response, times(1)).sendError(eq(500), anyString());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetHttpServletRequestHttpServletResponse_Exception_wcKb2() throws Exception {
        PingServlet2PDF servlet = new PingServlet2PDF();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doThrow(Exception.class).when(request).setAttribute(anyString(), any());
        try {
            servlet.doGet(request, response);
            fail("Expected Exception");
        } catch (Exception e) {
            verify(request, times(1)).setAttribute(eq("ab"), any(PingBean.class));
            verify(response, never()).setContentType(anyString());
            verify(response, never()).getOutputStream();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetHttpServletRequestHttpServletResponse_Finally_EdRp3() throws Exception {
        PingServlet2PDF servlet = new PingServlet2PDF();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream output = mock(ServletOutputStream.class);
        when(response.getOutputStream()).thenReturn(output);
        BufferedInputStream input = mock(BufferedInputStream.class);
        when(input.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        when(request.getAttribute("ab")).thenReturn(new PingBean());
        servlet.doGet(request, response);
        verify(input, times(1)).close();
        verify(output, times(1)).close();
    }
}