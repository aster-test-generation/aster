/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPStreaming_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingJSONPStreaming pingjsonpstreaming;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_FflO0() throws ServletException {
        PingJSONPStreaming obj = new PingJSONPStreaming();
        obj.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_UKZg0() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String info = servlet.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", info);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_null_Qcnw2() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String info = servlet.getServletInfo();
        assertNotNull(info);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_empty_zpTt3() {
        PingJSONPStreaming servlet = new PingJSONPStreaming();
        String info = servlet.getServletInfo();
        assertNotEquals("", info);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        initTime = "2022-01-01";
        hitCount = 0;
        pingjsonpstreaming = new PingJSONPStreaming();
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        httpservlet = mock(HttpServlet.class);
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingjsonpstreaming.doGet(null, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).getOutputStream();
        verify(servletoutputstream, times(1)).println(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_PxNC0_lZGN0() throws ServletException, IOException {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doNothing().when(response).setContentType("text/html");
        ServletOutputStream out = mock(ServletOutputStream.class);
        doNothing().when(out).println(anyString());
        when(response.getOutputStream()).thenReturn(out);
        StringWriter sw = new StringWriter();
        JsonGenerator generator = Json.createGenerator(sw);
        generator.writeStartObject();
        generator.write("initTime", initTime);
        generator.write("hitCount", hitCount);
        generator.writeEnd();
        generator.flush();
        String generatedJSON = sw.toString();
        StringBuffer parsedJSON = new StringBuffer();
        JsonParser parser = Json.createParser(new StringReader(generatedJSON));
        while (parser.hasNext()) {
            JsonParser.Event event = parser.next();
            switch(event) {
                case START_ARRAY:
                case END_ARRAY:
                case START_OBJECT:
                case END_OBJECT:
                case VALUE_FALSE:
                case VALUE_NULL:
                case VALUE_TRUE:
                    break;
                case KEY_NAME:
                    parsedJSON.append(parser.getString() + ":");
                    break;
                case VALUE_STRING:
                case VALUE_NUMBER:
                    parsedJSON.append(parser.getString() + " ");
                    break;
            }
        }
        doNothing().when(out).println("<html><head><title>Ping JSONP</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping JSONP</FONT><BR>Generated JSON: " + generatedJSON + "<br>Parsed JSON: " + parsedJSON + "</body></html>");
        pingJSONPStreaming.doPost(request, response);
    }
}