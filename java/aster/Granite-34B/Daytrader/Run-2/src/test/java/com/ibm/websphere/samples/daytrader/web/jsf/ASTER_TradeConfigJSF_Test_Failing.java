/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
    private String result = "";
    private ExternalContext context;
    TradeConfigJSF tradeconfigjsf;
    HttpSession httpsession;
    ExternalContext externalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getWebInterfaceList_ezpF0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = new String[3];
        String[] actual = tradeConfigJSF.getWebInterfaceList();
        expected[0] = "WebInterface1";
        expected[1] = "WebInterface2";
        expected[2] = "WebInterface3";
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxUsers_IhZf0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int maxUsers = tradeConfigJSF.getMaxUsers();
        assert maxUsers == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getWebInterfaceList_ezpF0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] expected = new String[10];
        String[] actual = tradeConfigJSF.getWebInterfaceList();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetResult_StYa0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.getResult();
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeModeWithCoverage_Vvnv1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String runtimeMode = tradeConfigJSF.getRuntimeMode();
        assertEquals("trade", runtimeMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_MoAT0_3_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals("mode1", orderProcessingModeList[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_MoAT0_4_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals("mode2", orderProcessingModeList[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_MoAT0_5_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals("mode3", orderProcessingModeList[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxQuotes_lGHv0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int maxQuotes = tradeConfigJSF.getMaxQuotes();
        assertEquals(0, maxQuotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxQuotesWithNegativeValue_sjEd2_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        TradeConfigJSF spy = spy(tradeConfigJSF);
        doReturn(-5).when(spy).getMaxQuotes();
        int maxQuotes = spy.getMaxQuotes();
        assertEquals(0, maxQuotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_zBgz0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.resetTrade();
        assertEquals("stats", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_IGax0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
        assertEquals("orderProcessingMode", orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_MoAT0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertNotNull(orderProcessingModeList);
        assertEquals(3, orderProcessingModeList.length);
        assertEquals("mode1", orderProcessingModeList[0]);
        assertEquals("mode2", orderProcessingModeList[1]);
        assertEquals("mode3", orderProcessingModeList[2]);
    }
}