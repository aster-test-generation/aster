/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccount_NullUserID_WyKp1() {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = null;
        String results = "testResults";
        try {
            action.doAccount(ctx, req, resp, userID, results);
            verify(req, never()).setAttribute(anyString(), any());
        } catch (ServletException | IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccount_EmptyUserID_CfiO2() {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "";
        String results = "testResults";
        try {
            action.doAccount(ctx, req, resp, userID, results);
            verify(req, never()).setAttribute(anyString(), any());
        } catch (ServletException | IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccount_ncCx0_ctQf0() {
        TradeServletAction action = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "testUser";
        String results = "testResults";
        try {
            action.doAccount(ctx, req, resp, userID, results);
            AccountDataBean accountData = new AccountDataBean();
            AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
            Collection<OrderDataBean> orderDataBeans = new ArrayList<>();
            verify(req).setAttribute("accountData", accountData);
            verify(req).setAttribute("accountProfileData", accountProfileData);
            verify(req).setAttribute("orderDataBeans", orderDataBeans);
            verify(req).setAttribute("results", results);
            verify(req).setAttribute("results", results + " could not find account for userID = " + userID);
            verify(req).setAttribute("results", results + " exception user = " + userID);
        } catch (ServletException | IOException e) {
            e.printStackTrace();
        }
    }
}