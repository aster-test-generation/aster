/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCWrite_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingJDBCWrite pingjdbcwrite;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcwrite = new PingJDBCWrite();
        when(httpservlet.getServletConfig()).thenReturn(mock(ServletConfig.class));
        pingjdbcwrite.init(httpservlet.getServletConfig());
        verify(httpservlet, times(1)).getServletConfig();
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcwrite = new PingJDBCWrite();
        when(httpservlet.getServletConfig()).thenReturn(mock(ServletConfig.class));
        pingjdbcwrite.init(httpservlet.getServletConfig());
        verify(httpservlet, times(1)).getServletConfig();
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingjdbcwrite = new PingJDBCWrite();
        HttpServletRequest request = mock(HttpServletRequest.class);
        pingjdbcwrite.doPost(request, httpservletresponse);
        verify(httpservletresponse, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_LmRq0() {
        PingJDBCWrite ping = new PingJDBCWrite();
        String info = ping.getServletInfo();
        assertEquals("Basic JDBC Write using a prepared statment makes use of TradeJDBC code.", info);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_lineCoverage_cSNv1() {
        PingJDBCWrite ping = new PingJDBCWrite();
        ping.getServletInfo();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_branchCoverage_Twtz2() {
        PingJDBCWrite ping = new PingJDBCWrite();
        if (ping.getServletInfo() != null) {
            System.out.println("Branch coverage achieved!");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_SHRw0_oLbw0() throws ServletException, IOException {
        PingJDBCWrite testObject = new PingJDBCWrite();
        HttpServletRequest mockHttpServletRequest = mock(HttpServletRequest.class);
        HttpServletResponse mockHttpServletResponse = mock(HttpServletResponse.class);
        testObject.doPost(mockHttpServletRequest, mockHttpServletResponse);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_joeq0_hKCh0() {
        PingJDBCWrite ping = new PingJDBCWrite();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        try {
            ping.doGet(req, res);
        } catch (ServletException | IOException e) {
            fail("Exception was thrown: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullResponse_cYHd2_rLYq0() {
        PingJDBCWrite ping = new PingJDBCWrite();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = null;
        try {
            ping.doGet(req, res);
            fail("Expected an exception to be thrown");
        } catch (ServletException | IOException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcwrite = new PingJDBCWrite();
        when(httpservlet.getServletConfig()).thenReturn(mock(ServletConfig.class));
        pingjdbcwrite.init(httpservlet.getServletConfig());
        verify(httpservlet, times(1)).getServletConfig();
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }
}