/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedThread_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingManagedThread pingmanagedthread;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;
    private ManagedThreadFactory managedThreadFactory;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingmanagedthread = new PingManagedThread();
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameter("initTime")).thenReturn("12:00:00");
        pingmanagedthread.init(config);
        assertEquals("12:00:00", initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingmanagedthread = new PingManagedThread();
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameter("initTime")).thenReturn("12:00:00");
        pingmanagedthread.init(config);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingmanagedthread = new PingManagedThread();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingmanagedthread.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).getOutputStream();
        verify(servletoutputstream).println("Pong");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequestAndResponse_CSbn3() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_thhE0() {
        PingManagedThread servlet = new PingManagedThread();
        String info = servlet.getServletInfo();
        assertEquals("Tests a ManagedThread asynchronous servlet", info);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_NullInput_XXyX1() {
        PingManagedThread servlet = new PingManagedThread();
        String info = servlet.getServletInfo();
        assertNotNull(info);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_EmptyInput_XYcv2() {
        PingManagedThread servlet = new PingManagedThread();
        String info = servlet.getServletInfo();
        assertNotEquals("", info);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_MultipleInvocations_shUi3() {
        PingManagedThread servlet = new PingManagedThread();
        String info1 = servlet.getServletInfo();
        String info2 = servlet.getServletInfo();
        assertEquals(info1, info2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_MultipleThreads_Dhkg7() {
        PingManagedThread servlet = new PingManagedThread();
        Thread thread1 = new Thread(() -> {
            String info1 = servlet.getServletInfo();
            assertNotNull(info1);
        });
        Thread thread2 = new Thread(() -> {
            String info2 = servlet.getServletInfo();
            assertNotEquals("", info2);
        });
        thread1.start();
        thread2.start();
        try {
            thread1.join();
            thread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_xGnt0_NJWQ0() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullRequest_icXh1_XPyO0() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = null;
        HttpServletResponse response = mock(HttpServletResponse.class);
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithNullResponse_VXrr2_wZGT0() throws ServletException, IOException {
        PingManagedThread managedThread = new PingManagedThread();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = null;
        managedThread.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingmanagedthread = new PingManagedThread();
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameter("initTime")).thenReturn("12:00:00");
        pingmanagedthread.init(config);
        assertEquals("12:00:00", initTime);
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_MultipleThreads_Sync_sabg12() {
        PingManagedThread servlet = new PingManagedThread();
        Thread thread1 = new Thread(() -> {
            synchronized (servlet) {
                String info1 = servlet.getServletInfo();
                assertNotNull(info1);
            }
        });
        Thread thread2 = new Thread(() -> {
            synchronized (servlet) {
                String info2 = servlet.getServletInfo();
                assertNotEquals("", info2);
            }
        });
        thread1.start();
        thread2.start();
        try {
            thread1.join();
            thread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}