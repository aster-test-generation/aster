/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RecentQuotePriceChangeList_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_Ilmq0() {
        RecentQuotePriceChangeList recentQuotePriceChangeList = new RecentQuotePriceChangeList();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        boolean result = recentQuotePriceChangeList.add(quoteDataBean);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithFullList_aaFN1() {
        RecentQuotePriceChangeList recentQuotePriceChangeList = new RecentQuotePriceChangeList();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        for (int i = 0; i < TradeConfig.getMAX_QUOTES(); i++) {
            recentQuotePriceChangeList.add(quoteDataBean);
        }
        boolean result = recentQuotePriceChangeList.add(quoteDataBean);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNullQuoteDataBean_Stsr2() {
        RecentQuotePriceChangeList recentQuotePriceChangeList = new RecentQuotePriceChangeList();
        boolean result = recentQuotePriceChangeList.add(null);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecentListWithCoverage_iRRD1() {
        RecentQuotePriceChangeList recentQuotePriceChangeList = new RecentQuotePriceChangeList();
        List<QuoteDataBean> expected = new ArrayList<>();
        for (int i = 0; i < 100; i++) {
            expected.add(new QuoteDataBean());
        }
        List<QuoteDataBean> actual = recentQuotePriceChangeList.recentList();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithFullList_aaFN1_fid1() {
        RecentQuotePriceChangeList recentQuotePriceChangeList = new RecentQuotePriceChangeList();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        for (int i = 0; i < TradeConfig.getMAX_QUOTES(); i++) {
            recentQuotePriceChangeList.add(quoteDataBean);
        }
        boolean result = recentQuotePriceChangeList.add(quoteDataBean);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithNullQuoteDataBean_Stsr2_fid1() {
        RecentQuotePriceChangeList recentQuotePriceChangeList = new RecentQuotePriceChangeList();
        boolean result = recentQuotePriceChangeList.add(null);
        assertTrue(result);
    }
}