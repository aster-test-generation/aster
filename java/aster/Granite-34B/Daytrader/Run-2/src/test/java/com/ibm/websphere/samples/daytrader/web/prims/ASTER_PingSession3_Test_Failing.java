/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession3_Test_Failing {
    private static String initTime = null;
    private static int hitCount = 0;
    PingSession3 pingsession3;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    private static int NUM_OBJECTS = 2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservlet = mock(HttpServlet.class);
        pingsession3 = new PingSession3();
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        pingsession3.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getSession(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_XFTu0() {
        PingSession3 servlet = new PingSession3();
        String expected = "HTTP Session Object: Tests management of a large custom session class";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_null_nUcQ1() {
        PingSession3 servlet = new PingSession3();
        String expected = null;
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_empty_vTJc2() {
        PingSession3 servlet = new PingSession3();
        String expected = "";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_customValue_GdLq4() {
        PingSession3 servlet = new PingSession3();
        String expected = "Custom Value";
        assertEquals(expected, servlet.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        initTime = "2022-01-01";
        NUM_OBJECTS = 2;
        hitCount = 1;
        pingsession3 = new PingSession3();
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservlet = mock(HttpServlet.class);
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        when(httpservletrequest.getParameter("num_objects")).thenReturn("2");
        PingSession3Object[] sessionData = new PingSession3Object[NUM_OBJECTS];
        for (int i = 0; i < NUM_OBJECTS; i++) {
            sessionData[i] = new PingSession3Object();
        }
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
        when(httpsession.getAttribute("sessiontest.sessionData")).thenReturn(sessionData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost_fid1() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        httpservlet = mock(HttpServlet.class);
        pingsession3 = new PingSession3();
        when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
        pingsession3.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getSession(anyBoolean());
    }
}