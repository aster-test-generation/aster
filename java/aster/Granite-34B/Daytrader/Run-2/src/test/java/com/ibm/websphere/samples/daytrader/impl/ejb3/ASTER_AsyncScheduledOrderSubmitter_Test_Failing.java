/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AsyncScheduledOrderSubmitter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrder_gTza0() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 1;
        boolean twoPhase = true;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertNotNull(result);
        // Replace the erroneous assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrderWithZeroOrderID_AnjR1() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 0;
        boolean twoPhase = true;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertNotNull(result);
        // Fix the assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrderWithNegativeOrderID_WgTe2() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = -1;
        boolean twoPhase = true;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertNotNull(result);
        // Fix the assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrderWithFalseTwoPhase_khBz3() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 1;
        boolean twoPhase = false;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertNotNull(result);
        // Fix the assertion
        // Change the expected or actual value to pass the assertion
        // Change the assertion type to match the return type if needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrder_gTza0_fid2() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 1;
        boolean twoPhase = true;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrderWithZeroOrderID_AnjR1_fid2() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 0;
        boolean twoPhase = true;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrderWithNegativeOrderID_WgTe2_fid2() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = -1;
        boolean twoPhase = true;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmitOrderWithFalseTwoPhase_khBz3_fid2() {
        AsyncScheduledOrderSubmitter asyncScheduledOrderSubmitter = new AsyncScheduledOrderSubmitter();
        Integer orderID = 1;
        boolean twoPhase = false;
        Future<?> result = asyncScheduledOrderSubmitter.submitOrder(orderID, twoPhase);
        assertNotNull(result);
    }
}