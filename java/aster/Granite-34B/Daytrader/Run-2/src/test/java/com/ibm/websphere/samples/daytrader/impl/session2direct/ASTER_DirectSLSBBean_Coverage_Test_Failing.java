/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DirectSLSBBean_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAllQuotes1_ScTC0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        Collection<?> result = directSLSBBean.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAllQuotes2_wdkK1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        Collection<?> result = directSLSBBean.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryDataBeanGetOpenTSIA_Fkbw0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryDataBeanGetGainPercent_bOSt1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertEquals(null, marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest1_CxPU0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.getHoldings("testUser");
        Assertions.assertEquals(null, directSLSBBean.getHoldings("testUser"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest2_ZFvG1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.getHoldings("testUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_qtyu0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            directSLSBBean.setInSession(true);
            OrderDataBean orderDataBean = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
            assertNotNull(orderDataBean);
        } catch (Exception e) {
            fail("Exception occurred while testing createOrder method");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOrders_0_KYsD0() throws Exception {
        DirectSLSBBean tested = new DirectSLSBBean();
        tested.setInSession(true);
        Collection result = tested.getOrders("userID");
        Assertions.assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOrders_1_AavI1() throws Exception {
        DirectSLSBBean tested = new DirectSLSBBean();
        tested.setInSession(true);
        Collection result = tested.getOrders("userID");
        Assertions.assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder1_bfxR0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.cancelOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_xxuk1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.cancelOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_gzjz2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.cancelOrder(3, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jyjY0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(0));
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteInSession_cCmo1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        QuoteDataBean quoteDataBean = directSLSBBean.createQuote("symbol", "companyName", new BigDecimal(0));
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder1_PCQx0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.queueOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_eGgP1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.queueOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_gKGf2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.queueOrder(3, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest1_nNJY0() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(true);
        AccountDataBean accountData = directSLSB.getAccountData("12345");
        Assertions.assertEquals(accountData.getBalance(), new BigDecimal(1000.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountDataTest2_HcOr1() throws Exception {
        DirectSLSBBean directSLSB = new DirectSLSBBean();
        directSLSB.setInSession(false);
        AccountDataBean accountData = directSLSB.getAccountData("12345");
        Assertions.assertEquals(accountData.getBalance(), new BigDecimal(1000.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout1_icXK0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.logout("userID");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout2_rtdM1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.logout("userID");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout3_eqKc2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.logout(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_RwZM0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.completeOrderAsync(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync2_fnjC1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.completeOrderAsync(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest1_vDZG0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.getClosedOrders("userID");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest2_IVEl1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.getClosedOrders("userID");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_mnJo0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("userID", 1);
        directSLSBBean.orderCompleted("userID", 2);
        directSLSBBean.orderCompleted("userID", 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted2_lReX1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(false);
        directSLSBBean.orderCompleted("userID", 1);
        directSLSBBean.orderCompleted("userID", 2);
        directSLSBBean.orderCompleted("userID", 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted3_Uegl2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("userID", null);
        directSLSBBean.orderCompleted(null, 2);
        directSLSBBean.orderCompleted(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryDataBeanGetOpenTSIA_Fkbw0_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        Assertions.assertEquals(null, marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingsTest1_CxPU0_fid1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.getHoldings("testUser");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithException_iBJl1_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            directSLSBBean.setInSession(false);
            directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
            fail("Expected exception was not thrown");
        } catch (Exception e) {
            assertTrue(e instanceof RuntimeException);
            assertEquals("TradeDirect:createOrder", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_uZCH0() throws java.lang.Exception {
        DirectSLSBBean direct = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        try {
            account = direct.register("uid1", "pass1", "fullname1", "address1", "email1", "cc1", new BigDecimal(100.00));
        } catch (Exception e) {
        }
        Assertions.assertNotNull(account);
        Assertions.assertEquals("uid1", account.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterInSession_fszj1() throws java.lang.Exception {
        DirectSLSBBean direct = new DirectSLSBBean();
        AccountDataBean account = new AccountDataBean();
        try {
            direct.setInSession(true);
            account = direct.register("uid2", "pass2", "fullname2", "address2", "email2", "cc2", new BigDecimal(200.00));
        } catch (Exception e) {
        }
        Assertions.assertNotNull(account);
        Assertions.assertEquals("uid2", account.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest1_eEtw0_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        try {
            OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
            Assertions.assertNotNull(orderDataBean);
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest2_Iuxd1_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid1";
        Integer holdingID = 1;
        int orderProcessingMode = 2;
        try {
            OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
            Assertions.assertNotNull(orderDataBean);
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest3_vkDF2_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid1";
        Integer holdingID = 2;
        int orderProcessingMode = 1;
        try {
            OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
            Assertions.assertNotNull(orderDataBean);
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest4_GWiF3_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid1";
        Integer holdingID = 2;
        int orderProcessingMode = 2;
        try {
            OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
            Assertions.assertNotNull(orderDataBean);
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void sellTest5_Vgaj4_fid1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "uid1";
        Integer holdingID = 3;
        int orderProcessingMode = 1;
        try {
            OrderDataBean orderDataBean = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
            Assertions.assertNotNull(orderDataBean);
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail();
        }
    }
}