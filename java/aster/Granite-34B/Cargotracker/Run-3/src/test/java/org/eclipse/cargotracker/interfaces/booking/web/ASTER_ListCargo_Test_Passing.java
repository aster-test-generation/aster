/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ListCargo_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getNotRoutedCargos_nyPF0_1() throws Exception {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> notRoutedCargos = listCargo.getNotRoutedCargos();
    assertNotNull(notRoutedCargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getNotRoutedCargos_nyPF0_2() throws Exception {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> notRoutedCargos = listCargo.getNotRoutedCargos();
    assertEquals(0, notRoutedCargos.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRoutedUnclaimedCargos_iMoU0_1() throws Exception {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> routedUnclaimedCargos = listCargo.getRoutedUnclaimedCargos();
    assertNotNull(routedUnclaimedCargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRoutedUnclaimedCargos_iMoU0_2() throws Exception {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> routedUnclaimedCargos = listCargo.getRoutedUnclaimedCargos();
    assertTrue(routedUnclaimedCargos.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRoutedUnclaimedCargosWithNoRoutes_YTxq1_2() throws Exception {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> routedUnclaimedCargos = listCargo.getRoutedUnclaimedCargos();
    assertTrue(routedUnclaimedCargos.size() == 0);
  }
}