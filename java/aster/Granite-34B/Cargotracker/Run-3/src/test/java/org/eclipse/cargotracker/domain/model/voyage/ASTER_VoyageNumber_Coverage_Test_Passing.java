/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_ozjb0() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    VoyageNumber other = new VoyageNumber("1234");
    Assertions.assertTrue(voyageNumber.sameValueAs(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_meMA1() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    VoyageNumber other = new VoyageNumber("5678");
    Assertions.assertFalse(voyageNumber.sameValueAs(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test3_mVZb2() {
    VoyageNumber voyageNumber = new VoyageNumber("1234");
    VoyageNumber other = null;
    Assertions.assertFalse(voyageNumber.sameValueAs(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_tIhk0() {
    VoyageNumber voyageNumber = new VoyageNumber();
    assertFalse(voyageNumber.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonVoyageNumberObject_oSnZ1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    assertFalse(voyageNumber.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithItself_LaXW2() {
    VoyageNumber voyageNumber = new VoyageNumber();
    assertTrue(voyageNumber.equals(voyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingSameIdentity_esMT4() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    VoyageNumber otherVoyageNumber = new VoyageNumber("123");
    assertTrue(voyageNumber.equals(otherVoyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingDifferentIdentity_Gwgi5() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    VoyageNumber otherVoyageNumber = new VoyageNumber("321");
    assertTrue(!voyageNumber.equals(otherVoyageNumber));
  }
}