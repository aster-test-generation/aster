/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling;

import java.time.LocalDateTime;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEventRegistrationAttempt_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest_yKYF0() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("123"),
            new VoyageNumber("123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals(HandlingEvent.Type.LOAD, attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getCompletionTime_returns_completion_date_bmeR0() throws Exception {
    HandlingEventRegistrationAttempt attempt =
            new HandlingEventRegistrationAttempt(
                    LocalDateTime.of(2021, 1, 1, 10, 0),
                    LocalDateTime.of(2021, 1, 1, 12, 0),
                    new TrackingId("ABC"),
                    new VoyageNumber("XYZ"),
                    HandlingEvent.Type.LOAD,
                    new UnLocode("SESTO")
            );
    assertEquals(
            attempt.getCompletionTime(),
            LocalDateTime.of(2021, 1, 1, 12, 0)
    );
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getRegistrationTimeTest_qLqI0() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 2, 12, 0),
            new TrackingId("123"),
            new VoyageNumber("ABC"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals(LocalDateTime.of(2022, 1, 1, 12, 0), attempt.getRegistrationTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberTest_VeBA0() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.of(2022, 1, 1, 12, 0), LocalDateTime.of(2022, 1, 1, 13, 0), new TrackingId("12345"), new VoyageNumber("ABC123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    VoyageNumber voyageNumber = handlingEventRegistrationAttempt.getVoyageNumber();
    assertEquals(voyageNumber.getIdString(), "ABC123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberNullTest_VJjg1() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.of(2022, 1, 1, 12, 0), LocalDateTime.of(2022, 1, 1, 13, 0), new TrackingId("12345"), null, HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    VoyageNumber voyageNumber = handlingEventRegistrationAttempt.getVoyageNumber();
    assertEquals(voyageNumber, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_nVkx0() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("12345"),
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals("12345", attempt.getTrackingId().getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithNullTrackingId_uhry2() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            null,
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals(null, attempt.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithEmptyTrackingId_jVus3() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId(""),
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals("", attempt.getTrackingId().getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_RiIT0() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2023, 1, 1, 12, 0),
            LocalDateTime.of(2023, 1, 1, 13, 0),
            new TrackingId("ABC123"),
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals("HandlingEventRegistrationAttempt{" +
            "registrationTime=2023-01-01T12:00, " +
            "completionTime=2023-01-01T13:00, " +
            "trackingId=ABC123, " +
            "voyageNumber=AB123, " +
            "type=LOAD, " +
            "unLocode=USCHI}", attempt.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withEmptyValues_VLsy1() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            null,
            null,
            null,
            null,
            null,
            null
    );
    assertEquals("HandlingEventRegistrationAttempt{" +
            "registrationTime=null, " +
            "completionTime=null, " +
            "trackingId=null, " +
            "voyageNumber=null, " +
            "type=null, " +
            "unLocode=null}", attempt.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withInvalidValues_xQPw2() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2023, 1, 1, 12, 0),
            LocalDateTime.of(2023, 1, 1, 13, 0),
            new TrackingId("ABC123"),
            new VoyageNumber("AB123"),
            HandlingEvent.Type.values()[5],
            new UnLocode("USCHI")
    );
    assertEquals("HandlingEventRegistrationAttempt{" +
            "registrationTime=2023-01-01T12:00, " +
            "completionTime=2023-01-01T13:00, " +
            "trackingId=ABC123, " +
            "voyageNumber=AB123, " +
            "type=null, " +
            "unLocode=USCHI}", attempt.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_withRandomValues_eWor3() throws Exception {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now().plusHours(1),
            new TrackingId(UUID.randomUUID().toString()),
            new VoyageNumber(UUID.randomUUID().toString()),
            HandlingEvent.Type.values()[new Random().nextInt(HandlingEvent.Type.values().length)],
            new UnLocode(UUID.randomUUID().toString())
    );
    assertEquals("HandlingEventRegistrationAttempt{" +
            "registrationTime=" + attempt.getRegistrationTime() + ", " +
            "completionTime=" + attempt.getCompletionTime() + ", " +
            "trackingId=" + attempt.getTrackingId() + ", " +
            "voyageNumber=" + attempt.getVoyageNumber() + ", " +
            "type=" + attempt.getType() + ", " +
            "unLocode=" + attempt.getUnLocode() + "}", attempt.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode_pvbp0() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertEquals(unLocode, handlingEventRegistrationAttempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode2_kqux1() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertNotEquals(unLocode, new UnLocode("USNYC"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode3_Jrib2() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertNotNull(unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode4_Qxsb3() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertTrue(unLocode.getIdString().contains("USCHI"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode5_vgwc4() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertFalse(unLocode.getIdString().contains("USNYC"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode6_WCpC5() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertEquals(unLocode.hashCode(), handlingEventRegistrationAttempt.getUnLocode().hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode7_TmzJ6() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertNotEquals(unLocode.hashCode(), new UnLocode("USNYC").hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode8_LiFZ7() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertNotNull(unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode9_VZGo8() throws Exception {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    UnLocode unLocode = handlingEventRegistrationAttempt.getUnLocode();
    assertNotNull(unLocode.hashCode());
  }
}