/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBookable_BZch0() throws Exception {
    Booking booking = new Booking();
    assertTrue(booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getDestinationUnlocodeTest_cWhN0() throws Exception {
    Booking booking = new Booking();
    String expected = "ABC"; // Replace with the expected value
    assertEquals(expected, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode_nkOG0_1() throws Exception {
    Booking booking = new Booking();
    booking.setOriginUnlocode("ABC");
    assertEquals("ABC", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode_nkOG0_2() throws Exception {
    Booking booking = new Booking();
    booking.setOriginUnlocode("ABC");
    assertEquals("XYZ", booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeNull_AtwB1_1() throws Exception {
    Booking booking = new Booking();
    booking.setOriginUnlocode(null);
    assertEquals(null, booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeNull_AtwB1_2() throws Exception {
    Booking booking = new Booking();
    booking.setOriginUnlocode(null);
    assertEquals(null, booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeEmpty_fxZH2_1() throws Exception {
    Booking booking = new Booking();
    booking.setOriginUnlocode("");
    assertEquals("", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocodeEmpty_fxZH2_2() throws Exception {
    Booking booking = new Booking();
    booking.setOriginUnlocode("");
    assertEquals("", booking.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginUnlocodeTest_qrOM0() throws Exception {
    Booking booking = new Booking();
    String expected = "ABC"; // Replace with the expected value
    String actual = booking.getOriginUnlocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadline_VZHy0() throws Exception {
    Booking booking = new Booking();
    LocalDate arrivalDeadline = LocalDate.now().plusDays(7);
    booking.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadlineWithNull_ghBr1() throws Exception {
    Booking booking = new Booking();
    LocalDate arrivalDeadline = null;
    booking.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadlineWithFutureDate_jzaz2() throws Exception {
    Booking booking = new Booking();
    LocalDate arrivalDeadline = LocalDate.now().plusDays(30);
    booking.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadlineWithPastDate_inGW3() throws Exception {
    Booking booking = new Booking();
    LocalDate arrivalDeadline = LocalDate.now().minusDays(1);
    booking.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetReturnValue_Fuht0() throws Exception {
    Booking booking = new Booking();
    String actual = booking.getReturnValue();
    String expected = "/admin/dashboard.xhtml";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetReturnValueWhenValueIsNullOrEmpty_GZlG1() throws Exception {
    Booking booking = new Booking();
    String actual = booking.getReturnValue();
    String expected = null;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testInit_jIdi0_1() throws Exception {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getLocations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testInit_jIdi0_2() throws Exception {
    Booking booking = new Booking();
    booking.init();
    assertTrue(booking.getLocations().size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testInit_jIdi0_3() throws Exception {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest_TuoO0() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.now();
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest2_VKbI1() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2022, 12, 31);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest3_BbNA2() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2023, 1, 1);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest4_NVdr3() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2023, 6, 28);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest5_ZlVZ4() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2023, 11, 15);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest6_ARSV5() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2023, 12, 25);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest7_ocic6() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2024, 1, 1);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest8_yXfI7() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2024, 3, 21);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest9_jPWS8() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2024, 6, 21);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest10_VWsQ9() throws Exception {
    Booking booking = new Booking();
    LocalDate expected = LocalDate.of(2024, 12, 31);
    assertEquals(expected, booking.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest1_UrKw0() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.now();
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest2_yaln1() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(2023, 1, 1);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest3_hSVY2() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(2023, 12, 31);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest4_KSvi3() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(1970, 1, 1);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest5_fTaY4() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(2023, 7, 4);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest6_zdjG5() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(2023, 2, 28);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest7_AQmu6() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(2023, 2, 29);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest8_QDYw7() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(2023, 11, 24);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest9_csej8() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(2023, 10, 31);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTodayTest10_kDsc9() throws Exception {
    Booking booking = new Booking();
    LocalDate today = LocalDate.of(2023, 10, 1);
    LocalDate result = booking.getToday();
    Assertions.assertEquals(today, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode_AHXo0() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "ABC123";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithNull_MvRs1() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = null;
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithEmpty_XQTh2() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithWhitespaces_nzFi3() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "   \t\n";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithInvalidUnlocode_hNdP4() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "Invalid";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithLongUnlocode_GgOP6() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithShortUnlocode_DvOk7() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "AB";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithSpecialCharacters_ZxLD8() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "!@#$%^&*()_+";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithNumbers_nQus9() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "1234567890";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocodeWithMixOfSpecialCharactersAndNumbers_wbfm10() throws Exception {
    Booking booking = new Booking();
    String destinationUnlocode = "!@#$%^&*()_+1234567890";
    booking.setDestinationUnlocode(destinationUnlocode);
    assertEquals(destinationUnlocode, booking.getDestinationUnlocode());
  }
}