/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.util.DateConverter;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimePattern_KOrJ0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String result = eventLogger.getCompletionTimePattern();
    assertEquals(DateConverter.DATE_TIME_FORMAT, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_ILjr0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type type = eventLogger.getEventType();
    assertEquals(HandlingEvent.Type.valueOf("Type"), type);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_FpOv0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.now());
    assertEquals(eventLogger.getCompletionTime(), LocalDateTime.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_LBZq0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = new ArrayList<>();
    assertEquals(trackingIds, eventLogger.getTrackingIds());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_ITIp0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("ABC123");
    assertEquals("ABC123", eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNull_nYoT1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber(null);
    assertEquals(null, eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_cXpI0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> expectedVoyages = new ArrayList<>();
    List<SelectItem> actualVoyages = eventLogger.getVoyages();
    assertEquals(expectedVoyages, actualVoyages);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_uuxm0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now();
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithNull_rBkq1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(null);
    assertEquals(null, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getEventTypesTest_vDIb0_1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertNotNull(eventTypes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getEventTypesTest_vDIb0_2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> eventTypes = eventLogger.getEventTypes();
    assertEquals(HandlingEvent.Type.values().length, eventTypes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocation_WnwL0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("New York");
    assertEquals("New York", eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithNull_WEbm1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation(null);
    assertEquals(null, eventLogger.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLocationWithEmpty_zQut2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("");
    assertEquals("", eventLogger.getLocation());
  }

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_XRcV0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String voyageNumber = "12345";
    eventLogger.setVoyageNumber(voyageNumber);
    assertEquals(voyageNumber, eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberNull_wfQn1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String voyageNumber = null;
    eventLogger.setVoyageNumber(voyageNumber);
    assertEquals(voyageNumber, eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberEmpty_RADC2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String voyageNumber = "";
    eventLogger.setVoyageNumber(voyageNumber);
    assertEquals(voyageNumber, eventLogger.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLocationsTest_lsfO0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assertNotNull(locations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithLoadType_Qell0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type eventType = HandlingEvent.Type.LOAD;
    eventLogger.setEventType(eventType);
    assertEquals(eventType, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithUnloadType_aCBk1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type eventType = HandlingEvent.Type.UNLOAD;
    eventLogger.setEventType(eventType);
    assertEquals(eventType, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithReceiveType_hzMo2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type eventType = HandlingEvent.Type.RECEIVE;
    eventLogger.setEventType(eventType);
    assertEquals(eventType, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithClaimType_RRFr3() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type eventType = HandlingEvent.Type.CLAIM;
    eventLogger.setEventType(eventType);
    assertEquals(eventType, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithCustomsType_EXow4() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type eventType = HandlingEvent.Type.CUSTOMS;
    eventLogger.setEventType(eventType);
    assertEquals(eventType, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventTypeWithNullType_eMwt5() throws Exception {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type eventType = null;
    eventLogger.setEventType(eventType);
    assertTrue(eventLogger.getEventType() == null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_qDJI0() throws Exception {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_withCargo_tVpw1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Cargo cargo = new Cargo();
    eventLogger.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_withCargoAndLocation_TxWz2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Cargo cargo = new Cargo();
    Location location = new Location();
    eventLogger.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_withCargoAndVoyage_xdpO3() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Cargo cargo = new Cargo();
    Voyage voyage = new Voyage();
    eventLogger.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_withCargoAndLocationAndVoyage_cdXi4() throws Exception {
    EventLogger eventLogger = new EventLogger();
    Cargo cargo = new Cargo();
    Location location = new Location();
    Voyage voyage = new Voyage();
    eventLogger.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_CioR1() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-01-01", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_NDXe2() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-12-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_KPae3() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-06-30", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_LHOB4() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-09-30", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_engR5() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-11-30", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_Mhzk6() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-07-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_heQh7() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-10-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_Ahyi8() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-08-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_boIY9() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-02-29", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_DBhB10() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-04-30", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_gmrc11() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-05-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_jSxr12() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-03-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_iACQ13() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-11-28", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeValueTest_HrEP14() throws Exception {
    EventLogger eventLogger = new EventLogger();
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-11-29", completionTimeValue);
  }
}