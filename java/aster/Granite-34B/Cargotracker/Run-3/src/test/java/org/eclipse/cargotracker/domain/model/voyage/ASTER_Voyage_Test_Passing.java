/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Voyage_Test_Passing {
  private Voyage voyage;
  private VoyageNumber voyageNumber;
  private Schedule schedule;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithSameObject_ReturnsTrue() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    assertTrue(voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithNullObject_ReturnsFalse() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    assertFalse(voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithNonVoyageObject_ReturnsFalse() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    assertFalse(voyage.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithSameIdentity_ReturnsTrue() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    Voyage sameVoyage = new Voyage(voyageNumber, schedule);
    assertTrue(voyage.equals(sameVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithDifferentVoyageNumber_ReturnsFalse() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    VoyageNumber differentVoyageNumber = new VoyageNumber("456");
    Voyage differentVoyage = new Voyage(differentVoyageNumber, schedule);
    assertFalse(voyage.equals(differentVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithDifferentSchedule_ReturnsFalse() throws Exception {
    voyageNumber = new VoyageNumber("123");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    Schedule differentSchedule = new Schedule();
    Voyage differentVoyage = new Voyage(voyageNumber, differentSchedule);
    assertFalse(voyage.equals(differentVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_jYpj0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("AB123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage AB123";
    String actual = voyage.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_ZCCa0() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertEquals(voyage.getVoyageNumber(), new VoyageNumber("123"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithNullVoyageNumber_NMxU1() throws Exception {
    Voyage voyage = new Voyage(null, new Schedule());
    assertEquals(voyage.getVoyageNumber(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumberWithEmptyVoyageNumber_HXbW2() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber(""), new Schedule());
    assertEquals(voyage.getVoyageNumber(), new VoyageNumber(""));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_LQct0() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("AB123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    Schedule returnedSchedule = voyage.getSchedule();
    assertEquals(schedule, returnedSchedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScheduleNull_tEVj1() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("AB123");
    Voyage voyage = new Voyage(voyageNumber, null);
    Schedule returnedSchedule = voyage.getSchedule();
    assertNull(returnedSchedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_sameIdentityAs_returnsTrue_forSameObject_wCtK0() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("AB123"), new Schedule());
    assertTrue(voyage.sameIdentityAs(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_sameIdentityAs_returnsTrue_forObjectWithSameIdentity_hhax1() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage sameVoyage = new Voyage(new VoyageNumber("AB123"), new Schedule());
    assertTrue(voyage.sameIdentityAs(sameVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_sameIdentityAs_returnsFalse_forObjectWithDifferentIdentity_Sczj2() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage differentVoyage = new Voyage(new VoyageNumber("CD456"), new Schedule());
    assertFalse(voyage.sameIdentityAs(differentVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithNullObject_ReturnsFalse_qPku0() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber(), new Schedule());
    boolean actual = voyage.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectOfDifferentClass_ReturnsFalse_gAFI1() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber(), new Schedule());
    boolean actual = voyage.equals(new Object());
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithSameIdentity_ReturnsTrue_Vklc2() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber();
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    Voyage voyageWithSameIdentity = new Voyage(voyageNumber, schedule);
    boolean actual = voyage.equals(voyageWithSameIdentity);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithDifferentIdentity_ReturnsFalse_UHKy3() throws Exception {
    Voyage voyage = new Voyage(new VoyageNumber(), new Schedule());
    Voyage voyageWithDifferentIdentity = new Voyage(new VoyageNumber(), new Schedule());
    boolean actual = voyage.equals(voyageWithDifferentIdentity);
    boolean expected = false;
    assertEquals(expected, actual);
  }
}