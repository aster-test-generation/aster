/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DateConverter_Test_Passing {
  private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");
  private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_wbhW0() throws Exception {
    LocalDate date = LocalDate.of(2023, 1, 1);
    String expected = "2023-01-01";
    String actual = DateConverter.toString(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_NIWZ0() throws Exception {
    String date = "2022-12-31";
    LocalDate localDate = DateConverter.toDate(date);
    assertEquals(LocalDate.parse(date, DATE_FORMATTER), localDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithInvalidDate_Rndi1() throws Exception {
    String date = "2022-13-31";
    LocalDate localDate = DateConverter.toDate(date);
    assertEquals(null, localDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_gUyA0() throws Exception {
    String datetime = "2022-03-14 12:34:56";
    LocalDateTime expected = LocalDateTime.of(2022, 3, 14, 12, 34, 56);
    LocalDateTime actual = DateConverter.toDateTime(datetime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTimeWithDifferentFormat_jnhy1() throws Exception {
    String datetime = "14-03-2022 12:34:56";
    LocalDateTime expected = LocalDateTime.of(2022, 3, 14, 12, 34, 56);
    LocalDateTime actual = DateConverter.toDateTime(datetime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTimeWithInvalidFormat_EPUJ2_1() throws Exception {
    String datetime = "2022-03-14";
    IllegalArgumentException exception = Assertions.assertThrows(IllegalArgumentException.class, () -> DateConverter.toDateTime(datetime));
  }
}