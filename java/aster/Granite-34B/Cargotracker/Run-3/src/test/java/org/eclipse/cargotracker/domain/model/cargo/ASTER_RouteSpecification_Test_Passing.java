/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginTest_MHbV0() throws Exception {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    Location location = new Location(unLocode, "name");
    RouteSpecification routeSpecification = new RouteSpecification(location, location, LocalDate.now());
    assertEquals(location, routeSpecification.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getDestination_ynSz0() throws Exception {
    Location origin = new Location(new UnLocode("USAT"), "TestOrigin");
    Location destination = new Location(new UnLocode("USAT"), "TestDestination");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(destination, routeSpecification.getDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_WTAc0() throws Exception {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    int expectedHashCode = new HashCodeBuilder().append(origin).append(destination).append(arrivalDeadline).toHashCode();
    assertEquals(expectedHashCode, routeSpecification.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_TijK0() throws Exception {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL, US");
    Location destination = new Location(new UnLocode("USNYC"), "New York, NY, US");
    LocalDate arrivalDeadline = LocalDate.of(2022, 1, 1);
    RouteSpecification routeSpecification1 = new RouteSpecification(origin, destination, arrivalDeadline);
    RouteSpecification routeSpecification2 = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(routeSpecification1, routeSpecification2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_wqMT1() throws Exception {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL, US");
    Location destination = new Location(new UnLocode("USNYC"), "New York, NY, US");
    LocalDate arrivalDeadline = LocalDate.of(2022, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification.equals(null) == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClassObject_ZPjT2() throws Exception {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL, US");
    Location destination = new Location(new UnLocode("USNYC"), "New York, NY, US");
    LocalDate arrivalDeadline = LocalDate.of(2022, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(routeSpecification.equals("test") == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentOrigin_zstX3() throws Exception {
    Location origin1 = new Location(new UnLocode("USCHI"), "Chicago, IL, US");
    Location origin2 = new Location(new UnLocode("USNYC"), "New York, NY, US");
    Location destination = new Location(new UnLocode("USNYC"), "New York, NY, US");
    LocalDate arrivalDeadline = LocalDate.of(2022, 1, 1);
    RouteSpecification routeSpecification1 = new RouteSpecification(origin1, destination, arrivalDeadline);
    RouteSpecification routeSpecification2 = new RouteSpecification(origin2, destination, arrivalDeadline);
    assertTrue(routeSpecification1.equals(routeSpecification2) == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentDestination_zWGq4() throws Exception {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL, US");
    Location destination1 = new Location(new UnLocode("USNYC"), "New York, NY, US");
    Location destination2 = new Location(new UnLocode("USEWR"), "EWR, US");
    LocalDate arrivalDeadline = LocalDate.of(2022, 1, 1);
    RouteSpecification routeSpecification1 = new RouteSpecification(origin, destination1, arrivalDeadline);
    RouteSpecification routeSpecification2 = new RouteSpecification(origin, destination2, arrivalDeadline);
    assertTrue(routeSpecification1.equals(routeSpecification2) == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentArrivalDeadline_BUND5() throws Exception {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL, US");
    Location destination = new Location(new UnLocode("USNYC"), "New York, NY, US");
    LocalDate arrivalDeadline1 = LocalDate.of(2022, 1, 1);
    LocalDate arrivalDeadline2 = LocalDate.of(2022, 1, 2);
    RouteSpecification routeSpecification1 = new RouteSpecification(origin, destination, arrivalDeadline1);
    RouteSpecification routeSpecification2 = new RouteSpecification(origin, destination, arrivalDeadline2);
    assertTrue(routeSpecification1.equals(routeSpecification2) == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void shouldReturnTheSameDeadlineAsGivenInConstructor_VYQi0() throws Exception {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas, TX");
    LocalDate arrivalDeadline = LocalDate.of(2016, 7, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    LocalDate deadline = routeSpecification.getArrivalDeadline();
    assertEquals(arrivalDeadline, deadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void isSatisfiedBy_returnsTrue_whenItineraryHasNoLegs_WfGj0() throws Exception {
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification(
            new Location(new UnLocode("USCHI"), "Chicago"),
            new Location(new UnLocode("USNYC"), "New York"),
            LocalDate.of(2022, 12, 31)
    );
    boolean actual = routeSpecification.isSatisfiedBy(itinerary);
    assertEquals(true, actual);
  }
}