/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingReport_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_TdyY0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    String expectedTrackingId = handlingReport.getTrackingId();
    assertEquals(expectedTrackingId, handlingReport.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setCompletionTimeTest_ybfn0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("value");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testSetEventType_TVqg0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_wnmk0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("testEventType");
    String eventType = handlingReport.getEventType();
    assertEquals("testEventType", eventType);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_lbok0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("ABC123");
    String actualVoyageNumber = handlingReport.getVoyageNumber();
    assertEquals("ABC123", actualVoyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setUnLocode_with_non_null_value_eeVm0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("ABC");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setUnLocode_with_null_value_pnZg1() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocode_vCpU0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("ABC");
    String result = handlingReport.getUnLocode();
    assertEquals("ABC", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocodeNull_DLgH1() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode(null);
    String result = handlingReport.getUnLocode();
    assertEquals(null, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUnLocodeEmpty_Rvpq2() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("");
    String result = handlingReport.getUnLocode();
    assertEquals("", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_1_hbMT0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("2022-01-01");
    String actual = handlingReport.getCompletionTime();
    String expected = "2022-01-01";
    assert actual.equals(expected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_2_kbUD1() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("2022-01-02");
    String actual = handlingReport.getCompletionTime();
    String expected = "2022-01-02";
    assert actual.equals(expected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setTrackingId_validTrackingId_setsTrackingId_JAbp0() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    String trackingId = "ABC123";
    handlingReport.setTrackingId(trackingId);
    assert handlingReport.getTrackingId().equals(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setTrackingId_nullTrackingId_setsTrackingIdToNull_eJxJ1() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId(null);
    assert handlingReport.getTrackingId() == null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setTrackingId_emptyTrackingId_setsTrackingIdToEmpty_FHnu2() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("");
    assert handlingReport.getTrackingId().isEmpty();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setTrackingId_whiteSpaceTrackingId_setsTrackingIdToTrimmed_xskg3() throws Exception {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("  ABC123  ");
    assert handlingReport.getTrackingId().equals("ABC123");
  }
}