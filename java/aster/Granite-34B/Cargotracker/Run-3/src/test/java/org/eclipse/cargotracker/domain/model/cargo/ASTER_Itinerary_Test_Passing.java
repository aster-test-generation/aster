/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Itinerary_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getInitialDepartureLocation_returnsUnknownLocation_whenItineraryHasNoLegs_NHdQ0() throws Exception {
    Itinerary itinerary = new Itinerary();
    Location actual = itinerary.getInitialDepartureLocation();
    assertEquals(Location.UNKNOWN, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFinalArrivalLocationWhenNoLegs_ENcD0() throws Exception {
    Itinerary itinerary = new Itinerary();
    assertEquals(Location.UNKNOWN, itinerary.getFinalArrivalLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_equals_WithNullObject_ReturnsFalse_PwSR0() throws Exception {
    Itinerary itinerary = new Itinerary();
    Object o = null;
    boolean actual = itinerary.equals(o);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_equals_WithObjectOfDifferentType_ReturnsFalse_uIzq1() throws Exception {
    Itinerary itinerary = new Itinerary();
    Object o = new Object();
    boolean actual = itinerary.equals(o);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalArrivalDate_withoutLegs_returnsMaxDateTime_ColW1() throws Exception {
    Itinerary itinerary = new Itinerary();
    assertEquals(LocalDateTime.MAX, itinerary.getFinalArrivalDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpectedWhenItineraryIsEmpty_VRMs0() throws Exception {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }
}