/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CarrierMovement_Test_Passing {
  private LocalDateTime departureTime;
  CarrierMovement carriermovement;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetDepartureTime() throws Exception {
    departureTime = LocalDateTime.now();
    Location departureLocation = new Location(new UnLocode("USNYC"), "New York");
    Location arrivalLocation = new Location(new UnLocode("USDALLAS"), "Dallas");
    carriermovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, null);
    assertEquals(departureTime, carriermovement.getDepartureTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testArrivalLocation_ociC0() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    Location location = new Location(unLocode, "Chicago");
    CarrierMovement carrierMovement = new CarrierMovement(location, location,
            LocalDateTime.now(), LocalDateTime.now());
    Location arrivalLocation = carrierMovement.getArrivalLocation();
    assertEquals(location, arrivalLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_ecAP0() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USNYC"), "New York"),
            new Location(new UnLocode("USDAL"), "Dallas"),
            LocalDateTime.of(2022, 1, 1, 10, 0),
            LocalDateTime.of(2022, 1, 1, 11, 0));
    assertEquals(-1211645984, carrierMovement.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getArrivalTime_nOLD0() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USCHI"), "Chicago"),
            new Location(new UnLocode("USEWR"), "EWR"),
            LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 14, 0));
    assertEquals(LocalDateTime.of(2022, 1, 1, 14, 0), carrierMovement.getArrivalTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getDepartureLocationTest_Nylu0() throws Exception {
    UnLocode unLocode1 = new UnLocode("USNYC");
    Location location1 = new Location(unLocode1, "New York");
    Location location2 = new Location();
    CarrierMovement carrierMovement1 = new CarrierMovement(location1, location2, null, null);
    assertEquals(location1, carrierMovement1.getDepartureLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getDepartureTime_whenDepartureTimeIsBefore2000_thenReturnsCorrectDepartureTime_MrhJ0() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement(
            new Location(new UnLocode("USNYC"), "New York"),
            new Location(new UnLocode("USCHI"), "Chicago"),
            LocalDateTime.of(2022, 1, 1, 10, 0),
            LocalDateTime.of(2022, 1, 1, 20, 0)
    );
    assertEquals(LocalDateTime.of(2022, 1, 1, 10, 0), carrierMovement.getDepartureTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getDepartureTime_whenDepartureTimeIsAfter2000_thenReturnsCorrectDepartureTime_zEij1() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement(
            new Location(new UnLocode("USNYC"), "New York"),
            new Location(new UnLocode("USCHI"), "Chicago"),
            LocalDateTime.of(2022, 1, 1, 21, 0),
            LocalDateTime.of(2022, 1, 1, 20, 0)
    );
    assertEquals(LocalDateTime.of(2022, 1, 1, 21, 0), carrierMovement.getDepartureTime());
  }
}