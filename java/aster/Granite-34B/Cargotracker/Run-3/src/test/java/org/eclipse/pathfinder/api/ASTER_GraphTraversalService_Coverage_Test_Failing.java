/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_kDTe1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CAIML";
    String deadline = "20230101";
    List<TransitPath> result = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (TransitPath path : result) {
      assertNotNull(path);
      assertFalse(path.getTransitEdges().isEmpty());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_kDTe1_1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CAIML";
    String deadline = "20230101";
    List<TransitPath> result = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    for (TransitPath path : result) {
    }
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_kDTe1_2() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CAIML";
    String deadline = "20230101";
    List<TransitPath> result = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    for (TransitPath path : result) {
    }
    assertFalse(result.isEmpty());
  }
}