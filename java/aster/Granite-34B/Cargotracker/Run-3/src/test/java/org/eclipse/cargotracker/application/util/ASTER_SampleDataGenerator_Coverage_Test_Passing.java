/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.eclipse.cargotracker.domain.model.handling.HandlingEventFactory;
import org.eclipse.cargotracker.domain.model.location.SampleLocations;
import org.eclipse.cargotracker.domain.model.voyage.SampleVoyages;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SampleDataGenerator_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargo_DFeB4() {
    TrackingId trackingId = new TrackingId("ABC123");
    RouteSpecification routeSpecification = new RouteSpecification(SampleLocations.HONGKONG, SampleLocations.HELSINKI, LocalDate.now().plusDays(15));
    Cargo cargo = new Cargo(trackingId, routeSpecification);
    assert cargo != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHandlingEventFactory_NBGL9() {
    HandlingEventFactory handlingEventFactory = new HandlingEventFactory();
    assert handlingEventFactory != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRouteSpecification_hAAn11() {
    RouteSpecification routeSpecification = new RouteSpecification(SampleLocations.HONGKONG, SampleLocations.MELBOURNE, LocalDate.now().plusMonths(2));
    assert routeSpecification != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrackingId_jRlt12() {
    TrackingId trackingId = new TrackingId("MNO456");
    assert trackingId != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSampleLocations_xqXF13() {
    SampleLocations sampleLocations = new SampleLocations();
    assert sampleLocations != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSampleVoyages_FCyY14() {
    SampleVoyages sampleVoyages = new SampleVoyages();
    assert sampleVoyages != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLeg_ZSsN10_FQek0() {
    Leg leg = new Leg(SampleVoyages.HONGKONG_TO_NEW_YORK, SampleLocations.HANGZOU, SampleLocations.NEWYORK, LocalDateTime.now().minusDays(10).minusHours(1).minusMinutes(19), LocalDateTime.now().minusDays(3).minusHours(7).minusMinutes(2));
    assert leg != null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testItinerary_UqbF5_aghZ0() {
    List<Leg> legs = new ArrayList<>();
    Leg leg1 = new Leg(SampleVoyages.HONGKONG_TO_NEW_YORK, SampleLocations.HONGKONG, SampleLocations.NEWYORK, LocalDateTime.now().minusDays(7).minusHours(2).minusMinutes(4), LocalDateTime.now().minusDays(1).minusHours(10).minusMinutes(52));
    Leg leg2 = new Leg(SampleVoyages.NEW_YORK_TO_DALLAS, SampleLocations.NEWYORK, SampleLocations.DALLAS, LocalDateTime.now().plusDays(2).minusHours(18).minusMinutes(38), LocalDateTime.now().plusDays(6).minusHours(3).minusMinutes(22));
    Leg leg3 = new Leg(SampleVoyages.DALLAS_TO_HELSINKI, SampleLocations.DALLAS, SampleLocations.HELSINKI, LocalDateTime.now().plusDays(8).minusHours(8).minusMinutes(18), LocalDateTime.now().plusDays(14).minusHours(12).minusMinutes(29));
    legs.add(leg1);
    legs.add(leg2);
    legs.add(leg3);
    Itinerary itinerary = new Itinerary(legs);
    assert itinerary != null;
  }
}