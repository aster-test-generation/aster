/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRequestPossibleRoutesForCargo_gLOY0_1() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("XYZ");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRequestPossibleRoutesForCargo_gLOY0_2() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("XYZ");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertTrue(itineraries.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRequestPossibleRoutesForCargoWithNullTrackingId_xUcf1_1() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testRequestPossibleRoutesForCargoWithNullTrackingId_xUcf1_2() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = null;
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(0, itineraries.size());
  }
}