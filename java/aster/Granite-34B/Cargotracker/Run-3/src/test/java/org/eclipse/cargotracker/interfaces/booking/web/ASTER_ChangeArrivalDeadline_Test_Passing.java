/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ChangeArrivalDeadline_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_Setz0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    String trackingId = changeArrivalDeadline.getTrackingId();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCargoTest_nIFu0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    CargoRoute cargoRoute = changeArrivalDeadline.getCargo();
    assertEquals(null, cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setTrackingIdTest_LdFK0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.setTrackingId("ABC123");
    changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.setTrackingId("");
    changeArrivalDeadline = new ChangeArrivalDeadline();
    changeArrivalDeadline.setTrackingId(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadline_npPU0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = LocalDate.now();
    changeArrivalDeadline.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, changeArrivalDeadline.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadlineWithNull_RxlB1() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = null;
    changeArrivalDeadline.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, changeArrivalDeadline.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadlineWithFutureDate_rnxF2() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = LocalDate.now().plusDays(1);
    changeArrivalDeadline.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, changeArrivalDeadline.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetArrivalDeadlineWithPastDate_CuVs3() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = LocalDate.now().minusDays(1);
    changeArrivalDeadline.setArrivalDeadline(arrivalDeadline);
    assertEquals(arrivalDeadline, changeArrivalDeadline.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_RBXW0() throws Exception {
    ChangeArrivalDeadline changeArrivalDeadline = new ChangeArrivalDeadline();
    LocalDate arrivalDeadline = changeArrivalDeadline.getArrivalDeadline();
    assertNotNull(arrivalDeadline);
  }
}