/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class Aster_HandlingReportService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithCompletionTime_ckWa0() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("2022-03-15T12:00:00");
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithVoyageNumber_OkJZ2() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("voyage123");
    handlingReportService.submitReport(handlingReport);
    // Add assertions here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithNoVoyageNumber_dTqj3() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber(null);
    handlingReportService.submitReport(handlingReport);
    verify(handlingReportService, times(1)).submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithEventType_RgJL4() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("LOAD");
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithNoEventType_EHqj5() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType(null);
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithUnLocode_PvbK6() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("USCHI");
    handlingReportService.submitReport(handlingReport);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithNoUnLocode_ByhN7() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode(null);
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithTrackingId_PIPc8() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("ABC123");
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithAllValues_cueo10() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("2022-03-15T12:00:00");
    handlingReport.setVoyageNumber("voyage123");
    handlingReport.setEventType("LOAD");
    handlingReport.setUnLocode("USCHI");
    handlingReport.setTrackingId("ABC123");
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithNoCompletionTime_cIdf1() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime(null);
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithVoyageNumber_OkJZ2_fid2() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("voyage123");
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithNoVoyageNumber_dTqj3_fid2() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber(null);
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithUnLocode_PvbK6_fid2() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("USCHI");
    handlingReportService.submitReport(handlingReport);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitReportWithNoTrackingId_gJnt9() {
    HandlingReportService handlingReportService = new HandlingReportService();
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId(null);
    handlingReportService.submitReport(handlingReport);
  }
}