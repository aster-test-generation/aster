/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDate_kgvo0() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    LocalDateTime fromDate = LocalDateTime.now();
    transitEdge.setFromDate(fromDate);
    assertEquals(fromDate, transitEdge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromDateTest_xhWy0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 1, 1, 0, 0));
    assertEquals(LocalDateTime.of(2022, 1, 1, 0, 0), transitEdge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_VibJ0() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setVoyageNumber("voyageNumber");
    assertEquals("voyageNumber", transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNull_ohyV1() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setVoyageNumber(null);
    assertEquals(null, transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_RNHw0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String expected = "TransitEdge{" +
            "voyageNumber='voyageNumber'" +
            ", fromUnLocode='fromUnLocode'" +
            ", toUnLocode='toUnLocode'" +
            ", fromDate=" + transitEdge.getFromDate() +
            ", toDate=" + transitEdge.getToDate() +
            '}';
    assertEquals(expected, transitEdge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setToUnLocodeTest1_kVig0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber1", "fromUnLocode1", "toUnLocode1", LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("newToUnLocode");
    assert transitEdge.getToUnLocode().equals("newToUnLocode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setToUnLocodeTest2_vdyH1() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber2", "fromUnLocode2", "toUnLocode2", LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("newToUnLocode2");
    assert transitEdge.getToUnLocode().equals("newToUnLocode2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest_zffy0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String expected = "toUnLocode";
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest2_NpbZ1() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber2", "fromUnLocode2", "toUnLocode2", LocalDateTime.now(), LocalDateTime.now());
    String expected = "toUnLocode2";
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberTest_xYwl0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String result = transitEdge.getVoyageNumber();
    assertEquals("voyageNumber", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberNullTest_HkMd1() throws Exception {
    TransitEdge transitEdge = new TransitEdge(null, "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String result = transitEdge.getVoyageNumber();
    assertEquals(null, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToDateTest_Zgoa0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals(transitEdge.getToDate(), transitEdge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromUnLocodeTest_dwsZ0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getFromUnLocode();
    String expected = "fromUnLocode";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromUnLocodeTest_RgtW1() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getFromUnLocode();
    String expected = "toUnLocode";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromUnLocodeTest_ZjAO2() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getFromUnLocode();
    String expected = "otherUnLocode";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromUnLocodeTest_xFqs3() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getFromUnLocode();
    String expected = " ";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromUnLocodeTest_gjGl4() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getFromUnLocode();
    String expected = null;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_uOtV0() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    LocalDateTime toDate = LocalDateTime.now();
    transitEdge.setToDate(toDate);
    assertEquals(toDate, transitEdge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_msxO1() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime toDate = LocalDateTime.now();
    transitEdge.setToDate(toDate);
    assertEquals(toDate, transitEdge.getToDate());
  }
}