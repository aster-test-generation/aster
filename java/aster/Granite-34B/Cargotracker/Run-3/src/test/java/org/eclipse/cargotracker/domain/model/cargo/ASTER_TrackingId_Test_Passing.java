/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_GSwJ0() throws Exception {
    TrackingId trackingId = new TrackingId("id");
    String actual = trackingId.toString();
    String expected = "id";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToStringDefault_LOZt1() throws Exception {
    TrackingId trackingId = new TrackingId();
    String actual = trackingId.toString();
    String expected = "";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testHashCodeWithEmptyId_pxuF1() throws Exception {
    TrackingId trackingId = new TrackingId();
    int expected = 0;
    int actual = trackingId.hashCode();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_null_returnsFalse_SXVI0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    TrackingId other = null;
    boolean actual = trackingId.sameValueAs(other);
    assertFalse(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_sameObject_returnsTrue_XiAB1() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    boolean actual = trackingId.sameValueAs(trackingId);
    assertTrue(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_sameValues_returnsTrue_lzfw2() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    TrackingId other = new TrackingId("12345");
    boolean actual = trackingId.sameValueAs(other);
    assertTrue(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testEqualsWithNullObject_YQKL0() throws Exception {
    TrackingId trackingId = new TrackingId();
    Object o = null;
    boolean actual = trackingId.equals(o);
    boolean expected = false;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testEqualsWithObjectOfDifferentClass_lsSs1() throws Exception {
    TrackingId trackingId = new TrackingId();
    Object o = new Object();
    boolean actual = trackingId.equals(o);
    boolean expected = false;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testEqualsWithObjectWithSameId_REFo2() throws Exception {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("123");
    boolean actual = trackingId1.equals(trackingId2);
    boolean expected = true;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testEqualsWithObjectWithDifferentId_juee3() throws Exception {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("456");
    boolean actual = trackingId1.equals(trackingId2);
    boolean expected = false;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_uZMK0() throws Exception {
    TrackingId trackingId = new TrackingId("12345");
    assertEquals("12345", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithEmptyId_yjLJ1() throws Exception {
    TrackingId trackingId = new TrackingId("");
    assertEquals("", trackingId.getIdString());
  }
}