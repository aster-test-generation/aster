/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.file;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventFilesCheckpoint_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointer_tOIV0() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(100);
    assertEquals(100, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerToNegativeValue_avXS1() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(-100);
    assertEquals(-100, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerToZero_PSkn2() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(0);
    assertEquals(0, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointer_ZaxA0() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(100L);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    org.junit.jupiter.api.Assertions.assertEquals(100L, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointer_whenFilePointerIsZero_thenReturnsZero_nqlC1() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(0L);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    org.junit.jupiter.api.Assertions.assertEquals(0L, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointer_whenFilePointerIsNegative_thenReturnsNegative_Pldj2() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(-100L);
    long filePointer = eventFilesCheckpoint.getFilePointer();
    org.junit.jupiter.api.Assertions.assertEquals(-100L, filePointer);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setFilesTest_XBHa0() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    List<File> files = new ArrayList<>();
    eventFilesCheckpoint.setFiles(files);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setFilesTest_XOEZ1() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    eventFilesCheckpoint.setFiles(files);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setFilesTest_AAqA2() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    files.add(new File("file3.txt"));
    eventFilesCheckpoint.setFiles(files);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setFilesTest_LVIp3() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    files.add(new File("file3.txt"));
    files.add(new File("file4.txt"));
    eventFilesCheckpoint.setFiles(files);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setFilesTest_DQBj4() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    files.add(new File("file3.txt"));
    files.add(new File("file4.txt"));
    files.add(new File("file5.txt"));
    eventFilesCheckpoint.setFiles(files);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setFilesTest_oJbW5() throws Exception {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    List<File> files = new ArrayList<>();
    files.add(new File("file1.txt"));
    files.add(new File("file2.txt"));
    files.add(new File("file3.txt"));
    files.add(new File("file4.txt"));
    files.add(new File("file5.txt"));
    files.add(new File("file6.txt"));
    eventFilesCheckpoint.setFiles(files);
  }
}