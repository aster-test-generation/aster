/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoRoute_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginName_1_eMza1() {
    CargoRoute cargoRoute = new CargoRoute("XYZ", new Location("US", "Los Angeles"), new Location("US", "New York"),
            LocalDate.of(2022, 12, 31), false, false, new Location("US", "Chicago"), "IN_TRANSIT", new ArrayList<>());
    assertEquals("Los Angeles", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginName_2_tEVw2() {
    CargoRoute cargoRoute = new CargoRoute("PQR", new Location("US", "Chicago"), new Location("US", "Los Angeles"),
            LocalDate.of(2022, 12, 31), false, false, new Location("US", "New York"), "IN_TRANSIT", new ArrayList<>());
    assertEquals("Chicago", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginName_3_QoDX3() {
    CargoRoute cargoRoute = new CargoRoute("XYZ", new Location("US", "New York"), new Location("US", "Los Angeles"),
            LocalDate.of(2022, 12, 31), false, false, new Location("US", "Chicago"), "DELIVERED", new ArrayList<>());
    assertEquals("New York", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginName_4_WKjO4() {
    CargoRoute cargoRoute = new CargoRoute("ABC", new Location("US", "Los Angeles"), new Location("US", "New York"),
            LocalDate.of(2022, 12, 31), false, false, new Location("US", "Chicago"), "IN_TRANSIT", new ArrayList<>());
    assertEquals("Los Angeles", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisrouted_hRYE0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    Location lastKnownLocation = new Location("USLAX", "Los Angeles");
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), true, false, lastKnownLocation, "IN_TRANSIT", legs);
    boolean actual = cargoRoute.isMisrouted();
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisroutedWithFalseValue_AdyL1() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    Location lastKnownLocation = new Location("USLAX", "Los Angeles");
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, lastKnownLocation, "IN_TRANSIT", legs);
    boolean actual = cargoRoute.isMisrouted();
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest_lNkO0() {
    Location origin = new Location("string", "string");
    Location finalDestination = new Location("string", "string");
    CargoRoute cargoRoute = new CargoRoute("string", origin, finalDestination, LocalDate.now(), false, false, origin, "string", new ArrayList<Leg>());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocationName_cMpC0() {
    Location lastKnownLocation = new Location("USNYC", "New York");
    CargoRoute cargoRoute = new CargoRoute("ABC123", new Location("USCHI", "Chicago"),
            new Location("USDAL", "Dallas"), LocalDate.now(), false, false, lastKnownLocation, "In Transit", new ArrayList<Leg>());
    assertEquals("New York", cargoRoute.getLastKnownLocationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsClaimed_jYlO0() {
    CargoRoute cargoRoute = new CargoRoute("ABC123", new Location("USNYC", "New York"), new Location("USDAL", "Dallas"),
            LocalDate.of(2022, 12, 31), false, true, new Location("USLAX", "Los Angeles"), "IN_TRANSIT", new ArrayList<>());
    assertTrue(cargoRoute.isClaimed());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsClaimedWithFalseClaim_FIQF1() {
    CargoRoute cargoRoute = new CargoRoute("XYZ789", new Location("USNYC", "New York"), new Location("USDAL", "Dallas"),
            LocalDate.of(2022, 12, 31), false, false, new Location("USLAX", "Los Angeles"), "IN_TRANSIT", new ArrayList<>());
    assertFalse(cargoRoute.isClaimed());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocation_IBHM0() {
    Location lastKnownLocation = new Location("USNYC", "New York");
    CargoRoute cargoRoute = new CargoRoute("ABC123", new Location("USCHI", "Chicago"), new Location("USDAL", "Dallas"),
            LocalDate.of(2022, 12, 31), false, false, lastKnownLocation, "In Transit", new ArrayList<Leg>());
    assertEquals("New York (USNYC)", cargoRoute.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTransportStatus_KCTu0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    LocalDate arrivalDeadline = LocalDate.of(2023, 12, 31);
    boolean misrouted = false;
    boolean claimed = false;
    Location lastKnownLocation = new Location("USLAX", "Los Angeles");
    String transportStatus = "In Transit";
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, arrivalDeadline, misrouted, claimed, lastKnownLocation, transportStatus, legs);
    String actualTransportStatus = cargoRoute.getTransportStatus();
    assertEquals(transportStatus, actualTransportStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocationCode_kmLL0() {
    Location lastKnownLocation = new Location("USNYC", "New York");
    CargoRoute cargoRoute = new CargoRoute("ABC123", new Location("USCHI", "Chicago"), new Location("USDALL", "Dallas"),
            LocalDate.of(2022, 12, 31), false, false, lastKnownLocation, "In Transit", new ArrayList<Leg>());
    assertEquals("USNYC", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocationCode_withEmptyLastKnownLocation_NJLA3() {
    Location lastKnownLocation = new Location("", "");
    CargoRoute cargoRoute = new CargoRoute("ABC123", new Location("USCHI", "Chicago"), new Location("USDALL", "Dallas"),
            LocalDate.of(2022, 12, 31), false, false, lastKnownLocation, "In Transit", new ArrayList<Leg>());
    assertEquals("", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationName_WieQ0_TgJc0() {
    Location finalDestination = new Location("ABC", "XYZ");
    CargoRoute cargoRoute = new CargoRoute("123", new Location("PQR", "LMN"), finalDestination, LocalDate.now(), false, false, new Location("XYZ", "ABC"), "IN_TRANSIT", new ArrayList());
    assertEquals("XYZ", cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationName_withEmptyFinalDestinationName_oRKO2_FgVX0() {
    Location finalDestination = new Location("ABC", "");
    CargoRoute cargoRoute = new CargoRoute("123", new Location("PQR", "LMN"), finalDestination, LocalDate.now(), false, false, new Location("XYZ", "ABC"), "IN_TRANSIT", new ArrayList());
    assertEquals("", cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestination_returnsCorrectLocation_XNnK0_IyeN0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, null, "IN_PORT", new ArrayList());
    String actualFinalDestination = cargoRoute.getFinalDestination();
    String expectedFinalDestination = "Dallas (USDAL)";
    assertEquals(expectedFinalDestination, actualFinalDestination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestination_returnsCorrectLocation_forClaimedCargo_EEhV2_cbPx0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    List<Leg> legs = new ArrayList<Leg>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, true, null, "IN_PORT", legs);
    String actualFinalDestination = cargoRoute.getFinalDestination();
    String expectedFinalDestination = "Dallas (USDAL)";
    assertEquals(expectedFinalDestination, actualFinalDestination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationCode_returnsCorrectCode_bsdi0_nqNW0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("AUMEL", "Melbourne");
    List<Leg> legs = new ArrayList<Leg>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, null, "NOT_RECEIVED", legs);
    String actualCode = cargoRoute.getFinalDestinationCode();
    assertEquals("AUMEL", actualCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationCode_returnsCorrectCode_withLastKnownLocation_herM1_nCpv0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("AUMEL", "Melbourne");
    Location lastKnownLocation = new Location("USCHI", "Chicago");
    List<Leg> legs = new ArrayList<Leg>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, lastKnownLocation, "IN_PORT", legs);
    String actualCode = cargoRoute.getLastKnownLocationCode();
    assertEquals("USCHI", actualCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationCode_returnsCorrectCode_withMisroutedCargo_TwXe2_MhUY0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("AUMEL", "Melbourne");
    List<Leg> legs = new ArrayList<Leg>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), true, false, null, "NOT_RECEIVED", legs);
    String actualCode = cargoRoute.getFinalDestinationCode();
    assertEquals("AUMEL", actualCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationCode_returnsCorrectCode_withClaimedCargo_CtgX3_VpST0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("AUMEL", "Melbourne");
    List<Leg> legs = new ArrayList<>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, true, null, "NOT_RECEIVED", legs);
    String actualCode = cargoRoute.getFinalDestinationCode();
    assertEquals("AUMEL", actualCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationCode_returnsCorrectCode_withTransportStatusReceived_xhWe4_SODq0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("AUMEL", "Melbourne");
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, null, "RECEIVED", new ArrayList());
    String actualCode = cargoRoute.getFinalDestinationCode();
    assertEquals("AUMEL", actualCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationCode_returnsCorrectCode_withTransportStatusUnloadedFromVehicle_XlNZ6_FBjH0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("AUMEL", "Melbourne");
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, null, "UNLOADED_FROM_VEHICLE", new ArrayList());
    String actualCode = cargoRoute.getFinalDestinationCode();
    assertEquals("AUMEL", actualCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextLocationWithMisroutedCargo_FFNg1_tzBj0() {
    CargoRoute cargoRoute = new CargoRoute("XYZ789", new Location("USNYC", "New York"), new Location("USCHI", "Chicago"), LocalDate.now(), true, false, new Location("USLAX", "Los Angeles"), "MISROUTED", new ArrayList<>());
    assertEquals("USLAX", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsRoutedWhenLegsAreEmpty_eWSt0_yfON0() {
    CargoRoute cargoRoute = new CargoRoute("ABC", new Location("USNYC", "New York"), new Location("USDAL", "Dallas"),
            LocalDate.of(2022, 1, 1), false, false, new Location("USLAX", "Los Angeles"), "IN_PORT", new ArrayList<Leg>());
    assertFalse(cargoRoute.isRouted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginName_ZgJG0_MUHO0() {
    CargoRoute cargoRoute = new CargoRoute("ABC", new Location("US", "New York"), new Location("US", "Los Angeles"),
            LocalDate.of(2022, 12, 31), false, false, new Location("US", "Chicago"), "IN_TRANSIT", new ArrayList<>());
    assertEquals("New York", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLegsWithNoLegs_dEQF1_rrtD0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, null, "NOT_RECEIVED", new ArrayList<>());
    List<Leg> result = cargoRoute.getLegs();
    assertTrue(result.isEmpty());
  }
}