/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingReport_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_BcYe0_fid1() {
    HandlingReport handlingReport = new HandlingReport();
    String trackingId = handlingReport.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_Length_GOmT3() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("12345678901234567890123456789012345678901234567890");
    String trackingId = handlingReport.getTrackingId();
    assertNotNull(trackingId);
    assertEquals(36, trackingId.length());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_InvalidFormat_ufkd4() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("123456789012345678901234567890123456789012345678901");
    String trackingId = handlingReport.getTrackingId();
    assertNotNull(trackingId);
    assertNotEquals("123456789012345678901234567890123456789012345678901", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_with_invalid_data_FUIi1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("invalid_data");
    String actualCompletionTime = handlingReport.getCompletionTime();
    assertEquals("", actualCompletionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_with_null_data_nKpR2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime(null);
    String actualCompletionTime = handlingReport.getCompletionTime();
    assertEquals("", actualCompletionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setTrackingId_shouldNotSetTrackingId_whenTrackingIdIsInvalid_FvUQ3() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("InvalidTrackingId");
    assert !handlingReport.getTrackingId().equals("InvalidTrackingId");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_Length_GOmT3_2_fid2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("12345678901234567890123456789012345678901234567890");
    String trackingId = handlingReport.getTrackingId();
    assertEquals(36, trackingId.length());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_InvalidFormat_ufkd4_2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("123456789012345678901234567890123456789012345678901");
    String trackingId = handlingReport.getTrackingId();
    assertNotEquals("123456789012345678901234567890123456789012345678901", trackingId);
  }
}