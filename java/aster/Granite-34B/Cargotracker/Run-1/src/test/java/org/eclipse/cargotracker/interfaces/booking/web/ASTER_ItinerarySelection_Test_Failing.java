/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ItinerarySelection_Test_Failing {
  private ItinerarySelection itinerarySelection;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditates_Dfqx0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertNotNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditatesWithNoRouteCandidates_VIBq1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertTrue(routeCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditatesWithOneRouteCandidate_Tair2() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertEquals(1, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditatesWithMultipleRouteCandidates_fZNf3() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertTrue(routeCandidates.size() > 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCandidates_AfYQ0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCandidates();
    assertNotNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCandidates_withNoRouteCandidates_xkKV1() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCandidates();
    assertTrue(routeCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCandidates_withOneRouteCandidate_MEmV2() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCandidates();
    assertEquals(1, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCandidates_withMultipleRouteCandidates_SUme3() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCandidates();
    assertTrue(routeCandidates.size() > 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignItinerary_oPdo0_KVaN0() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    int routeIndex = 0;
    String trackingId = "123456";
    itinerarySelection.setTrackingId(trackingId);
    String expected = "show.html?faces-redirect=true&trackingId=" + trackingId;
    String actual = itinerarySelection.assignItinerary(routeIndex);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditatesWithNoRouteCandidates_FGIG4() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertNotNull(routeCandidates);
    assertTrue(routeCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditatesWithOneRouteCandidate_FeDW5() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertNotNull(routeCandidates);
    assertEquals(1, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteCanditatesWithMultipleRouteCandidates_WTok6() {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> routeCandidates = itinerarySelection.getRouteCanditates();
    assertNotNull(routeCandidates);
    assertTrue(routeCandidates.size() > 1);
  }
}