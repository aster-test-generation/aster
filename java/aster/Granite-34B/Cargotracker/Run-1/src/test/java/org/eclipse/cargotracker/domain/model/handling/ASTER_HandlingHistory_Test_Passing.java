/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMostRecentlyCompletedEvent_noEvents_returnsNull_nnDi0() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<>());
    HandlingEvent result = handlingHistory.getMostRecentlyCompletedEvent();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withNullObject_shouldReturnFalse_dQDz0() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<HandlingEvent>());
    boolean actual = handlingHistory.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withObjectOfDifferentType_shouldReturnFalse_yLUz1() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<HandlingEvent>());
    boolean actual = handlingHistory.equals(new Object());
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withObjectWithSameHandlingEvents_shouldReturnTrue_lFEg2() {
    HandlingHistory handlingHistory1 = new HandlingHistory(new ArrayList<HandlingEvent>());
    HandlingHistory handlingHistory2 = new HandlingHistory(new ArrayList<HandlingEvent>());
    boolean actual = handlingHistory1.equals(handlingHistory2);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_CRdU0() {
    HandlingHistory handlingHistory = new HandlingHistory(Collections.emptyList());
    assertEquals(Collections.emptyList().hashCode(), handlingHistory.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_gUHS2() {
    HandlingHistory handlingHistory = new HandlingHistory(Collections.singletonList(new HandlingEvent()));
    assertEquals(Collections.singletonList(new HandlingEvent()).hashCode(), handlingHistory.hashCode());
  }
}