/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Coordinates_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_vjgn0() {
    Coordinates coordinates = new Coordinates(0.0, 1.0);
    double longitude = coordinates.getLongitude();
    assert longitude == 1.0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_zeroLongitude_PxNW1() {
    Coordinates coordinates = new Coordinates(0.0, 0.0);
    double longitude = coordinates.getLongitude();
    assert longitude == 0.0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_negativeLongitude_ZJcE2() {
    Coordinates coordinates = new Coordinates(0.0, -1.0);
    double longitude = coordinates.getLongitude();
    assert longitude == -1.0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_positiveLongitude_DOnq3() {
    Coordinates coordinates = new Coordinates(0.0, 2.0);
    double longitude = coordinates.getLongitude();
    assert longitude == 2.0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_maxLongitude_yAsu4() {
    Coordinates coordinates = new Coordinates(0.0, 180.0);
    double longitude = coordinates.getLongitude();
    assert longitude == 180.0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_minLongitude_pImf5() {
    Coordinates coordinates = new Coordinates(0.0, -180.0);
    double longitude = coordinates.getLongitude();
    assert longitude == -180.0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_nullCoordinates_uCLu6() {
    Coordinates coordinates = null;
    try {
      double longitude = coordinates.getLongitude();
    } catch (NullPointerException e) {
      assert true;
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_invalidLatitude_HuTC7() {
    Coordinates coordinates = new Coordinates(91.0, 0.0);
    try {
      double longitude = coordinates.getLongitude();
    } catch (IllegalArgumentException e) {
      assert true;
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongitude_invalidLongitude_jKyH8() {
    Coordinates coordinates = new Coordinates(0.0, 181.0);
    try {
      double longitude = coordinates.getLongitude();
    } catch (IllegalArgumentException e) {
      assert true;
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_KpHG0() {
    Coordinates coordinates = new Coordinates(37.7749, -122.4194);
    double latitude = coordinates.getLatitude();
    assert latitude == 37.7749;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_CgyO1() {
    Coordinates coordinates = new Coordinates(0, 0);
    double latitude = coordinates.getLatitude();
    assert latitude == 0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_DWvS2() {
    Coordinates coordinates = new Coordinates(-90, 0);
    double latitude = coordinates.getLatitude();
    assert latitude == -90;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_BcrQ3() {
    Coordinates coordinates = new Coordinates(90, 0);
    double latitude = coordinates.getLatitude();
    assert latitude == 90;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_zwZv4() {
    Coordinates coordinates = new Coordinates(180, 0);
    double latitude = coordinates.getLatitude();
    assert latitude == 180;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_iEaz5() {
    Coordinates coordinates = new Coordinates(-180, 0);
    double latitude = coordinates.getLatitude();
    assert latitude == -180;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_DLgP6() {
    Coordinates coordinates = new Coordinates(37.7749, -122.4194);
    double latitude = coordinates.getLatitude();
    assert latitude != 0;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_JQhh7() {
    Coordinates coordinates = new Coordinates(37.7749, -122.4194);
    double latitude = coordinates.getLatitude();
    assert latitude != 90;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_OzTa8() {
    Coordinates coordinates = new Coordinates(37.7749, -122.4194);
    double latitude = coordinates.getLatitude();
    assert latitude != -90;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_iWzY9() {
    Coordinates coordinates = new Coordinates(37.7749, -122.4194);
    double latitude = coordinates.getLatitude();
    assert latitude != 180;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_TnCf10() {
    Coordinates coordinates = new Coordinates(37.7749, -122.4194);
    double latitude = coordinates.getLatitude();
    assert latitude != -180;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLatitudeTest_xqOf12() {
    Coordinates coordinates = new Coordinates(0, 0);
    double latitude = coordinates.getLatitude();
    assert latitude != 37.7749;
  }
}