/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Schedule_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_KDxn0() {
    Schedule schedule = new Schedule();
    boolean actual = schedule.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonScheduleObject_uXFr1() {
    Schedule schedule = new Schedule();
    boolean actual = schedule.equals(new Object());
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_kEEg2() {
    Schedule schedule = new Schedule();
    boolean actual = schedule.equals(schedule);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithEqualObject_oQzI3() {
    Schedule schedule1 = new Schedule();
    Schedule schedule2 = new Schedule();
    boolean actual = schedule1.equals(schedule2);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCarrierMovements_returnsModifiableList_DHmI0() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> result = schedule.getCarrierMovements();
    assertNotNull(result);
    assertNotSame(Collections.emptyList(), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCarrierMovements_returnsUnmodifiableList_Rkyp1() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> result = schedule.getCarrierMovements();
    try {
      result.add(new CarrierMovement());
      fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCarrierMovements_returnsModifiableList_DHmI0_1() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> result = schedule.getCarrierMovements();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCarrierMovements_returnsModifiableList_DHmI0_2() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> result = schedule.getCarrierMovements();
    assertNotSame(Collections.emptyList(), result);
  }
}