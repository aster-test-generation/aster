/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEventRegistrationAttempt_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode_returns_unLocode_of_the_handling_event_registration_attempt_CpUy0() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0),
            new TrackingId("ABC123"),
            new VoyageNumber("voyage1"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals(new UnLocode("USCHI"), attempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode_returns_null_if_unLocode_is_not_set_iyOt1() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0),
            new TrackingId("ABC123"),
            new VoyageNumber("voyage1"),
            HandlingEvent.Type.LOAD,
            null
    );
    assertEquals(null, attempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_Ktgt0() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    assertEquals("HandlingEventRegistrationAttempt{" + "registrationTime=" + attempt.getRegistrationTime() + ", completionTime=" + attempt.getCompletionTime() + ", trackingId=" + attempt.getTrackingId() + ", voyageNumber=" + attempt.getVoyageNumber() + ", type=" + attempt.getType() + ", unLocode=" + attempt.getUnLocode() + "}", attempt.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullValues_pZcY1() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(null, null, null, null, null, null);
    assertEquals("HandlingEventRegistrationAttempt{" + "registrationTime=" + attempt.getRegistrationTime() + ", completionTime=" + attempt.getCompletionTime() + ", trackingId=" + attempt.getTrackingId() + ", voyageNumber=" + attempt.getVoyageNumber() + ", type=" + attempt.getType() + ", unLocode=" + attempt.getUnLocode() + "}", attempt.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest_PSna0() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD,
            new UnLocode("USCHI"));
    assertEquals(HandlingEvent.Type.LOAD, attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest_ZDlK1() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.UNLOAD,
            new UnLocode("USCHI"));
    assertEquals(HandlingEvent.Type.UNLOAD, attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest_CGyQ2() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.RECEIVE,
            new UnLocode("USCHI"));
    assertEquals(HandlingEvent.Type.RECEIVE, attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest_yjut3() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.CLAIM,
            new UnLocode("USCHI"));
    assertEquals(HandlingEvent.Type.CLAIM, attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest_YbWH4() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.CUSTOMS,
            new UnLocode("USCHI"));
    assertEquals(HandlingEvent.Type.CUSTOMS, attempt.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumber_kzQq0_1() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    VoyageNumber voyageNumber = attempt.getVoyageNumber();
    assertNotNull(voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumber_kzQq0_2() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    VoyageNumber voyageNumber = attempt.getVoyageNumber();
    assertEquals("123", voyageNumber.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberNull_yTwp1() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), null, HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    VoyageNumber voyageNumber = attempt.getVoyageNumber();
    assertNull(voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberCoverage_xXDc2() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), new VoyageNumber("123"), HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    attempt.getVoyageNumber();
    attempt.getVoyageNumber();
    attempt.getVoyageNumber();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberCoverageWithNull_Xqdd3() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("123"), null, HandlingEvent.Type.LOAD, new UnLocode("USCHI"));
    attempt.getVoyageNumber();
    attempt.getVoyageNumber();
    attempt.getVoyageNumber();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getRegistrationTime_returns_the_correct_registration_time_ZVYr0() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 2, 1, 12, 0),
            new TrackingId("ABC123"),
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals(LocalDateTime.of(2022, 1, 1, 12, 0), attempt.getRegistrationTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingId_yKMy0() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0),
            new TrackingId("123"),
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    TrackingId trackingId = attempt.getTrackingId();
    assertEquals("123", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingId_null_RXxq1() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 12, 0),
            LocalDateTime.of(2022, 1, 1, 13, 0),
            null,
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    TrackingId trackingId = attempt.getTrackingId();
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTime_ruqk0() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 10, 0),
            LocalDateTime.of(2022, 1, 1, 12, 0),
            new TrackingId("123"),
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals(LocalDateTime.of(2022, 1, 1, 12, 0), attempt.getCompletionTime());
  }
}