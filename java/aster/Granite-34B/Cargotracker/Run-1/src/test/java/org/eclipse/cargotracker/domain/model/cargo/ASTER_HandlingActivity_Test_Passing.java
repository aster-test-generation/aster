/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Schedule;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingActivity_Test_Passing {
  HandlingActivity handlingactivity;
  HandlingActivity otherHandlingActivity;
  Voyage voyage;
  VoyageNumber voyageNumber;
  UnLocode unLocode;
  private HandlingEvent.Type type;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void isEmpty_type_not_null_should_return_false_qNNW0_KtQN0() {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("SESTO"), "Stockholm"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    boolean isEmpty = handlingActivity.isEmpty();
    Assertions.assertFalse(isEmpty);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest1_wtEe0_wZkn0() {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    assertEquals(HandlingEvent.Type.LOAD, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest3_rpIJ2_uxfx0() {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.RECEIVE, new Location(new UnLocode("USHGH"), "Houston"));
    assertEquals(HandlingEvent.Type.RECEIVE, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest4_IAoH3_sgXg0() {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.CLAIM, new Location(new UnLocode("USHEL"), "Helsinki"), new Voyage(new VoyageNumber("8901"), new Schedule()));
    assertEquals(HandlingEvent.Type.CLAIM, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTypeTest5_wrWh4_onYt0() {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.CUSTOMS, new Location(new UnLocode("USBOS"), "Boston"));
    assertEquals(HandlingEvent.Type.CUSTOMS, handlingActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation_YwyA0_mrox0() {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    Location location = activity.getLocation();
    assertEquals(new Location(new UnLocode("USCHI"), "Chicago"), location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation2_PICG2_ZUmA0() {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.UNLOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    Location location = activity.getLocation();
    assertEquals(new Location(new UnLocode("USNYC"), "New York"), location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation3_pyRe3_dFOd0() {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.RECEIVE, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    Location location = activity.getLocation();
    assertEquals(new Location(new UnLocode("USCHI"), "Chicago"), location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation4_jkjf4_MgzM0() {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.CLAIM, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    Location location = activity.getLocation();
    assertEquals(new Location(new UnLocode("USNYC"), "New York"), location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocation5_UWQt5_lPYr0() {
    HandlingActivity activity = new HandlingActivity(HandlingEvent.Type.CUSTOMS, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    Location location = activity.getLocation();
    assertEquals(new Location(new UnLocode("USCHI"), "Chicago"), location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_Uapa0_Bqjo0() {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.LOAD, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    assertEquals(new HashCodeBuilder().append(HandlingEvent.Type.LOAD).append(new Location(new UnLocode("USCHI"), "Chicago")).append(new Voyage(new VoyageNumber("0123"), new Schedule())).toHashCode(), handlingActivity.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode2_UshO1_LSph0() {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.UNLOAD, new Location(new UnLocode("USNYC"), "New York"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    assertEquals(new HashCodeBuilder().append(HandlingEvent.Type.UNLOAD).append(new Location(new UnLocode("USNYC"), "New York")).append(new Voyage(new VoyageNumber("0123"), new Schedule())).toHashCode(), handlingActivity.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode5_taAF4_EsFU0() {
    HandlingActivity handlingActivity = new HandlingActivity(HandlingEvent.Type.CUSTOMS, new Location(new UnLocode("USCHI"), "Chicago"), new Voyage(new VoyageNumber("0123"), new Schedule()));
    assertEquals(new HashCodeBuilder().append(HandlingEvent.Type.CUSTOMS).append(new Location(new UnLocode("USCHI"), "Chicago")).append(new Voyage(new VoyageNumber("0123"), new Schedule())).toHashCode(), handlingActivity.hashCode());
  }
}