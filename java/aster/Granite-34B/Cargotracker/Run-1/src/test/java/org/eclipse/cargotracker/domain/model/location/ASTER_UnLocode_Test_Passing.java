/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getIdStringTest_TFlZ0() {
    UnLocode unLocode = new UnLocode("USCHI");
    String idString = unLocode.getIdString();
    assertEquals("USCHI", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getIdStringNullTest_twIB1() {
    UnLocode unLocode = new UnLocode();
    String idString = unLocode.getIdString();
    assertEquals(null, idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withNullObject_returnsFalse_IldV0() {
    UnLocode locode = new UnLocode("USCHI");
    assertFalse(locode.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withObjectOfDifferentClass_returnsFalse_rtNf1() {
    UnLocode locode = new UnLocode("USCHI");
    assertFalse(locode.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withObjectWithSameValue_returnsTrue_vOTK2() {
    UnLocode locode1 = new UnLocode("USCHI");
    UnLocode locode2 = new UnLocode("USCHI");
    assertTrue(locode1.equals(locode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withObjectWithDifferentValue_returnsFalse_eSPW3() {
    UnLocode locode1 = new UnLocode("USCHI");
    UnLocode locode2 = new UnLocode("USHEL");
    assertFalse(locode1.equals(locode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withItself_returnsTrue_uquE4() {
    UnLocode locode = new UnLocode("USCHI");
    assertTrue(locode.equals(locode));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_HiZC0() {
    UnLocode unLocode = new UnLocode("USCHI");
    assertEquals("USCHI", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_cllG1() {
    UnLocode unLocode = new UnLocode();
    assertNull(unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_YdIH2() {
    UnLocode unLocode = new UnLocode("USCHI");
    assertEquals("USCHI", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_drdT3() {
    UnLocode unLocode = new UnLocode();
    assertNull(unLocode.getIdString());
  }
}