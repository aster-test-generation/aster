/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_EOqx0() {
    TrackingId trackingId = new TrackingId("id");
    assertEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithNoId_Fnwg1() {
    TrackingId trackingId = new TrackingId();
    assertEquals(null, trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringCoverage_TMyT2() {
    TrackingId trackingId = new TrackingId("id");
    trackingId.getIdString();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithEmptyId_oIQh4() {
    TrackingId trackingId = new TrackingId("");
    assertEquals("", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithMultipleIds_gXVz5_1() {
    TrackingId trackingId = new TrackingId("id1");
    TrackingId trackingId2 = new TrackingId("id2");
    assertEquals("id1", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithMultipleIds_gXVz5_2() {
    TrackingId trackingId = new TrackingId("id1");
    TrackingId trackingId2 = new TrackingId("id2");
    assertEquals("id2", trackingId2.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithDuplicateIds_wdxk6_1() {
    TrackingId trackingId = new TrackingId("id");
    TrackingId trackingId2 = new TrackingId("id");
    assertEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithDuplicateIds_wdxk6_2() {
    TrackingId trackingId = new TrackingId("id");
    TrackingId trackingId2 = new TrackingId("id");
    assertEquals("id", trackingId2.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInvalidParameter_BImR9() {
    TrackingId trackingId = new TrackingId("invalid id");
    assertNotEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithValidParameter_SdtM10() {
    TrackingId trackingId = new TrackingId("valid id");
    assertEquals("valid id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInvalidParameter2_BBVN11() {
    TrackingId trackingId = new TrackingId("invalid id 2");
    assertNotEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithValidParameter2_sxyD12() {
    TrackingId trackingId = new TrackingId("valid id 2");
    assertEquals("valid id 2", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInvalidParameter3_WRwC13() {
    TrackingId trackingId = new TrackingId("invalid id 3");
    assertNotEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithValidParameter3_LNYl14() {
    TrackingId trackingId = new TrackingId("valid id 3");
    assertEquals("valid id 3", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInvalidParameter4_kcWv15() {
    TrackingId trackingId = new TrackingId("invalid id 4");
    assertNotEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithValidParameter4_PzDH16() {
    TrackingId trackingId = new TrackingId("valid id 4");
    assertEquals("valid id 4", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInvalidParameter5_ywPM17() {
    TrackingId trackingId = new TrackingId("invalid id 5");
    assertNotEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithValidParameter5_KYOU18() {
    TrackingId trackingId = new TrackingId("valid id 5");
    assertEquals("valid id 5", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInvalidParameter6_QJFq19() {
    TrackingId trackingId = new TrackingId("invalid id 6");
    assertNotEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithValidParameter6_jkRI20() {
    TrackingId trackingId = new TrackingId("valid id 6");
    assertEquals("valid id 6", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInvalidParameter7_AFsa21() {
    TrackingId trackingId = new TrackingId("invalid id 7");
    assertNotEquals("id", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithValidParameter7_TaRa22() {
    TrackingId trackingId = new TrackingId("valid id 7");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_NbII0() {
    TrackingId trackingId = new TrackingId("123");
    boolean actual = trackingId.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectOfDifferentType_GJuH1() {
    TrackingId trackingId = new TrackingId("123");
    Object obj = new Object();
    boolean actual = trackingId.equals(obj);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingSameId_YNwt2() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("123");
    boolean actual = trackingId1.equals(trackingId2);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithObjectHavingDifferentId_DbXB3() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("456");
    boolean actual = trackingId1.equals(trackingId2);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithItself_JBJl4() {
    TrackingId trackingId = new TrackingId("123");
    boolean actual = trackingId.equals(trackingId);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_XUNm0() {
    TrackingId trackingId = new TrackingId("12345");
    String actual = trackingId.toString();
    String expected = "12345";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyId_gHLL3() {
    TrackingId trackingId = new TrackingId("");
    String actual = trackingId.toString();
    String expected = "";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMultipleIds_MWai4() {
    TrackingId trackingId = new TrackingId("12345, 67890, ABCD1");
    String actual = trackingId.toString();
    String expected = "12345, 67890, ABCD1";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithSpecialCharacters_sKDt5() {
    TrackingId trackingId = new TrackingId("!@#$%^&*()_+");
    String actual = trackingId.toString();
    String expected = "!@#$%^&*()_+";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithUnicodeCharacters_tVyj6() {
    TrackingId trackingId = new TrackingId("Hello, , ");
    String actual = trackingId.toString();
    String expected = "Hello, , ";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_returnsTrue_whenBothTrackingIdsHaveTheSameId_JmNL0() {
    TrackingId trackingId = new TrackingId("123");
    TrackingId otherTrackingId = new TrackingId("123");
    boolean actual = trackingId.sameValueAs(otherTrackingId);
    assertTrue(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_returnsFalse_whenOtherTrackingIdIsNullOrEmpty_SGPP1() {
    TrackingId trackingId = new TrackingId("123");
    TrackingId otherTrackingId = null;
    boolean actual = trackingId.sameValueAs(otherTrackingId);
    assertFalse(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_returnsFalse_whenOtherTrackingIdHasDifferentId_VkAz2() {
    TrackingId trackingId = new TrackingId("123");
    TrackingId otherTrackingId = new TrackingId("456");
    boolean actual = trackingId.sameValueAs(otherTrackingId);
    assertFalse(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNegativeInput_nQkT8_VUFB0() {
    TrackingId trackingId = new TrackingId("-12345");
    String actual = trackingId.toString();
    String expected = "-12345";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithZeroInput_bnuO9_ZqSm0() {
    TrackingId trackingId = new TrackingId("0");
    String actual = trackingId.toString();
    String expected = "0";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithMultipleIds_gXVz5() {
    TrackingId trackingId = new TrackingId("id1");
    TrackingId trackingId2 = new TrackingId("id2");
    assertEquals("id1", trackingId.getIdString());
    assertEquals("id2", trackingId2.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithDuplicateIds_wdxk6() {
    TrackingId trackingId = new TrackingId("id");
    TrackingId trackingId2 = new TrackingId("id");
    assertEquals("id", trackingId.getIdString());
    assertEquals("id", trackingId2.getIdString());
  }
}