/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithNullId_cBhA3() {
    TrackingId trackingId = new TrackingId(null);
    assertEquals(null, trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNoId_LxDn1() {
    TrackingId trackingId = new TrackingId();
    String actual = trackingId.toString();
    String expected = "";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullId_ufOf2() {
    TrackingId trackingId = new TrackingId(null);
    String actual = trackingId.toString();
    String expected = "";
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_returnsFalse_whenBothTrackingIdsIsNullOrEmpty_QdYY8() {
    TrackingId trackingId = null;
    TrackingId otherTrackingId = null;
    boolean actual = trackingId.sameValueAs(otherTrackingId);
    assertFalse(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_returnsFalse_whenTrackingIdIsNullOrEmpty_andOtherTrackingIdHasDifferentId_gwRa9() {
    TrackingId trackingId = null;
    TrackingId otherTrackingId = new TrackingId("456");
    boolean actual = trackingId.sameValueAs(otherTrackingId);
    assertFalse(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithEmptyId_kWnR1() {
    TrackingId trackingId = new TrackingId();
    assertEquals(0, trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithNullId_cBhA3_fid1() {
    TrackingId trackingId = new TrackingId(null);
    assertEquals("", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithNullParameter_BPyC7_fid1() {
    TrackingId trackingId = new TrackingId(null);
    assertEquals("null", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_returnsFalse_whenTrackingIdIsNullOrEmpty_andOtherTrackingIdHasDifferentId_gwRa9_fid1() {
    TrackingId trackingId = null;
    TrackingId otherTrackingId = new TrackingId("456");
    boolean actual = trackingId == null || !trackingId.equals(otherTrackingId);
    assertFalse(actual);
  }
}