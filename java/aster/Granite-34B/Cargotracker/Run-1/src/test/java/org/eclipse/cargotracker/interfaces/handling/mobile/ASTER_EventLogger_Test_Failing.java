/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_fllB0() {
    EventLogger eventLogger = new EventLogger();
    String actualVoyageNumber = eventLogger.getVoyageNumber();
    String expectedVoyageNumber = "voyageNumber"; // Replace with the expected value
    assertEquals(expectedVoyageNumber, actualVoyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_null_DZHQ1() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> result = eventLogger.getEventTypes();
    Map<HandlingEvent.Type, HandlingEvent.Type> expected = null;
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_empty_PRFM2() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> result = eventLogger.getEventTypes();
    Map<HandlingEvent.Type, HandlingEvent.Type> expected = Collections.emptyMap();
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypes_size_izmO3() {
    EventLogger eventLogger = new EventLogger();
    Map<HandlingEvent.Type, HandlingEvent.Type> result = eventLogger.getEventTypes();
    assertEquals(result.size(), 4);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocations_LVKT0() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assertNotNull(locations);
    assertEquals(10, locations.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEventType_sLtM0() {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type type = eventLogger.getEventType();
    assertEquals(HandlingEvent.Type.class, type.getClass());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIds_tqnc0() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    assertNotNull(trackingIds);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdsWithCoverage_lxvn1() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    assertNotNull(trackingIds);
    assertEquals(1, trackingIds.size());
    assertEquals("1", trackingIds.get(0).getValue());
    assertEquals("One", trackingIds.get(0).getLabel());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_DqWG0() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertNotNull(result);
    assertEquals(10, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_null_YlLO1() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_empty_hwCF2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_size_rmsl3() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertEquals(10, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_firstItem_XiQI7() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertEquals("Voyage 1", result.get(0).getLabel());
    assertEquals("1", result.get(0).getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_lastItem_bQul8() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertEquals("Voyage 10", result.get(9).getLabel());
    assertEquals("10", result.get(9).getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_fllB0_fid1() {
    EventLogger eventLogger = new EventLogger();
    String actualVoyageNumber = eventLogger.getVoyageNumber();
    String expectedVoyageNumber = "voyageNumber"; // Replace with the expected value
    assertNull(expectedVoyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocations_LVKT0_1() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assertNotNull(locations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocations_LVKT0_2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assertEquals(10, locations.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdsWithCoverage_lxvn1_2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    assertEquals(1, trackingIds.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdsWithCoverage_lxvn1_3() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    assertEquals("1", trackingIds.get(0).getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdsWithCoverage_lxvn1_4() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> trackingIds = eventLogger.getTrackingIds();
    assertEquals("One", trackingIds.get(0).getLabel());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_firstItem_XiQI7_1() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertEquals("Voyage 1", result.get(0).getLabel());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_firstItem_XiQI7_2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertEquals("1", result.get(0).getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_lastItem_bQul8_1() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertEquals("Voyage 10", result.get(9).getLabel());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_lastItem_bQul8_2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertEquals("10", result.get(9).getValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimeValue_withNullCompletionTime_xLWH1_fRjr0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(null);
    assertEquals("", eventLogger.getCompletionTimeValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_zsLr0_cmnp0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setLocation("location");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitWithoutVoyage_oGIO1_UhJp0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setLocation("location");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }
}