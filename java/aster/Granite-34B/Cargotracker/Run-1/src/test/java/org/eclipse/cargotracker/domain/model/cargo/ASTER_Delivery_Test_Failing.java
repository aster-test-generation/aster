/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.persistence.Embedded;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Delivery_Test_Failing {
  private HandlingEvent lastEvent;
  Delivery delivery;
  @NotNull
  private boolean misdirected;
  @Embedded
  private HandlingActivity nextExpectedActivity;
  private Voyage currentVoyage;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNextExpectedActivity_withHandlingEvent_returnsNextExpectedActivity_oktU1() {
    HandlingEvent handlingEvent = new HandlingEvent();
    Delivery delivery = new Delivery(handlingEvent, new Itinerary(), new RouteSpecification());
    HandlingActivity nextExpectedActivity = delivery.getNextExpectedActivity();
    assertEquals(handlingEvent.getType(), nextExpectedActivity.getType());
    assertEquals(handlingEvent.getLocation(), nextExpectedActivity.getLocation());
    assertEquals(handlingEvent.getVoyage(), nextExpectedActivity.getVoyage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testisMisdirected() throws Exception {
    delivery = new Delivery();
    // given
    HandlingEvent handlingEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // when
    boolean result = delivery.isMisdirected();
    // then
    assertEquals(misdirected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatusWithNullParameter_kilA1() {
    Delivery delivery = new Delivery();
    delivery.setRoutingStatus(null);
    assertEquals(RoutingStatus.NOT_ROUTED, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getTransportStatus_returnsTransportStatus_kUrn0() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = delivery.getTransportStatus();
    assertEquals(TransportStatus.UNKNOWN, transportStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getTransportStatus_returnsTransportStatus_withLastEventSet_ZXEP1() {
    HandlingEvent handlingEvent = new HandlingEvent();
    Delivery delivery = new Delivery(handlingEvent, null, null);
    TransportStatus transportStatus = delivery.getTransportStatus();
    assertEquals(TransportStatus.UNKNOWN, transportStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getTransportStatus_returnsTransportStatus_withItinerarySet_svce2() {
    Itinerary itinerary = new Itinerary();
    Delivery delivery = new Delivery(null, itinerary, null);
    TransportStatus transportStatus = delivery.getTransportStatus();
    assertEquals(TransportStatus.UNKNOWN, transportStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getTransportStatus_returnsTransportStatus_withRouteSpecificationSet_vbOI3() {
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(null, null, routeSpecification);
    TransportStatus transportStatus = delivery.getTransportStatus();
    assertEquals(TransportStatus.UNKNOWN, transportStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getTransportStatus_returnsTransportStatus_withAllParametersSet_bYnf4() {
    HandlingEvent handlingEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    Delivery delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    TransportStatus transportStatus = delivery.getTransportStatus();
    assertEquals(TransportStatus.UNKNOWN, transportStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNextExpectedActivity_withHandlingEvent_returnsNextExpectedActivity_oktU1_1() {
    HandlingEvent handlingEvent = new HandlingEvent();
    Delivery delivery = new Delivery(handlingEvent, new Itinerary(), new RouteSpecification());
    HandlingActivity nextExpectedActivity = delivery.getNextExpectedActivity();
    assertEquals(handlingEvent.getType(), nextExpectedActivity.getType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNextExpectedActivity_withHandlingEvent_returnsNextExpectedActivity_oktU1_2() {
    HandlingEvent handlingEvent = new HandlingEvent();
    Delivery delivery = new Delivery(handlingEvent, new Itinerary(), new RouteSpecification());
    HandlingActivity nextExpectedActivity = delivery.getNextExpectedActivity();
    assertEquals(handlingEvent.getLocation(), nextExpectedActivity.getLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNextExpectedActivity_withHandlingEvent_returnsNextExpectedActivity_oktU1_3() {
    HandlingEvent handlingEvent = new HandlingEvent();
    Delivery delivery = new Delivery(handlingEvent, new Itinerary(), new RouteSpecification());
    HandlingActivity nextExpectedActivity = delivery.getNextExpectedActivity();
    assertEquals(handlingEvent.getVoyage(), nextExpectedActivity.getVoyage());
  }
}