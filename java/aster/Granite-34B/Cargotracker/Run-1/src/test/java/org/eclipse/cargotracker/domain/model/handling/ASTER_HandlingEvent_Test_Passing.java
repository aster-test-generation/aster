/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEvent_Test_Passing {
  HandlingEvent handlingevent;
  HandlingEvent otherHandlingEvent;
  private Cargo cargo;
  private Voyage voyage;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithNullObject_ReturnsFalse_cFmu0() {
    HandlingEvent event = new HandlingEvent();
    assertFalse(event.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithSameObject_ReturnsTrue_teKX1() {
    HandlingEvent event = new HandlingEvent();
    assertTrue(event.equals(event));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithDifferentObjectOfSameClass_ReturnsFalse_kInM2() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectOfDifferentClass_ReturnsFalse_wLTJ3() {
    HandlingEvent event = new HandlingEvent();
    assertFalse(event.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithSameProperties_ReturnsTrue_HLQM4() {
    HandlingEvent event1 = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    assertTrue(event1.equals(event2));
  }
}