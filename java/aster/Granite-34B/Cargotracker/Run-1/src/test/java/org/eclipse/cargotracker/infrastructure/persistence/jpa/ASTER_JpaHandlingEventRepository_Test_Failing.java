/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JpaHandlingEventRepository_Test_Failing {
  @PersistenceContext
  private EntityManager entityManager;
  JpaHandlingEventRepository jpahandlingeventrepository;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_hCUh0_1() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingHistory handlingHistory = jpaHandlingEventRepository.lookupHandlingHistoryOfCargo(new TrackingId("id"));
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    int hashCode = handlingHistory.hashCode();
    assertNotNull(handlingHistory);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_hCUh0_4() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingHistory handlingHistory = jpaHandlingEventRepository.lookupHandlingHistoryOfCargo(new TrackingId("id"));
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    int hashCode = handlingHistory.hashCode();
    assertNotNull(allHandlingEvents);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_hCUh0_5() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingHistory handlingHistory = jpaHandlingEventRepository.lookupHandlingHistoryOfCargo(new TrackingId("id"));
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    int hashCode = handlingHistory.hashCode();
    assertTrue(hashCode != 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore_LRvV0() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingEvent event = new HandlingEvent();
    jpaHandlingEventRepository.store(event);
    // Add assertions here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore5_mice4() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingEvent event = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    HandlingEvent event3 = new HandlingEvent();
    HandlingEvent event4 = new HandlingEvent();
    HandlingEvent event5 = new HandlingEvent();
    jpaHandlingEventRepository.store(event);
    jpaHandlingEventRepository.store(event2);
    jpaHandlingEventRepository.store(event3);
    jpaHandlingEventRepository.store(event4);
    jpaHandlingEventRepository.store(event5);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore6_aPkJ5() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingEvent event = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    HandlingEvent event3 = new HandlingEvent();
    HandlingEvent event4 = new HandlingEvent();
    HandlingEvent event5 = new HandlingEvent();
    HandlingEvent event6 = new HandlingEvent();
    jpaHandlingEventRepository.store(event);
    jpaHandlingEventRepository.store(event2);
    jpaHandlingEventRepository.store(event3);
    jpaHandlingEventRepository.store(event4);
    jpaHandlingEventRepository.store(event5);
    jpaHandlingEventRepository.store(event6);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore7_idid6() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingEvent event = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    HandlingEvent event3 = new HandlingEvent();
    HandlingEvent event4 = new HandlingEvent();
    HandlingEvent event5 = new HandlingEvent();
    HandlingEvent event6 = new HandlingEvent();
    HandlingEvent event7 = new HandlingEvent();
    jpaHandlingEventRepository.store(event);
    jpaHandlingEventRepository.store(event2);
    jpaHandlingEventRepository.store(event3);
    jpaHandlingEventRepository.store(event4);
    jpaHandlingEventRepository.store(event5);
    jpaHandlingEventRepository.store(event6);
    jpaHandlingEventRepository.store(event7);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_hCUh0() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingHistory handlingHistory = jpaHandlingEventRepository.lookupHandlingHistoryOfCargo(new TrackingId("id"));
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    int hashCode = handlingHistory.hashCode();
    assertNotNull(handlingHistory);
    assertNotNull(mostRecentlyCompletedEvent);
    assertNotNull(distinctEventsByCompletionTime);
    assertNotNull(allHandlingEvents);
    assertTrue(hashCode != 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore_LRvV0_fid1() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingEvent event = new HandlingEvent();
    jpaHandlingEventRepository.store(event);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore2_ycfV1() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingEvent event = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    jpaHandlingEventRepository.store(event);
    jpaHandlingEventRepository.store(event2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore3_WusA2() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingEvent event = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    HandlingEvent event3 = new HandlingEvent();
    jpaHandlingEventRepository.store(event);
    jpaHandlingEventRepository.store(event2);
    jpaHandlingEventRepository.store(event3);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore4_MePh3() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingEvent event = new HandlingEvent();
    HandlingEvent event2 = new HandlingEvent();
    HandlingEvent event3 = new HandlingEvent();
    HandlingEvent event4 = new HandlingEvent();
    jpaHandlingEventRepository.store(event);
    jpaHandlingEventRepository.store(event2);
    jpaHandlingEventRepository.store(event3);
    jpaHandlingEventRepository.store(event4);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_hCUh0_2_fid2() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingHistory handlingHistory = jpaHandlingEventRepository.lookupHandlingHistoryOfCargo(new TrackingId("id"));
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    int hashCode = handlingHistory.hashCode();
    assertNotNull(mostRecentlyCompletedEvent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_hCUh0_3_fid2() {
    JpaHandlingEventRepository jpaHandlingEventRepository = new JpaHandlingEventRepository();
    HandlingHistory handlingHistory = jpaHandlingEventRepository.lookupHandlingHistoryOfCargo(new TrackingId("id"));
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    int hashCode = handlingHistory.hashCode();
    assertNotNull(distinctEventsByCompletionTime);
  }
}