/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.shared;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DomainObjectUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithNullActual_AifN0() {
    String actual = null;
    String safe = "safe";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals("safe", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithNonNullActual_UCki1() {
    String actual = "actual";
    String safe = "safe";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals("actual", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithNullActualAndNullSafe_VarV2() {
    String actual = null;
    String safe = null;
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithNonNullActualAndNullSafe_nrRS3() {
    String actual = "actual";
    String safe = null;
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals("actual", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafeWithNonNullActualAndNonNullSafe_lFZh5() {
    Integer actual = 5;
    Integer safe = 10;
    Integer result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(new Integer(5), result);
  }
}