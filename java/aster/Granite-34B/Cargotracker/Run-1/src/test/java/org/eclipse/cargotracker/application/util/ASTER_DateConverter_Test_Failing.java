/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DateConverter_Test_Failing {
  private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_Gnwb0() {
    String date = "2022-12-31";
    LocalDate expected = LocalDate.of(2022, 12, 31);
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithInvalidFormat_wHZm1() {
    String date = "31-12-2022";
    LocalDate expected = LocalDate.of(2022, 12, 31);
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithNullDate_tsEK2() {
    String date = null;
    LocalDate expected = null;
    LocalDate actual = DateConverter.toDate(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_strA0() {
    LocalDateTime dateTime = LocalDateTime.now();
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMaxDateTime_Fhqu1() {
    LocalDateTime dateTime = LocalDateTime.parse("12/31/9999 11:59 PM");
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMinDateTime_OPjK2() {
    LocalDateTime dateTime = LocalDateTime.parse("1/1/0001 12:0 AM");
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithRandomDateTime_eJyz3() {
    LocalDateTime dateTime = LocalDateTime.parse("1/1/2023 12:0 PM");
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullDateTime_FKyL4() {
    LocalDateTime dateTime = null;
    String expected = null;
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyDateTime_LQmp5() {
    LocalDateTime dateTime = LocalDateTime.parse("");
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithInvalidDateTime_oond6() {
    LocalDateTime dateTime = LocalDateTime.parse("2023-01-01T12:00:00X");
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_aFuV0() {
    String datetime = "2022-08-20T14:30:00";
    LocalDateTime expected = LocalDateTime.of(2022, 8, 20, 14, 30);
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTimeWithDifferentFormat_gYAU1() {
    String datetime = "20/08/2022 14:30";
    LocalDateTime expected = LocalDateTime.of(2022, 8, 20, 14, 30);
    assertEquals(expected, DateConverter.toDateTime(datetime));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullDate_LRJn1() {
    LocalDate date = null;
    String expected = "";
    String actual = DateConverter.toString(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMaxDateTime_Fhqu1_fid1() {
    LocalDateTime dateTime = LocalDateTime.parse("9999-12-31T23:59:59");
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMinDateTime_OPjK2_fid1() {
    LocalDateTime dateTime = LocalDateTime.parse("0001-01-01T00:00:00");
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithRandomDateTime_eJyz3_fid1() {
    LocalDateTime dateTime = LocalDateTime.parse("2023-01-01T12:00:00");
    String expected = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_eufB0_fid1() {
    LocalDate date = LocalDate.of(2023, 1, 1);
    String expected = "2023-01-01";
    String actual = DateConverter.toString(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithDifferentDate_Okdg2_fid1() {
    LocalDate date = LocalDate.of(2023, 12, 31);
    String expected = "2023-12-31";
    String actual = DateConverter.toString(date);
    assertEquals(expected, actual);
  }
}