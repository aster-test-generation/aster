/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDate;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithNullTrackingId_Chyf0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(null);
    assertEquals(Collections.emptyList(), itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithNonExistingTrackingId_FbLA1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("ABC123");
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(trackingId);
    assertEquals(Collections.emptyList(), itineraries);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test4_tqFL3() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("987654321");
    LocalDate newDeadline = LocalDate.now().minusDays(1);
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullOriginUnLocode_PDYr0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(null, new UnLocode("CNHKG"), LocalDate.now().plusDays(60));
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullDestinationUnLocode_PqYb1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(new UnLocode("CNHKG"), null, LocalDate.now().plusDays(60));
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullDeadline_YZZJ2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(new UnLocode("CNHKG"), new UnLocode("CNSHA"), null);
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidOriginUnLocode_sLfU3() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(new UnLocode("ABC"), new UnLocode("CNSHA"), LocalDate.now().plusDays(60));
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidDestinationUnLocode_zmlR4() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(new UnLocode("CNHKG"), new UnLocode("ABC"), LocalDate.now().plusDays(60));
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidDeadline_fmpv5() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(new UnLocode("CNHKG"), new UnLocode("CNSHA"), LocalDate.now().minusDays(1));
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithValidUnLocodeAndValidDeadline_vkig6() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(new UnLocode("CNHKG"), new UnLocode("CNSHA"), LocalDate.now().plusDays(60));
    assertEquals(new TrackingId("ABC"), trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_xepM0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("123456789");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test2_ANSS1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("987654321");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test3_IjRG2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("123456789");
    LocalDate newDeadline = LocalDate.now().plusDays(1);
    bookingService.changeDeadline(trackingId, newDeadline);
  }
}