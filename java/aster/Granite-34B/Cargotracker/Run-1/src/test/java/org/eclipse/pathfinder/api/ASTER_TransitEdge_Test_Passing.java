/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_CJxB0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("newToUnLocode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_nullValue_ZhpJ1() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_emptyValue_huDv2() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_specialCharValue_FdUW4() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("^&*%$#@!");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_lengthExceedValue_bKzZ5() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("12345678901234567890123456789012345678901234567890");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_validValue_cWOV6() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("validValue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_upperCaseValue_ChCQ7() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("VALIDVALUE");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_lowerCaseValue_FCKD8() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToUnLocode("validvalue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_bEgK0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String expected = "TransitEdge{" + "voyageNumber=" + "voyageNumber" + ", fromUnLocode=" + "fromUnLocode" + ", toUnLocode=" + "toUnLocode" + ", fromDate=" + transitEdge.getFromDate() + ", toDate=" + transitEdge.getToDate() + '}';
    assertEquals(expected, transitEdge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberTest_Tjwj0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("voyageNumber", transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberNullTest_EerU1() {
    TransitEdge transitEdge = new TransitEdge(null, "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals(null, transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberEmptyTest_DWhq2() {
    TransitEdge transitEdge = new TransitEdge("", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    assertEquals("", transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_loNn0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToDate(LocalDateTime.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithNullParameter_fDho1() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToDate(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDateWithIncorrectParameter_nvxR2() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setToDate(LocalDateTime.now().minusDays(1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDate_ttBA0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime actual = transitEdge.getToDate();
    assertNotNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateWithNullValues_DtEJ1() {
    TransitEdge transitEdge = new TransitEdge(null, null, null, null, null);
    LocalDateTime actual = transitEdge.getToDate();
    assertNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateWithRandomValues_xAmk2() {
    TransitEdge transitEdge = new TransitEdge("randomVoyageNumber", "randomFromUnLocode", "randomToUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime actual = transitEdge.getToDate();
    assertNotNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateWithBoundaryValues_MAfH3() {
    TransitEdge transitEdge = new TransitEdge("boundaryVoyageNumber", "boundaryFromUnLocode", "boundaryToUnLocode", LocalDateTime.MIN, LocalDateTime.MAX);
    LocalDateTime actual = transitEdge.getToDate();
    assertNotNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToDateAfterSettingValue_ImVO4() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime expected = LocalDateTime.now();
    transitEdge.setToDate(expected);
    LocalDateTime actual = transitEdge.getToDate();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_RbMM0() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setFromUnLocode("fromUnLocode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_with_voyageNumber_MMNF1() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setFromUnLocode("fromUnLocode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest_tGtz0() {
    String expected = "ABC";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest2_mkzI1() {
    String expected = "XYZ";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest3_tTfT2() {
    String expected = "PQR";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest4_NQsO3() {
    String expected = "LMN";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest5_yEFS4() {
    String expected = "GHI";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest6_muZR5() {
    String expected = "JKL";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest7_mktA6() {
    String expected = "OPQ";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest8_nfCT7() {
    String expected = "VWX";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest9_XxYg8() {
    String expected = "YZA";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getToUnLocodeTest10_ErAf9() {
    String expected = "CDE";
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", expected,
            LocalDateTime.now(), LocalDateTime.now());
    String actual = transitEdge.getToUnLocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setVoyageNumberTest1_HLYX0() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setVoyageNumber("voyageNumber");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setVoyageNumberTest2_zkdK1() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode",
            LocalDateTime.now(), LocalDateTime.now());
    transitEdge.setVoyageNumber("voyageNumber");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDate_ZgHT0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, null);
    LocalDateTime fromDate = LocalDateTime.now();
    transitEdge.setFromDate(fromDate);
    assertEquals(fromDate, transitEdge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDateNull_xJcA1() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", null, null);
    transitEdge.setFromDate(null);
    assertNull(transitEdge.getFromDate());
  }
}