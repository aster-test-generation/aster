/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_Kcgg0() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    assertEquals("12345", voyageNumber.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithNullObject_ReturnsFalse_zefX0() {
    VoyageNumber voyageNumber = new VoyageNumber("ABC");
    assertFalse(voyageNumber.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectOfDifferentClass_ReturnsFalse_fJup1() {
    VoyageNumber voyageNumber = new VoyageNumber("ABC");
    assertFalse(voyageNumber.equals("ABC"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithSameValue_ReturnsTrue_DDsQ2() {
    VoyageNumber voyageNumber1 = new VoyageNumber("ABC");
    VoyageNumber voyageNumber2 = new VoyageNumber("ABC");
    assertTrue(voyageNumber1.equals(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithDifferentValue_ReturnsFalse_TKiW3() {
    VoyageNumber voyageNumber1 = new VoyageNumber("ABC");
    VoyageNumber voyageNumber2 = new VoyageNumber("XYZ");
    assertFalse(voyageNumber1.equals(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithItself_ReturnsTrue_MVQD4() {
    VoyageNumber voyageNumber = new VoyageNumber("ABC");
    assertTrue(voyageNumber.equals(voyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_withEqualObjects_shouldReturnTrue_hVyr0() {
    VoyageNumber voyageNumber1 = new VoyageNumber("12345");
    VoyageNumber voyageNumber2 = new VoyageNumber("12345");
    assertTrue(voyageNumber1.sameValueAs(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_withNullObject_shouldReturnFalse_KXuO1() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    assertFalse(voyageNumber.sameValueAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_withObjectWithDifferentVoyageNumber_shouldReturnFalse_YAwo3() {
    VoyageNumber voyageNumber1 = new VoyageNumber("12345");
    VoyageNumber voyageNumber2 = new VoyageNumber("54321");
    assertFalse(voyageNumber1.sameValueAs(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_QrbE0() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    assertEquals("12345", voyageNumber.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithNoParameter_WGDY1_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    assertNull(voyageNumber.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void sameValueAs_withObjectOfDifferentType_shouldReturnFalse_TZDV2_QYnP0() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    Object obj = new Object();
    assertFalse(voyageNumber.equals(obj));
  }
}