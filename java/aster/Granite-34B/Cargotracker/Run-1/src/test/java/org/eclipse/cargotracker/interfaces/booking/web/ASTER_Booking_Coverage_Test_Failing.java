/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

public class Aster_Booking_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_gHXi0_1() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getLocations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithMockedToday_SiOR2_1() {
    Booking booking = new Booking();
    when(LocalDate.now()).thenReturn(LocalDate.of(2023, 1, 1));
    booking.init();
    assertNotNull(booking.getLocations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithMockedToday_SiOR2_2() {
    Booking booking = new Booking();
    when(LocalDate.now()).thenReturn(LocalDate.of(2023, 1, 1));
    booking.init();
    assertEquals(LocalDate.of(2023, 1, 1), booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode1_vTkI0() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("abc");
    assertEquals("abc", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode2_zaJb1() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("def");
    String expected = "def";
    String actual = booking.getOriginUnlocode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode3_hFRu2() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("ghi");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode4_mkAj3() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("jkl");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode5_kImK4() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("mno");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode6_Bkvl5() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("pqr");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdatedWithDurationLessThanMinJourneyDuration_ehpA1() {
    Booking booking = new Booking();
    booking.deadlineUpdated();
    assertFalse(booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdatedWithDurationEqualToMinJourneyDuration_rjAd2() {
    Booking booking = new Booking();
    booking.deadlineUpdated();
    assertTrue(booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode1_YWwb0_1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode1");
    assertEquals("destinationUnlocode1", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode1_YWwb0_2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode1");
    assertEquals("destinationName1", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode2_Vebp1_1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode2");
    assertEquals("destinationUnlocode2", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode2_Vebp1_2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode2");
    assertEquals("destinationName2", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode3_WZxQ2_1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode3");
    assertEquals("destinationUnlocode3", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode3_WZxQ2_2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode3");
    assertEquals("destinationName3", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode4_ejjr3_1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode4");
    assertEquals("destinationUnlocode4", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode4_ejjr3_2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode4");
    assertEquals("destinationName4", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode5_ByZv4_1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode5");
    assertEquals("destinationUnlocode5", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode5_ByZv4_2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode5");
    assertEquals("destinationName5", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode6_AOyn5_1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode6");
    assertEquals("destinationUnlocode6", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode6_AOyn5_2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode6");
    assertEquals("destinationName6", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode7_vzUA6_1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode7");
    assertEquals("destinationUnlocode7", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode7_vzUA6_2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode7");
    assertEquals("destinationName7", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode8_BNgR7_1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode8");
    assertEquals("destinationUnlocode8", booking.getDestinationUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode8_BNgR7_2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode8");
    assertEquals("destinationName8", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLocations_1_yIIj0() {
    Booking booking = new Booking();
    booking.getLocations();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_2_VOZS1_ueYd0() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("abc");
    booking.setDestinationUnlocode("abc");
    booking.setArrivalDeadline(LocalDate.now());
    String actual = booking.register();
    assertEquals("abc", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_1_VthN0_ZBea0() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("abc");
    booking.setDestinationUnlocode("def");
    booking.setArrivalDeadline(LocalDate.now());
    String actual = booking.register();
    assertEquals("/admin/dashboard.xhtml", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_3_pYHT2_qZGg0() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("abc");
    booking.setDestinationUnlocode("def");
    booking.setArrivalDeadline(LocalDate.now());
    FacesContext context = FacesContext.getCurrentInstance();
    FacesMessage message = new FacesMessage("Origin and destination cannot be the same.");
    message.setSeverity(FacesMessage.SEVERITY_ERROR);
    context.addMessage(null, message);
    String actual = booking.register();
    assertEquals(null, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_gHXi0() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getLocations());
    assertNotNull(booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode1_vTkI0_fid2() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("abc");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginUnlocode2_zaJb1_fid2() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("def");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode1_YWwb0() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode1");
    assertEquals("destinationUnlocode1", booking.getDestinationUnlocode());
    assertEquals("destinationName1", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode2_Vebp1() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode2");
    assertEquals("destinationUnlocode2", booking.getDestinationUnlocode());
    assertEquals("destinationName2", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode3_WZxQ2() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode3");
    assertEquals("destinationUnlocode3", booking.getDestinationUnlocode());
    assertEquals("destinationName3", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode4_ejjr3() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode4");
    assertEquals("destinationUnlocode4", booking.getDestinationUnlocode());
    assertEquals("destinationName4", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode5_ByZv4() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode5");
    assertEquals("destinationUnlocode5", booking.getDestinationUnlocode());
    assertEquals("destinationName5", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode6_AOyn5() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode6");
    assertEquals("destinationUnlocode6", booking.getDestinationUnlocode());
    assertEquals("destinationName6", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode7_vzUA6() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode7");
    assertEquals("destinationUnlocode7", booking.getDestinationUnlocode());
    assertEquals("destinationName7", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDestinationUnlocode8_BNgR7() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("destinationUnlocode8");
    assertEquals("destinationUnlocode8", booking.getDestinationUnlocode());
    assertEquals("destinationName8", booking.getDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_gHXi0_2() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_2_VOZS1_ueYd0_fid3() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("abc");
    booking.setDestinationUnlocode("abc");
    booking.setArrivalDeadline(LocalDate.now());
    String actual = booking.register();
    assertEquals(null, actual);
  }
}