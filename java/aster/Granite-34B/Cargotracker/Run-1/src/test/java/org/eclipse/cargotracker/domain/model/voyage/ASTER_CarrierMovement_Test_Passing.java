/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CarrierMovement_Test_Passing {
  private LocalDateTime departureTime;
  CarrierMovement carriermovement;
  private LocalDateTime arrivalTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_UtiT0() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USCHI"), "Chicago"), new Location(new UnLocode("USNYC"), "New York"), LocalDateTime.now(), LocalDateTime.now());
    assertEquals(carrierMovement.hashCode(), new HashCodeBuilder().append(carrierMovement.getDepartureLocation()).append(carrierMovement.getDepartureTime()).append(carrierMovement.getArrivalLocation()).append(carrierMovement.getArrivalTime()).toHashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalTime_Sdyq0() {
    CarrierMovement carrierMovement = new CarrierMovement(new Location(new UnLocode("USNYC"), "name"), new Location(new UnLocode("USLAX"), "name"), LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime actual = carrierMovement.getArrivalTime();
    assertEquals(carrierMovement.getArrivalTime(), actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals_gMam0() throws Exception {
    Location departureLocation = new Location(new UnLocode("USNYC"), "New York");
    Location arrivalLocation = new Location(new UnLocode("USDAL"), "Dallas");
    LocalDateTime departureTime = LocalDateTime.now();
    LocalDateTime arrivalTime = LocalDateTime.now().plusDays(1);
    CarrierMovement carriermovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    CarrierMovement otherCarrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    assertTrue(carriermovement.equals(otherCarrierMovement));
  }
}