/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoRoute_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginTest_TgqI0() {
    Location origin = new Location("USNYC", "New York");
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, null, null, false, false, null, null, null);
    assertEquals("Location{unLocode='USNYC', name='New York'}", cargoRoute.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginTest2_KyOt1() {
    Location origin = new Location("DEHAM", "Hamburg");
    CargoRoute cargoRoute = new CargoRoute("XYZ789", origin, null, null, false, false, null, null, null);
    assertEquals("Location{unLocode='DEHAM', name='Hamburg'}", cargoRoute.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadlineTest8_Djym7() {
    Location origin = new Location("string", "string");
    Location finalDestination = new Location("string", "string");
    CargoRoute cargoRoute = new CargoRoute("string", origin, finalDestination, LocalDate.now(), false, false, origin, "string", new ArrayList<Leg>());
    assertEquals(LocalDate.now(), cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocationCode_withNoLastKnownLocation_IZsg1() {
    CargoRoute cargoRoute = new CargoRoute("ABC123", new Location("USCHI", "Chicago"), new Location("USDALL", "Dallas"),
            LocalDate.of(2022, 12, 31), false, false, null, "In Transit", new ArrayList<Leg>());
    assertEquals("", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestinationName_withNullFinalDestination_iUpX1_Nyra0() {
    CargoRoute cargoRoute = new CargoRoute("123", new Location("PQR", "LMN"), null, LocalDate.now(), false, false, new Location("XYZ", "ABC"), "IN_TRANSIT", new ArrayList<>());
    assertEquals("", cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginCode_returnsCorrectOriginCode_Xmtz0_YNes0() {
    Location origin = new Location("USNYC", "New York");
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, null, null, false, false, null, null, null);
    String originCode = cargoRoute.getOriginCode();
    assertEquals("USNYC", originCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginCode_returnsCorrectOriginCode_forAnotherLocation_UFjV1_UOPa0() {
    Location origin = new Location("AUMEL", "Melbourne");
    CargoRoute cargoRoute = new CargoRoute("XYZ789", origin, null, null, false, false, null, null, null);
    String originCode = cargoRoute.getOriginCode();
    assertEquals("AUMEL", originCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLegsWithNullLegs_WoHl2_VJNx0() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, null, "NOT_RECEIVED", null);
    List<Leg> result = cargoRoute.getLegs();
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocation_IBHM0_fid1() {
    Location lastKnownLocation = new Location("USNYC", "New York");
    CargoRoute cargoRoute = new CargoRoute("ABC123", new Location("USCHI", "Chicago"), new Location("USDAL", "Dallas"),
            LocalDate.of(2022, 12, 31), false, false, lastKnownLocation, "In Transit", new ArrayList<Leg>());
    assertEquals("Location{unLocode='USNYC', name='New York'}", cargoRoute.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocationCode_withInvalidLastKnownLocation_gZDZ4() {
    Location lastKnownLocation = new Location("Invalid", "Location");
    CargoRoute cargoRoute = new CargoRoute("ABC123", new Location("USCHI", "Chicago"), new Location("USDALL", "Dallas"),
            LocalDate.of(2022, 12, 31), false, false, lastKnownLocation, "In Transit", new ArrayList<Leg>());
    assertEquals("", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestination_returnsCorrectLocation_XNnK0_IyeN0_fid3() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, false, null, "IN_PORT", new ArrayList());
    String actualFinalDestination = cargoRoute.getFinalDestination();
    String expectedFinalDestination = "Location [unLocode=USDAL, name=Dallas]";
    assertEquals(expectedFinalDestination, actualFinalDestination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalDestination_returnsCorrectLocation_forClaimedCargo_EEhV2_cbPx0_fid3() {
    Location origin = new Location("USNYC", "New York");
    Location finalDestination = new Location("USDAL", "Dallas");
    List<Leg> legs = new ArrayList<Leg>();
    CargoRoute cargoRoute = new CargoRoute("ABC123", origin, finalDestination, LocalDate.now(), false, true, null, "IN_PORT", legs);
    String actualFinalDestination = cargoRoute.getFinalDestination();
    String expectedFinalDestination = "Location [unLocode=USDAL, name=Dallas] (Claimed)";
    assertEquals(expectedFinalDestination, actualFinalDestination);
  }
}