/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingEvents_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testIsExpected_zRre0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "time");
    boolean actual = trackingEvents.isExpected();
    boolean expected = true;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testIsExpected_zDxl1() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    boolean actual = trackingEvents.isExpected();
    boolean expected = false;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testIsExpected_Agkq2() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "", "time");
    boolean actual = trackingEvents.isExpected();
    boolean expected = true;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testIsExpected_wMcF3() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "");
    boolean actual = trackingEvents.isExpected();
    boolean expected = true;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testIsExpected_QeTE4() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "", "");
    boolean actual = trackingEvents.isExpected();
    boolean expected = true;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testIsExpected_mZAc5() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "", "");
    boolean actual = trackingEvents.isExpected();
    boolean expected = false;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testIsExpected_bZyf7() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "", "time");
    boolean actual = trackingEvents.isExpected();
    boolean expected = false;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testIsExpected_guFm8() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "");
    boolean actual = trackingEvents.isExpected();
    boolean expected = false;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescription_AoZc0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "Test description", "12:00");
    String description = trackingEvents.getDescription();
    assert "Test description".equals(description);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescriptionWithFalseExpected_NJbr2() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "Test description", "12:00");
    String description = trackingEvents.getDescription();
    assert "Test description".equals(description);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescriptionWithEmptyDescription_NLcm3() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "", "12:00");
    String description = trackingEvents.getDescription();
    assert "".equals(description);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescriptionWithEmptyTime_Uulx4() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "Test description", "");
    String description = trackingEvents.getDescription();
    assert "Test description".equals(description);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTimeTest_WVvO0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "test description", "12:00");
    String time = trackingEvents.getTime();
    assert time.equals("12:00");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTimeTest2_Gyrf1() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "test description 2", "13:00");
    String time = trackingEvents.getTime();
    assert time.equals("13:00");
  }
}