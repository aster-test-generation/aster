/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.file;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventFilesCheckpoint_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFiles_HWNY0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    List<File> files = new ArrayList<>();
    eventFilesCheckpoint.setFiles(files);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilesWithNullParameter_LIKt1() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFiles(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointer_pQIz0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    long filePointer = eventFilesCheckpoint.getFilePointer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithFilePointerZero_XCpM1() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(0);
    long filePointer = eventFilesCheckpoint.getFilePointer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithFilePointerNonZero_HVkM2() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(100);
    long filePointer = eventFilesCheckpoint.getFilePointer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithFilePointerMax_WuTG5() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(Long.MAX_VALUE);
    long filePointer = eventFilesCheckpoint.getFilePointer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithFilePointerMin_rmoM6() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(Long.MIN_VALUE);
    long filePointer = eventFilesCheckpoint.getFilePointer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFilePointerWithFilePointerRandom_WSAL11() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(1234567890);
    long filePointer = eventFilesCheckpoint.getFilePointer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointer_Ywob0() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(100L);
    assertEquals(100L, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithNegativeValue_AiTI1() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(-1L);
    assertEquals(-1L, eventFilesCheckpoint.getFilePointer());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFilePointerWithZeroValue_GQrX2() {
    EventFilesCheckpoint eventFilesCheckpoint = new EventFilesCheckpoint();
    eventFilesCheckpoint.setFilePointer(0L);
    assertEquals(0L, eventFilesCheckpoint.getFilePointer());
  }
}