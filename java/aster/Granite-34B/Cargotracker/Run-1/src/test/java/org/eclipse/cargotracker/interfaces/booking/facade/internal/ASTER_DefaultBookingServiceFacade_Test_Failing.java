/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Test_Failing {
  private DefaultBookingServiceFacade bookingServiceFacade;
  private DefaultBookingServiceFacade defaultBookingServiceFacade;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_NullRouteCandidate_vllh2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingIdStr = "ABC";
    RouteCandidate routeCandidateDTO = null;
    bookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
    // Add assertion here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_Ksfm0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "AUH";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertEquals("ABC123", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_InvalidArrivalDeadline_TVMb6() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "AUH";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 32);
    Assertions.assertThrows(IllegalArgumentException.class, () -> bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_DuplicateTrackingId_EBUW7() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "AUH";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 31);
    String result1 = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    String result2 = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotEquals(result1, result2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_NullRouteCandidate_vllh2_fid2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingIdStr = "ABC";
    RouteCandidate routeCandidateDTO = null;
    bookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullOrigin_MokI1_fid2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = null;
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 31);
    Assertions.assertThrows(IllegalArgumentException.class, () -> bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_InvalidArrivalDeadline_TVMb6_fid2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "AUH";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2022, 13, 32);
    Assertions.assertThrows(IllegalArgumentException.class, () -> bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_NullParameters_lEjV3() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingIdStr = null;
    RouteCandidate routeCandidateDTO = null;
    bookingServiceFacade.assignCargoToRoute(trackingIdStr, routeCandidateDTO);
  }
}