/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getDestination_returns_correct_destination_location_7_UtXT7() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    Location actualDestination = routeSpecification.getDestination();
    assertEquals(destination, actualDestination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_aMln0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    LocalDate arrivalDeadline = LocalDate.of(2018, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(new HashCodeBuilder().append(origin).append(destination).append(arrivalDeadline).toHashCode(), routeSpecification.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOrigin_returnsCorrectOrigin_DKfn0_akko0() {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(origin, routeSpecification.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetArrivalDeadline_yLre0() throws Exception {
    Location origin = new Location(new UnLocode("USNYC"), "New York");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    RouteSpecification routespecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(arrivalDeadline, routespecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadline_returnsCorrectDeadline_HESK0_tkgW0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    LocalDate arrivalDeadline = LocalDate.of(2022, 12, 31);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    LocalDate actualDeadline = routeSpecification.getArrivalDeadline();
    assertEquals(arrivalDeadline, actualDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withNoParameter_shouldReturnFalse_beWQ0_XybD0() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("USCHI"), "Chicago"), new Location(new UnLocode("USNYC"), "New York"), LocalDate.of(2022, 1, 1));
    RouteSpecification other = new RouteSpecification();
    boolean actual = routeSpecification.equals(other);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withSameObject_shouldReturnTrue_VYfA1_YDfD0() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("USCHI"), "Chicago"), new Location(new UnLocode("USNYC"), "New York"), LocalDate.of(2022, 1, 1));
    boolean actual = routeSpecification.equals(routeSpecification);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withNull_shouldReturnFalse_gPbw2_kpPz0() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("USCHI"), "Chicago"), new Location(new UnLocode("USNYC"), "New York"), LocalDate.of(2022, 1, 1));
    boolean actual = routeSpecification.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_withObjectOfDifferentClass_shouldReturnFalse_qjzY3_FzZl0() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("USCHI"), "Chicago"), new Location(new UnLocode("USNYC"), "New York"), LocalDate.of(2022, 1, 1));
    boolean actual = routeSpecification.equals(new Object());
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetDestination_JRZp0() throws Exception {
    Location destination = new Location(new UnLocode("USNYC"), "New York");
    RouteSpecification routespecification = new RouteSpecification(new Location(new UnLocode("USCHI"), "Chicago"), destination, LocalDate.now());
    assertEquals(destination, routespecification.getDestination());
  }
}