/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler;

import jakarta.inject.Inject;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoStatus;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoStatusDtoAssembler_Test_Failing {
  @Inject
  private TrackingEventsDtoAssembler assembler;
  CargoStatusDtoAssembler cargostatusdtoassembler;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithNullCargo_SYpZ1_1() {
    CargoStatusDtoAssembler assembler = new CargoStatusDtoAssembler();
    Cargo cargo = null;
    List<HandlingEvent> handlingEvents = List.of(new HandlingEvent());
    CargoStatus cargoStatus = assembler.toDto(cargo, handlingEvents);
    assertEquals(null, cargoStatus.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithNullCargo_SYpZ1_2() {
    CargoStatusDtoAssembler assembler = new CargoStatusDtoAssembler();
    Cargo cargo = null;
    List<HandlingEvent> handlingEvents = List.of(new HandlingEvent());
    CargoStatus cargoStatus = assembler.toDto(cargo, handlingEvents);
    assertEquals(null, cargoStatus.getEta());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithNullCargo_SYpZ1_3() {
    CargoStatusDtoAssembler assembler = new CargoStatusDtoAssembler();
    Cargo cargo = null;
    List<HandlingEvent> handlingEvents = List.of(new HandlingEvent());
    CargoStatus cargoStatus = assembler.toDto(cargo, handlingEvents);
    assertEquals(null, cargoStatus.getNextExpectedActivity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithNullCargo_SYpZ1() {
    CargoStatusDtoAssembler assembler = new CargoStatusDtoAssembler();
    Cargo cargo = null;
    List<HandlingEvent> handlingEvents = List.of(new HandlingEvent());
    CargoStatus cargoStatus = assembler.toDto(cargo, handlingEvents);
    assertEquals(null, cargoStatus.getTrackingId());
    assertEquals(null, cargoStatus.getEta());
    assertEquals(null, cargoStatus.getNextExpectedActivity());
  }
}