/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import jakarta.enterprise.event.Event;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.infrastructure.events.cdi.CargoUpdated;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JpaCargoRepository_Test_Failing {
  @Inject
  @CargoUpdated
  private Event<Cargo> cargoUpdated;
  @PersistenceContext
  private EntityManager entityManager;
  JpaCargoRepository jpacargorepository;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testFindAll_gqnp0() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    List<Cargo> actual = jpaCargoRepository.findAll();
    List<Cargo> expected = entityManager.createNamedQuery("Cargo.findAll", Cargo.class).getResultList();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testFindAll_5_MABw5() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    List<Cargo> actual = jpaCargoRepository.findAll();
    List<Cargo> expected = entityManager.createNamedQuery("Cargo.findAll", Cargo.class).getResultList();
    if (actual == null) {
      fail("The actual value is null");
    }
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testFindAll_6_MqTM6() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    List<Cargo> actual = jpaCargoRepository.findAll();
    List<Cargo> expected = entityManager.createNamedQuery("Cargo.findAll", Cargo.class).getResultList();
    // Check if the actual value is not null
    assertNotNull(actual);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFind_QMlh0() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId();
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithNullTrackingId_dvWc1() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = null;
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithEmptyTrackingId_cjaC2() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithInvalidTrackingId_ZYeH3() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("invalid");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithValidTrackingId_zikX4() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("valid");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo, "Cargo should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithDuplicateTrackingId_ymCz5() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("duplicate");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithNullCargo_cpip6() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("nullCargo");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithValidTrackingIdParameter_NCsq10() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("valid");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithDuplicateTrackingIdParameter_mqFO11() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("duplicate");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNotNull(cargo, "The cargo should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithNullTrackingId_dvWc1_fid2() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = null;
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithEmptyTrackingId_cjaC2_fid2() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithInvalidTrackingId_ZYeH3_fid2() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("invalid");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindWithNullCargo_cpip6_fid2() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("nullCargo");
    Cargo cargo = jpaCargoRepository.find(trackingId);
    assertNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextTrackingId_yRFN0_tXuF0_fid3() {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    TrackingId trackingId = jpaCargoRepository.nextTrackingId();
    assertEquals(10, trackingId.getIdString().length());
  }
}