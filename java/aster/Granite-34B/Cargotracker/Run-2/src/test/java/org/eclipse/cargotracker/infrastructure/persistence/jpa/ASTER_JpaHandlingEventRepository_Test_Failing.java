/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JpaHandlingEventRepository_Test_Failing {
  @PersistenceContext
  private EntityManager entityManager;
  JpaHandlingEventRepository jpahandlingeventrepository;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_ehQb0_1() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("ABC");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    assertNotNull(handlingHistory);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_ehQb0_2() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("ABC");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    assertNotNull(mostRecentlyCompletedEvent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_ehQb0_3() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("ABC");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    assertNotNull(distinctEventsByCompletionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_ehQb0_4() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("ABC");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    assertNotNull(allHandlingEvents);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void teststore_jcjt0() throws Exception {
    jpahandlingeventrepository = new JpaHandlingEventRepository();
    entityManager = mock(EntityManager.class);
    HandlingEvent event = new HandlingEvent();
    jpahandlingeventrepository.store(event);
    verify(entityManager, times(1)).persist(event);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_ehQb0() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("ABC");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    assertNotNull(handlingHistory);
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    assertNotNull(mostRecentlyCompletedEvent);
    List<HandlingEvent> distinctEventsByCompletionTime = handlingHistory.getDistinctEventsByCompletionTime();
    assertNotNull(distinctEventsByCompletionTime);
    List<HandlingEvent> allHandlingEvents = handlingHistory.getAllHandlingEvents();
    assertNotNull(allHandlingEvents);
  }
}