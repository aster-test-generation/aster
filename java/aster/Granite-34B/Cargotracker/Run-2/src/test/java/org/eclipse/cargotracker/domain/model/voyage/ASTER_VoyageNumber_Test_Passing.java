/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_atfP0() {
    VoyageNumber voyageNumber = new VoyageNumber("12345");
    String idString = voyageNumber.getIdString();
    org.junit.jupiter.api.Assertions.assertEquals("12345", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithNoParameter_deNh1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    String idString = voyageNumber.getIdString();
    org.junit.jupiter.api.Assertions.assertNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_pexp0() {
    VoyageNumber voyageNumber = new VoyageNumber("123456789");
    assertFalse(voyageNumber.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonVoyageNumberObject_HbNL1() {
    VoyageNumber voyageNumber = new VoyageNumber("123456789");
    assertFalse(voyageNumber.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_XYHv2() {
    VoyageNumber voyageNumber = new VoyageNumber("123456789");
    assertTrue(voyageNumber.equals(voyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithEqualObject_oIDX3() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123456789");
    VoyageNumber voyageNumber2 = new VoyageNumber("123456789");
    assertTrue(voyageNumber1.equals(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonEqualObject_JfXg4() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123456789");
    VoyageNumber voyageNumber2 = new VoyageNumber("987654321");
    assertFalse(voyageNumber1.equals(voyageNumber2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithItself_TPiK5() {
    VoyageNumber voyageNumber = new VoyageNumber("123456789");
    assertEquals(voyageNumber, voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithTheSameValue_xZJG9() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123456789");
    VoyageNumber voyageNumber2 = new VoyageNumber("123456789");
    assertEquals(voyageNumber1, voyageNumber2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_siuc0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    String expected = "123";
    String actual = voyageNumber.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_emptyNumber_LSMS2() {
    VoyageNumber voyageNumber = new VoyageNumber("");
    String expected = "";
    String actual = voyageNumber.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_specialCharacterNumber_KzMt4() {
    VoyageNumber voyageNumber = new VoyageNumber("!@#$%^&*()_+");
    String expected = "!@#$%^&*()_+";
    String actual = voyageNumber.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_multiLineNumber_TipW6() {
    VoyageNumber voyageNumber = new VoyageNumber("123\n456");
    String expected = "123\n456";
    String actual = voyageNumber.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_tabbedNumber_WBhE7() {
    VoyageNumber voyageNumber = new VoyageNumber("123\t456");
    String expected = "123\t456";
    String actual = voyageNumber.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_multiNumber_ivAk8() {
    VoyageNumber voyageNumber = new VoyageNumber("123 456");
    String expected = "123 456";
    String actual = voyageNumber.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_nullNumber_FsoN1_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    String expected = "";
    String actual = voyageNumber.toString();
  }
}