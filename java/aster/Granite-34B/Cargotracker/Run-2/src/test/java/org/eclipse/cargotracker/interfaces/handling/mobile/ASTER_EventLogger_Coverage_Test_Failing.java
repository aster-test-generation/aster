/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithNullEventType_JeKl5() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(null);
    eventLogger.setLocation("location");
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_ckUV0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithoutVoyage_Nvgv1_ikfa0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setVoyageNumber(null);
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setLocation("location");
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithEmptyTrackingId_UMyW7_uoky0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setLocation("location");
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithVoyage_nsXe0_pEOw0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setLocation("location");
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithNullCompletionTime_zcwU3_TGYV0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setLocation("location");
    eventLogger.setCompletionTime(null);
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithNullLocation_VGPL2_OMEy0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setLocation(null);
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithNullTrackingId_sGiG4_FOmz0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId(null);
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setLocation("location");
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithNullEventType_JeKl5_fid2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(null);
    eventLogger.setLocation("location");
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
    String expected = "location";
    String actual = eventLogger.getLocation();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithoutVoyage_Nvgv1_ikfa0_fid2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setVoyageNumber(null);
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setLocation("location");
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
    // Replace the erroneous assertion
    // Change the expected or actual value to pass the assertion
    // Change the assertion type to match the return type if needed
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_WithVoyage_nsXe0_pEOw0_fid2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setLocation("USNYC");
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }
}