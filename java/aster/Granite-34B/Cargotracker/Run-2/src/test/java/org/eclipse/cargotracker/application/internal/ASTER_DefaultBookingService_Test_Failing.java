/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Test_Failing {
  private DefaultBookingService bookingService;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_cxvR0() {
    TrackingId trackingId = new TrackingId("id");
    UnLocode unLocode = new UnLocode("countryAndLocation");
    DefaultBookingService bookingService = new DefaultBookingService();
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithNullTrackingId_epNm1() {
    TrackingId trackingId = null;
    UnLocode unLocode = new UnLocode("countryAndLocation");
    DefaultBookingService bookingService = new DefaultBookingService();
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithNullUnLocode_MoQd2() {
    TrackingId trackingId = new TrackingId("id");
    UnLocode unLocode = null;
    DefaultBookingService bookingService = new DefaultBookingService();
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithNullTrackingIdAndUnLocode_eiLo3() {
    TrackingId trackingId = null;
    UnLocode unLocode = null;
    DefaultBookingService bookingService = new DefaultBookingService();
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_iLqw0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("ABC");
    LocalDate newDeadline = LocalDate.now().plusDays(10);
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadlineWithNullTrackingId_VjAw1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = null;
    LocalDate newDeadline = LocalDate.now().plusDays(10);
    try {
      bookingService.changeDeadline(trackingId, newDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_NullItinerary_Tmvr1() {
    TrackingId trackingId = new TrackingId("ABC");
    try {
      bookingService.assignCargoToRoute(null, trackingId);
    } catch (IllegalArgumentException e) {
      assertEquals("Itinerary is required", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_NullTrackingId_vgJQ2() {
    Itinerary itinerary = new Itinerary();
    try {
      bookingService.assignCargoToRoute(itinerary, null);
    } catch (IllegalArgumentException e) {
      assertEquals("Tracking ID is required", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_MFoW0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode origin = new UnLocode("USCHI");
    UnLocode destination = new UnLocode("SESTO");
    LocalDate deadline = LocalDate.of(2022, 1, 1);
    TrackingId trackingId = bookingService.bookNewCargo(origin, destination, deadline);
    assertEquals("USCHI->SESTO", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullOrigin_dIAX1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode origin = null;
    UnLocode destination = new UnLocode("SESTO");
    LocalDate deadline = LocalDate.of(2022, 1, 1);
    TrackingId trackingId = bookingService.bookNewCargo(origin, destination, deadline);
    assertEquals("->SESTO", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullDestination_QtMd2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode origin = new UnLocode("USCHI");
    UnLocode destination = null;
    LocalDate deadline = LocalDate.of(2022, 1, 1);
    TrackingId trackingId = bookingService.bookNewCargo(origin, destination, deadline);
    assertEquals("USCHI->", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullDeadline_MdJi3() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode origin = new UnLocode("USCHI");
    UnLocode destination = new UnLocode("SESTO");
    LocalDate deadline = null;
    TrackingId trackingId = bookingService.bookNewCargo(origin, destination, deadline);
    assertEquals("USCHI->SESTO", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_cxvR0_fid1() {
    TrackingId trackingId = new TrackingId("id");
    UnLocode unLocode = new UnLocode("USCHI");
    DefaultBookingService bookingService = new DefaultBookingService();
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithNullTrackingId_epNm1_fid1() {
    TrackingId trackingId = null;
    UnLocode unLocode = new UnLocode("USCHI");
    DefaultBookingService bookingService = new DefaultBookingService();
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestinationWithNullTrackingIdAndUnLocode_eiLo3_fid1() {
    TrackingId trackingId = null;
    UnLocode unLocode = null;
    DefaultBookingService bookingService = new DefaultBookingService();
    bookingService.changeDestination(trackingId, unLocode);
    // Add assertions here
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_NullOrigin_dIAX1_fid1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode origin = null;
    UnLocode destination = new UnLocode("SESTO");
    LocalDate deadline = LocalDate.of(2022, 1, 1);
    TrackingId trackingId = bookingService.bookNewCargo(origin, destination, deadline);
    assertEquals("N/A", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadlineWithNullNewDeadline_gEbr2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("ABC");
    LocalDate newDeadline = null;
    try {
      bookingService.changeDeadline(trackingId, newDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }
}