/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Itinerary_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_cgpR0() {
    Itinerary itinerary = new Itinerary();
    String expected = "Itinerary{" + "legs=" + itinerary.getLegs() + '}';
    assertEquals(expected, itinerary.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFinalArrivalDate_whenLastLegIsNullOrEmpty_thenReturnsMaxDateTime_zufn0() {
    Itinerary itinerary = new Itinerary();
    LocalDateTime actual = itinerary.getFinalArrivalDate();
    assertEquals(LocalDateTime.MAX, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_EFuF0() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertEquals(true, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashcode1_KXhm0_fid2() {
    Itinerary itinerary = new Itinerary();
    int expected = 1;
    int actual = itinerary.hashCode();
    assertEquals(expected, actual);
  }
}