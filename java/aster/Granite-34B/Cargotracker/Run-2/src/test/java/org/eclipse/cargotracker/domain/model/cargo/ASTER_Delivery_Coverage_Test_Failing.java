/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Delivery_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRoutingWithNotNullRouteSpecification_FyUF0() {
    Delivery delivery = new Delivery();
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertNotNull(updatedDelivery);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHash1_XamG0() {
    Delivery delivery = new Delivery();
    int result = delivery.hashCode();
    assertEquals(result, 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHash2_KIco1() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(TransportStatus.IN_PORT);
    int result = delivery.hashCode();
    assertEquals(result, 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHash5_UpCE4() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    int result = delivery.hashCode();
    assertEquals(result, 4);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHash9_JUYM8() {
    Delivery delivery = new Delivery();
    delivery.setRoutingStatus(RoutingStatus.MISROUTED);
    int result = delivery.hashCode();
    assertEquals(result, 8);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHash10_ttpw9_NyHE0() {
    Delivery delivery = new Delivery();
    delivery.setCalculatedAt(LocalDateTime.now());
    int result = delivery.hashCode();
    assertEquals(result, 9);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHash6_qNgY5_Gmzl0() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(TransportStatus.IN_PORT);
    int result = delivery.hashCode();
    assertEquals(result, 5);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHash10_ttpw9_NyHE0_fid2() {
    Delivery delivery = new Delivery();
    delivery.setCalculatedAt(LocalDateTime.now());
    int result = delivery.hashCode();
    assertEquals(result, -777907487);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHash6_qNgY5_Gmzl0_fid2() {
    Delivery delivery = new Delivery();
    delivery.setTransportStatus(TransportStatus.IN_PORT);
    int result = delivery.hashCode();
    assertEquals(result, -2057577993);
  }
}