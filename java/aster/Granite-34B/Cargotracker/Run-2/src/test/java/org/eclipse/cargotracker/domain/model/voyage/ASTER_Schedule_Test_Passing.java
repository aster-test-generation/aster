/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Schedule_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_niHs1() {
    Schedule schedule = new Schedule();
    assertTrue(schedule.equals(schedule));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSimilarObject_oTnc2() {
    Schedule schedule1 = new Schedule();
    Schedule schedule2 = new Schedule();
    assertTrue(schedule1.equals(schedule2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_HWKM3() {
    Schedule schedule1 = new Schedule();
    Object obj = new Object();
    assertTrue(!schedule1.equals(obj));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCarrierMovements_cjEP0() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> expected = Collections.emptyList();
    List<CarrierMovement> actual = schedule.getCarrierMovements();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullObject_UASK0_fid1() {
    Schedule schedule = new Schedule();
    assertFalse(schedule.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCarrierMovementsWithNull_qoVt5_fid1() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> expected = null;
    List<CarrierMovement> actual = schedule.getCarrierMovements();
    assertNull(expected);
  }
}