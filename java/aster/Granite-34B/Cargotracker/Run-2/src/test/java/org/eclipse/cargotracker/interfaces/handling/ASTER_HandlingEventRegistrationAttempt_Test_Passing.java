/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingEventRegistrationAttempt_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode_returns_unLocode_of_the_handling_event_registration_attempt_CDMU0() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt =
            new HandlingEventRegistrationAttempt(
                    LocalDateTime.now(),
                    LocalDateTime.now(),
                    new TrackingId("123"),
                    new VoyageNumber("123"),
                    HandlingEvent.Type.LOAD,
                    new UnLocode("USCHI")
            );
    assertEquals(new UnLocode("USCHI"), handlingEventRegistrationAttempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode_returns_unLocode_of_the_handling_event_registration_attempt_2_vTJJ1() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt =
            new HandlingEventRegistrationAttempt(
                    LocalDateTime.now(),
                    LocalDateTime.now(),
                    new TrackingId("123"),
                    new VoyageNumber("123"),
                    HandlingEvent.Type.LOAD,
                    new UnLocode("USNYC")
            );
    assertEquals(new UnLocode("USNYC"), handlingEventRegistrationAttempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode_returns_unLocode_of_the_handling_event_registration_attempt_3_uFne2() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt =
            new HandlingEventRegistrationAttempt(
                    LocalDateTime.now(),
                    LocalDateTime.now(),
                    new TrackingId("123"),
                    new VoyageNumber("123"),
                    HandlingEvent.Type.LOAD,
                    new UnLocode("USDAL")
            );
    assertEquals(new UnLocode("USDAL"), handlingEventRegistrationAttempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode_returns_unLocode_of_the_handling_event_registration_attempt_4_PyIn3() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt =
            new HandlingEventRegistrationAttempt(
                    LocalDateTime.now(),
                    LocalDateTime.now(),
                    new TrackingId("123"),
                    new VoyageNumber("123"),
                    HandlingEvent.Type.LOAD,
                    new UnLocode("USEWR")
            );
    assertEquals(new UnLocode("USEWR"), handlingEventRegistrationAttempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocode_returns_unLocode_of_the_handling_event_registration_attempt_5_uqia4() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt =
            new HandlingEventRegistrationAttempt(
                    LocalDateTime.now(),
                    LocalDateTime.now(),
                    new TrackingId("123"),
                    new VoyageNumber("123"),
                    HandlingEvent.Type.LOAD,
                    new UnLocode("USrbx")
            );
    assertEquals(new UnLocode("USrbx"), handlingEventRegistrationAttempt.getUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getType_Wdyv0() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId(), new VoyageNumber(), HandlingEvent.Type.LOAD, new UnLocode());
    HandlingEvent.Type type = handlingEventRegistrationAttempt.getType();
    assertEquals(HandlingEvent.Type.LOAD, type);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getType2_KTYJ1() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId(), new VoyageNumber(), HandlingEvent.Type.UNLOAD, new UnLocode());
    HandlingEvent.Type type = handlingEventRegistrationAttempt.getType();
    assertEquals(HandlingEvent.Type.UNLOAD, type);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getType98_hqUW2() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId(), new VoyageNumber(), HandlingEvent.Type.CUSTOMS, new UnLocode());
    HandlingEvent.Type type = handlingEventRegistrationAttempt.getType();
    assertEquals(HandlingEvent.Type.CUSTOMS, type);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberTest_IQTH0() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId(), new VoyageNumber(), HandlingEvent.Type.LOAD, new UnLocode());
    VoyageNumber voyageNumber = handlingEventRegistrationAttempt.getVoyageNumber();
    assertNotNull(voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getVoyageNumberNullTest_RNvg1() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId(), null, HandlingEvent.Type.LOAD, new UnLocode());
    VoyageNumber voyageNumber = handlingEventRegistrationAttempt.getVoyageNumber();
    assertNull(voyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getRegistrationTime_returns_registration_time_VzfM0() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 1, 10, 0),
            LocalDateTime.of(2022, 1, 2, 12, 0),
            new TrackingId("ABC123"),
            new VoyageNumber("XYZ456"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals(LocalDateTime.of(2022, 1, 1, 10, 0), attempt.getRegistrationTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getRegistrationTime_returns_registration_time_for_receive_event_FElX2() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 5, 8, 0),
            LocalDateTime.of(2022, 1, 6, 10, 0),
            new TrackingId("GHI789"),
            new VoyageNumber("JKL012"),
            HandlingEvent.Type.RECEIVE,
            new UnLocode("CNSHA")
    );
    assertEquals(LocalDateTime.of(2022, 1, 5, 8, 0), attempt.getRegistrationTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getRegistrationTime_returns_registration_time_for_customs_event_krnK4() {
    HandlingEventRegistrationAttempt attempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.of(2022, 1, 9, 16, 0),
            LocalDateTime.of(2022, 1, 10, 18, 0),
            new TrackingId("STU345"),
            new VoyageNumber("VWX678"),
            HandlingEvent.Type.CUSTOMS,
            new UnLocode("GBSTO")
    );
    assertEquals(LocalDateTime.of(2022, 1, 9, 16, 0), attempt.getRegistrationTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_WsRf0() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("id"), new VoyageNumber("number"), HandlingEvent.Type.LOAD, new UnLocode("USNYC"));
    TrackingId trackingId = handlingEventRegistrationAttempt.getTrackingId();
    assertEquals(trackingId, new TrackingId("id"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest3_tefA2() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("id"), new VoyageNumber(), HandlingEvent.Type.LOAD, new UnLocode("USNYC"));
    TrackingId trackingId = handlingEventRegistrationAttempt.getTrackingId();
    assertEquals(trackingId, new TrackingId("id"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest4_icGf3() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("id"), new VoyageNumber("number"), HandlingEvent.Type.CLAIM, new UnLocode("USNYC"));
    TrackingId trackingId = handlingEventRegistrationAttempt.getTrackingId();
    assertEquals(trackingId, new TrackingId("id"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest5_LKec4() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(LocalDateTime.now(), LocalDateTime.now(), new TrackingId("id"), new VoyageNumber("number"), HandlingEvent.Type.LOAD, new UnLocode());
    TrackingId trackingId = handlingEventRegistrationAttempt.getTrackingId();
    assertEquals(trackingId, new TrackingId("id"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCompletionTimeTest_oluo0() {
    HandlingEventRegistrationAttempt handlingEventRegistrationAttempt = new HandlingEventRegistrationAttempt(
            LocalDateTime.now(),
            LocalDateTime.now(),
            new TrackingId("123"),
            new VoyageNumber("AB123"),
            HandlingEvent.Type.LOAD,
            new UnLocode("USCHI")
    );
    assertEquals(handlingEventRegistrationAttempt.getCompletionTime(), handlingEventRegistrationAttempt.getCompletionTime());
  }
}