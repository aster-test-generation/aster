/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.persistence.Embedded;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Passing {
  private HandlingEvent lastEvent;
  Delivery delivery;
  @NotNull
  private boolean misdirected;
  @Embedded
  private HandlingActivity nextExpectedActivity;
  private Voyage currentVoyage;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetMisdirected() throws Exception {
    delivery = new Delivery();
    delivery.setMisdirected(true);
    assertTrue(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirected_isyP0() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    assertTrue(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirectedWithFalse_iLiy1() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(false);
    assertFalse(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNextExpectedActivityTest_efxz0() {
    Delivery delivery = new Delivery();
    HandlingActivity result = delivery.getNextExpectedActivity();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getCurrentVoyage_NoCurrentVoyage_ReturnsVoyageNone_uhUq0() {
    Delivery delivery = new Delivery();
    Voyage currentVoyage = delivery.getCurrentVoyage();
    assertEquals(Voyage.NONE, currentVoyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setLastKnownLocation_nullLocation_rbOr1() {
    Delivery delivery = new Delivery();
    delivery.setLastKnownLocation(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetUnloadedAtDestination() throws Exception {
    delivery = new Delivery();
    delivery.setUnloadedAtDestination(true);
    assertTrue(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setUnloadedAtDestination_true_MmMv0() {
    Delivery delivery = new Delivery();
    delivery.setUnloadedAtDestination(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setUnloadedAtDestination_false_ShZt1() {
    Delivery delivery = new Delivery();
    delivery.setUnloadedAtDestination(false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocation_nullLastKnownLocation_returnsUnknownLocation_LSyK0() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = delivery.getLastKnownLocation();
    assertEquals(Location.UNKNOWN, lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocation_nonNullLastKnownLocation_returnsLastKnownLocation_uyyZ1() {
    Location lastKnownLocation = new Location(new UnLocode("USCHI"), "Chicago");
    Delivery delivery = new Delivery();
    delivery.setLastKnownLocation(lastKnownLocation);
    Location actualLastKnownLocation = delivery.getLastKnownLocation();
    assertEquals(lastKnownLocation, actualLastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsUnloadedAtDestination2_VDRl1() {
    Delivery delivery = new Delivery();
    boolean result = delivery.isUnloadedAtDestination();
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatus_cOVw0() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = TransportStatus.NOT_RECEIVED;
    delivery.setTransportStatus(transportStatus);
    assertEquals(transportStatus, delivery.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithNullObject_ReturnsFalse_AMTy0() {
    Delivery delivery = new Delivery();
    boolean actual = delivery.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithSameObject_ReturnsTrue_yovj1() {
    Delivery delivery = new Delivery();
    boolean actual = delivery.equals(delivery);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectOfDifferentType_ReturnsFalse_KTJc2() {
    Delivery delivery = new Delivery();
    boolean actual = delivery.equals(new Object());
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithSameValues_ReturnsTrue_qkzZ3() {
    Delivery delivery1 = new Delivery();
    Delivery delivery2 = new Delivery();
    boolean actual = delivery1.equals(delivery2);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithObjectWithDifferentValues_ReturnsFalse_ryhM4() {
    Delivery delivery1 = new Delivery();
    Delivery delivery2 = new Delivery();
    delivery2.setTransportStatus(TransportStatus.UNKNOWN);
    boolean actual = delivery1.equals(delivery2);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsetCalculatedAt() throws Exception {
    calculatedAt = LocalDateTime.now();
    delivery = new Delivery();
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_HfNq0() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_nullValue_pJRU1() {
    Delivery delivery = new Delivery();
    delivery.setCalculatedAt(null);
    assertNull(delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_futureValue_sCLg2() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now().plusDays(1);
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_pastValue_ayoB3() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now().minusDays(1);
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_maxValue_WTqR4() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.MAX;
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_minValue_egSI5() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.MIN;
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_randomValue_nnqw6() {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.of(2023, 1, 1, 12, 0, 0);
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setRoutingStatus_fXPu0() {
    Delivery delivery = new Delivery();
    delivery.setRoutingStatus(RoutingStatus.ROUTED);
    assertEquals(RoutingStatus.ROUTED, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setRoutingStatus_with_NOT_ROUTED_dZvq1() {
    Delivery delivery = new Delivery();
    delivery.setRoutingStatus(RoutingStatus.NOT_ROUTED);
    assertEquals(RoutingStatus.NOT_ROUTED, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setRoutingStatus_with_MISROUTED_nTkF2() {
    Delivery delivery = new Delivery();
    delivery.setRoutingStatus(RoutingStatus.MISROUTED);
    assertEquals(RoutingStatus.MISROUTED, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setRoutingStatus_with_null_AzMS3() {
    Delivery delivery = new Delivery();
    delivery.setRoutingStatus(null);
    assertEquals(null, delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setRoutingStatus_with_random_value_GkQd4() {
    Delivery delivery = new Delivery();
    delivery.setRoutingStatus(RoutingStatus.values()[1]);
    assertEquals(RoutingStatus.values()[1], delivery.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getEstimatedTimeOfArrival_returnsCorrectValue_LgiP0() {
    Delivery delivery = new Delivery();
    LocalDateTime eta = delivery.getEstimatedTimeOfArrival();
    assertEquals(eta, delivery.getEstimatedTimeOfArrival());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getCalculatedAt_returns_null_if_calculated_at_not_set_kzxF1() {
    Delivery delivery = new Delivery();
    assertEquals(null, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirectedWithToggle_tFAk2_1() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    delivery.setMisdirected(false);
    delivery.setMisdirected(true);
    assertTrue(delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirectedWithToggle_tFAk2_2() {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    delivery.setMisdirected(false);
    delivery.setMisdirected(true);
  }
}