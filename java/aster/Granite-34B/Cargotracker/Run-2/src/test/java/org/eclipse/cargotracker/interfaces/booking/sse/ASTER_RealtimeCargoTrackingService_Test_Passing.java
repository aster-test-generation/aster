/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import jakarta.inject.Inject;
import jakarta.ws.rs.sse.SseBroadcaster;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.RouteSpecification;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingService_Test_Passing {
  private SseBroadcaster broadcaster;
  @Inject
  private Logger logger;
  RealtimeCargoTrackingService realtimecargotrackingservice;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void onCargoUpdated_test_IkiP0() {
    Cargo cargo = new Cargo(new TrackingId(), new RouteSpecification());
    RealtimeCargoTrackingService realtimeCargoTrackingService = new RealtimeCargoTrackingService();
    realtimeCargoTrackingService.onCargoUpdated(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_tSDE0() {
    RealtimeCargoTrackingService realtimeCargoTrackingService = new RealtimeCargoTrackingService();
    realtimeCargoTrackingService.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testClose_YFSr0() {
    RealtimeCargoTrackingService service = new RealtimeCargoTrackingService();
    service.close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithLoggerHandler_olJc10_tkpV0() {
    RealtimeCargoTrackingService realtimeCargoTrackingService = new RealtimeCargoTrackingService();
    realtimeCargoTrackingService.init();
    Logger logger = Logger.getLogger(RealtimeCargoTrackingService.class.getName());
    Assertions.assertNotNull(logger.getHandlers());
    logger.setUseParentHandlers(false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithLoggerHandlerClass_qaZf12_eRwk0() {
    RealtimeCargoTrackingService realtimeCargoTrackingService = new RealtimeCargoTrackingService();
    realtimeCargoTrackingService.init();
    Logger logger = Logger.getLogger(RealtimeCargoTrackingService.class.getName());
    Assertions.assertEquals("java.util.logging.ConsoleHandler", logger.getHandlers()[0].getClass().getName());
  }
}