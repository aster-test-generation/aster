/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Voyage_Test_Passing {
  Voyage voyage;
  VoyageNumber voyageNumber;
  Schedule schedule;
  @Mock
  VoyageNumber mockVoyageNumber;
  @Mock
  Schedule mockSchedule;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithNullObject_ReturnsFalse_BYrU0() {
    Voyage voyage = new Voyage(new VoyageNumber(), new Schedule());
    assertFalse(voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithNonVoyageObject_ReturnsFalse_inyK1() {
    Voyage voyage = new Voyage(new VoyageNumber(), new Schedule());
    assertFalse(voyage.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithSameObject_ReturnsTrue_WWJz2() {
    Voyage voyage = new Voyage(new VoyageNumber(), new Schedule());
    assertTrue(voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_WithDifferentVoyageNumber_ReturnsFalse_PGPt4() {
    Voyage voyage1 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("CD456"), new Schedule());
    assertFalse(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getScheduleTest_cdkr0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertEquals(schedule, voyage.getSchedule());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_DsWC0() {
    VoyageNumber voyageNumber = new VoyageNumber("AB123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage AB123";
    String actual = voyage.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_voyageNumberEmpty_xkoh2() {
    VoyageNumber voyageNumber = new VoyageNumber("");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage ";
    String actual = voyage.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_voyageNumberTabs_IdMT4() {
    VoyageNumber voyageNumber = new VoyageNumber("\t\t");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage \t\t";
    String actual = voyage.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_voyageNumberNewline_SfpJ5() {
    VoyageNumber voyageNumber = new VoyageNumber("\n");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage \n";
    String actual = voyage.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_voyageNumberCarriageReturn_tKpW6() {
    VoyageNumber voyageNumber = new VoyageNumber("\r");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage \r";
    String actual = voyage.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_voyageNumberMultipleWords_XvKu7() {
    VoyageNumber voyageNumber = new VoyageNumber("Voyage 123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    String expected = "Voyage Voyage 123";
    String actual = voyage.toString();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_UcWB0() {
    VoyageNumber voyageNumber = new VoyageNumber("AB123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    assertEquals(voyageNumber, voyage.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsameIdentityAs() throws Exception {
    voyageNumber = new VoyageNumber("12345");
    schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    Voyage otherVoyage = new Voyage(voyageNumber, schedule);
    assertTrue(voyage.sameIdentityAs(otherVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_mhZS0_1() {
    Voyage voyage1 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage voyage3 = new Voyage(new VoyageNumber("CD456"), new Schedule());
    assertTrue(voyage1.sameIdentityAs(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_mhZS0_2() {
    Voyage voyage1 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage voyage3 = new Voyage(new VoyageNumber("CD456"), new Schedule());
    assertFalse(voyage1.sameIdentityAs(voyage3));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNotEqualsNull_iQyf1() {
    Voyage voyage = new Voyage(new VoyageNumber("AB123"), new Schedule());
    assertFalse(voyage.sameIdentityAs(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSchedule_PavD4() {
    Voyage voyage = new Voyage(new VoyageNumber("AB123"), new Schedule());
    assertEquals(new Schedule(), voyage.getSchedule());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_cgFZ5() {
    Voyage voyage = new Voyage(new VoyageNumber("AB123"), new Schedule());
    assertEquals("Voyage AB123", voyage.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_bGmt6() {
    Voyage voyage1 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    assertEquals(voyage1.hashCode(), voyage2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testHashCode_phEv0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    Voyage voyage = new Voyage(voyageNumber, schedule);
    int expected = voyageNumber.hashCode();
    int actual = voyage.hashCode();
    org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameIdentityAs_mhZS0() {
    Voyage voyage1 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("AB123"), new Schedule());
    Voyage voyage3 = new Voyage(new VoyageNumber("CD456"), new Schedule());
    assertTrue(voyage1.sameIdentityAs(voyage2));
    assertFalse(voyage1.sameIdentityAs(voyage3));
  }
}