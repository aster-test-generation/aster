/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.persistence.Embedded;
import jakarta.validation.constraints.NotNull;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Cargo_Test_Failing {
  Cargo cargo;
  @Mock
  TrackingId trackingId;
  @Mock
  RouteSpecification routeSpecification;
  @Mock
  UnLocode unLocode;
  @Embedded
  @NotNull
  private Itinerary itinerary;
  @Embedded
  @NotNull
  private Delivery delivery;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testequals() throws Exception {
    cargo = new Cargo(trackingId, routeSpecification);
    when(trackingId.equals(trackingId)).thenReturn(true);
    when(routeSpecification.equals(routeSpecification)).thenReturn(true);
    assertTrue(cargo.equals(cargo));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testtoString() throws Exception {
    trackingId = mock(TrackingId.class);
    cargo = new Cargo(trackingId, null);
    when(trackingId.toString()).thenReturn(" TrackingId");
    assertEquals("TrackingId", cargo.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testhashCode() throws Exception {
    trackingId = mock(TrackingId.class);
    cargo = new Cargo(trackingId, null);
    when(trackingId.hashCode()).thenReturn(123);
    assertEquals(123, cargo.hashCode());
  }
}