/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.util.DateConverter;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimePattern_lzxI0() {
    EventLogger eventLogger = new EventLogger();
    String completionTimePattern = eventLogger.getCompletionTimePattern();
    assertEquals(DateConverter.DATE_TIME_FORMAT, completionTimePattern);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyageNumber_fIFk0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("ABC123");
    String actualVoyageNumber = eventLogger.getVoyageNumber();
    assertEquals("ABC123", actualVoyageNumber);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_mjMn0() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithCoverage_fEHx1() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    assertEquals(null, trackingId);
    trackingId = "123456";
    assertEquals("123456", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLocationTest_zYYt0() {
    EventLogger eventLogger = new EventLogger();
    String location = eventLogger.getLocation();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLocationTest_nullLocation_sONz2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation(null);
    String location = eventLogger.getLocation();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void getLocationTest_emptyLocation_VErs3() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setLocation("");
    String location = eventLogger.getLocation();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getEventType_1_JDYa0() {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type type = eventLogger.getEventType();
    assertEquals(null, type);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_bRrJ0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.now());
    assertEquals(eventLogger.getCompletionTime(), eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_nullCompletionTime_PAaO1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(null);
    assertEquals(eventLogger.getCompletionTime(), null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_futureCompletionTime_CSWU4() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.now().plusDays(1));
    assertEquals(eventLogger.getCompletionTime(), eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_pastCompletionTime_KjtD5() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.now().minusDays(1));
    assertEquals(eventLogger.getCompletionTime(), eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_maxCompletionTime_JSXs6() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.MAX);
    assertEquals(eventLogger.getCompletionTime(), eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_minCompletionTime_QkSl7() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.MIN);
    assertEquals(eventLogger.getCompletionTime(), eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_randomCompletionTime_ysRP8() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.of(2023, 10, 15, 12, 30));
    assertEquals(eventLogger.getCompletionTime(), eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setLocation_WhenLocationIsNotEmpty_ThenLocationChanges_YYFw1() {
    EventLogger eventLogger = new EventLogger();
    String location = "New York";
    eventLogger.setLocation(location);
    assert eventLogger.getLocation().equals("New York");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTime_yyQR0() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now();
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithMaxDateTime_ApkA1() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.MAX;
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithMinDateTime_pfpI2() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.MIN;
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithNull_zYLJ3() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = null;
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithRandomDateTime_NAhO4() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.of(2023, 10, 20, 12, 0, 0);
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithFutureDateTime_BDLQ5() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now().plusDays(1);
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithPastDateTime_nmnv6() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.now().minusDays(1);
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithLeapYearDateTime_ROpf7() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.of(2024, 2, 29, 0, 0, 0);
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_cmkn0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("ABC123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberNull_SUUz1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberEmpty_jDJy2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberInvalidFormat_CcWK4() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("InvalidFormat");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberMaxLength_xluL6() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberMinLength_tONT7() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("A");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberStartWithNumber_ivog9() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("123ABC");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberStartWithSpecialCharacter_jmVZ10() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("!@#ABC");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberStartWithWhitespace_mJyF11() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("   ABC");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberEndWithSpecialCharacter_xDRN13() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setVoyageNumber("ABC!@#");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setEventType_LOAD_DjSs0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    assertEquals(HandlingEvent.Type.LOAD, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setEventType_UNLOAD_QmkS1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.UNLOAD);
    assertEquals(HandlingEvent.Type.UNLOAD, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setEventType_RECEIVE_xnzy2() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.RECEIVE);
    assertEquals(HandlingEvent.Type.RECEIVE, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setEventType_CLAIM_bgfB3() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.CLAIM);
    assertEquals(HandlingEvent.Type.CLAIM, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setEventType_CUSTOMS_hvqk4() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setEventType(HandlingEvent.Type.CUSTOMS);
    assertEquals(HandlingEvent.Type.CUSTOMS, eventLogger.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithCoverage_fEHx1_1() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    trackingId = "123456";
    assertNull(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithCoverage_fEHx1_2() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    trackingId = "123456";
    assertEquals("123456", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingId_afBl0_UhKU0() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = "12345";
    eventLogger.setTrackingId(trackingId);
    assertEquals(trackingId, eventLogger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdNull_WjvD1_VnXY0() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = null;
    eventLogger.setTrackingId(trackingId);
    assertEquals(trackingId, eventLogger.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTrackingIdEmpty_llfF2_Lrms0() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = "";
    eventLogger.setTrackingId(trackingId);
    assertEquals(trackingId, eventLogger.getTrackingId());
  }
}