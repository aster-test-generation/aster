/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_WhenOriginAndDestinationAreValid_ThenItReturnsExpectedResult_gkLh0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USDAL";
    String deadline = "20220101";
    List<TransitPath> actualResult = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_1_SnCz0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CNSHA";
    String deadline = "20220101";
    List<TransitPath> actual = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_2_xQUI1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CNSHA";
    String deadline = "20220101";
    List<TransitPath> actual = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(0, actual.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_4_eUVN3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CNSHA";
    String deadline = "20220101";
    List<TransitPath> actual = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = actual.get(0);
    TransitEdge transitEdge = transitPath.getTransitEdges().get(0);
    assertEquals("V123", transitEdge.getVoyageNumber());
    assertEquals("USNYC", transitEdge.getFromUnLocode());
    assertEquals("CNSHA", transitEdge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_1_rxmV0() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CAeux";
    String deadline = "20190101";
    List<TransitPath> result = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_2_idTW1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CAeux";
    String deadline = "20190101";
    List<TransitPath> result = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(0, result.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_4_eUVN3_1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CNSHA";
    String deadline = "20220101";
    List<TransitPath> actual = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = actual.get(0);
    TransitEdge transitEdge = transitPath.getTransitEdges().get(0);
    assertEquals("V123", transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_4_eUVN3_2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CNSHA";
    String deadline = "20220101";
    List<TransitPath> actual = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = actual.get(0);
    TransitEdge transitEdge = transitPath.getTransitEdges().get(0);
    assertEquals("USNYC", transitEdge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_4_eUVN3_3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CNSHA";
    String deadline = "20220101";
    List<TransitPath> actual = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    TransitPath transitPath = actual.get(0);
    TransitEdge transitEdge = transitPath.getTransitEdges().get(0);
    assertEquals("CNSHA", transitEdge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_WhenOriginAndDestinationAreValid_ThenItReturnsExpectedResult_gkLh0_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USDAL";
    String deadline = "20220101";
    List<TransitPath> actualResult = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    List<TransitPath> expectedResult = new ArrayList<>();
    expectedResult.add(new TransitPath());
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_2_xQUI1_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CNSHA";
    String deadline = "20220101";
    List<TransitPath> actual = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(Collections.emptyList(), actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_2_idTW1_fid2() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "CAeux";
    String deadline = "20190101";
    List<TransitPath> result = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertEquals(1, result.size());
  }
}