/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RouteSpecification_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_tpre0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    LocalDate arrivalDeadline = LocalDate.of(2023, 1, 1);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(new HashCodeBuilder().append(origin).append(destination).append(arrivalDeadline).toHashCode(), routeSpecification.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOrigin_returnsCorrectLocation_CVlD0_BXxa0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas, TX");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(origin, routeSpecification.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOrigin_returnsCorrectLocation_withCoverage_HOGr2_tTTT0_2() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas, TX");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(destination, routeSpecification.getDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOrigin_returnsCorrectLocation_withCoverage_HOGr2_tTTT0_3() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas, TX");
    LocalDate arrivalDeadline = LocalDate.now();
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertEquals(arrivalDeadline, routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadline_returns_the_correct_value_AcND0_JNYb0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, LocalDate.now());
    assertEquals(LocalDate.now(), routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadline_returns_the_correct_value_2_edzI2_TJiB0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, LocalDate.now().minusDays(1));
    assertEquals(LocalDate.now().minusDays(1), routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadline_returns_the_correct_value_3_jSMp3_GeKe0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, LocalDate.now().plusDays(1));
    assertEquals(LocalDate.now().plusDays(1), routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadline_returns_the_correct_value_4_PjPD4_XvCk0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, LocalDate.now().minusYears(1));
    assertEquals(LocalDate.now().minusYears(1), routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getArrivalDeadline_returns_the_correct_value_5_GKig5_fETW0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago");
    Location destination = new Location(new UnLocode("USDAL"), "Dallas");
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, LocalDate.now().plusYears(1));
    assertEquals(LocalDate.now().plusYears(1), routeSpecification.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedByWithNullItinerary_VpBj1_mmKf0() {
    Location origin = new Location(new UnLocode("USCHI"), "Chicago, IL");
    Location destination = new Location(new UnLocode("USNYC"), "New York, NY");
    LocalDate arrivalDeadline = LocalDate.now().plusDays(7);
    RouteSpecification routeSpecification = new RouteSpecification(origin, destination, arrivalDeadline);
    assertTrue(!routeSpecification.isSatisfiedBy(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonRouteSpecificationObject_GfrI1_ECpc0() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("USNYC"), "New York"), new Location(new UnLocode("USDAL"), "Dallas"), LocalDate.now());
    assertTrue(routeSpecification.equals(new Object()) == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetDestination_jOOS0() throws Exception {
    Location destination = mock(Location.class);
    RouteSpecification routespecification = new RouteSpecification(destination, destination, LocalDate.now());
    Location actualDestination = routespecification.getDestination();
    assertEquals(destination, actualDestination);
  }
}