/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Leg_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullLocation_tWja1() {
    Location from = null;
    Location to = null;
    Leg leg = new Leg("V123", from, to, LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 2, 1, 0, 0));
    assertEquals("Leg{voyageNumber=V123, from=null, to=null, loadTime=2022-01-01T00:00, unloadTime=2022-02-01T00:00}", leg.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyVoyageNumber_kMxt2() {
    Location from = new Location("CNHKG", "Hong Kong");
    Location to = new Location("USNYC", "New York");
    Leg leg = new Leg("", from, to, LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 2, 1, 0, 0));
    assertEquals("Leg{voyageNumber=, from=CNHKG, to=USNYC, loadTime=2022-01-01T00:00, unloadTime=2022-02-01T00:00}", leg.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullVoyageNumber_YWHt3() {
    Location from = new Location("CNHKG", "Hong Kong");
    Location to = new Location("USNYC", "New York");
    Leg leg = new Leg(null, from, to, LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 2, 1, 0, 0));
    assertEquals("Leg{voyageNumber=null, from=CNHKG, to=USNYC, loadTime=2022-01-01T00:00, unloadTime=2022-02-01T00:00}", leg.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullLoadTime_WUUg4() {
    Location from = new Location("CNHKG", "Hong Kong");
    Location to = new Location("USNYC", "New York");
    Leg leg = new Leg("V123", from, to, null, LocalDateTime.of(2022, 2, 1, 0, 0));
    assertEquals("Leg{voyageNumber=V123, from=CNHKG, to=USNYC, loadTime=null, unloadTime=2022-02-01T00:00}", leg.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullUnloadTime_GnuD5() {
    Location from = new Location("CNHKG", "Hong Kong");
    Location to = new Location("USNYC", "New York");
    Leg leg = new Leg("V123", from, to, LocalDateTime.of(2022, 1, 1, 0, 0), null);
    assertEquals("Leg{voyageNumber=V123, from=CNHKG, to=USNYC, loadTime=2022-01-01T00:00, unloadTime=null}", leg.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTo_Zubl0() {
    Location location = new Location("unLocode", "name");
    Leg leg = new Leg("voyageNumber", location, location, LocalDateTime.now(), LocalDateTime.now());
    assertEquals("Location{unLocode='unLocode', name='name'}", leg.getTo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToWithNullToLocation_rhFQ1() {
    Location location = new Location("unLocode", "name");
    Leg leg = new Leg("voyageNumber", location, null, LocalDateTime.now(), LocalDateTime.now());
    assertEquals("", leg.getTo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToWithNullFromLocation_ZjQK2() {
    Location location = new Location("unLocode", "name");
    Leg leg = new Leg("voyageNumber", null, location, LocalDateTime.now(), LocalDateTime.now());
    assertEquals("Location{unLocode='unLocode', name='name'}", leg.getTo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToWithNullFromAndToLocation_Gjmy3() {
    Leg leg = new Leg("voyageNumber", null, null, LocalDateTime.now(), LocalDateTime.now());
    assertEquals("", leg.getTo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromTest_Vkhr0() {
    Location location = new Location("unLocode", "name");
    Leg leg = new Leg("voyageNumber", location, location, LocalDateTime.now(), LocalDateTime.now());
    assertEquals("Location{unLocode='unLocode', name='name'}", leg.getFrom());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToWithNullToLocation_rhFQ1_fid1() {
    Location location = new Location("unLocode", "name");
    Leg leg = new Leg("voyageNumber", location, null, LocalDateTime.now(), LocalDateTime.now());
    assertEquals(null, leg.getTo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToWithNullFromAndToLocation_Gjmy3_fid1() {
    Leg leg = new Leg("voyageNumber", null, null, LocalDateTime.now(), LocalDateTime.now());
    assertEquals(null, leg.getTo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnloadTimeTest_null_CYtC1_NAGZ0() {
    Location location1 = new Location("location1", "location1");
    Location location2 = new Location("location2", "location2");
    Leg leg = new Leg("voyageNumber", location1, location2, null, null);
    String actualUnloadTime = leg.getFrom();
    String expectedUnloadTime = null;
    assertEquals(expectedUnloadTime, actualUnloadTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromUnLocode_returnsFromUnLocode_Qvej0_UoGZ0() {
    Location from = new Location("USCHI", "Chicago");
    Location to = new Location("USEWR", "EWR");
    Leg leg = new Leg("VLG123", from, to, null, null);
    String result = leg.getFromUnLocode();
    assertEquals("USCHI", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromUnLocode_returnsFromUnLocode_forCoverage_kwOg1_XYUY0_2() {
    Location from = new Location("USCHI", "Chicago");
    Location to = new Location("USEWR", "EWR");
    Leg leg = new Leg("VLG123", from, to, null, null);
    String result = leg.getFromUnLocode();
    assertEquals("USEWR", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_OOOG0_fid2() {
    Location from = new Location("CNHKG", "Hong Kong");
    Location to = new Location("USNYC", "New York");
    Leg leg = new Leg("V123", from, to, LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 2, 1, 0, 0));
    assertEquals("Leg{voyageNumber=V123, from=CNHKG, to=USNYC, loadTime=2022-01-01T00:00, unloadTime=2022-02-01T00:00}", leg.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnloadTimeTest_empty_jOBe2_tfSH0() {
    Location location1 = new Location("location1", "location1");
    Location location2 = new Location("location2", "location2");
    Leg leg = new Leg("voyageNumber", location1, location2, LocalDateTime.now(), LocalDateTime.now());
    String actualUnloadTime = leg.getFrom();
    String expectedUnloadTime = "";
    assertEquals(expectedUnloadTime, actualUnloadTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnloadTimeTest_random_YTli4_zhve0() {
    Location location1 = new Location("location1", "location1");
    Location location2 = new Location("location2", "location2");
    Leg leg = new Leg("voyageNumber", location1, location2, LocalDateTime.now(), LocalDateTime.now());
    String actualUnloadTime = leg.getFrom();
    String expectedUnloadTime = "random";
    assertEquals(expectedUnloadTime, actualUnloadTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnloadTimeTest_min_PzGq6_oCcH0_fid2() {
    Location location1 = new Location("location1", "location1");
    Location location2 = new Location("location2", "location2");
    Leg leg = new Leg("voyageNumber", location1, location2, LocalDateTime.now(), LocalDateTime.now());
    String actualUnloadTime = leg.getFrom();
    String expectedUnloadTime = "Location [unLocode=location1, name=location1]";
    assertEquals(expectedUnloadTime, actualUnloadTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromUnLocode_returnsFromUnLocode_forCoverage_kwOg1_XYUY0_2_fid2() {
    Location from = new Location("USCHI", "Chicago");
    Location to = new Location("USEWR", "EWR");
    Leg leg = new Leg("VLG123", from, to, null, null);
    String result = leg.getFromUnLocode();
    assertEquals("USEWR", leg.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getFromNameTest1_bjGu0_lhVp0_fid2() {
    Location location = new Location("unLocode", "name");
    Leg leg = new Leg("voyageNumber", location, location, LocalDateTime.now(), LocalDateTime.now());
    assertEquals("Location [unLocode=unLocode, name=name]", leg.getFrom());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_OOOG0_WfyW0_fid2() {
    Location from = new Location("CNHKG", "Hong Kong");
    Location to = new Location("USNYC", "New York");
    Leg leg = new Leg("V123", from, to, LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 2, 1, 0, 0));
    assertEquals("Leg{voyageNumber=V123, from=Location{unLocode='CNHKG', name='Hong Kong'}, to=Location{unLocode='USNYC', name='New York'}, loadTime=2022-01-01T00:00, unloadTime=2022-02-01T00:00}", leg.toString());
  }
}