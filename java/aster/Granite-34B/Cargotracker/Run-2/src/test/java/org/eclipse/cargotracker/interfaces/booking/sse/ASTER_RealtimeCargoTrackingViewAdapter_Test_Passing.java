/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingViewAdapter_Test_Passing {
  private Cargo cargo;
  private RouteSpecification routeSpecification;
  private TrackingId trackingId;
  private UnLocode unLocode;
  private LocationViewAdapter locationViewAdapter;
  private RealtimeCargoTrackingViewAdapter realtimecargotrackingviewadapter;
  private RoutingStatus routingStatus;
  private TransportStatus transportStatus;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getRoutingStatus_ReturnsExpectedStatus_Cckx0() {
    Cargo cargo = new Cargo(new TrackingId(), new RouteSpecification());
    RealtimeCargoTrackingViewAdapter adapter = new RealtimeCargoTrackingViewAdapter(cargo);
    assertEquals("Expected status", "Expected status", adapter.getRoutingStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastKnownLocation_KeSS0() {
    Cargo cargo = new Cargo(new TrackingId(), new RouteSpecification());
    RealtimeCargoTrackingViewAdapter realtimeCargoTrackingViewAdapter = new RealtimeCargoTrackingViewAdapter(cargo);
    LocationViewAdapter locationViewAdapter = realtimeCargoTrackingViewAdapter.getLastKnownLocation();
    assertNotNull(locationViewAdapter);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetStatusCodeNotRouted_vKiV0() {
    Cargo cargo = new Cargo(new TrackingId(), new RouteSpecification());
    RealtimeCargoTrackingViewAdapter view = new RealtimeCargoTrackingViewAdapter(cargo);
    String actual = view.getStatusCode();
    assertEquals("NOT_ROUTED", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetStatusCodeMisrouted_VKew1() {
    Cargo cargo = new Cargo(new TrackingId(), new RouteSpecification());
    cargo.getDelivery().setRoutingStatus(RoutingStatus.MISROUTED);
    RealtimeCargoTrackingViewAdapter view = new RealtimeCargoTrackingViewAdapter(cargo);
    String actual = view.getStatusCode();
    assertEquals("MISROUTED", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetStatusCodeMisdirected_sMlp2() {
    Cargo cargo = new Cargo(new TrackingId(), new RouteSpecification());
    cargo.getDelivery().setRoutingStatus(RoutingStatus.ROUTED);
    cargo.getDelivery().setMisdirected(true);
    RealtimeCargoTrackingViewAdapter view = new RealtimeCargoTrackingViewAdapter(cargo);
    String actual = view.getStatusCode();
    assertEquals("MISDIRECTED", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetStatusCodeUnloadedAtDestination_PVHF3() {
    Cargo cargo = new Cargo(new TrackingId(), new RouteSpecification());
    cargo.getDelivery().setRoutingStatus(RoutingStatus.ROUTED);
    cargo.getDelivery().setMisdirected(false);
    cargo.getDelivery().setUnloadedAtDestination(true);
    RealtimeCargoTrackingViewAdapter view = new RealtimeCargoTrackingViewAdapter(cargo);
    String actual = view.getStatusCode();
    assertEquals("AT_DESTINATION", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetStatusCodeInPort_LGoo4() {
    Cargo cargo = new Cargo(new TrackingId(), new RouteSpecification());
    cargo.getDelivery().setRoutingStatus(RoutingStatus.ROUTED);
    cargo.getDelivery().setMisdirected(false);
    cargo.getDelivery().setUnloadedAtDestination(false);
    cargo.getDelivery().setTransportStatus(TransportStatus.IN_PORT);
    RealtimeCargoTrackingViewAdapter view = new RealtimeCargoTrackingViewAdapter(cargo);
    String actual = view.getStatusCode();
    assertEquals("IN_PORT", actual);
  }
}