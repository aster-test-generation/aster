/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DateConverter_Test_Failing {
  private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
  private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDate_zUge0() {
    String date = "2022-08-15";
    LocalDate expectedDate = LocalDate.of(2022, 8, 15);
    LocalDate actualDate = DateConverter.toDate(date);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithInvalidDate_oPDu1() {
    String date = "2022-08-15-01";
    LocalDate expectedDate = LocalDate.of(2022, 8, 15);
    LocalDate actualDate = DateConverter.toDate(date);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithEmptyDate_uoyx2() {
    String date = "";
    LocalDate expectedDate = LocalDate.now();
    LocalDate actualDate = DateConverter.toDate(date);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithNullDate_DXvu3() {
    String date = null;
    LocalDate expectedDate = LocalDate.now();
    LocalDate actualDate = DateConverter.toDate(date);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithFutureDate_bSMT4() {
    String date = "2022-08-15";
    LocalDate expectedDate = LocalDate.of(2022, 9, 15);
    LocalDate actualDate = DateConverter.toDate(date);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithPastDate_GQXT5() {
    String date = "2022-08-15";
    LocalDate expectedDate = LocalDate.of(2022, 7, 15);
    LocalDate actualDate = DateConverter.toDate(date);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithInvalidDateFormat_lmad6() {
    String date = "2022/08/15";
    LocalDate expectedDate = LocalDate.of(2022, 8, 15);
    LocalDate actualDate = DateConverter.toDate(date);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateWithInvalidDateLength_GGvf7() {
    String date = "2022-08-1";
    LocalDate expectedDate = LocalDate.of(2022, 8, 15);
    LocalDate actualDate = DateConverter.toDate(date);
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_kVye0() {
    LocalDateTime dateTime = LocalDateTime.of(2022, 1, 1, 12, 0, 0);
    String expected = "2022-01-01 12:00:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithDifferentDateTime_pTpu1() {
    LocalDateTime dateTime = LocalDateTime.of(2022, 1, 2, 13, 1, 1);
    String expected = "2022-01-02 13:01:01";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMaxDateTime_zSyu2() {
    LocalDateTime dateTime = LocalDateTime.of(9999, 12, 31, 23, 59, 59);
    String expected = "9999-12-31 23:59:59";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMinDateTime_Aszi3() {
    LocalDateTime dateTime = LocalDateTime.of(0, 1, 1, 0, 0, 0);
    String expected = "0000-01-01 00:00:00";
    String actual = DateConverter.toString(dateTime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_eTPp0() {
    String datetime = "2022-04-01T12:00:00";
    LocalDateTime expected = LocalDateTime.parse(datetime, DATE_TIME_FORMATTER);
    LocalDateTime actual = DateConverter.toDateTime(datetime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTimeWithDifferentFormat_rzbA1() {
    String datetime = "01/04/2022 12:00:00";
    LocalDateTime expected = LocalDateTime.parse(datetime, DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
    LocalDateTime actual = DateConverter.toDateTime(datetime);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_ljZP0() {
    LocalDate date = LocalDate.of(2023, 1, 1);
    String expected = "2023-01-01";
    String actual = DateConverter.toString(date);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDateTime_eTPp0_TsVm0() {
    String datetime = "2022-04-01T12:00:00";
    LocalDateTime expected = LocalDateTime.parse(datetime, DateTimeFormatter.ISO_DATE_TIME);
    LocalDateTime actual = DateConverter.toDateTime(datetime);
    assertEquals(expected, actual);
  }
}