/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_with_null_parameter_should_return_false_BLFD0() {
    UnLocode unLocode = new UnLocode("USCHI");
    boolean actual = unLocode.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_with_same_object_should_return_true_KazB1() {
    UnLocode unLocode = new UnLocode("USCHI");
    boolean actual = unLocode.equals(unLocode);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void equals_with_same_value_object_should_return_true_fcrx2() {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USCHI");
    boolean actual = unLocode1.equals(unLocode2);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_WithCountryAndLocation_Fcxr0() {
    UnLocode unLocode = new UnLocode("USCHI");
    assertEquals("USCHI", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_WithoutCountryAndLocation_rTkq1() {
    UnLocode unLocode = new UnLocode();
    assertNull(unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void sameValueAs_returnsTrue_whenBothObjectsHaveTheSameState_nwYD0() {
    UnLocode locode1 = new UnLocode("USCHI");
    UnLocode locode2 = new UnLocode("USCHI");
    boolean actual = locode1.sameValueAs(locode2);
    boolean expected = true;
    assert actual == expected;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void sameValueAs_returnsFalse_whenOneObjectIsNull_ooZS2() {
    UnLocode locode1 = new UnLocode("USCHI");
    UnLocode locode2 = null;
    boolean actual = locode1.sameValueAs(locode2);
    boolean expected = false;
    assert actual == expected;
  }
}