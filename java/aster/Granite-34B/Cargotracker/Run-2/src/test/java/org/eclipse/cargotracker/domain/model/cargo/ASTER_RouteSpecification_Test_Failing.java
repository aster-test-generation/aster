/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RouteSpecification_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithTheSameObject_hOBw3() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(), new Location(), LocalDate.now());
    assertTrue(routeSpecification.equals(routeSpecification));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithTheSameValues_Suxt4() {
    RouteSpecification routeSpecification1 = new RouteSpecification(new Location(), new Location(), LocalDate.now());
    RouteSpecification routeSpecification2 = new RouteSpecification(new Location(), new Location(), LocalDate.now());
    assertTrue(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getDestination_TEtE0() {
    UnLocode unLocode = new UnLocode("USCHI");
    Location location = new Location(unLocode, "Chicago");
    RouteSpecification routeSpecification = new RouteSpecification(location, location, LocalDate.now());
    assertEquals(location, routeSpecification.getDestination());
  }

  @Test
  public void testequals_iTTk0() throws Exception {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    Location location = new Location(unLocode, "name");
    RouteSpecification routespecification = new RouteSpecification(location, location, LocalDate.now());
    RouteSpecification routespecification2 = new RouteSpecification(location, location, LocalDate.now());
    assertTrue(routespecification.equals(routespecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithItself_tRVH2_xVQR0() {
    Location location = new Location();
    RouteSpecification routeSpecification = new RouteSpecification(location, location, LocalDate.now());
    assertTrue(routeSpecification.equals(routeSpecification));
  }
}