/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.rest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingReport_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocodeTest_pftD0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("ABC");
    String actual = handlingReport.getUnLocode();
    assertEquals("ABC", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getUnLocodeTest2_mthB1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("XYZ");
    String actual = handlingReport.getUnLocode();
    assertEquals("XYZ", actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocode_jFxe0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("value");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithNull_yjhW1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithEmptyValue_PoRA2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithRandomValue_rkRd3() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("randomValue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithMaximumLengthValue_ZfWj4() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithMinimumLengthValue_dpED5() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("AB");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithInvalidLengthValue_ysTe6() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("ABC");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnLocodeWithInvalidCharactersValue_jKvh7() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setUnLocode("ABC123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType_aGFq0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value");
    assertEquals("value", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType1_iYSF1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value1");
    assertEquals("value1", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType2_XOuj2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value2");
    assertEquals("value2", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType3_EmSi3() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value3");
    assertEquals("value3", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType4_LmwJ4() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value4");
    assertEquals("value4", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType5_oing5() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value5");
    assertEquals("value5", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType6_shsY6() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value6");
    assertEquals("value6", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType7_IcSZ7() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value7");
    assertEquals("value7", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType8_lswu8() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value8");
    assertEquals("value8", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType9_YgPv9() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value9");
    assertEquals("value9", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEventType10_wGMW10() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("value10");
    assertEquals("value10", handlingReport.getEventType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_pvdP0() {
    HandlingReport handlingReport = new HandlingReport();
    String actual = handlingReport.getTrackingId();
    String expected = handlingReport.getTrackingId();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_MzGz1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("123456789");
    String actual = handlingReport.getTrackingId();
    String expected = "123456789";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_rSxb2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("987654321");
    String actual = handlingReport.getTrackingId();
    String expected = "987654321";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_uYfu3() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    String actual = handlingReport.getTrackingId();
    String expected = "987654321";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_OHGt4() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    String actual = handlingReport.getTrackingId();
    String expected = "123456789";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_XVjb5() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    String actual = handlingReport.getTrackingId();
    String expected = "987654321";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getTrackingIdTest_pTcu6() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    handlingReport.setTrackingId("987654321");
    handlingReport.setTrackingId("123456789");
    String actual = handlingReport.getTrackingId();
    String expected = "123456789";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_aHlO0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("ABC123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberNull_miUz1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberEmpty_aqUq2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithSpecialCharacters_fIYs4() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("!@#$%^&*()_+");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithNumbers_vxJL5() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("1234567890");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithLengthExceedsLimit_qrrB6() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumberWithLengthBelowLimit_gaJe7() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setVoyageNumber("ABC");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_mklG0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("2022-01-01");
    String actualCompletionTime = handlingReport.getCompletionTime();
    assertEquals("2022-01-01", actualCompletionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_null_GPDN1() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime(null);
    String actualCompletionTime = handlingReport.getCompletionTime();
    assertEquals(null, actualCompletionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_empty_chqi2() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("");
    String actualCompletionTime = handlingReport.getCompletionTime();
    assertEquals("", actualCompletionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTime_specialCharacter_JxNR4() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setCompletionTime("!@#$%^&*()_+");
    String actualCompletionTime = handlingReport.getCompletionTime();
    assertEquals("!@#$%^&*()_+", actualCompletionTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setTrackingId_withValidTrackingId_shouldSetTrackingId_zKhg0() {
    HandlingReport handlingReport = new HandlingReport();
    String trackingId = "validTrackingId";
    handlingReport.setTrackingId(trackingId);
    assert handlingReport.getTrackingId().equals(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void setTrackingId_withNullTrackingId_shouldNotSetTrackingId_BHYe2() {
    HandlingReport handlingReport = new HandlingReport();
    String trackingId = null;
    handlingReport.setTrackingId(trackingId);
    assert handlingReport.getTrackingId() == null;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventType_VEON0_NhJX0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("testEventType");
    String result = handlingReport.getEventType();
    assertEquals("testEventType", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypeWithNullEventType_Jxtf1_nzeP0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType(null);
    String result = handlingReport.getEventType();
    org.junit.jupiter.api.Assertions.assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEventTypeWithEmptyEventType_CiDE2_XKRk0() {
    HandlingReport handlingReport = new HandlingReport();
    handlingReport.setEventType("");
    String result = handlingReport.getEventType();
    org.junit.jupiter.api.Assertions.assertEquals("", result);
  }
}