/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getMostRecentlyCompletedEvent_HandlingEventListEmpty_ReturnsNull_cUAy0() {
    HandlingHistory handlingHistory = new HandlingHistory(Collections.emptyList());
    HandlingEvent handlingEvent = handlingHistory.getMostRecentlyCompletedEvent();
    assertNull(handlingEvent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test1_kOuw0() {
    HandlingHistory handlingHistory = new HandlingHistory(Arrays.asList(new HandlingEvent(), new HandlingEvent()));
    HandlingHistory other = new HandlingHistory(Arrays.asList(new HandlingEvent(), new HandlingEvent()));
    assertTrue(handlingHistory.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHandlingHistory4_oqGZ3() {
    HandlingHistory handlingHistory = new HandlingHistory(Arrays.asList(new HandlingEvent(), new HandlingEvent()));
    HandlingHistory handlingHistory1 = new HandlingHistory(Arrays.asList(new HandlingEvent(), new HandlingEvent()));
    assertEquals(handlingHistory.hashCode(), handlingHistory1.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHandlingHistory5_rTWY4() {
    HandlingHistory handlingHistory = new HandlingHistory(Arrays.asList(new HandlingEvent(), new HandlingEvent()));
    HandlingHistory handlingHistory1 = new HandlingHistory(Arrays.asList(new HandlingEvent(), new HandlingEvent()));
    assertEquals(handlingHistory, handlingHistory1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHandlingHistory_dMuU0_fid1() {
    HandlingHistory handlingHistory = new HandlingHistory(Arrays.asList(new HandlingEvent(), new HandlingEvent()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHandlingHistory3_ScCS2_fid1() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<>());
    assertEquals(1, handlingHistory.hashCode());
  }
}