/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Location;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Booking_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getDestinationUnlocode_returnsDestinationUnlocode_djYM0() {
    Booking booking = new Booking();
    booking.setDestinationUnlocode("ABC");
    String destinationUnlocode = booking.getDestinationUnlocode();
    assertEquals("ABC", destinationUnlocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginUnlocodeTest_ZLjn0() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("ABC");
    assertEquals("ABC", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginUnlocodeNullTest_vEEw1() {
    Booking booking = new Booking();
    booking.setOriginUnlocode(null);
    assertEquals(null, booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginUnlocodeEmptyTest_Zduf2() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("");
    assertEquals("", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginUnlocodeMultipleWordsTest_moVy4() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("Hello World");
    assertEquals("Hello World", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginUnlocodeSpecialCharactersTest_qveZ5() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("!@#$%^&*()_+");
    assertEquals("!@#$%^&*()_+", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getOriginUnlocodeUnicodeTest_kyVI6() {
    Booking booking = new Booking();
    booking.setOriginUnlocode("Hello World!@#$%^&*()_+");
    assertEquals("Hello World!@#$%^&*()_+", booking.getOriginUnlocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToday_lGEK0() {
    Booking booking = new Booking();
    LocalDate today = LocalDate.now();
    assertNull(today);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_spVY0_1() {
    Booking booking = new Booking();
    booking.init();
    List<Location> locations = booking.getLocations();
    assertNotNull(locations);
    assertEquals(0, locations.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_spVY0_2() {
    Booking booking = new Booking();
    booking.init();
    assertEquals(LocalDate.now(), booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTodayWithDifferentCalendarSystem_kYJP7_SwMs0() {
    Booking booking = new Booking();
    LocalDate today = LocalDate.ofEpochDay(1);
    assertNull(today);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToday_lGEK0_fid1() {
    Booking booking = new Booking();
    LocalDate today = LocalDate.now();
    assertEquals(today, booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdated_WhenDurationIsMoreThanMinJourneyDuration_ThenBookableIsUpdatedToTrue_Ppdt0() {
    Booking booking = new Booking();
    booking.deadlineUpdated();
    assertTrue(booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDeadlineUpdated_WhenDurationIsLessThanMinJourneyDuration_ThenBookableIsUpdatedToFalse_gRig1() {
    Booking booking = new Booking();
    booking.deadlineUpdated();
    assertFalse(booking.isBookable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_spVY0_1_fid1() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getLocations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTodayWithDifferentCalendarSystem_kYJP7_SwMs0_fid1() {
    Booking booking = new Booking();
    LocalDate today = LocalDate.ofEpochDay(1);
    assertEquals(today, booking.getToday());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_spVY0() {
    Booking booking = new Booking();
    booking.init();
    assertNotNull(booking.getLocations());
    assertEquals(LocalDate.now(), booking.getToday());
  }
}