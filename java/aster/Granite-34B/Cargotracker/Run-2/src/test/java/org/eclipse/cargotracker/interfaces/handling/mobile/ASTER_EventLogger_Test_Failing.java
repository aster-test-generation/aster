/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.handling.mobile;

import jakarta.faces.model.SelectItem;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_EventLogger_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocations_CVZa0() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assertNotNull(locations);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationsWithNoLocations_jrwg1() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assertTrue(locations.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLocationsWithLocations_boAf2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> locations = eventLogger.getLocations();
    assertFalse(locations.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getEventType_2_QqIW1() {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type type = eventLogger.getEventType();
    assertEquals(HandlingEvent.Type.LOAD, type);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getEventType_3_eNem2() {
    EventLogger eventLogger = new EventLogger();
    HandlingEvent.Type type = eventLogger.getEventType();
    assertEquals(HandlingEvent.Type.UNLOAD, type);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_BqLS0() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_withNoVoyages_eZjS1() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_withVoyages_FKHi2() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_withNoVoyages_returnsEmptyList_pUjl3() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertNotNull(result);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVoyages_withVoyages_returnsListWithVoyages_WLAS4() {
    EventLogger eventLogger = new EventLogger();
    List<SelectItem> result = eventLogger.getVoyages();
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionTimeWithInvalidDateTime_MtGM8() {
    EventLogger eventLogger = new EventLogger();
    LocalDateTime completionTime = LocalDateTime.of(2023, 13, 32, 24, 60, 61);
    eventLogger.setCompletionTime(completionTime);
    assertEquals(completionTime, eventLogger.getCompletionTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimeValue_nullCompletionTime_JIxJ1() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(null);
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_NPcy0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingIdWithCoverage_fEHx1_1_fid2() {
    EventLogger eventLogger = new EventLogger();
    String trackingId = eventLogger.getTrackingId();
    trackingId = "123456";
    assertEquals(null, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimeValue_Mmuc0_dYeu0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.now());
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2022-12-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimeValue_invalidCompletionTime_SRfj3_ecCc0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.parse("Invalid Date"));
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("Invalid Date", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimeValue_futureCompletionTime_vhlU4_QFKt0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(java.time.LocalDateTime.of(2023, 1, 1, 0, 0, 0));
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2023-01-01", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimeValue_pastCompletionTime_yLwK5_BqJt0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(LocalDateTime.of(2021, 12, 31, 0, 0, 0));
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("2021-12-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getCompletionTimeValue_maxCompletionTime_aqDa6_vjvz0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setCompletionTime(java.time.LocalDateTime.of(9999, 12, 31, 23, 59, 59));
    String completionTimeValue = eventLogger.getCompletionTimeValue();
    assertEquals("9999-12-31", completionTimeValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmit_vDby0_pwZH0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setLocation("location");
    eventLogger.setVoyageNumber("voyageNumber");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSubmitWithNoVoyage_EgcS1_eCrR0() {
    EventLogger eventLogger = new EventLogger();
    eventLogger.setTrackingId("trackingId");
    eventLogger.setLocation("location");
    eventLogger.setEventType(HandlingEvent.Type.LOAD);
    eventLogger.setCompletionTime(LocalDateTime.now());
    eventLogger.submit();
  }
}