/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines_UTpL0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithException_Kwxu1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        try {
            parser.handleConcatenatedOptions("token");
            fail("Expected exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_RXUB0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option1", "value1", "-o", "value2", "arg1", "arg2"};
        Options options = new Options();
        options.addOption("o", "option1", true, "Option 1");
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_RXUB0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option1", "value1", "-o", "value2", "arg1", "arg2"};
        Options options = new Options();
        options.addOption("o", "option1", true, "Option 1");
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(Arrays.asList("arg1", "arg2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines_ddSK0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--arg1", "-arg2", "value1", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_wdqC0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_Vpbr1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1=value1", "--option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines_FpDl0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "-option2", "value2", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines_wGvr0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_Orjn4() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-S", "-SV", "-S=V", "-SV1=V2", "-S1S2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine actual = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_ThlJ4() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine actual;
        try {
            actual = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(actual);
        } catch (ParseException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_CYWh0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final DefaultParser defaultParser = new DefaultParser();
        defaultParser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_voMq1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final DefaultParser defaultParser = new DefaultParser();
        defaultParser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_nSZP0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "long option");
        String[] arguments = {"--long"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_FnTD1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "short option");
        String[] arguments = {"-s"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_CLYI2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option with argument");
        String[] arguments = {"-o", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_QOOs3() throws ParseException {
        Options options = new Options();
        options.addOption("n", "negative", true, "negative number");
        String[] arguments = {"-n", "-10"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("-10", commandLine.getOptionValue("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_fdgR0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("l", "long", false, "long option");
        String[] args = {"--long"};
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_KVRN1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        String[] args = {"--long", "value"};
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_uUAf2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "short", false, "short option");
        String[] args = {"-s"};
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_JlZQ3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] args = {"-s", "value"};
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_dKJn0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "long option");
        String[] arguments = {"--long"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentOption_MgVG2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "argument option");
        String[] arguments = {"-a", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNegativeNumber_DCrV3() throws ParseException {
        Options options = new Options();
        options.addOption("n", "negative", true, "negative number option");
        String[] arguments = {"-n", "-10"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("-10", commandLine.getOptionValue("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_IYqE0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "This is a long option");
        String[] args = {"--long"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_PYgH1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "This is a long option");
        String[] args = {"--long", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_QkWr2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "This is a short option");
        String[] args = {"-s"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_RukM3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "This is a short option");
        String[] args = {"-s", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_PKtM0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_nOuv1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short-option", true, "This is a short option");
        String[] arguments = {"-s", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSign_FQvk2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option=value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndEqualSign_SZJQ3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short-option", true, "This is a short option");
        String[] arguments = {"-s=value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_sMds0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        String[] args = {"--long", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_tgWu1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] args = {"-s", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_KtGb2_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] args = {"-s", "value", "non-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("value", commandLine.getOptionValue("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_KtGb2_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] args = {"-s", "value", "non-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_KtGb2_3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] args = {"-s", "value", "non-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("non-option", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_PsSY0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", false, "long option");
        String[] args = {"--long"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEqualSign_yNLx1() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file option");
        String[] args = {"--file=test.txt"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("test.txt", commandLine.getOptionValue("file"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_BCjG2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "short option");
        String[] args = {"-s"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_XrVn3_1() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file option");
        String[] args = {"--file=test.txt", "--", "-f", "test2.txt"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("test.txt", commandLine.getOptionValue("file"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_dTRn0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        String[] arguments = {"--long", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_RCFs1_1() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file option");
        String[] arguments = {"--file", "value", "--", "extra"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value", cmd.getOptionValue("file"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_RCFs1_2() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file option");
        String[] arguments = {"--file", "value", "--", "extra"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals(Arrays.asList("extra"), cmd.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentOption_hEtA2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option with argument");
        String[] arguments = {"-o", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value", cmd.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_fAhQ3_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "short option");
        options.addOption("l", "long", false, "long option");
        String[] arguments = {"-s", "--long"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_fAhQ3_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "short option");
        options.addOption("l", "long", false, "long option");
        String[] arguments = {"-s", "--long"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_lJWw0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        String[] args = {"--long", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_fYTh1_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        String[] args = {"--long", "value", "--", "remaining"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("value", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_fYTh1_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        String[] args = {"--long", "value", "--", "remaining"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(Arrays.asList("remaining"), cmd.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_oqGi3_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        options.addOption("s", "short", true, "short option");
        String[] args = {"-l", "longvalue", "--short", "shortvalue"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("longvalue", cmd.getOptionValue("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_oqGi3_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        options.addOption("s", "short", true, "short option");
        String[] args = {"-l", "longvalue", "--short", "shortvalue"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("shortvalue", cmd.getOptionValue("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_hIQo0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--opt"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_wbbm1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--long-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_xFDN2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_RtNW3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_CiZM4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_NGAu0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_DIry1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-o", "value1", "-p", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ZRtv2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value2", "--", "--option3", "value3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_Asnc0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDashOption_ZGUq1_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value", "--", "remaining-argument"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDashOption_ZGUq1_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value", "--", "remaining-argument"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("remaining-argument", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_giVT2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        String[] arguments = {"-o", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_PYgG3_1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short-option", false, "This is a short option");
        options.addOption("l", "long-option", false, "This is a long option");
        String[] arguments = {"-s", "--long-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_PYgG3_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short-option", false, "This is a short option");
        options.addOption("l", "long-option", false, "This is a long option");
        String[] arguments = {"-s", "--long-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_dpPd0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_vFRN1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short-option", true, "This is a short option");
        String[] arguments = {"-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OUGl2_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OUGl2_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OUGl2_3() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("non-option", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_gnqq3_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        options.addOption("s", "short-option", true, "This is a short option");
        String[] arguments = {"-l", "value", "-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_gnqq3_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        options.addOption("s", "short-option", true, "This is a short option");
        String[] arguments = {"-l", "value", "-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_WMgv1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options opts = new Options();
        String[] args = {};
        Properties props = new Properties();
        CommandLine cmd = parser.parse(opts, args, props, false);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArgs_YIXF2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options opts = new Options();
        Properties props = new Properties();
        CommandLine cmd = parser.parse(opts, null, props, false);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_hRJi4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options opts = new Options();
        String[] args = {};
        CommandLine cmd = parser.parse(opts, args, null, false);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_DXVq1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{}, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArguments_uvVL2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, null, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_LlZl4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{}, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_abvR6_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), true);
        assertEquals(4, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_abvR6_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), true);
        assertEquals("--option1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_abvR6_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), true);
        assertEquals("value1", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_abvR6_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), true);
        assertEquals("--option2", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_abvR6_5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), true);
        assertEquals("value2", commandLine.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArgs_aWbh3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_bkCz1() throws ParseException {
        String token = "--long-option=value";
        Options options = new Options();
        options.addOption("l", "long-option", true, "description");
        DefaultParser parser = new DefaultParser();
        parser.parse(options, new String[]{token});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithConcatenatedOptions_Oixx3() throws ParseException {
        String token = "-SV1S2S3";
        Options options = new Options();
        options.addOption("S", true, "description");
        DefaultParser parser = new DefaultParser();
        parser.parse(options, new String[]{token});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_aUAo5() throws ParseException {
        String token = "-Svalue";
        Options options = new Options();
        options.addOption("S", true, "description");
        DefaultParser parser = new DefaultParser();
        parser.parse(options, new String[]{token});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithEmptyMatchingOpts_Ydnr0_OFOv0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String token = "token";
        CommandLine commandLine = parser.parse(options, new String[]{token});
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStripLeadingAndTrailingQuotesNull_0_isZO0_1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(new Options(), new String[]{"arg1", "arg2"}, new Properties(), false);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStripLeadingAndTrailingQuotesNull_0_isZO0_2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(new Options(), new String[]{"arg1", "arg2"}, new Properties(), false);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_RXUB0_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option1", "value1", "-o", "value1", "arg1", "arg2"};
        Options options = new Options();
        options.addOption("o", "option1", true, "Option 1");
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OtfZ3_1_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option4", "value4"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(4, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OtfZ3_2_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "--option1", "--option2", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("--option1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OtfZ3_3_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sghn6_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "d", "e", "f"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_KtGb2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] args = {"-s", "value", "non-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("value", commandLine.getOptionValue("short"));
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("non-option", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_RCFs1() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file option");
        String[] arguments = {"--file", "value", "--", "extra"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertEquals("value", cmd.getOptionValue("file"));
        assertEquals(Arrays.asList("extra"), cmd.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_fAhQ3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", false, "short option");
        options.addOption("l", "long", false, "long option");
        String[] arguments = {"-s", "--long"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("short"));
        assertTrue(cmd.hasOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_fYTh1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        String[] args = {"--long", "value", "--", "remaining"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("value", cmd.getOptionValue("long"));
        assertEquals(Arrays.asList("remaining"), cmd.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_oqGi3() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long", true, "long option");
        options.addOption("s", "short", true, "short option");
        String[] args = {"-l", "longvalue", "--short", "shortvalue"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("longvalue", cmd.getOptionValue("long"));
        assertEquals("shortvalue", cmd.getOptionValue("short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDashOption_ZGUq1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value", "--", "remaining-argument"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("l"));
        assertEquals("remaining-argument", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_PYgG3() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short-option", false, "This is a short option");
        options.addOption("l", "long-option", false, "This is a long option");
        String[] arguments = {"-s", "--long-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("s"));
        assertTrue(commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OUGl2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value", "non-option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("value", commandLine.getOptionValue("long-option"));
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("non-option", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_gnqq3() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        options.addOption("s", "short-option", true, "This is a short option");
        String[] arguments = {"-l", "value", "-s", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("long-option"));
        assertEquals("value", commandLine.getOptionValue("short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_abvR6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), true);
        assertEquals(4, commandLine.getArgs().length);
        assertEquals("--option1", commandLine.getArgs()[0]);
        assertEquals("value1", commandLine.getArgs()[1]);
        assertEquals("--option2", commandLine.getArgs()[2]);
        assertEquals("value2", commandLine.getArgs()[3]);
    }
}