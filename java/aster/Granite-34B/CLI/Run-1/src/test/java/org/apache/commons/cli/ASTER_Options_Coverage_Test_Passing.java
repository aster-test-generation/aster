/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_VFNH0() {
        Options options = new Options();
        Option option = new Option("a", "alpha", false, "Alpha option");
        options.addOption(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOpt_fmxn1() {
        Options options = new Options();
        Option option = new Option("b", false, "Beta option");
        options.addOption(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithDuplicateKey_CLNR0() {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        Options options2 = new Options();
        options2.addOption("a", " Another alpha", false, "Another alpha option");
        try {
            options.addOptions(options2);
            fail("Expected IllegalArgumentException not thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("Duplicate key: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithoutDuplicateKey_lMAh1_1() {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        Options options2 = new Options();
        options2.addOption("b", "beta", false, "Beta option");
        options.addOptions(options2);
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithoutDuplicateKey_lMAh1_2() {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        Options options2 = new Options();
        options2.addOption("b", "beta", false, "Beta option");
        options.addOptions(options2);
        assertTrue(options.hasOption("b"));
    }
}