/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithNullOption_WjiD1() {
        Options options = new Options();
        assertFalse(options.hasLongOption(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithEmptyOption_MrqX2() {
        Options options = new Options();
        assertFalse(options.hasLongOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithSingleCharOption_ffcd4() {
        Options options = new Options();
        assertFalse(options.hasLongOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleCharOption_LKBp5() {
        Options options = new Options();
        assertFalse(options.hasLongOption("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptions_UftP6() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt1"));
        assertFalse(options.hasLongOption("opt2"));
        assertFalse(options.hasLongOption("opt3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndNoMatching_OJIQ9() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt4"));
        assertFalse(options.hasLongOption("opt5"));
        assertFalse(options.hasLongOption("opt6"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_mrtC0() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertEquals(true, options.hasOption("opt"));
        assertEquals(true, options.hasOption("longOpt"));
        assertEquals(true, options.getOption("opt").isRequired());
        assertEquals(true, options.getOption("longOpt").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EgWP0() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(4, options.getOptions().size());
        assertTrue(options.hasOption("a"));
        assertTrue(options.hasOption("b"));
        assertTrue(options.hasOption("c"));
        assertTrue(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_gykO1() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(4, options.getOptions().size());
        assertTrue(options.hasLongOption("alpha"));
        assertTrue(options.hasLongOption("beta"));
        assertTrue(options.hasLongOption("gamma"));
        assertTrue(options.hasLongOption("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequired_ZGOf2() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option1.setRequired(true);
        option3.setRequired(true);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(4, options.getOptions().size());
        assertTrue(options.getRequiredOptions().contains("a"));
        assertTrue(options.getRequiredOptions().contains("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_TWwQ0() {
        Options options = new Options();
        Option option = new Option("option", "longOption", true, "description");
        options.addOptionGroup(new OptionGroup().addOption(option));
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNotNull(optionGroup);
        assertEquals(option, optionGroup.getOptions().iterator().next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupNull_NrJj1() {
        Options options = new Options();
        Option option = new Option("option", "longOption", true, "description");
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_pbFA0() {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertNotNull(optionGroups);
        assertTrue(optionGroups.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_XUwY0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_awuq1() {
        Options options = new Options();
        options.addOption(null, "longOpt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_ASKs2() {
        Options options = new Options();
        options.addOption("opt", null, true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_QGTc3() {
        Options options = new Options();
        options.addOption("opt", "longOpt", false, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_DNej4() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithOptionGroup_jlmw2() {
        Options options1 = new Options();
        Options options2 = new Options();
        OptionGroup optionGroup = new OptionGroup();
        options2.addOptionGroup(optionGroup);
        options1.addOptions(options2);
        assertEquals(options1.getOptionGroups(), options2.getOptionGroups());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_NGnQ0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupWithRequiredOption_iXXu1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        options.addOptionGroup(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithNullOpt_DLxH1() {
        Options options = new Options();
        assertFalse(options.hasShortOption(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithEmptyOpt_cNGG2() {
        Options options = new Options();
        assertFalse(options.hasShortOption(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOnlyHyphensOpt_zMOc3() {
        Options options = new Options();
        assertFalse(options.hasShortOption("---"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOnlySingleHyphenOpt_UpNs4() {
        Options options = new Options();
        assertFalse(options.hasShortOption("-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOnlyDoubleHyphenOpt_vIXF5() {
        Options options = new Options();
        assertFalse(options.hasShortOption("--"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOnlyNumbersOpt_gPlJ6() {
        Options options = new Options();
        assertFalse(options.hasShortOption("123"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOnlySpecialCharactersOpt_Zciw7() {
        Options options = new Options();
        assertFalse(options.hasShortOption("!@#$%^&*()"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOnlyTabsOpt_koyn9() {
        Options options = new Options();
        assertFalse(options.hasShortOption("\t\t"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOnlyNewLinesOpt_jjoN10() {
        Options options = new Options();
        assertFalse(options.hasShortOption("\n\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOnlyCarriageReturnsOpt_DNoM11() {
        Options options = new Options();
        assertFalse(options.hasShortOption("\r\r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CbFD0() {
        Options options = new Options();
        options.addOption("opt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithOption_NmPR2() {
        Options options = new Options();
        Option option = new Option("opt", "description");
        options.addOption(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_1_jSVD0() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_JBnZ0() {
        Options options = new Options();
        options.addOption("opt", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_qiTz0_2() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptions_UftP6_1() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptions_UftP6_3() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndNoMatching_OJIQ9_1() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt4"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndNoMatching_OJIQ9_2() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndNoMatching_OJIQ9_3() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt6"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptions_indm0_1() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertNotNull(optionsList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_mrtC0_1() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertEquals(true, options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_mrtC0_2() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertEquals(true, options.hasOption("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_mrtC0_3() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertEquals(true, options.getOption("opt").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_mrtC0_4() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertEquals(true, options.getOption("longOpt").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EgWP0_1() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(4, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EgWP0_2() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EgWP0_3() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EgWP0_4() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EgWP0_5() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_gykO1_2() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.hasLongOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_gykO1_3() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.hasLongOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_gykO1_4() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.hasLongOption("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOpt_gykO1_5() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.hasLongOption("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequired_ZGOf2_1() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option1.setRequired(true);
        option3.setRequired(true);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(4, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequired_ZGOf2_2() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option1.setRequired(true);
        option3.setRequired(true);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.getRequiredOptions().contains("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequired_ZGOf2_3() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option1.setRequired(true);
        option3.setRequired(true);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertTrue(options.getRequiredOptions().contains("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_GmQT3_1() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option2.setArgs(2);
        option4.setArgs(3);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(4, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_GmQT3_3() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option2.setArgs(2);
        option4.setArgs(3);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(2, option2.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_GmQT3_5() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option2.setArgs(2);
        option4.setArgs(3);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(3, option4.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_TWwQ0_1() {
        Options options = new Options();
        Option option = new Option("option", "longOption", true, "description");
        options.addOptionGroup(new OptionGroup().addOption(option));
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNotNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_TWwQ0_2() {
        Options options = new Options();
        Option option = new Option("option", "longOption", true, "description");
        options.addOptionGroup(new OptionGroup().addOption(option));
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertEquals(option, optionGroup.getOptions().iterator().next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_pbFA0_1() {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertNotNull(optionGroups);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroups_pbFA0_2() {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_bSyB1_1() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertNotNull(returnedOptionGroups);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_mnJJ0_2() {
        Options options = new Options();
        assertFalse(options.hasShortOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_1_jSVD0_1() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_1_jSVD0_2() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_fAnR0_vIXx0_1() {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        for (Option option : helpOptions) {
        }
        assertNotNull(helpOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupWithSelectedOption_EWdT2_azqm0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("o", "option", false, "description");
        group.addOption(option);
        options.addOptionGroup(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_GmQT3_2_fid2() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option2.setArgs(2);
        option4.setArgs(3);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(-1, option1.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_GmQT3_4_fid2() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option2.setArgs(2);
        option4.setArgs(3);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(-1, option3.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_bSyB1_0() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup0 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup0);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertEquals(0, returnedOptionGroups.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_3_VJly0_0() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertEquals(0, result.size());
    }
}