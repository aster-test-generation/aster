/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collections;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithEmptyToken_qjAV2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthOne_jEqY4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_unRc0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_dWve1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_dWve1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_LjBB2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_LjBB2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_LjBB2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_LgUW3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_npRf4_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wPko4_1() throws Exception {
        final Options options = new Options();
        options.addOption("o1", "option1", true, "description");
        options.addOption("o2", "option2", true, "description");
        final String[] arguments = {"-o1", "value1", "-o2", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wPko4_2() throws Exception {
        final Options options = new Options();
        options.addOption("o1", "option1", true, "description");
        options.addOption("o2", "option2", true, "description");
        final String[] arguments = {"-o1", "value1", "-o2", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_lmCe3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_EtWe4_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_BJTn5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_NBDb6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_jFMs5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"--option", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_Ciqs6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o1", "option1", true, "description");
        options.addOption("o2", "option2", true, "description");
        final String[] arguments = {"--option1", "value1", "--option2", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_Ciqs6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o1", "option1", true, "description");
        options.addOption("o2", "option2", true, "description");
        final String[] arguments = {"--option1", "value1", "--option2", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_rsrB1() throws Exception {
        Options options = new Options();
        options.addOption("l", "long-option", true, "description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--long-option", "value"});
        assertEquals("value", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_UUYm2() throws Exception {
        Options options = new Options();
        options.addOption("s", "short-option", true, "description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-s", "value"});
        assertEquals("value", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_DdWe5_1() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "description"));
        group.addOption(new Option("b", "beta", false, "description"));
        options.addOptionGroup(group);
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a"});
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_DdWe5_2() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "description"));
        group.addOption(new Option("b", "beta", false, "description"));
        options.addOptionGroup(group);
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a"});
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mdcE7_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha-value");
        properties.setProperty("beta", "beta-value");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{}, properties, false);
        assertEquals("alpha-value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mdcE7_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha-value");
        properties.setProperty("beta", "beta-value");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{}, properties, false);
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_FmWb0() throws Exception {
        Options options = new Options();
        CommandLine commandLine = new DefaultParser().parse(options, new String[0], new Properties());
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_IKnX1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a"}, new Properties());
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_GiiC2_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "beta", false, "Beta");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "-b"}, new Properties());
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_GiiC2_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "beta", false, "Beta");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "-b"}, new Properties());
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_RzEX3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "value"}, new Properties());
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSign_EYcx4() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a=value"}, new Properties());
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndSpace_hfMz5() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "value with space"}, new Properties());
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndSpace_knfU6() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a=value with space"}, new Properties());
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndNoSpace_gvYC9() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a=valuewithoutspace"}, new Properties());
        assertEquals("valuewithoutspace", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_nCDH0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_HkZB1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_HkZB1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_YxEt2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_YxEt2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_YxEt2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparator_WuFU4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparator_WuFU4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparator_WuFU4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColonSeparator_sRnH5_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a:value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColonSeparator_sRnH5_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a:value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparatorAndSpaceAfter_FLko8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value "};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_pReI0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndSpace_pXeC5_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value with space"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndSpace_tkjp6_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value with space"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_JaPV0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_AGFI2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_syok1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_syok1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_TKHR2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a", "foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_TKHR2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a", "foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_TKHR2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a", "foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparator_PzjE4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a=foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparator_PzjE4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a=foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparator_PzjE4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a=foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColonSeparator_XfPj5_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a:foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColonSeparator_XfPj5_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a:foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndSpace_Qhvo6_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value with spaces"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndSpace_Qhvo6_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value with spaces"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndSpace_Qhvo6_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value with spaces"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value with spaces", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndColon_rpQB7_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value:with:colons"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndColon_rpQB7_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value:with:colons"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndColon_rpQB7_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value:with:colons"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value:with:colons", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_Cttq0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_FDvL1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_FDvL1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_ITsV2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_ITsV2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_ITsV2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_dkNQ3_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_dkNQ3_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_XtMB4_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_XtMB4_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_eBMC5_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"--option", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_eBMC5_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"--option", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_GNEs6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_GNEs6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOption_jzAB7_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOption_jzAB7_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOption_jzAB7_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_PAro0_2() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AoFr1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AoFr1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AoFr1_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AoFr1_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AoFr1_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AoFr1_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AoFr1_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[1].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2_12() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha-value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha-value", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_12() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_13() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[1].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_14() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_15() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3_16() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("beta-value", commandLine.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndSpaceAndQuotes_kTPN7_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=\"value with spaces\""};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndSpaceAndQuotes_kTPN7_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=\"value with spaces\""};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_Bmmp0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_vzjV1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_vzjV1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_SjLz2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_SjLz2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_SjLz2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_VTns3_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_VTns3_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_YJvW4_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_YJvW4_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOption_Ektr5_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOption_Ektr5_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOption_Ektr5_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_JoBP6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_JoBP6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_JoBP6_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_RxZE0_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MWwO3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "3");
        properties.setProperty("beta", "4");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MWwO3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "3");
        properties.setProperty("beta", "4");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("3", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("4", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NkNo3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2", "3"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_aAjf5_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_aAjf5_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_aAjf5_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_TAPN6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_TAPN6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_TAPN6_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_TAPN6_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_mLla3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "2", "-b", "3"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_vTZT4() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("a", "a", true, "Description for option a");
        options.addRequiredOption("b", "b", true, "Description for option b");
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        try {
            new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
            fail("Expected MissingOptionException");
        } catch (final MissingOptionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_CNRh5() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").hasArg().build());
        group.addOption(Option.builder("b").longOpt("beta").hasArg().build());
        options.addOptionGroup(group);
        final String[] arguments = {"-a", "1"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_Ougk3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_Ougk3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_Ougk3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_Ougk3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_Ougk3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("file1.txt", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_Ougk3_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("file2.txt", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_Ougk3_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("file3.txt", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("gammaValue", commandLine.getOptionValue("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_uizI3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "-b", "-c", "file.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_uizI3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "-b", "-c", "file.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_uizI3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "-b", "-c", "file.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_uizI3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "-b", "-c", "file.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_uizI3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "-b", "-c", "file.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("c", commandLine.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_uizI3_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "-b", "-c", "file.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("file.txt", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(3, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("c", commandLine.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("gammaValue", commandLine.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Yoxz2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Yoxz2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Yoxz2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Yoxz2_4() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg3", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_siZT3() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, null, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: o", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionalOption_rcFV4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(false, commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_rRQj5_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_kMAt6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_kMAt6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getOptionValues("o").length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_kMAt6_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValues("o")[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_kMAt6_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValues("o")[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NsEQ7_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "arg1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(true, commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NsEQ7_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "arg1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NsEQ7_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "arg1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NsEQ7_5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "arg1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("-o", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_tmFP6_1() throws ParseException {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_tmFP6_2() throws ParseException {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_tmFP6_3() throws ParseException {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArgumentsAndOneOption_BjsQ7_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "arg2", "-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArgumentsAndOneOption_BjsQ7_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "arg2", "-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArgumentsAndOneOption_BjsQ7_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "arg2", "-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionalOption_BaMr4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(null, commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_FlJD0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_pjus1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "value1", "-b"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        properties.setProperty("b", "value3");
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_IKgb2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "value1", "-b", "value2", "non-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_ZygC0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GUOM2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_EAZT3() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("a", "a", true, "Description for a");
        options.addRequiredOption("b", "b", true, "Description for b");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_GaGK4() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").hasArg().build());
        group.addOption(Option.builder("b").longOpt("beta").hasArg().build());
        options.addOptionGroup(group);
        final String[] arguments = {"-a", "1"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_aWRL2() throws Exception {
        final Options options = new Options();
        options.addOption("f", "file", true, "File");
        final String[] arguments = {"-x", "file.txt"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected exception");
        } catch (final UnrecognizedOptionException e) {
            assertEquals("Unrecognized option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Qcen3_1() throws Exception {
        final Options options = new Options();
        options.addOption("f", "file", true, "File");
        options.addOption("d", "debug", false, "Debug");
        final String[] arguments = {"-f", "file.txt", "-d", "debug", "extra"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("file.txt", commandLine.getOptionValue("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Qcen3_2() throws Exception {
        final Options options = new Options();
        options.addOption("f", "file", true, "File");
        options.addOption("d", "debug", false, "Debug");
        final String[] arguments = {"-f", "file.txt", "-d", "debug", "extra"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals(null, commandLine.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lTBR0_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lTBR0_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lTBR0_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_HqsT1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, new Properties(), false);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_HqsT1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, new Properties(), false);
        assertEquals(true, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_HqsT1_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, new Properties(), false);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_nmWa2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, properties, false);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_nmWa2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, properties, false);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LcxD3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "file.txt"}, new Properties(), true);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LcxD3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "file.txt"}, new Properties(), true);
        assertEquals(true, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LcxD3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "file.txt"}, new Properties(), true);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LcxD3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "file.txt"}, new Properties(), true);
        assertEquals(Collections.singletonList("file.txt"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("g"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("i"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("j"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("k"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_12() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_13() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("m"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_14() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_15() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_16() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_17() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0_18() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_xgGJ0() {
        String token = "test=token";
        int expected = 4;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqualWithNoEqualSign_QdTu1() {
        String token = "testtoken";
        int expected = -1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WiEd0() {
        Options options = new Options();
        String[] arguments = new String[0];
        boolean stopAtNonOption = false;
        CommandLine commandLine = new CommandLine();
        try {
            commandLine = new DefaultParser().parse(options, arguments, stopAtNonOption);
            assertNotNull(commandLine);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_yqsG0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine commandLine = new CommandLine();
        try {
            commandLine = new DefaultParser().parse(options, arguments, properties);
            assertNotNull(commandLine);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndOneOption_GNhK7_ndeq0_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndOneOption_GNhK7_ndeq0_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndOneOption_GNhK7_ndeq0_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_uRVy1_nIOJ0() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = {"--longOpt", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_wBca2_cKGS0() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        String[] arguments = {"--longOpt", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_npRf4_2_fid1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_dWve1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_LjBB2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wPko4() throws Exception {
        final Options options = new Options();
        options.addOption("o1", "option1", true, "description");
        options.addOption("o2", "option2", true, "description");
        final String[] arguments = {"-o1", "value1", "-o2", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o1"));
        assertEquals("value2", commandLine.getOptionValue("o2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_Ciqs6() throws Exception {
        final Options options = new Options();
        options.addOption("o1", "option1", true, "description");
        options.addOption("o2", "option2", true, "description");
        final String[] arguments = {"--option1", "value1", "--option2", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o1"));
        assertEquals("value2", commandLine.getOptionValue("o2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_DdWe5() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "description"));
        group.addOption(new Option("b", "beta", false, "description"));
        options.addOptionGroup(group);
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a"});
        assertTrue(commandLine.hasOption("a"));
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mdcE7() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        Properties properties = new Properties();
        properties.setProperty("alpha", "alpha-value");
        properties.setProperty("beta", "beta-value");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{}, properties, false);
        assertEquals("alpha-value", commandLine.getOptionValue("a"));
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_GiiC2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "beta", false, "Beta");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a", "-b"}, new Properties());
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_HkZB1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_YxEt2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparator_WuFU4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_syok1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_TKHR2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a", "foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSeparator_PzjE4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a=foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndSpace_Qhvo6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value with spaces"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value with spaces", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndColon_rpQB7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value:with:colons"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value:with:colons", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_FDvL1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_ITsV2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_dkNQ3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_eBMC5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"--option", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOption_jzAB7() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_PAro0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AoFr1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_oYrV2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
        assertEquals(false, commandLine.getOptions()[1].hasArg());
        assertEquals(false, commandLine.getOptions()[1].hasArgName());
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_FjoR3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "alpha-value", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(true, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals("alpha-value", commandLine.getOptionValue("a"));
        assertEquals("alpha-value", commandLine.getOptionValue("alpha"));
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
        assertEquals(true, commandLine.getOptions()[1].hasArg());
        assertEquals(false, commandLine.getOptions()[1].hasArgName());
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
        assertEquals("beta-value", commandLine.getOptionValue("b"));
        assertEquals("beta-value", commandLine.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_vzjV1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_SjLz2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_VTns3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOption_Ektr5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_RxZE0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_aAjf5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_TAPN6() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_Ougk3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("file1.txt", commandLine.getArgList().get(0));
        assertEquals("file2.txt", commandLine.getArgList().get(1));
        assertEquals("file3.txt", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_uizI3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        options.addOption("c", "gamma", false, "Gamma option");
        final String[] arguments = {"-a", "-b", "-c", "file.txt"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals(3, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("c", commandLine.getOptions()[2].getOpt());
        assertEquals("file.txt", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Yoxz2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
        assertEquals("arg3", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_rRQj5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.hasOption("o"));
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_kMAt6() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.hasOption("o"));
        assertEquals(2, commandLine.getOptionValues("o").length);
        assertEquals("value1", commandLine.getOptionValues("o")[0]);
        assertEquals("value2", commandLine.getOptionValues("o")[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArgumentsAndOneOption_BjsQ7() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "arg2", "-o", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_lTBR0() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(false, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_HqsT1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, new Properties(), false);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(true, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_LcxD3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "file.txt"}, new Properties(), true);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(true, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
        assertEquals(Collections.singletonList("file.txt"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WHbV0() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(false, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
        assertEquals(false, commandLine.hasOption("d"));
        assertEquals(true, commandLine.hasOption("e"));
        assertEquals(false, commandLine.hasOption("f"));
        assertEquals(true, commandLine.hasOption("g"));
        assertEquals(false, commandLine.hasOption("h"));
        assertEquals(true, commandLine.hasOption("i"));
        assertEquals(false, commandLine.hasOption("j"));
        assertEquals(true, commandLine.hasOption("k"));
        assertEquals(false, commandLine.hasOption("l"));
        assertEquals(true, commandLine.hasOption("m"));
        assertEquals(false, commandLine.hasOption("n"));
        assertEquals(true, commandLine.hasOption("o"));
        assertEquals(false, commandLine.hasOption("p"));
        assertEquals(true, commandLine.hasOption("q"));
        assertEquals(false, commandLine.hasOption("r"));
    }
}