/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Failing {
    private GnuParser parser;
    private Option option2;
    private Options options;
    private OptionGroup optionGroup;
    private Option option1;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoOptions_lygj1() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(Collections.emptyList(), options.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOptions_kqDc2() {
        Options options = new Options();
        options.addOption("option1", "description1");
        options.addOption("option2", "description2");
        GnuParser parser = new GnuParser();
        parser.setOptions(options);
        Options returnedOptions = parser.getOptions();
        assertEquals(options.getOptions(), returnedOptions.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNullOptions_JzSX5() {
        Options options = new Options();
        GnuParser parser = new GnuParser();
        parser.setOptions(null);
        Options returnedOptions = parser.getOptions();
        assertEquals(Collections.emptyList(), returnedOptions.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithEmptyOptions_Irkn9() {
        Options options = new Options();
        GnuParser parser = new GnuParser();
        parser.setOptions(options);
        Options returnedOptions = parser.getOptions();
        assertEquals(Collections.emptyList(), returnedOptions.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithNoRequiredOptions_iXsq0() throws MissingOptionException {
        GnuParser parser = new GnuParser();
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithUnrecognizedOption_fjGF0() throws ParseException {
        GnuParser parser = new GnuParser();
        CommandLine cmd = new CommandLine();
        ListIterator<String> iter = null; // initialize with appropriate values
        String arg = "foo"; // replace with appropriate value
        Exception exception = assertThrows(UnrecognizedOptionException.class, () -> parser.processOption(arg, iter));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithRequiredOption_FlQQ1() throws ParseException {
        GnuParser parser = new GnuParser();
        CommandLine cmd = new CommandLine();
        ListIterator<String> iter = null; // initialize with appropriate values
        String arg = "foo"; // replace with appropriate value
        parser.processOption(arg, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_QFIi3_1() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "Alpha option"));
        group.addOption(new Option("b", "beta", true, "Beta option"));
        options.addOptionGroup(group);
        String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        CommandLine commandLine = new GnuParser().parse(options, arguments);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_QFIi3_2() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "Alpha option"));
        group.addOption(new Option("b", "beta", true, "Beta option"));
        options.addOptionGroup(group);
        String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        CommandLine commandLine = new GnuParser().parse(options, arguments);
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_RAFW0() {
        GnuParser parser = new GnuParser();
        List requiredOptions = parser.getRequiredOptions();
        assertNotNull(requiredOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptionsWithNoOptions_aZiH1() {
        GnuParser parser = new GnuParser();
        List requiredOptions = parser.getRequiredOptions();
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_UIng1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_mmda3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_DwpO4() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "a", true, "Description");
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupAndRequiredOptionMissing_DbNj7() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "a", true, "Description"));
        group.addOption(new Option("b", "b", true, "Description"));
        options.addOptionGroup(group);
        options.addRequiredOption("c", "c", true, "Description");
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs_zwjC0_fid1() throws ParseException {
        Option opt = new Option("option", "longOption", true, "description");
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        GnuParser parser = new GnuParser();
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithRequiredOption_qbCm4() throws ParseException {
        Option opt = new Option("option", "longOption", true, "description");
        opt.setRequired(true);
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        GnuParser parser = new GnuParser();
        try {
            parser.processArgs(opt, iter);
            fail("Expected MissingOptionException");
        } catch (MissingOptionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_PAGY5_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-b", "value"};
        try {
            new GnuParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unknown option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionArgument_iKzN6_fid1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a"};
        try {
            new GnuParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: -a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesWithUnrecognizedOption_wRWT2() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("option3", "value3");
        try {
            parser.processProperties(properties);
            fail("UnrecognizedOptionException should be thrown");
        } catch (UnrecognizedOptionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesWithRequiredOptionNotSet_bDLx3() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        try {
            parser.processProperties(properties);
            fail("UnrecognizedOptionException should be thrown");
        } catch (UnrecognizedOptionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_QFIi3() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", true, "Alpha option"));
        group.addOption(new Option("b", "beta", true, "Beta option"));
        options.addOptionGroup(group);
        String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        CommandLine commandLine = new GnuParser().parse(options, arguments);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }
}