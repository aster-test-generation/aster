/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ZfVm0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt", true, "description");
        commandLine.addOption(option);
        String opt = "opt";
        Supplier<String> defaultValue = () -> "default";
        String expected = "default";
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_RMCf0() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOneOption_dtPL1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("test", "test");
        commandLine.addOption(option);
        Option[] options = commandLine.getOptions();
        assertEquals(1, options.length);
        assertEquals(option, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithTwoOptions_GkmE2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("test1", "test1");
        Option option2 = new Option("test2", "test2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
        assertEquals(option1, options[0]);
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_jRsG0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        commandLine.addOption(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNoDescription_rbBY1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", true, null);
        commandLine.addOption(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_xTbL0() {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        String expected = "expected";
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_QxOv1() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        String expected = null;
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithEmptyOption_hyFl2() {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        String expected = null;
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOption_TIec3() {
        CommandLine commandLine = new CommandLine();
        String opt = "invalid";
        String expected = null;
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithDeprecatedOption_oPcK4() {
        CommandLine commandLine = new CommandLine();
        String opt = "deprecated";
        String expected = "deprecated";
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_Hwyz0() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOption_KvqH1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt");
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithOptionAndValue_xlac2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt");
        String value = "value";
        String actual = commandLine.getOptionValue(option, value);
        assertEquals("value", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_HAAF0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = "default";
        String expected = "expected";
        assertEquals(expected, commandLine.getParsedOptionValue(opt, defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOption_HQaf1() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        String defaultValue = "default";
        Throwable exception = assertThrows(NullPointerException.class, () -> commandLine.getParsedOptionValue(opt, defaultValue));
        assertEquals("Option cannot be null", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithEmptyOption_lbhw2() {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        String defaultValue = "default";
        Throwable exception = assertThrows(IllegalArgumentException.class, () -> commandLine.getParsedOptionValue(opt, defaultValue));
        assertEquals("Option cannot be empty", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullDefaultValue_bwIR3() {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = null;
        Throwable exception = assertThrows(NullPointerException.class, () -> commandLine.getParsedOptionValue(opt, defaultValue));
        assertEquals("Default value cannot be null", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithEmptyDefaultValue_HSSZ4() {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = "";
        Throwable exception = assertThrows(IllegalArgumentException.class, () -> commandLine.getParsedOptionValue(opt, defaultValue));
        assertEquals("Default value cannot be empty", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithNullOptionAndDefaultValue_EHFb5() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        String defaultValue = null;
        Throwable exception = assertThrows(NullPointerException.class, () -> commandLine.getParsedOptionValue(opt, defaultValue));
        assertEquals("Option cannot be null", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueWithEmptyOptionAndDefaultValue_xawz6() {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        String defaultValue = "";
        Throwable exception = assertThrows(IllegalArgumentException.class, () -> commandLine.getParsedOptionValue(opt, defaultValue));
        assertEquals("Option cannot be empty", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArgWithNotNullArg_VEdX0() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArgWithNullArg_YCYT1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_apeq0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_yQlP0() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        String defaultValue = "default";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptValue_fFmo0() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptValue2_LPew1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('b');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionPropertiesTest1_ESnz0() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Properties props = commandLine.getOptionProperties(opt);
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionPropertiesTest2_JpAL1() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Properties props = commandLine.getOptionProperties(opt);
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionPropertiesTest3_WMfR2() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Properties props = commandLine.getOptionProperties(opt);
        assertTrue(props.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionPropertiesTest4_LTyl3() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Properties props = commandLine.getOptionProperties(opt);
        assertEquals(Collections.emptyMap(), props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndDefault_returnsDefault_KsAV0() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndNoDefault_returnsNull_hxxz1() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withNoOptionAndDefault_returnsDefault_QUMk2() throws ParseException {
        Option option = null;
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withNoOptionAndNoDefault_returnsNull_KuMN3() throws ParseException {
        Option option = null;
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndDefault_returnsValue_vtNg4() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, "default");
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndNoDefault_returnsValue_yigB5() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, null);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withNoOptionAndDefault_returnsValue_NBsJ6() throws ParseException {
        Option option = null;
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, "default");
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withNoOptionAndNoDefault_returnsValue_kCrA7() throws ParseException {
        Option option = null;
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, null);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndDefault_returnsParsedValue_OnGg8() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        Integer result = commandLine.getParsedOptionValue(option, 10);
        assertEquals(100, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndNoDefault_returnsParsedValue_UPZs9() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        Integer result = commandLine.getParsedOptionValue(option, null);
        assertEquals(100, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withNoOptionAndDefault_returnsParsedValue_oZQh10() throws ParseException {
        Option option = null;
        CommandLine commandLine = new CommandLine();
        Integer result = commandLine.getParsedOptionValue(option, 10);
        assertEquals(100, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withNoOptionAndNoDefault_returnsParsedValue_Qzno11() throws ParseException {
        Option option = null;
        CommandLine commandLine = new CommandLine();
        Integer result = commandLine.getParsedOptionValue(option, null);
        assertEquals(100, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_yCyu0() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        try {
            Object result = commandLine.getParsedOptionValue(opt);
        } catch (ParseException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_svVK0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Supplier<String> defaultValue = () -> "default";
        String expected = "expected";
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValueCoverage_VuNl1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_BFeH0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(props.size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_PQOy0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObjectWithNullParameter_CzcX1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOptionValueTest1_wOfT0() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a', "default");
        assert result.equals("default");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOptionValueTest2_JxIz1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('b', "default");
        assert result.equals("default");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptObject_ZrQM0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject('a');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptObject2_JGdm1() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject('b');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_NMga0() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues('a');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesCoverage2_fBlh2() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_dFnz0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("option", option.getOpt());
        assertEquals("longOption", option.getLongOpt());
        assertEquals(true, option.hasArg());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLine_FdBW1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        try {
            Object value = commandLine.getParsedOptionValue(option);
            assertEquals(null, value);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest1_Adhl0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('a', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest2_iQIl1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('b', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest3_EKkn2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('c', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest4_TfVl3() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('d', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest5_lfkq4() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('e', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest6_IUel5() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('f', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest7_VJOX6() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('g', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest8_cBeB7() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('h', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest9_Ghwr8() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('i', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValueTest10_YpsO9() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue('j', defaultValue);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_iKwq0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String[] result = commandLine.getOptionValues(option);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_JJrl1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        commandLine.addOption(option);
        String[] result = commandLine.getOptionValues(option);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHasOption_lUDu0() {
        CommandLine commandLine = new CommandLine();
        boolean result1 = commandLine.hasOption('a');
        boolean result2 = commandLine.hasOption('b');
        org.junit.jupiter.api.Assertions.assertTrue(result1);
        org.junit.jupiter.api.Assertions.assertFalse(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_GmpQ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        boolean result = commandLine.hasOption(option);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNoOption_XVAP1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        boolean result = commandLine.hasOption(option);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNullOption_TWCD2() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        boolean result = commandLine.hasOption(option);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithEmptyOption_lFzz3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", "longOption", true, "description");
        boolean result = commandLine.hasOption(option);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_SXDx5() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result1);
        assertTrue(result2);
        assertTrue(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndOneMissing_ZLPT6() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result1);
        assertTrue(result2);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndAllMissing_JgEB7() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertFalse(result1);
        assertFalse(result2);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_uguF0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_mcvH0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptValueWithCharAndSupplier_TZZp0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptValueWithStringAndSupplier_FkVO1() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptValueWithCharAndString_sJvT2() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String defaultValue = "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptValueWithStringAndString_WOeK3() {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        String defaultValue = "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_MUGY0() {
        CommandLine cmd = new CommandLine();
        Iterator<Option> it = cmd.iterator();
        assertNotNull(it);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_withNoOptions_wfEx1() {
        CommandLine cmd = new CommandLine();
        Iterator<Option> it = cmd.iterator();
        assertNotNull(it);
        assertFalse(it.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_withOptions_dVQN2() {
        CommandLine cmd = new CommandLine();
        cmd.addOption(new Option("a", "b"));
        Iterator<Option> it = cmd.iterator();
        assertNotNull(it);
        assertTrue(it.hasNext());
        assertEquals("a", it.next().getOpt());
        assertFalse(it.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_withMultipleOptions_YwMM5() {
        CommandLine cmd = new CommandLine();
        cmd.addOption(new Option("a", "b"));
        cmd.addOption(new Option("c", "d"));
        cmd.addOption(new Option("e", "f"));
        Iterator<Option> it = cmd.iterator();
        assertNotNull(it);
        assertTrue(it.hasNext());
        assertEquals("a", it.next().getOpt());
        assertTrue(it.hasNext());
        assertEquals("c", it.next().getOpt());
        assertTrue(it.hasNext());
        assertEquals("e", it.next().getOpt());
        assertFalse(it.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_withMultipleOptions_withDuplicates_GTCJ6() {
        CommandLine cmd = new CommandLine();
        cmd.addOption(new Option("a", "b"));
        cmd.addOption(new Option("a", "b"));
        cmd.addOption(new Option("a", "b"));
        Iterator<Option> it = cmd.iterator();
        assertNotNull(it);
        assertTrue(it.hasNext());
        assertEquals("a", it.next().getOpt());
        assertTrue(it.hasNext());
        assertEquals("a", it.next().getOpt());
        assertTrue(it.hasNext());
        assertEquals("a", it.next().getOpt());
        assertFalse(it.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_withMultipleOptions_withNullValues_ZyIy7() {
        CommandLine cmd = new CommandLine();
        cmd.addOption(new Option("a", "b"));
        cmd.addOption(null);
        cmd.addOption(new Option("a", "b"));
        Iterator<Option> it = cmd.iterator();
        assertNotNull(it);
        assertTrue(it.hasNext());
        assertEquals("a", it.next().getOpt());
        assertTrue(it.hasNext());
        assertEquals("a", it.next().getOpt());
        assertFalse(it.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_WqdS0() {
        CommandLine commandLine = new CommandLine();
        try {
            Object result = commandLine.getParsedOptionValue('a');
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_Zdkq1() {
        CommandLine commandLine = new CommandLine();
        try {
            Object result = commandLine.getParsedOptionValue('b');
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_tLKq0() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithInvalidOption_mfFD3() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues("invalidOption");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithValidOption_YtLj4() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues("validOption");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_ngVx0() {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("option1"));
        assertTrue(!commandLine.hasOption("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_yhoN0() {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        boolean result = commandLine.hasOption(opt);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNullOpt_eKFx1() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        boolean result = commandLine.hasOption(opt);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithEmptyOpt_CZbV2() {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        boolean result = commandLine.hasOption(opt);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNullOption_LxDy5() {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        Option option = null;
        commandLine.addOption(option);
        boolean result = commandLine.hasOption(opt);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void handle(Option option) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionValue1_IKQF0() {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String value = commandLine.getOptionValue(option);
        assertEquals("value1", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionValue2_qilz1() {
        Option option = new Option("option", "longOption", false, "description");
        CommandLine commandLine = new CommandLine();
        String value = commandLine.getOptionValue(option);
        assertEquals("value2", value);
    }
}