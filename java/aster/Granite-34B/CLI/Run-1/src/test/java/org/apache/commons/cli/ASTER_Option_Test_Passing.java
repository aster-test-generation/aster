/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_Cras0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption2_pmLl1() {
        Option option = new Option("option", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDescriptionTest_FlcT0_1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals("description", option1.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDescriptionTest_FlcT0_2() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals("description", option2.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDescriptionTest_FlcT0_3() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals("description", option3.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_NZMo0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgNameWithNoArg_hwjt1() {
        Option option = new Option("option", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgNameWithNoLongOption_FPjL2() {
        Option option = new Option("option", "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_MGZG0_1() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals("longOption1", option1.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_MGZG0_2() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals("longOption2", option2.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_MGZG0_3() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals(null, option3.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_XWiv0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredWithNoArg_ixfF1() {
        Option option = new Option("option", true, "description");
        option.setRequired(false);
        assertTrue(!option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredWithDescriptionOnly_QDwD2() {
        Option option = new Option("option", "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_SCUB0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(null, option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoValues_pqSE1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(null, option.getValue(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionalArg_xBtb0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionalArg2_qQoC1() {
        Option option = new Option("option", true, "description");
        option.setOptionalArg(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionalArg3_iTEn2() {
        Option option = new Option("option", "description");
        option.setOptionalArg(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_ZZWB0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObject_Spks1() {
        Option option = new Option("option", "longOption", true, "description");
        Option other = new Option("other", "longOption", true, "description");
        assertTrue(!option.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_GAWW2() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(!option.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_BGUw3() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(!option.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameValues_SgqG4() {
        Option option = new Option("option", "longOption", true, "description");
        Option other = new Option("option", "longOption", true, "description");
        assertTrue(option.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWhenHasArg_knoX0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWhenHasArgs_ZhyH1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(2);
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWhenHasOptionalArg_iTVH2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWhenArgCountIsOneAndValuesSizeIsZero_NNWP5() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(1);
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueSeparatorTest_pmuX0_1() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals(0, option1.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueSeparatorTest_pmuX0_2() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals(0, option2.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueSeparatorTest_pmuX0_3() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals(0, option3.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndDescription_bLbP1() {
        Option option = new Option("option", "description");
        boolean result = option.hasArgs();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndLongOption_Vifp2() {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.hasArgs();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_rXIM0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("newDescription");
        assert option.getDescription().equals("newDescription");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescriptionWithNoArg_clQi1() {
        Option option = new Option("option", true, "description");
        option.setDescription("newDescription");
        assert option.getDescription().equals("newDescription");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescriptionWithOptionOnly_cmCT2() {
        Option option = new Option("option", "description");
        option.setDescription("newDescription");
        assert option.getDescription().equals("newDescription");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_aUGp0() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals(null, deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_umAc1() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals(null, deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_NKit2() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertEquals(null, deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_NoArgsAllowed_hGmV3() {
        Option option = new Option("option", "longOption", false, "description");
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> option.processValue("value"));
        assert exception.getMessage().equals("NO_ARGS_ALLOWED");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_hjYX0_1() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option1.hashCode(), option1.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_hjYX0_2() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option2.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_hjYX0_3() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option3.hashCode(), option3.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt_SSuE0_1() {
        Option option = new Option("option", "longOption", true, "description");
        option = new Option("option", true, "description");
        option = new Option("option", "description");
        assertEquals("option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_QLHn3() {
        Option option = new Option("option", "longOption", true, "description");
        Class<?> type = Object.class;
        option.setType(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_MbWv4() {
        Option option = new Option("option", true, "description");
        Class<?> type = Object.class;
        option.setType(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_DNMZ5() {
        Option option = new Option("option", "description");
        Class<?> type = Object.class;
        option.setType(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId_yBka0() {
        Option option = new Option("a", "longOption", true, "description");
        assertEquals(option.getId(), option.getKey().charAt(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionDescription_TfAG1() {
        Option option = new Option("a", "description");
        assertEquals(option.getId(), option.getKey().charAt(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionHasArgDescription_LTkQ2() {
        Option option = new Option("a", true, "description");
        assertEquals(option.getId(), option.getKey().charAt(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithOption_nAds0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("option", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithLongOption_XEFn1() {
        Option option = new Option(null, "longOption", true, "description");
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithoutOptionAndLongOption_qZJK2() {
        Option option = new Option(null, null, true, "description");
        assertEquals(null, option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithLongOption_aZJq0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithoutLongOption_ZpnM1() {
        Option option = new Option("option", null, true, "description");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_AInO0_1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertTrue(option1.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_AInO0_2() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertTrue(option2.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_AInO0_3() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertFalse(option3.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithUnlimitedValues_RjgK1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(Option.UNLIMITED_VALUES);
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithZeroValues_WqYp2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(0);
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoValues_psTb0() {
        Option option = new Option("option", "longOption", false, "description");
        assertEquals(null, option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_vxWZ0_1() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_vxWZ0_2() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullOption_ipdk4_1() {
        Option option = new Option(null, "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullOption_ipdk4_2() {
        Option option = new Option(null, "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullLongOption_UgXw6_1() {
        Option option = new Option("option", null, true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullLongOption_UgXw6_2() {
        Option option = new Option("option", null, true, "description");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyLongOption_GmIJ7_1() {
        Option option = new Option("option", "", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyLongOption_GmIJ7_2() {
        Option option = new Option("option", "", true, "description");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullDescription_DDcJ8_1() {
        Option option = new Option("option", "longOption", true, null);
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullDescription_DDcJ8_2() {
        Option option = new Option("option", "longOption", true, null);
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyDescription_aiIg9_1() {
        Option option = new Option("option", "longOption", true, "");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyDescription_aiIg9_2() {
        Option option = new Option("option", "longOption", true, "");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedFalse_teGe1() {
        Option option = new Option("option", "description");
        boolean actual = option.isDeprecated();
        boolean expected = false;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOptionDescription_aryz2() {
        Option option = new Option("option", "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoDefault_pXqb0() {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue(null);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefault_tdfc1() {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoArg_RewQ2() {
        Option option = new Option("option", "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoLongOption_yBIR4() {
        Option option = new Option("option", true, "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOption_vhra6() {
        Option option = new Option(null, "longOption", true, "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOptionAndNoLongOption_Ndnv7() {
        Option option = new Option(null, true, "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOptionAndNoLongOptionAndNoDescription_VTVf9() {
        Option option = new Option(null, null, false, null);
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisRequired_CoeI0() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assert option1.isRequired() == false;
        assert option2.isRequired() == false;
        assert option3.isRequired() == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_cqXT0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_EFEc1() {
        Option option = new Option("option", true, "description");
        option.setType(Integer.class);
        assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_xAeo2() {
        Option option = new Option("option", "description");
        option.setType(Boolean.class);
        assertEquals(Boolean.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_vpoj3() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(Long.class);
        assertEquals(Long.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_asyo4() {
        Option option = new Option("option", true, "description");
        option.setType(Float.class);
        assertEquals(Float.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_Kxil5() {
        Option option = new Option("option", "description");
        option.setType(Double.class);
        assertEquals(Double.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_fjIS6() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(Character.class);
        assertEquals(Character.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_nHlB7() {
        Option option = new Option("option", true, "description");
        option.setType(Byte.class);
        assertEquals(Byte.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_nNPG8() {
        Option option = new Option("option", "description");
        option.setType(Short.class);
        assertEquals(Short.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_eIVm9() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(Object.class);
        assertEquals(Object.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_hZYR10() {
        Option option = new Option("option", true, "description");
        option.setType(Number.class);
        assertEquals(Number.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgs_iNLu0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgs2_KNxc1() {
        Option option = new Option("option", true, "description");
        option.setArgs(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgs3_fDdk2() {
        Option option = new Option("option", "description");
        option.setArgs(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_option_longOption_hasArg_description_WrHU0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("[ Option option longOption [ARG] :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_option_hasArg_description_geIw1_fid1() {
        Option option = new Option("option", true, "description");
        assertEquals("[ Option option [ARG] :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_option_description_Lsgt2_fid1() {
        Option option = new Option("option", "description");
        assertEquals("[ Option option :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_FVkp0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWithNoLongOption_CDbi1_fid1() {
        Option option = new Option("option", true, "description");
        assertEquals("", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_Rlhn0_1_fid1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDescriptionTest_FlcT0() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals("description", option1.getDescription());
        assertEquals("description", option2.getDescription());
        assertEquals("description", option3.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_MGZG0() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        assertEquals("longOption1", option1.getLongOpt());
        Option option2 = new Option("option2", "longOption2", false, "description2");
        assertEquals("longOption2", option2.getLongOpt());
        Option option3 = new Option("option3", "description3");
        assertEquals(null, option3.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValueSeparatorTest_pmuX0() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals(0, option1.getValueSeparator());
        assertEquals(0, option2.getValueSeparator());
        assertEquals(0, option3.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_hjYX0() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option1.hashCode(), option1.hashCode());
        assertEquals(option2.hashCode(), option2.hashCode());
        assertEquals(option3.hashCode(), option3.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt_SSuE0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("option", option.getOpt());
        option = new Option("option", true, "description");
        assertEquals("option", option.getOpt());
        option = new Option("option", "description");
        assertEquals("option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_AInO0() {
        Option option1 = new Option("option", "longOption", true, "description");
        assertTrue(option1.hasArg());
        Option option2 = new Option("option", true, "description");
        assertTrue(option2.hasArg());
        Option option3 = new Option("option", "description");
        assertFalse(option3.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_vxWZ0() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullOption_ipdk4() {
        Option option = new Option(null, "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullLongOption_UgXw6() {
        Option option = new Option("option", null, true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyLongOption_GmIJ7() {
        Option option = new Option("option", "", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullDescription_DDcJ8() {
        Option option = new Option("option", "longOption", true, null);
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyDescription_aiIg9() {
        Option option = new Option("option", "longOption", true, "");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertTrue(valuesList.isEmpty());
    }
}