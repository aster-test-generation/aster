/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_PztI0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a sample text to test the renderWrappedText method";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a\nsample text\nto test the\nrenderWrappedText\nmethod");
        assertEquals(expected, helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithLongText_MYym1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a very long sample text to test the renderWrappedText method with a very long text";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a\nvery long\nsample text\nto test the\nrenderWrappedText\nmethod with a\nvery long text");
        assertEquals(expected, helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithShortText_aJPn2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 100;
        int nextLineTabStop = 5;
        String text = "This is a short text";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a short text");
        assertEquals(expected, helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithNegativeWidth_SHWb4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = -10;
        int nextLineTabStop = 5;
        String text = "This is a sample text to test the renderWrappedText method";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a sample text to test the renderWrappedText method");
        assertEquals(expected, helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithZeroNextLineTabStop_dmRF5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 0;
        String text = "This is a sample text to test the renderWrappedText method";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a\nsample text\nto test the\nrenderWrappedText\nmethod");
        assertEquals(expected, helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithNegativeNextLineTabStop_MHbF6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = -5;
        String text = "This is a sample text to test the renderWrappedText method";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a\nsample text\nto test the\nrenderWrappedText\nmethod");
        assertEquals(expected, helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_JSUe0() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a sample text to test the printWrapped method.";
        formatter.printWrapped(pw, width, nextLineTabStop, text);
        String expectedOutput = "This is a\nsample text\nto test the\nprintWrapped\nmethod.";
        assertEquals(expectedOutput, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_XWKJ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "command line syntax";
        int width = 100;
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, width, cmdLineSyntax);
        String expected = "java.io.PrintWriter@4b20c054";
        assertEquals(expected, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithNegativeLength_rWcw1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.createPadding(-5);
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_Hjsh0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        options.addOption("opt2", "longOpt2", false, "description2");
        options.addOption("opt3", "longOpt3", true, "description3");
        options.addOption("opt4", "longOpt4", false, "description4");
        options.addOption("opt5", "longOpt5", true, "description5");
        options.addOption("opt6", "longOpt6", false, "description6");
        options.addOption("opt7", "longOpt7", true, "description7");
        options.addOption("opt8", "longOpt8", false, "description8");
        options.addOption("opt9", "longOpt9", true, "description9");
        options.addOption("opt10", "longOpt10", false, "description10");
        options.addOption("opt11", "longOpt11", true, "description11");
        options.addOption("opt12", "longOpt12", false, "description12");
        options.addOption("opt13", "longOpt13", true, "description13");
        options.addOption("opt14", "longOpt14", false, "description14");
        options.addOption("opt15", "longOpt15", true, "description15");
        options.addOption("opt16", "longOpt16", false, "description16");
        options.addOption("opt17", "longOpt17", true, "description17");
        options.addOption("opt18", "longOpt18", false, "description18");
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int leftPad = 5;
        int descPad = 3;
        formatter.renderOptions(sb, width, options, leftPad, descPad);
        assertEquals(sb.toString(), "     -opt, --longOpt <arg>   description\n" +
                "     -opt2, --longOpt2         description2\n" +
                "     -opt3, --longOpt3 <arg>   description3\n" +
                "     -opt4, --longOpt4         description4\n" +
                "     -opt5, --longOpt5 <arg>   description5\n" +
                "     -opt6, --longOpt6         description6\n" +
                "     -opt7, --longOpt7 <arg>   description7\n" +
                "     -opt8, --longOpt8         description8\n" +
                "     -opt9, --longOpt9 <arg>   description9\n" +
                "     -opt10, --longOpt10       description10\n" +
                "     -opt11, --longOpt11 <arg> description11\n" +
                "     -opt12, --longOpt12       description12\n" +
                "     -opt13, --longOpt13 <arg> description13\n" +
                "     -opt14, --longOpt14       description14\n" +
                "     -opt15, --longOpt15 <arg> description15\n" +
                "     -opt16, --longOpt16       description16\n" +
                "     -opt17, --longOpt17 <arg> description17\n" +
                "     -opt18, --longOpt18       description18\n");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_TAEK0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 10;
        String text = "This is a test";
        helpFormatter.printWrapped(pw, width, text);
        assertEquals("This is a\ntest", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithOffset_zkoa1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 10;
        int offset = 2;
        String text = "This is a test";
        helpFormatter.printWrapped(pw, width, offset, text);
        assertEquals("  This is a\n  test", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_ASRR0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int expected = 5; // Replace with the expected value
        int actual = helpFormatter.getDescPadding();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithNegativeInput_YSqK2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = -5;
        int expected = 0; // Replace with the expected value
        int actual = helpFormatter.getDescPadding();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_GRxt0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.getLongOptSeparator();
        String expected = "longOptSeparator";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparatorCoverage_SFot1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.getLongOptSeparator();
        String expected = "longOptSeparator";
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithLf_pLdS0_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string with a newline character at the end.\n";
        int width = 30;
        int startPos = 0;
        int expected = 31;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithTab_rYnU1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string with a tab character at the end.\t";
        int width = 30;
        int startPos = 0;
        int expected = 31;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithNoWrap_todc2_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string that does not need to be wrapped.";
        int width = 30;
        int startPos = 0;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithWrap_DAPd3_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string that needs to be wrapped.";
        int width = 30;
        int startPos = 0;
        int expected = 29;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithStartPos_NDcu4_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string that needs to be wrapped.";
        int width = 30;
        int startPos = 10;
        int expected = 39;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_XWKJ0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "command line syntax";
        int width = 100;
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, width, cmdLineSyntax);
        String expected = "Syntax: command line syntax";
        assertEquals(expected, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_syRM0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String syntaxPrefix = helpFormatter.getSyntaxPrefix();
        assertEquals("defaultSyntaxPrefix", syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefixWithNullSyntaxPrefix_NmfL3_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultSyntaxPrefix = null;
        String syntaxPrefix = helpFormatter.getSyntaxPrefix();
        assertEquals("", syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_EzLT0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 0; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_nwUT2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = -1; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_lxzE3_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = Integer.MAX_VALUE; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_CKqS5_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 100; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_oxOL6_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = -100; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_lAjt7_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 1000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_UHka8_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = -1000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_DxAC9_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 10000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_NnRj10_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = -10000; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_YHJc0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.getLongOptPrefix();
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparatorCoverage_SFot1_1_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.getLongOptSeparator();
        String expected = "longOptSeparator";
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
    }
}