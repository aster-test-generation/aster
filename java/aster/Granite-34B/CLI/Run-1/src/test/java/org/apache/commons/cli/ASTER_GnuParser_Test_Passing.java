/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.ListIterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    private GnuParser parser;
    private Option option2;
    private Options options;
    private OptionGroup optionGroup;
    private Option option1;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_dYky0() {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2", "arg3"};
        boolean stopAtNonOption = true;
        String[] result = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"arg1", "arg2", "arg3"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithLongOption_iBXe1() {
        Options options = new Options();
        options.addOption("longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt", "arg1", "arg2", "arg3"};
        boolean stopAtNonOption = true;
        String[] result = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--longOpt", "arg1", "arg2", "arg3"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithShortOption_utJp2() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        String[] arguments = new String[]{"-opt", "arg1", "arg2", "arg3"};
        boolean stopAtNonOption = true;
        String[] result = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-opt", "arg1", "arg2", "arg3"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithNonOptionArgument_zgtu3() {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2", "arg3"};
        boolean stopAtNonOption = false;
        String[] result = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"arg1", "arg2", "arg3"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_USab0() {
        GnuParser parser = new GnuParser();
        Options options = parser.getOptions();
        assertEquals(options, parser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs_zwjC0() throws ParseException {
        Option opt = new Option("option", "longOption", true, "description");
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        GnuParser parser = new GnuParser();
        CommandLine cmd = parser.parse(new Options().addOption(opt), new String[0]);
        assertEquals(null, cmd.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgsWithMissingArgument_GvWL2() throws ParseException {
        Option opt = new Option("option", "longOption", true, "description");
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        GnuParser parser = new GnuParser();
        try {
            parser.processArgs(opt, iter);
            fail("Expected MissingArgumentException");
        } catch (MissingArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WacG0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_McER1() throws Exception {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = {"--longOpt", "value"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_GAbu2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        String[] arguments = {"--longOpt", "value"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_rRSi3() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("opt1", "longOpt1", false, "description1"));
        group.addOption(new Option("opt2", "longOpt2", false, "description2"));
        options.addOptionGroup(group);
        String[] arguments = {"--longOpt1"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_pCPg4() throws Exception {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = {"--longOpt", "value", "nonOption"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = new GnuParser().parse(options, arguments, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_JEyk0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        CommandLine commandLine = new GnuParser().parse(options, arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_KfuZ1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "value"};
        CommandLine commandLine = new GnuParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_VfyD2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "value"};
        CommandLine commandLine = new GnuParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingRequiredOption_Xldj4() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "Alpha option");
        String[] arguments = {};
        try {
            new GnuParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_PAGY5() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-b", "value"};
        try {
            new GnuParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: -b", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOptionArgument_iKzN6() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a"};
        try {
            new GnuParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_Bvlb7() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "alphaValue", "-a", "betaValue"};
        CommandLine commandLine = new GnuParser().parse(options, arguments);
        assertEquals(Arrays.asList("alphaValue", "betaValue"), Arrays.asList(commandLine.getOptionValues("a")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CUkF0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = new GnuParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_vWRs1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = new GnuParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_eWuI2() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-b", "beta-value"};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = new GnuParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertTrue(commandLine.hasOption("b"));
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_zUII3() throws ParseException {
        Options options = new Options();
        options.addOption("c", "gamma", false, "Gamma option");
        options.addOption("d", "delta", true, "Delta option");
        String[] arguments = {"-c", "-d", "delta-value"};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = new GnuParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertTrue(commandLine.hasOption("c"));
        assertTrue(commandLine.hasOption("d"));
        assertEquals("delta-value", commandLine.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_IsAC4() throws ParseException {
        Options options = new Options();
        options.addOption("e", "epsilon", false, "Epsilon option");
        String[] arguments = {};
        Properties properties = new Properties();
        properties.setProperty("e", "true");
        CommandLine commandLine = null;
        try {
            commandLine = new GnuParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertTrue(commandLine.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_GrYT0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_OUtz2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionPresent_azfw5() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "a", true, "Description");
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_knia6() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "a", true, "Description"));
        group.addOption(new Option("b", "b", true, "Description"));
        options.addOptionGroup(group);
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupAndRequiredOptionPresent_NnbX8() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "a", true, "Description"));
        group.addOption(new Option("b", "b", true, "Description"));
        options.addOptionGroup(group);
        options.addRequiredOption("c", "c", true, "Description");
        String[] arguments = {"-a", "1", "-c", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new GnuParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_BiDd0() throws ParseException {
        parser = new GnuParser();
        options = new Options();
        option1 = new Option("option1", "description1");
        option2 = new Option("option2", "description2");
        optionGroup = new OptionGroup();
        optionGroup.addOption(option1);
        optionGroup.addOption(option2);
        options.addOptionGroup(optionGroup);
    }
}