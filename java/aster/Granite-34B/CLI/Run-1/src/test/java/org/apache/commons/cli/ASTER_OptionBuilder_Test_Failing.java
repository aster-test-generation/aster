/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithTypeError2_FdJI1_fid1() {
        OptionBuilder result = OptionBuilder.withType(new Object());
        assertEquals(result.getClass(), OptionBuilder.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_15() {
        Option option = OptionBuilder.create("opt");
        assertEquals(0, option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_16_fid1() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_19() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getValue("default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_20() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_22() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_23() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_25() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0() {
        Option option = OptionBuilder.create("opt");
        assertEquals("opt", option.getOpt());
        assertEquals(null, option.getDescription());
        assertEquals(null, option.getArgName());
        assertEquals(null, option.getLongOpt());
        assertEquals(String.class, option.getType());
        assertEquals(false, option.isRequired());
        assertEquals(Option.UNINITIALIZED, option.getArgs());
        assertEquals(false, option.hasOptionalArg());
        assertEquals(false, option.hasArg());
        assertEquals(false, option.hasLongOpt());
        assertEquals(false, option.hasArgName());
        assertEquals(false, option.hasValueSeparator());
        assertEquals(0, option.getValueSeparator());
        assertEquals(null, option.getDeprecated());
        assertEquals(0, option.getId());
        assertEquals(null, option.getKey());
        assertEquals(null, option.getValue());
        assertEquals(null, option.getValue(0));
        assertEquals(null, option.getValue("default"));
        assertEquals(null, option.getConverter());
        assertEquals(null, option.getArgName());
        assertEquals(null, option.getOpt());
        assertEquals(null, option.getType());
        assertEquals(null, option.getValues());
        assertEquals(null, option.getValuesList());
    }
}