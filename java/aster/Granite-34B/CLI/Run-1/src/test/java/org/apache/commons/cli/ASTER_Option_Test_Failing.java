/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption3_BcJd2() {
        Option option = new Option("option", "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_option_longOption_hasArg_description_WrHU0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("[ Option option longOption [ARG] :: description :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_option_hasArg_description_geIw1() {
        Option option = new Option("option", true, "description");
        assertEquals("[ Option option [ARG] :: description :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_option_description_Lsgt2() {
        Option option = new Option("option", "description");
        assertEquals("[ Option option :: description :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_option_hasArg_type_description_DLkL4() {
        Option option = new Option("option", true, "description");
        option.setType("type");
        assertEquals("[ Option option [ARG] :: description :: type ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWhenArgCountIsOneAndValuesSizeIsOne_zcnl6() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(1);
        option.addValue("value");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWhenArgCountIsTwoAndValuesSizeIsOne_MiOc7() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(2);
        option.addValue("value");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWhenArgCountIsTwoAndValuesSizeIsTwo_TquT8() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(2);
        option.addValue("value1");
        option.addValue("value2");
        assertTrue(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString_FVkp0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("Option 'option'longOption: deprecated", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWithNoLongOption_CDbi1() {
        Option option = new Option("option", true, "description");
        assertEquals("Option 'option': deprecated", option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOption_ACaN0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArgs();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_UninitializedArgCount_mrNr0() {
        Option option = new Option("option", "longOption", true, "description");
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> option.processValue("value"));
        assert exception.getMessage().equals("NO_ARGS_ALLOWED");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_IPJH0() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assert option1.hasValueSeparator();
        assert option2.hasValueSeparator();
        assert !option3.hasValueSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparatorCoverage_DSKi1() {
        Option option = new Option("option", "longOption", true, "description");
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
        assert option.hasValueSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_TCFi0() {
        Option option = new Option("option", "longOption", true, "description");
        Object type = new Object();
        option.setType(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_BNYC1() {
        Option option = new Option("option", true, "description");
        Object type = new Object();
        option.setType(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_HhQq2() {
        Option option = new Option("option", "description");
        Object type = new Object();
        option.setType(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_Rlhn0_1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals(null, option1.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_Rlhn0_2() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals(null, option2.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_Rlhn0_3() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals(null, option3.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithEmptyLongOption_ypDl4() {
        Option option = new Option("option", "", true, "description");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_hasValues_aNdj1_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_hasValues_aNdj1_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertEquals(2, valuesList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_hasValues_aNdj1_3() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.contains("value1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_hasValues_aNdj1_4() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.contains("value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullValues_wnGs2_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullValues_wnGs2_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        List<String> valuesList = option.getValuesList();
        assertEquals(1, valuesList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullValues_wnGs2_3() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.contains(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyValues_HRYY3_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyValues_HRYY3_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        List<String> valuesList = option.getValuesList();
        assertEquals(1, valuesList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyValues_HRYY3_3() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.contains(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyOption_TtBO5_1() {
        Option option = new Option("", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyOption_TtBO5_2() {
        Option option = new Option("", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getArgNameTest1_oJPh0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getArgNameTest2_mEMO1() {
        Option option = new Option("option", true, "description");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getArgNameTest3_EeZh2() {
        Option option = new Option("option", "description");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedTrue_oLcX0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean actual = option.isDeprecated();
        boolean expected = true;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWhenOptionalArgIsPresent_NkOf0() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_HYik0() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assert option1.hasOptionalArg();
        assert option2.hasOptionalArg();
        assert option3.hasOptionalArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption_GcSD0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOptionAndHasArg_HlYi1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_Hwdo11() {
        Option option = new Option("option", "description");
        option.setType(null);
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_SKcd0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.addValue("value");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValueWithNoArg_ApYz1() {
        Option option = new Option("option", true, "description");
        boolean result = option.addValue("value");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValueWithNoLongOption_eyeh2() {
        Option option = new Option("option", "description");
        boolean result = option.addValue("value");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_Rlhn0() {
        Option option1 = new Option("option", "longOption", true, "description");
        assertEquals(null, option1.getType());
        Option option2 = new Option("option", true, "description");
        assertEquals(null, option2.getType());
        Option option3 = new Option("option", "description");
        assertEquals(null, option3.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_hasValues_aNdj1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertEquals(2, valuesList.size());
        assertTrue(valuesList.contains("value1"));
        assertTrue(valuesList.contains("value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_nullValues_wnGs2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertEquals(1, valuesList.size());
        assertTrue(valuesList.contains(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyValues_HRYY3() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertEquals(1, valuesList.size());
        assertTrue(valuesList.contains(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getValuesListTest_emptyOption_TtBO5() {
        Option option = new Option("", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertTrue(valuesList.isEmpty());
    }
}