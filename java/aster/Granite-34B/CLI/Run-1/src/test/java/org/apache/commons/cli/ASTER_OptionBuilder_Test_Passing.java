/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithTypeError2_FdJI1() {
        OptionBuilder result = OptionBuilder.withType(String.class);
        assertEquals(result.getClass(), OptionBuilder.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_Cvba0() {
        OptionBuilder.hasArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg2_goZQ1() {
        OptionBuilder.hasArg(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg3_Jjma2() {
        OptionBuilder.hasArg(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgs_qjIR3() {
        OptionBuilder.hasOptionalArgs(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgs2_ByZG4() {
        OptionBuilder.hasOptionalArgs(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgs3_quop5() {
        OptionBuilder.hasOptionalArgs(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_ftBb6() {
        OptionBuilder.hasArgs(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs2_TBTw7() {
        OptionBuilder.hasArgs(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs3_fCOX8() {
        OptionBuilder.hasArgs(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_Eptn9() {
        OptionBuilder.hasOptionalArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg33_luQm41() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_1() {
        Option option = OptionBuilder.create("opt");
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_2() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_3() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_4() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_5() {
        Option option = OptionBuilder.create("opt");
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_6() {
        Option option = OptionBuilder.create("opt");
        assertEquals(false, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_7() {
        Option option = OptionBuilder.create("opt");
        assertEquals(Option.UNINITIALIZED, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_8() {
        Option option = OptionBuilder.create("opt");
        assertEquals(false, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_9() {
        Option option = OptionBuilder.create("opt");
        assertEquals(false, option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_10() {
        Option option = OptionBuilder.create("opt");
        assertEquals(false, option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_11() {
        Option option = OptionBuilder.create("opt");
        assertEquals(false, option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_12() {
        Option option = OptionBuilder.create("opt");
        assertEquals(false, option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_13() {
        Option option = OptionBuilder.create("opt");
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_14() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz111_15() {
        Option option = OptionBuilder.create("opt");
        assertEquals(111, option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_16() {
        Option option = OptionBuilder.create("opt");
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_17() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_18() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_dSBz0_24() {
        Option option = OptionBuilder.create("opt");
        assertEquals(null, option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOpt_Ecol0() {
        Option option = OptionBuilder.create('a');
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOptAndDescriptionAndType_rcoR2_agCv0_1() {
        Option option = Option.builder("a").desc("This is a test").type(String.class).build();
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOptAndDescriptionAndType_rcoR2_agCv0_2() {
        Option option = Option.builder("a").desc("This is a test").type(String.class).build();
        assertEquals("This is a test", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOptAndDescriptionAndType_rcoR2_agCv0_3() {
        Option option = Option.builder("a").desc("This is a test").type(String.class).build();
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOptAndDescriptionAndTypeAndArgName_YBag3_WkCO0_1() {
        Option option = Option.builder("a").desc("This is a test").type(String.class).argName("arg").build();
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOptAndDescriptionAndTypeAndArgName_YBag3_WkCO0_2() {
        Option option = Option.builder("a").desc("This is a test").type(String.class).argName("arg").build();
        assertEquals("This is a test", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOptAndDescriptionAndTypeAndArgName_YBag3_WkCO0_3() {
        Option option = Option.builder("a").desc("This is a test").type(String.class).argName("arg").build();
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithOptAndDescriptionAndTypeAndArgName_YBag3_WkCO0_4() {
        Option option = Option.builder("a").desc("This is a test").type(String.class).argName("arg").build();
        assertEquals("arg", option.getArgName());
    }
}