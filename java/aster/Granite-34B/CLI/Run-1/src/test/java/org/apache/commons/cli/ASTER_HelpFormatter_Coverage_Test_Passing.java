/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithCmdLineSyntaxEmpty_Xjzp0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        String cmdLineSyntax = "";
        String header = "This is a header";
        Options options = new Options();
        String footer = "This is a footer";
        boolean autoUsage = true;
        int width = 80;
        int leftPad = 1;
        int descPad = 3;
        try {
            helpFormatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithCmdLineSyntaxNull_kumu1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        String cmdLineSyntax = null;
        String header = "This is a header";
        Options options = new Options();
        String footer = "This is a footer";
        boolean autoUsage = true;
        int width = 80;
        int leftPad = 1;
        int descPad = 3;
        try {
            helpFormatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_ffjQ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        Options options = new Options();
        int width = 10;
        int leftPad = 5;
        int descPad = 3;
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions2_jGDS1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        Options options = new Options();
        int width = 10;
        int leftPad = 5;
        int descPad = 3;
        helpFormatter.getOptionComparator();
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions3_qUxr2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        Options options = new Options();
        int width = 10;
        int leftPad = 5;
        int descPad = 3;
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption(option);
        helpFormatter.renderOptions(sb, width, options, leftPad, descPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_baTe0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String s = "   \t\n";
        String expected = "";
        String actual = helpFormatter.rtrim(s);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_SQJu0_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 0;
        int expected = 9;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_uKHC1_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 1;
        int expected = 9;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_AWPr2_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 2;
        int expected = 9;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_jlww3_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 3;
        int expected = 9;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_vREk4_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 4;
        int expected = 9;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_JmRC5_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 5;
        int expected = 9;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_hewS6_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 6;
        int expected = 16;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }
}