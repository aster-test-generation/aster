/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Collections;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_mkqL0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_EPVe0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_RXUB0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option1", "value1", "-o", "value2", "arg1", "arg2"};
        Options options = new Options();
        options.addOption("o", "option1", true, "Option 1");
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_dptJ0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_PxpL1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_BgxE0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_hdTX1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1=value1", "--option2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_ZCZR0() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        String[] arguments = {"--L", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSign_eJZX1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        String[] arguments = {"--L=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionPrefix_tgQT2() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        String[] arguments = {"-LV"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OtfZ3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OtfZ3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OtfZ3_3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_XrVn3_2() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file option");
        String[] args = {"--file=test.txt", "--", "-f", "test2.txt"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(Arrays.asList("-f", "test2.txt"), commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_wrKq2_2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] args = {"-s", "value", "non-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, true);
        assertNotEquals(Collections.singletonList("non-option"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_jugE3() throws ParseException {
        Options options = new Options();
        options.addOption("D", true, "java property");
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        String[] args = {};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value", commandLine.getOptionValue("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_kLzQ3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_BgaS0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] args = {};
        Properties props = new Properties();
        CommandLine cmd = parser.parse(null, args, props, false);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_SbrQ6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options opts = new Options();
        String[] args = {"-a", "-b", "arg1", "-c", "arg2"};
        CommandLine cmd = parser.parse(opts, args, new Properties(), true);
        assertEquals(Arrays.asList("arg1", "-c", "arg2"), cmd.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_autB7() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options opts = new Options();
        String[] args = {"-a", "-b", "arg1", "-c", "arg2"};
        CommandLine cmd = parser.parse(opts, args, new Properties(), false);
        assertEquals(Arrays.asList("arg1", "arg2"), cmd.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_lxWV0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(null, new String[]{}, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_oVlw7_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), false);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_oVlw7_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), false);
        assertEquals("--option2", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_oVlw7_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), false);
        assertEquals("value2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_ioEW0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(null, args, new Properties(), false);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_WUHa1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_RKcY4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_sghn6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "d", "e", "f"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), true);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_AnXH7() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "d", "e", "f"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(6, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_6() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_7() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("g"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_8() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_9() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("i"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_10() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("j"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_11() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("k"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_12() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_13() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("m"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_14() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_15() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_16() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_17() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_18() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_19() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_20() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("t"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_21() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("u"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_22() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_23() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("w"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_24() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0_25() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("y"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_QOxz0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(null, args, new Properties(), false);
        assertEquals("-a", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_QOxz0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(null, args, new Properties(), false);
        assertEquals("-b", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_QOxz0_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(null, args, new Properties(), false);
        assertEquals("-c", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_mjmy1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-a", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_mjmy1_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-b", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_mjmy1_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-c", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_GtRh2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_GtRh2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-a", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_GtRh2_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-b", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_GtRh2_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-c", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_OuYg3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_OuYg3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("--alpha", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_OuYg3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-b", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_OuYg3_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-c", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OgkW4_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(4, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OgkW4_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-a", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OgkW4_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("--alpha", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OgkW4_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-b", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OgkW4_5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-c", commandLine.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_jrQL5_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] args = new String[]{"-a", "value", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(4, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_jrQL5_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] args = new String[]{"-a", "value", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-a", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_jrQL5_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] args = new String[]{"-a", "value", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("value", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_jrQL5_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] args = new String[]{"-a", "value", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-b", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_jrQL5_5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] args = new String[]{"-a", "value", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("-c", commandLine.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_tBrS0() throws ParseException {
        String token = "--long-option";
        Options options = new Options();
        options.addOption("l", "long-option", true, "description");
        DefaultParser parser = new DefaultParser();
        parser.parse(options, new String[]{token});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaProperty_ZvtH2() throws ParseException {
        String token = "-Dkey=value";
        Options options = new Options();
        options.addOption("D", true, "description");
        DefaultParser parser = new DefaultParser();
        parser.parse(options, new String[]{token});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_NRJT4() throws ParseException {
        String token = "-S";
        Options options = new Options();
        options.addOption("S", true, "description");
        DefaultParser parser = new DefaultParser();
        parser.parse(options, new String[]{token});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_RXUB0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option1", "value1", "-o", "value2", "arg1", "arg2"};
        Options options = new Options();
        options.addOption("o", "option1", true, "Option 1");
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
        assertEquals("value2", commandLine.getOptionValue("o"));
        assertEquals(Arrays.asList("arg1", "arg2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OtfZ3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("value1", commandLine.getArgs()[0]);
        assertEquals("value2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithDoubleDash_XrVn3() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file option");
        String[] args = {"--file=test.txt", "--", "-f", "test2.txt"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("test.txt", commandLine.getOptionValue("file"));
        assertEquals(Arrays.asList("-f", "test2.txt"), commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_wrKq2() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short", true, "short option");
        String[] args = {"-s", "value", "non-option"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("value", commandLine.getOptionValue("short"));
        assertNotEquals(Collections.singletonList("non-option"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_oVlw7() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine commandLine = parser.parse(options, new String[]{"--option1", "value1", "--option2", "value2"}, new Properties(), false);
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("--option2", commandLine.getArgs()[0]);
        assertEquals("value2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndShortOption_XeGL0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "all", false, "include all entries");
        options.addOption("b", "balance", false, "make entries balanced");
        options.addOption("c", "category", true, "include category");
        options.addOption("d", "debug", false, "debug mode");
        options.addOption("e", "empty", false, "include empty entries");
        options.addOption("f", "flag", false, "include flagged entries");
        options.addOption("g", "goal", false, "include goal");
        options.addOption("h", "help", false, "print help");
        options.addOption("i", "ignore", false, "ignore");
        options.addOption("j", "json", false, "json output");
        options.addOption("k", "keep", false, "keep");
        options.addOption("l", "list", false, "list");
        options.addOption("m", "monthly", false, "monthly");
        options.addOption("n", "new", false, "new");
        options.addOption("o", "old", false, "old");
        options.addOption("p", "payee", true, "payee");
        options.addOption("q", "quiet", false, "quiet");
        options.addOption("r", "remove", false, "remove");
        options.addOption("s", "sort", false, "sort");
        options.addOption("t", "tag", true, "tag");
        options.addOption("u", "undo", false, "undo");
        options.addOption("v", "version", false, "version");
        options.addOption("w", "weekly", false, "weekly");
        options.addOption("x", "xml", false, "xml output");
        options.addOption("y", "yearly", false, "yearly");
        String[] arguments = {"--all", "-balance", "-category", "-debug", "-empty", "-flag", "-goal", "--help", "-ignore", "-json", "-keep", "-list", "-monthly", "-new", "-old", "-payee", "-quiet", "-remove", "-sort", "-tag", "-undo", "-version", "-weekly", "-xml", "-yearly"};
        Properties properties = new Properties();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
        Assertions.assertEquals(true, commandLine.hasOption("a"));
        Assertions.assertEquals(true, commandLine.hasOption("b"));
        Assertions.assertEquals(true, commandLine.hasOption("c"));
        Assertions.assertEquals(true, commandLine.hasOption("d"));
        Assertions.assertEquals(true, commandLine.hasOption("e"));
        Assertions.assertEquals(true, commandLine.hasOption("f"));
        Assertions.assertEquals(true, commandLine.hasOption("g"));
        Assertions.assertEquals(true, commandLine.hasOption("h"));
        Assertions.assertEquals(true, commandLine.hasOption("i"));
        Assertions.assertEquals(true, commandLine.hasOption("j"));
        Assertions.assertEquals(true, commandLine.hasOption("k"));
        Assertions.assertEquals(true, commandLine.hasOption("l"));
        Assertions.assertEquals(true, commandLine.hasOption("m"));
        Assertions.assertEquals(true, commandLine.hasOption("n"));
        Assertions.assertEquals(true, commandLine.hasOption("o"));
        Assertions.assertEquals(true, commandLine.hasOption("p"));
        Assertions.assertEquals(true, commandLine.hasOption("q"));
        Assertions.assertEquals(true, commandLine.hasOption("r"));
        Assertions.assertEquals(true, commandLine.hasOption("s"));
        Assertions.assertEquals(true, commandLine.hasOption("t"));
        Assertions.assertEquals(true, commandLine.hasOption("u"));
        Assertions.assertEquals(true, commandLine.hasOption("v"));
        Assertions.assertEquals(true, commandLine.hasOption("w"));
        Assertions.assertEquals(true, commandLine.hasOption("x"));
        Assertions.assertEquals(true, commandLine.hasOption("y"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_QOxz0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(null, args, new Properties(), false);
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("-a", commandLine.getArgs()[0]);
        assertEquals("-b", commandLine.getArgs()[1]);
        assertEquals("-c", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_mjmy1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("-a", commandLine.getArgs()[0]);
        assertEquals("-b", commandLine.getArgs()[1]);
        assertEquals("-c", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_GtRh2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("-a", commandLine.getArgs()[0]);
        assertEquals("-b", commandLine.getArgs()[1]);
        assertEquals("-c", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_OuYg3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("--alpha", commandLine.getArgs()[0]);
        assertEquals("-b", commandLine.getArgs()[1]);
        assertEquals("-c", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortAndLongOption_OgkW4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] args = new String[]{"-a", "--alpha", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(4, commandLine.getArgs().length);
        assertEquals("-a", commandLine.getArgs()[0]);
        assertEquals("--alpha", commandLine.getArgs()[1]);
        assertEquals("-b", commandLine.getArgs()[2]);
        assertEquals("-c", commandLine.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_jrQL5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] args = new String[]{"-a", "value", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(4, commandLine.getArgs().length);
        assertEquals("-a", commandLine.getArgs()[0]);
        assertEquals("value", commandLine.getArgs()[1]);
        assertEquals("-b", commandLine.getArgs()[2]);
        assertEquals("-c", commandLine.getArgs()[3]);
    }
}