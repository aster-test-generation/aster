/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_AlreadySelectedException_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_Dced0() {
        AlreadySelectedException obj = new AlreadySelectedException("message");
        Option result = obj.getOption();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption2_AvxH1() {
        OptionGroup group = new OptionGroup();
        Option option = new Option("option", "longOption", true, "description");
        AlreadySelectedException obj = new AlreadySelectedException(group, option);
        Option result = obj.getOption();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_fTvh0() {
        OptionGroup group = new OptionGroup();
        AlreadySelectedException e = new AlreadySelectedException(group, new Option("option", "longOption", true, "description"));
        assertEquals(group, e.getOptionGroup());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNames_uhny1() {
        OptionGroup group = new OptionGroup();
        Collection<String> names = group.getNames();
        assertNotNull(names);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_YSJS2() {
        OptionGroup group = new OptionGroup();
        Collection<Option> options = group.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelected_NVtq3() {
        OptionGroup group = new OptionGroup();
        String selected = group.getSelected();
        assertNull(selected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_Sfjf4_1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_Sfjf4_2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_Sfjf4_3() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_Sfjf4_4() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption2_lrHl5_1() {
        Option option = new Option("option", true, "description");
        assertEquals("option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption2_lrHl5_2() {
        Option option = new Option("option", true, "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption2_lrHl5_3() {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption2_lrHl5_4() {
        Option option = new Option("option", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption3_LeAV6_1() {
        Option option = new Option("option", "description");
        assertEquals("option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption3_LeAV6_2() {
        Option option = new Option("option", "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption3_LeAV6_3() {
        Option option = new Option("option", "description");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption3_LeAV6_4() {
        Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }
}