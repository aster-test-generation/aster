/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_sFPO0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithAllowPartialMatching_jOxE1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_hiCY0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_kfdH1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithFalseAllowPartialMatching_uYiF1() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        parser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithNullToken_KysQ3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthTwo_OeER5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("ab");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthThree_hWxd6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthFour_LAhN7() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcd");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthFive_cVBC8() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcde");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthSix_dupI9() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdef");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthSeven_zbMd10() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefg");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthEight_MDol11() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefgh");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthNine_SJtQ12() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghi");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthTen_PVha13() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghij");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthEleven_ulAL14() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijk");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthTwelve_oLYs15() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijkl");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthThirteen_NSTI16() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklm");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthFourteen_eqsJ17() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmn");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthFifteen_pOLs18() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmno");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthSixteen_jQmz19() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmnop");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthSeventeen_KPGS20() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmnopq");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthEighteen_tLBa21() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmnopqrst");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_npRf4_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_EtWe4_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_NBDb6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndDoubleQuote_mglo7() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a=\"value with space\""}, new Properties());
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndSingleQuote_quRz8() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-a='value with space'"}, new Properties());
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColonSeparator_sRnH5_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a:value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_ywKo1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_ywKo1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QBsE2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QBsE2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QBsE2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("b", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_NhtK3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSign_HZtS4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndSpace_pXeC5_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value with space"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndSpace_tkjp6_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value with space"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndSpaceAndQuotes_wqyM7_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=\"value with space\""};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndSpaceAndQuotes_wqyM7_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=\"value with space\""};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_GvUs1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WbMS3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("a", "10");
        properties.setProperty("b", "20");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColonSeparator_XfPj5_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a:foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_XtMB4_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_GNEs6_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndSpaceAndQuotes_kTPN7_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=\"value with spaces\""};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value with spaces", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_YJvW4_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_JoBP6_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_Zlru1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_Zlru1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_Zlru1_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_xCjw2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_xCjw2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_xCjw2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_xCjw2_4() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MWwO3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "3");
        properties.setProperty("beta", "4");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MWwO3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "3");
        properties.setProperty("beta", "4");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(4, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MWwO3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "3");
        properties.setProperty("beta", "4");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("3", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MWwO3_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "3");
        properties.setProperty("beta", "4");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("4", commandLine.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(4, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("5", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("6", commandLine.getArgList().get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Aasf4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("3", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Aasf4_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("4", commandLine.getArgList().get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_AQXU2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_HApu1_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_TqZS2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_TqZS2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_TqZS2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_TqZS2_4() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_TqZS2_5() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("c", commandLine.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("file1.txt", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("file2.txt", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("file3.txt", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("alphaValue", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("alphaProperty", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("betaProperty", commandLine.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("gammaProperty", commandLine.getOptionValue("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NsEQ7_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "arg1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_tmFP6_4() throws ParseException {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndOneOptionAndOneProperty_FbJa7() throws ParseException {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value"};
        final Properties properties = new Properties();
        properties.setProperty("key", "value");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaProperties_OEpx7() throws Exception {
        final Options options = new Options();
        options.addOption("D", true, "description");
        final String[] arguments = {"-Dkey=value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", properties.getProperty("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Xump8_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "arg1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_hHbj1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("a", "3");
        properties.setProperty("b", "4");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_dZFs0_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-f", "file.txt", "-d", "debug"};
        final Properties properties = new Properties();
        properties.setProperty("f", "file.txt");
        properties.setProperty("d", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("file.txt", commandLine.getOptionValue("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_dZFs0_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-f", "file.txt", "-d", "debug"};
        final Properties properties = new Properties();
        properties.setProperty("f", "file.txt");
        properties.setProperty("d", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("debug", commandLine.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingRequiredOption_GeXS1() throws Exception {
        final Options options = new Options();
        options.addOption("f", "file", true, "File");
        final String[] arguments = {};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected exception");
        } catch (final MissingOptionException e) {
            assertEquals("Missing required option: f", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Qcen3_3() throws Exception {
        final Options options = new Options();
        options.addOption("f", "file", true, "File");
        options.addOption("d", "debug", false, "Debug");
        final String[] arguments = {"-f", "file.txt", "-d", "debug", "extra"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"extra"}, commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_nmWa2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, properties, false);
        assertEquals(false, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqualWithNullToken_OnUm2() {
        String token = null;
        int expected = -1;
        int actual = DefaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_PiYi0() {
        DefaultParser parser = new DefaultParser(true);
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithExpectedOpts_CkhU1() {
        DefaultParser parser = new DefaultParser(true);
        parser.expectedOpts.add("option1");
        try {
            parser.checkRequiredOptions();
            fail("Expected MissingOptionException");
        } catch (MissingOptionException e) {
            assertTrue(e.getMessage().contains("option1"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithUnrecognizedOption_KmPM3_ScQC0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("option", "o", false, "description");
        CommandLine commandLine = parser.parse(options, new String[]{"-optionvalue"}, new Properties());
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithUnrecognizedOptionAndPartialMatching_kgqv4_hWBW0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("option", "o", false, "description");
        CommandLine commandLine = parser.parse(options, new String[]{"-optionvalue"}, new Properties());
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentAndOneOption_GNhK7_ndeq0_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o", "value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_hSzw6_ZGZH0_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o", "value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_Wrgi4_UDbg0() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = {"-l", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithNullToken_KysQ3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String token = null;
        parser.handleConcatenatedOptions(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_npRf4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_EtWe4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_NBDb6() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColonSeparator_sRnH5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a:value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_ywKo1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QBsE2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("a", commandLine.getArgList().get(0));
        assertEquals("b", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_NhtK3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSign_HZtS4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndSpace_pXeC5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value with space"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndSpace_tkjp6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value with space"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSignAndSpaceAndQuotes_wqyM7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=\"value with space\""};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("value with space", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColonSeparator_XfPj5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a:foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_XtMB4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_GNEs6() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSignAndSpaceAndQuotes_kTPN7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=\"value with spaces\""};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value with spaces", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_YJvW4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_JoBP6() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_Zlru1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_xCjw2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("1", commandLine.getOptionValue("a"));
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MWwO3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "3");
        properties.setProperty("beta", "4");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals(4, commandLine.getOptions().length);
        assertEquals("1", commandLine.getOptionValue("a"));
        assertEquals("2", commandLine.getOptionValue("b"));
        assertEquals("3", commandLine.getOptionValue("alpha"));
        assertEquals("4", commandLine.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_dUWd4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(4, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("1", commandLine.getOptionValue("a"));
        assertEquals("2", commandLine.getOptionValue("b"));
        assertEquals("3", commandLine.getArgList().get(0));
        assertEquals("4", commandLine.getArgList().get(1));
        assertEquals("5", commandLine.getArgList().get(2));
        assertEquals("6", commandLine.getArgList().get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Aasf4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(4, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("1", commandLine.getOptionValue("a"));
        assertEquals("2", commandLine.getOptionValue("b"));
        assertEquals("3", commandLine.getArgList().get(2));
        assertEquals("4", commandLine.getArgList().get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_HApu1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_TqZS2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getArgList().size());
        assertEquals(3, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("c", commandLine.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ShSz4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "file1.txt", "-b", "file2.txt", "file3.txt"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaValue");
        properties.setProperty("gamma", "gammaValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(3, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("file1.txt", commandLine.getArgList().get(0));
        assertEquals("file2.txt", commandLine.getArgList().get(1));
        assertEquals("file3.txt", commandLine.getArgList().get(2));
        assertEquals("alphaValue", commandLine.getOptionValue("alpha"));
        assertEquals("gammaValue", commandLine.getOptionValue("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WQvY4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        options.addOption("c", "gamma", true, "Gamma option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "-c", "gammaValue"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "alphaProperty");
        properties.setProperty("beta", "betaProperty");
        properties.setProperty("gamma", "gammaProperty");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(3, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
        assertEquals("alphaProperty", commandLine.getOptionValue("alpha"));
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("betaValue", commandLine.getOptionValue("b"));
        assertEquals("betaProperty", commandLine.getOptionValue("beta"));
        assertEquals("c", commandLine.getOptions()[2].getOpt());
        assertEquals("gammaValue", commandLine.getOptionValue("c"));
        assertEquals("gammaProperty", commandLine.getOptionValue("gamma"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NsEQ7() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "arg1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(true, commandLine.hasOption("o"));
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("-o", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgumentAndTwoOptions_tmFP6() throws ParseException {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"arg1", "-o", "value1", "-o", "value2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Xump8() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "arg1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_dZFs0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-f", "file.txt", "-d", "debug"};
        final Properties properties = new Properties();
        properties.setProperty("f", "file.txt");
        properties.setProperty("d", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("file.txt", commandLine.getOptionValue("f"));
        assertEquals("debug", commandLine.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Qcen3() throws Exception {
        final Options options = new Options();
        options.addOption("f", "file", true, "File");
        options.addOption("d", "debug", false, "Debug");
        final String[] arguments = {"-f", "file.txt", "-d", "debug", "extra"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, true);
        assertEquals("file.txt", commandLine.getOptionValue("f"));
        assertEquals(null, commandLine.getOptionValue("d"));
        assertArrayEquals(new String[]{"extra"}, commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_nmWa2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, properties, false);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(false, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
    }
}