/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_nigZ0() {
        Options options = new Options();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithNoStopAtNonOption_QKwb2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2", "arg3"};
        boolean stopAtNonOption = false;
        String[] result = new PosixParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"arg1", "arg2", "arg3"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithLongOption_vYQm3() throws Exception {
        Options options = new Options();
        options.addOption("l", "long-option", true, "description");
        String[] arguments = new String[]{"--long-option", "value"};
        boolean stopAtNonOption = true;
        String[] result = new PosixParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--long-option", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithShortOption_VfFE4() throws Exception {
        Options options = new Options();
        options.addOption("s", "short-option", true, "description");
        String[] arguments = new String[]{"-s", "value"};
        boolean stopAtNonOption = true;
        String[] result = new PosixParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-s", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_uRpJ0() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "bravo", false, "the bravo option");
        options.addOption("c", "charlie", false, "the charlie option");
        options.addOption("d", "delta", false, "the delta option");
        options.addOption("e", "echo", false, "the echo option");
        options.addOption("f", "foxtrot", false, "the foxtrot option");
        options.addOption("g", "golf", false, "the golf option");
        options.addOption("h", "hotel", false, "the hotel option");
        options.addOption("i", "india", false, "the india option");
        options.addOption("j", "juliet", false, "the juliet option");
        options.addOption("k", "kilo", false, "the kilo option");
        options.addOption("l", "lima", false, "the lima option");
        options.addOption("m", "mike", false, "the mike option");
        options.addOption("n", "november", false, "the november option");
        options.addOption("o", "oscar", false, "the oscar option");
        options.addOption("p", "papa", false, "the papa option");
        options.addOption("q", "quebec", false, "the quebec option");
        options.addOption("r", "romeo", false, "the romeo option");
        options.addOption("s", "sierra", false, "the sierra option");
        options.addOption("t", "tango", false, "the tango option");
        options.addOption("u", "uniform", false, "the uniform option");
        options.addOption("v", "victor", false, "the victor option");
        options.addOption("w", "whiskey", false, "the whiskey option");
        options.addOption("x", "xray", false, "the xray option");
        options.addOption("y", "yankee", false, "the yankee option");
        options.addOption("z", "zulu", false, "the zulu option");
        String[] args = new String[]{"-abc", "-def", "-ghi", "-jkl", "-mno", "-pqr", "-stu", "-vwxyz"};
        String[] expected = new String[]{"-a", "-b", "-c", "-d", "-e", "-f", "-g", "-h", "-i", "-j", "-k", "-l", "-m", "-n", "-o", "-p", "-q", "-r", "-s", "-t", "-u", "-v", "-w", "-x", "-y", "-z"};
        String[] actual = new PosixParser().flatten(options, args, false);
        assertEquals(Arrays.asList(expected), Arrays.asList(actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOption_MgIH1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "bravo", false, "the bravo option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_PropertiesNotNull_NoOptions_qmHy1() throws Exception {
        PosixParser posixParser = new PosixParser();
        Properties properties = new Properties();
        posixParser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_WJMw1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = new PosixParser().parse(options, arguments, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_WJMw1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = new PosixParser().parse(options, arguments, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_WJMw1_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = new PosixParser().parse(options, arguments, stopAtNonOption);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_zgRv2_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-a", "-b", "2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = new PosixParser().parse(options, arguments, stopAtNonOption);
        assertEquals("-a", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_vuFk0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        CommandLine commandLine = new PosixParser().parse(options, arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_wuXp1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "value"};
        CommandLine commandLine = new PosixParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_lrCz2() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("b", "beta", true, "Beta option");
        String[] arguments = {"-b", "value"};
        CommandLine commandLine = new PosixParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_unMF3_1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("c", "charlie", false, "Charlie option"));
        group.addOption(new Option("d", "delta", false, "Delta option"));
        options.addOptionGroup(group);
        String[] arguments = {"-c"};
        CommandLine commandLine = new PosixParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_unMF3_2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("c", "charlie", false, "Charlie option"));
        group.addOption(new Option("d", "delta", false, "Delta option"));
        options.addOptionGroup(group);
        String[] arguments = {"-c"};
        CommandLine commandLine = new PosixParser().parse(options, arguments);
        assertFalse(commandLine.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_AQrK0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = new PosixParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingParameters_LZwb2() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = new PosixParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertArrayEquals(arguments, commandLine.getArgs());
        assertEquals(properties, commandLine.getOptionProperties("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullParameters_flnU3() throws ParseException {
        Options options = new Options();
        String[] arguments = null;
        Properties properties = null;
        CommandLine commandLine = null;
        try {
            commandLine = new PosixParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertArrayEquals(new String[0], commandLine.getArgs());
        assertEquals(new Properties(), commandLine.getOptionProperties("key"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_hkmF0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new PosixParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_uRkf2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new PosixParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionPresent_KKlJ5() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "a", true, "Description");
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new PosixParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_XClX6() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "a", true, "Description"));
        group.addOption(new Option("b", "b", true, "Description"));
        options.addOptionGroup(group);
        String[] arguments = {"-a", "1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new PosixParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroupAndRequiredOptionPresent_cfDM8() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "a", true, "Description"));
        group.addOption(new Option("b", "b", true, "Description"));
        options.addOptionGroup(group);
        options.addRequiredOption("c", "c", true, "Description");
        String[] arguments = {"-a", "1", "-c", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new PosixParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_OptionsWithRequiredOption_NoLongOpt_bfHR6_kyOM0_1() {
        Options options = new Options();
        options.addRequiredOption("opt", null, true, "description");
        PosixParser posixParser = new PosixParser();
        posixParser.setOptions(options);
        assertEquals(options, posixParser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_OptionsWithRequiredOption_NoLongOpt_bfHR6_kyOM0_2() {
        Options options = new Options();
        options.addRequiredOption("opt", null, true, "description");
        PosixParser posixParser = new PosixParser();
        posixParser.setOptions(options);
        assertEquals(options.getRequiredOptions(), posixParser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_OptionsWithRequiredOption_NoDescription_xtgA7_VzPu0_1() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, null);
        PosixParser posixParser = new PosixParser();
        posixParser.setOptions(options);
        assertEquals(options, posixParser.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptions_OptionsWithRequiredOption_NoDescription_xtgA7_VzPu0_2() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, null);
        PosixParser posixParser = new PosixParser();
        posixParser.setOptions(options);
        assertEquals(options.getRequiredOptions(), posixParser.getRequiredOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithLongOption_LJcw1_Srkc0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "Long option with argument");
        String[] arguments = {"--long-option", "value"};
        boolean stopAtNonOption = true;
        String[] result = new PosixParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"--long-option", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithShortOption_VXlv2_awMb0() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short-option", false, "Short option without argument");
        String[] arguments = {"-s"};
        boolean stopAtNonOption = true;
        String[] result = new PosixParser().flatten(options, arguments, stopAtNonOption);
        assertArrayEquals(new String[]{"-s"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_WJMw1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = new PosixParser().parse(options, arguments, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_unMF3() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("c", "charlie", false, "Charlie option"));
        group.addOption(new Option("d", "delta", false, "Delta option"));
        options.addOptionGroup(group);
        String[] arguments = {"-c"};
        CommandLine commandLine = new PosixParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("c"));
        assertFalse(commandLine.hasOption("d"));
    }
}