/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg3_xvSC2() {
        Option option = new Option("option", "description");
        boolean result = option.acceptsArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_OLkV0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasValueSeparator();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndLongOption_swNQ1() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption :: description :: null ]";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndDescription_XWai2() {
        Option option = new Option("option", "description");
        String actual = option.toString();
        String expected = "[ Option option :: description :: null ]";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndHasArgs_vTRQ3() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption [ARG...] :: description :: null ]";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionAndHasArg_RigB4() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption [ARG] :: description :: null ]";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithArgName_LLvi0() {
        Option option = new Option("option", "argName", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated_Yzwq0() {
        Option option = new Option("test", "test", true, "test");
        assertTrue(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated2_OHOL1() {
        Option option = new Option("test", true, "test");
        assertTrue(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated3_eeto2() {
        Option option = new Option("test", "test");
        assertTrue(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg1_HlYi0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.requiresArg();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue3_Qery2() {
        Option option = new Option("option", "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs1_jzch0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean actual = option.hasArgs();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toDeprecatedString_1_XltR0() {
        Option opt = new Option("a", "aa", true, "aaa");
        String actual = opt.toDeprecatedString();
        String expected = "Option 'a': aaa";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toDeprecatedString_2_spEZ1() {
        Option opt = new Option("a", "aa", true, "aaa");
        opt.setLongOpt("aaa");
        String actual = opt.toDeprecatedString();
        String expected = "Option 'a' 'aaa': aaa";
        assertEquals(expected, actual);
    }
}