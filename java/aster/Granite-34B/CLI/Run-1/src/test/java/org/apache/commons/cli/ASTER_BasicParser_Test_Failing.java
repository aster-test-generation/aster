/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Failing {
    private BasicParser parser;
    private Options options;
    private Option option1;
    private Option option2;
    private OptionGroup optionGroup;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoOptions_ZdZU1() {
        BasicParser parser = new BasicParser();
        Options options = parser.getOptions();
        assertEquals(Collections.emptyList(), options.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOptions_OYtM2() {
        Options options = new Options();
        Option option = new Option("opt", "description");
        options.addOption(option);
        BasicParser parser = new BasicParser();
        assertEquals(Collections.singletonList(option), parser.getOptions().getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoLongOption_GZAC3() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        assertEquals(false, parser.getOptions().hasLongOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithLongOption_Zrmu4() {
        Options options = new Options();
        Option option = new Option("opt", "description");
        options.addOption(option);
        BasicParser parser = new BasicParser();
        assertEquals(true, parser.getOptions().hasLongOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoMatchingOptions_JBQR5() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        assertEquals(Collections.emptyList(), parser.getOptions().getMatchingOptions("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithMatchingOptions_zqpc6() {
        Options options = new Options();
        Option option1 = new Option("opt1", "description");
        Option option2 = new Option("opt2", "description");
        options.addOption(option1);
        options.addOption(option2);
        BasicParser parser = new BasicParser();
        assertEquals(Collections.singletonList(option1), parser.getOptions().getMatchingOptions("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoOption_SkIB7() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        assertEquals(null, parser.getOptions().getOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOption_koLF8() {
        Options options = new Options();
        Option option = new Option("opt", "description");
        options.addOption(option);
        BasicParser parser = new BasicParser();
        assertEquals(option, parser.getOptions().getOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoOptionGroup_ApIW9() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        assertEquals(null, parser.getOptions().getOptionGroup(new Option("opt", "description")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOptionGroup_IDOJ10() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        Option option = new Option("opt", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        BasicParser parser = new BasicParser();
        assertEquals(group, parser.getOptions().getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoShortOption_ZGna11() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        assertEquals(false, parser.getOptions().hasShortOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesWithUnrecognizedOption_SZUr2() throws ParseException {
        Properties properties = new Properties();
        properties.setProperty("option3", "value3");
        try {
            parser.processProperties(properties);
            fail("UnrecognizedOptionException should be thrown");
        } catch (UnrecognizedOptionException e) {
            assertEquals("option3", e.getOption());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesWithRequiredOptionNotSet_Qhaa3() throws ParseException {
        option1.setRequired(true);
        Properties properties = new Properties();
        properties.setProperty("option2", "value2");
        try {
            parser.processProperties(properties);
            fail("UnrecognizedOptionException should be thrown");
        } catch (UnrecognizedOptionException e) {
            assertEquals("option1", e.getOption());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesWithOptionGroupNotSet_eLDZ4() throws ParseException {
        option1.setRequired(true);
        Properties properties = new Properties();
        try {
            parser.processProperties(properties);
            fail("UnrecognizedOptionException should be thrown");
        } catch (UnrecognizedOptionException e) {
            assertEquals("option1", e.getOption());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_JteF0() throws MissingOptionException {
        BasicParser parser = new BasicParser();
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessArgs_bFHf0() throws ParseException {
        Option opt = new Option("option", "longOption", true, "description");
        ListIterator<String> iter = new ArrayList<String>().listIterator();
        BasicParser parser = new BasicParser();
        parser.processArgs(opt, iter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionStringStringStringIllegalArgumentException_hzYH4() throws ParseException {
        try {
            new Option(null, "aa", true, "aaa");
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
        try {
            new Option("a", null, true, "aaa");
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
        try {
            new Option("a", "aa", false, null);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionStringStringIllegalArgumentException_aLhH5() throws ParseException {
        try {
            new Option(null, true, "aaa");
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
        try {
            new Option("a", false, null);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionStringIllegalArgumentException_LmoM6() throws ParseException {
        try {
            new Option(null, "aaa");
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
        try {
            new Option("a", null);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_Wrer5() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = new String[]{"-o", "value", "arg1", "arg2"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new BasicParser().parse(options, arguments, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("o"));
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
        assertEquals(null, commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_FPnW0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        CommandLine commandLine = new BasicParser().parse(options, arguments);
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_withNoOptions_hqnd1() {
        BasicParser target = new BasicParser();
        List expected = new ArrayList();
        List actual = target.getRequiredOptions();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CTFY0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        CommandLine commandLine = new CommandLine();
        assertEquals(commandLine, new BasicParser().parse(options, arguments, properties));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_OptionsNull_AYja1() throws Exception {
        Options options = null;
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            new BasicParser().parse(options, arguments, properties, stopAtNonOption);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("options cannot be null.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_Wrer5_2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = new String[]{"-o", "value", "arg1", "arg2"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new BasicParser().parse(options, arguments, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_Wrer5_5() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = new String[]{"-o", "value", "arg1", "arg2"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new BasicParser().parse(options, arguments, stopAtNonOption);
        assertEquals(null, commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithShortOption_mygS12_KejG0() {
        Options options = new Options();
        Option option = new Option("o", "description");
        options.addOption(option);
        BasicParser parser = new BasicParser();
        assertEquals(true, parser.getOptions().hasShortOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOptionWithOption_VVbB1_JyXR0() throws ParseException {
        BasicParser parser = new BasicParser();
        Option option = new Option("arg", "description");
        ListIterator<String> iterator = null;
        try {
            parser.processOption("arg", iterator);
            assertTrue(parser.cmd.hasOption(option));
        } catch (UnrecognizedOptionException e) {
            fail("Exception not expected");
        }
    }
}