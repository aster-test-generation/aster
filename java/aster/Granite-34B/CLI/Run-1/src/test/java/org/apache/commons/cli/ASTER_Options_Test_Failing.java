/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_qiTz0() {
        Options options = new Options();
        assertTrue(options.hasLongOption("opt"));
        assertFalse(options.hasLongOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndOneMatching_DzyU7() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt1"));
        assertTrue(options.hasLongOption("opt2"));
        assertFalse(options.hasLongOption("opt3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndAllMatching_Pnyk8() {
        Options options = new Options();
        assertTrue(options.hasLongOption("opt1"));
        assertTrue(options.hasLongOption("opt2"));
        assertTrue(options.hasLongOption("opt3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_gPWf0() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertEquals(Collections.singletonList("clean"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_fxwK1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertTrue(result.contains("clean"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_IQCt2() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertTrue(result.size() == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOption_PBmw0() {
        Options options = new Options();
        Option option = options.getOption("s");
        assertEquals("short-option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOption_tivH1() {
        Options options = new Options();
        Option option = options.getOption("long-option");
        assertEquals("long-option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptions_indm0() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertNotNull(optionsList);
        assertTrue(optionsList.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_GmQT3() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option2.setArgs(2);
        option4.setArgs(3);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(4, options.getOptions().size());
        assertEquals(0, option1.getArgs());
        assertEquals(2, option2.getArgs());
        assertEquals(0, option3.getArgs());
        assertEquals(3, option4.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_bSyB1() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertNotNull(returnedOptionGroups);
        assertEquals(2, returnedOptionGroups.size());
        assertTrue(returnedOptionGroups.contains(optionGroup1));
        assertTrue(returnedOptionGroups.contains(optionGroup2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_WRal0() {
        Options options1 = new Options();
        Options options2 = new Options();
        options1.addOptions(options2);
        assertEquals(options1.getOptions(), options2.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithDuplicateKey_jdIe1() {
        Options options1 = new Options();
        Options options2 = new Options();
        options2.addOption("key", "value", true, "description");
        options1.addOptions(options2);
        assertEquals(options1.getOptions(), options2.getOptions());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_mnJJ0() {
        Options options = new Options();
        assertTrue(options.hasShortOption("opt"));
        assertFalse(options.hasShortOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_2_YWzi1() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("opt1", result.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_3_VJly2() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("opt1", result.get(0));
        assertEquals("opt2", result.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithCoverage_fVZh1() {
        Options options = new Options();
        options.addOption(null, null, false, null);
        options.addOption("", "", false, "");
        options.addOption("opt", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_qiTz0_1() {
        Options options = new Options();
        assertTrue(options.hasLongOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndOneMatching_DzyU7_2() {
        Options options = new Options();
        assertTrue(options.hasLongOption("opt2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndAllMatching_Pnyk8_1() {
        Options options = new Options();
        assertTrue(options.hasLongOption("opt1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithMultipleLongOptionsAndAllMatching_Pnyk8_3() {
        Options options = new Options();
        assertTrue(options.hasLongOption("opt3"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptions_indm0_2() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertTrue(optionsList.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_GmQT3_2() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option2.setArgs(2);
        option4.setArgs(3);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(0, option1.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_GmQT3_4() {
        Options options = new Options();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option("b", "beta", true, "Beta option");
        Option option3 = new Option("c", "gamma", false, "Gamma option");
        Option option4 = new Option("d", "delta", true, "Delta option");
        option2.setArgs(2);
        option4.setArgs(3);
        options.addOption(option1);
        options.addOption(option2);
        options.addOption(option3);
        options.addOption(option4);
        assertEquals(0, option3.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_bSyB1_2() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertEquals(2, returnedOptionGroups.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_bSyB1_3() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertTrue(returnedOptionGroups.contains(optionGroup1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_bSyB1_4() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertTrue(returnedOptionGroups.contains(optionGroup2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_mnJJ0_1() {
        Options options = new Options();
        assertTrue(options.hasShortOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_2_YWzi1_2() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertEquals(1, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_2_YWzi1_3() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertEquals("opt1", result.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_3_VJly2_2() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertEquals(2, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_3_VJly2_4() {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertEquals("opt2", result.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptions_fAnR0_vIXx0_2() {
        Options options = new Options();
        List<Option> helpOptions = options.helpOptions();
        for (Option option : helpOptions) {
        }
        assertTrue(helpOptions.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ZjPX0_yOek0() {
        Options options = new Options();
        options.addOption("opt", "description");
        String actual = options.toString();
        String expected = "[ Options: [ short opt ] [ long null ] ]";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithShortOpts_USkD1_INDO0() {
        Options options = new Options();
        options.addOption("a", null, false, null);
        options.addOption("b", null, false, null);
        options.addOption("c", null, false, null);
        String actual = options.toString();
        String expected = "[ Options: [ short [a, b, c] ] [ long null ] ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOpts_phsZ2_Qgla0() {
        Options options = new Options();
        options.addOption("alpha", "beta", false, "gamma");
        String actual = options.toString();
        String expected = "[ Options: [ short null ] [ long [alpha, beta] ] ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBothShortAndLongOpts_jSJw3_sCjH0() {
        Options options = new Options();
        options.addOption("a", "alpha", false, "description");
        options.addOption("b", "beta", false, "description");
        options.addOption("c", "gamma", false, "description");
        String actual = options.toString();
        String expected = "[ Options: [ short [a, b, c] ] [ long [alpha, beta, gamma] ] ]";
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullShortOpts_GrTs5_nuYT0() {
        Options options = new Options();
        options.addOption(null, null, false, null);
        String actual = options.toString();
        String expected = "[ Options: [ short null ] [ long null ] ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyShortOpts_KaMt7_MIke0() {
        Options options = new Options();
        options.addOption(null, null, false, null);
        String actual = options.toString();
        String expected = "[ Options: [ short [] ] [ long null ] ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyLongOpts_ctSb8_Kabw0() {
        Options options = new Options();
        options.addOption(null, null, false, null);
        String actual = options.toString();
        String expected = "[ Options: [ short null ] [ long [] ] ]";
        assertEquals(expected, actual);
    }
}