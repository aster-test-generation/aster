/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_ASRR0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int expected = 3; // Replace with the expected value
        int actual = helpFormatter.getDescPadding();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithZeroInput_qSXv1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = 0;
        int expected = 0;
        int actual = helpFormatter.getDescPadding();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithNegativeInput_YSqK2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = -5;
        int expected = -5; // Replace with the expected value
        int actual = helpFormatter.getDescPadding();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithPositiveInput_qpFG3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = 10;
        int expected = 10;
        int actual = helpFormatter.getDescPadding();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_Qdkg0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_0_kiEK1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_1_pede2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_2_PIeQ3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_3_qXhG4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_4_aquz5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_5_NIvZ6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_6_GHaS7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(6);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_7_RONA8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(7);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_8_AGZK9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(8);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_9_VdTW10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(9);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_10_Hxaf11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_11_mnfj12() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(11);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_12_CnlL13() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(12);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setWidthTest_13_zCio14() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(13);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_GRxt0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.getLongOptSeparator();
        String expected = " ";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparatorCoverage_SFot1_1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.getLongOptSeparator();
        String expected = " ";
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        actual = helpFormatter.getLongOptSeparator();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_rbjp0() {
        Options options = new Options();
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("cmdLineSyntax", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithLongOption_sWmx2() {
        Options options = new Options();
        options.addOption("longOption", true, "This is a long option");
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("cmdLineSyntax", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithOptionGroup_CkIw4() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("option1", true, "This is option 1"));
        group.addOption(new Option("option2", true, "This is option 2"));
        options.addOptionGroup(group);
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("cmdLineSyntax", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextWithZeroWidth_fwIR3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 0;
        int nextLineTabStop = 5;
        String text = "This is a sample text to test the renderWrappedText method";
        StringBuffer expected = new StringBuffer();
        expected.append("This is a sample text to test the renderWrappedText method");
        assertEquals(expected, helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithLf_pLdS0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string with a newline character at the end.\n";
        int width = 30;
        int startPos = 0;
        int expected = 28;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithTab_rYnU1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string with a tab character at the end.\t";
        int width = 30;
        int startPos = 0;
        int expected = 28;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithNoWrap_todc2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string that does not need to be wrapped.";
        int width = 30;
        int startPos = 0;
        int expected = 26;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithWrap_DAPd3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string that needs to be wrapped.";
        int width = 30;
        int startPos = 0;
        int expected = 26;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPosWithStartPos_NDcu4() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string that needs to be wrapped.";
        int width = 30;
        int startPos = 10;
        int expected = 38;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setArgNameTest_yNPc0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setArgName("name");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setArgNameTest_Null_OWri1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setArgName(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setArgNameTest_Empty_RZtZ2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setArgName("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_gYnk0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_0_pIKC1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_1_mKiL2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_2_sFvS3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_3_igBv4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_4_HMbn5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_5_uXGs6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_6_Kmvm7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(6);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_7_BRhR8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(7);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_8_uIAj9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(8);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_9_YgRT10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(9);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_11_pBho12() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(11);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_12_ufLv13() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(12);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_13_oHKi14() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(13);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setLeftPaddingTest_14_wIzM15() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(14);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_Wykw0() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "footer";
        boolean autoUsage = true;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoAutoUsage_wnKt1() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "footer";
        boolean autoUsage = false;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoFooter_fHwu2() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "";
        boolean autoUsage = true;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoHeader_aFdb3() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "command line syntax";
        String header = "";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "footer";
        boolean autoUsage = true;
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoCmdLineSyntax_yPUe5() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "";
        String header = "header";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "footer";
        boolean autoUsage = true;
        try {
            formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionComparator_YYhe0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setOptionComparator(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_SggK0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        options.addOption("opt2", "longOpt2", false, "description2");
        options.addOptionGroup(new OptionGroup().addOption(new Option("opt3", "longOpt3", false, "description3")));
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("cmdLineSyntax", options, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_NRqh0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.createPadding(10);
        String expected = "          ";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithZeroLength_Slsr2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.createPadding(0);
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_mrKu0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        int width = 100;
        formatter.printHelp(width, cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorCoverage_SVOz1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator(null);
        helpFormatter.setLongOptSeparator("");
        helpFormatter.setLongOptSeparator("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_iJzz0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "test";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withEmptyInput_dTpw1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withNullInput_OjQk2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = null;
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withMultipleLines_arxQ3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "first line\nsecond line";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withTabs_Ntts4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "first\tsecond";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withSpecialCharacters_srzB5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "!";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withCombiningDiacriticalMarks_bZTV8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "a";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withCombiningDiacriticalMarksAndTabs_KqJn11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "a\t";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withCombiningDiacriticalMarksAndNewLines_Wjbv12() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "a\n";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setNewLineTest_withCombiningDiacriticalMarksAndSpecialCharacters_ZVBE13() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "a!";
        helpFormatter.setNewLine(newline);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_syRM0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String syntaxPrefix = helpFormatter.getSyntaxPrefix();
        assertEquals("usage: ", syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefixWithEmptySyntaxPrefix_Dqqm1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultSyntaxPrefix = "";
        String syntaxPrefix = helpFormatter.getSyntaxPrefix();
        assertEquals("", syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefixWithNonEmptySyntaxPrefix_dPEF2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultSyntaxPrefix = "Usage: ";
        String syntaxPrefix = helpFormatter.getSyntaxPrefix();
        assertEquals("Usage: ", syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefixWithNullSyntaxPrefix_NmfL3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultSyntaxPrefix = null;
        String syntaxPrefix = helpFormatter.getSyntaxPrefix();
        assertNull(syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_jEeB0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        formatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_xdAn0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newLine = helpFormatter.getNewLine();
        assertEquals(System.getProperty("line.separator"), newLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_xUru0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix("testPrefix");
        assertEquals("testPrefix", formatter.defaultLongOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixCoverage_EQmp1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix(null);
        formatter.setLongOptPrefix("");
        formatter.setLongOptPrefix("testPrefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getArgNameTest_XxEs0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String argName = helpFormatter.getArgName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_AMRu0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> optionComparator = helpFormatter.getOptionComparator();
        assertEquals(optionComparator, helpFormatter.getOptionComparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorCoverage_ZQSH1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.getOptionComparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_TJeP0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        int width = 100;
        boolean autoUsage = true;
        helpFormatter.printHelp(width, cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_bJGB0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "testPrefix";
        helpFormatter.setOptPrefix(prefix);
        assertEquals(prefix, helpFormatter.defaultOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefixCoverage_HwQe1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setOptPrefix(null);
        helpFormatter.setOptPrefix("");
        helpFormatter.setOptPrefix("testPrefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setDescPaddingTest_EtIU0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setDescPaddingTest_0_OcaL1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setDescPaddingTest_negative_AwYN2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setDescPaddingTest_maxValue_wTwR3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setDescPaddingTest_minValue_XEAa4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_EzLT0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 1; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_lxzE3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = Integer.MAX_VALUE; // Replace with the expected value
    }

    @Test
    @Timeout(value = -2147483648, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_wZNL4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = Integer.MIN_VALUE; // Replace with the expected value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefixCoverage_Kajr1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.getLongOptPrefix();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNullInput_HoIz0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithEmptyInput_rBnK1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNoTrailingWhitespace_fYYS2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String input = "Hello World";
        String result = helpFormatter.rtrim(input);
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithTrailingWhitespace_lPym3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String input = "Hello World  ";
        String expected = "Hello World";
        String result = helpFormatter.rtrim(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_CLdx0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("testPrefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_NullPrefix_znwY1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_EmptyPrefix_jJUD2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_ValidPrefix_Obbv3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("validPrefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_LongPrefix_gqMY4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("ThisIsAVeryLongPrefixThatWillProbablyCauseAnException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_InvalidPrefix_xBdf5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("!@#$%^&*()_+");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_PrefixWithSpecialCharacters_MYLj6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("Prefix-With_Special.Characters");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_PrefixWithNumbers_LupV7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("Prefix123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_PrefixWithCamelCase_OUIG9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("PrefixWithCamelCase");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_PrefixWithPascalCase_ksRp10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("PrefixWithPascalCase");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_PrefixWithSnakeCase_qtXJ11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("prefix_with_snake_case");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_PrefixWithHyphenCase_LYmy12() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("prefix-with-hyphen-case");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setSyntaxPrefixTest_PrefixWithTrainCase_mRBR13() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("Prefix-With-Train-Case");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AEch0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_GSIU0() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer);
    }
}