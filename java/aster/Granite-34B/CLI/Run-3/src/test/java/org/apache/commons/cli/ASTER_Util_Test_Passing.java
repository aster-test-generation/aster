/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Util_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_null_gSIl0() throws Exception {
        String result = Util.stripLeadingHyphens(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_empty_hgqg1() throws Exception {
        String result = Util.stripLeadingHyphens("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_singleHyphen_IaVB2() throws Exception {
        String result = Util.stripLeadingHyphens("-");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_doubleHyphens_iMIG3() throws Exception {
        String result = Util.stripLeadingHyphens("--");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_noChange_cNnq4() throws Exception {
        String result = Util.stripLeadingHyphens("test");
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testStripLeadingAndTrailingQuotes_WithNullInput_ReturnsNull_bJce0() throws Exception {
        String input = null;
        String expected = null;
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testStripLeadingAndTrailingQuotes_WithoutQuotes_ReturnsSameString_zBjW1() throws Exception {
        String input = "test";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testStripLeadingAndTrailingQuotes_WithSingleQuotes_ReturnsInnerString_KrPM2() throws Exception {
        String input = "'test'";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testStripLeadingAndTrailingQuotes_WithDoubleQuotes_ReturnsInnerString_JVlA3() throws Exception {
        String input = "\"test\"";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testStripLeadingAndTrailingQuotes_WithBothQuotes_ReturnsInnerString_JvTC4() throws Exception {
        String input = "\"'test'\"";
        String expected = "'test'";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testStripLeadingAndTrailingQuotes_WithQuotesInsideString_ReturnsSameString_tOLb5() throws Exception {
        String input = "\"test\"\"test\"";
        String expected = "\"test\"\"test\"";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        assert actual.equals(expected);
    }
}