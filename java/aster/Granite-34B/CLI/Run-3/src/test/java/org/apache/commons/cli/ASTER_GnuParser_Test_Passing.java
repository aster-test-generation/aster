/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_CYXb0() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "b", "-c", "d"};
        boolean stopAtNonOption = true;
        String[] expected = {"-a", "b", "-c", "d"};
        String[] actual = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithLongOption_RFdS1() throws Exception {
        Options options = new Options();
        options.addOption("a", "long-a", false, "Description of option A");
        String[] arguments = {"--long-a", "b", "-c", "d"};
        boolean stopAtNonOption = true;
        String[] expected = {"--long-a", "b", "-c", "d"};
        String[] actual = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithRequiredOption_EGTq2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "long-a", true, "Description of required option A");
        String[] arguments = {"--long-a", "b", "-c", "d"};
        boolean stopAtNonOption = true;
        String[] expected = {"--long-a", "b", "-c", "d"};
        String[] actual = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithNonOption_sZzF3() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "b", "-c", "d"};
        boolean stopAtNonOption = false;
        String[] expected = {"-a", "b", "-c", "d"};
        String[] actual = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOption_QqDh4() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "b", "-c", "d"};
        boolean stopAtNonOption = true;
        String[] expected = {"-a", "b"};
        String[] actual = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithEqualSign_MqBT5() throws Exception {
        Options options = new Options();
        options.addOption("a", "long-a", true, "Description of option A");
        String[] arguments = {"--long-a=b", "-c", "d"};
        boolean stopAtNonOption = true;
        String[] expected = {"--long-a", "b", "-c", "d"};
        String[] actual = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithDoubleHyphen_euUp7() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "b", "--", "-c", "d"};
        boolean stopAtNonOption = true;
        String[] expected = {"-a", "b", "--", "-c", "d"};
        String[] actual = new GnuParser().flatten(options, arguments, stopAtNonOption);
        assertEquals(expected, actual);
    }
}