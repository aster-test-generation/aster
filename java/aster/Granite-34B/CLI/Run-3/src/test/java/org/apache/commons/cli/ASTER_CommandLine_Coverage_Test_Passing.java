/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Coverage_Test_Passing {
    CommandLine commandLine = new CommandLine();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNullOption_tvct0() {
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void addArgWithNotNull_ipcO0() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void addArgWithNull_LZqh1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionObject_pIlU0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject('x');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Hznu0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getOptionValue(option, defaultValue);
        String expected = "default";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_oeii0() {
        CommandLine cmd = new CommandLine();
        Option opt = new Option("a", "aa", true, "desc");
        cmd.addOption(opt);
        Option option = new Option("a", "aa", true, "desc");
        Properties props = cmd.getOptionProperties(option);
        assertEquals(props.size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetParsedOptionValue_hdLw1() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_GQTM4_OsYb0() {
        CommandLine commandLine = new CommandLine();
        List<String> values = new ArrayList<>();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(0, props.size());
    }
}