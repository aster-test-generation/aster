/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    HelpFormatter helpformatter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_Xlsw0_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 0;
        int expected = 11;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_RNSF1_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 15;
        int startPos = 0;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_WLyH2_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 20;
        int startPos = 0;
        int expected = 20;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_zxoS3_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 5;
        int startPos = 0;
        int expected = 5;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_zyKS4_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 10;
        int expected = 20;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_IaCX6_fid2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 5;
        int expected = 15;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_wWlT0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("", helpFormatter.rtrim(""));
        assertEquals("a", helpFormatter.rtrim("a"));
        assertEquals("a ", helpFormatter.rtrim("a "));
        assertEquals(" a", helpFormatter.rtrim(" a"));
        assertEquals(" a ", helpFormatter.rtrim(" a "));
        assertEquals("  a", helpFormatter.rtrim("  a"));
        assertEquals("a  ", helpFormatter.rtrim("a  "));
        assertEquals("  a  ", helpFormatter.rtrim("  a  "));
        assertEquals("This is a test", helpFormatter.rtrim("This is a test"));
        assertEquals("This is a test with spaces", helpFormatter.rtrim("This is a test with spaces"));
    }
}