/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    CommandLine commandline;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ZGmN0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option[] expectedOptions = Option.EMPTY_ARRAY;
        Option[] actualOptions = commandLine.getOptions();
        assertArrayEquals(expectedOptions, actualOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_angO0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String optionValue = commandLine.getOptionValue(option, "default");
        assertEquals("default", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_tcfo0() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_vSLD0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        boolean result = commandLine.hasOption(option);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_BvqR0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOptionObjectTest1_LUtp0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Object result = commandLine.getOptionObject(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionProperties_sQRv0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Properties properties = commandLine.getOptionProperties(option);
        assertNotNull(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionPropertiesWithEmptyOption_ngGF2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", "", false, "");
        Properties properties = commandLine.getOptionProperties(option);
        assertNotNull(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_pHMl0() throws Exception {
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionPropertiesTest1_Kahp0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Properties props = commandLine.getOptionProperties(opt);
        Assertions.assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionPropertiesTest2_JBOR1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Properties props = commandLine.getOptionProperties(opt);
        Assertions.assertTrue(props.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionPropertiesTest3_PACN2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Properties props = commandLine.getOptionProperties(opt);
        Assertions.assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionPropertiesTest4_Flrm3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Properties props = commandLine.getOptionProperties(opt);
        Assertions.assertNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_SwOl0_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertNotNull(argList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_SwOl0_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertTrue(argList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_qaLw0() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_ulrg0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] expected = new String[]{"value1", "value2"};
        String[] actual = commandLine.getOptionValues('x');
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithCoverage_OfDO1_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] expected = new String[]{"value1", "value2"};
        String[] actual = commandLine.getOptionValues('x');
        expected = new String[]{"value3"};
        actual = commandLine.getOptionValues('y');
        expected = new String[]{"value4", "value5"};
        actual = commandLine.getOptionValues('z');
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_aOKe0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "example";
        String defaultValue = "default";
        String result = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withCharAndDefault_fEQa0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('x', "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_withStringAndDefault_dojz2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue("abc", "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndSupplier_uWBA0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "validOption";
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndSupplier_QhDg1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "invalidOption";
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithValidOptionAndDefault_zgkH2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "validOption";
        String defaultValue = "default";
        String result = commandLine.getOptionValue(option, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOptionAndDefault_gOUf3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String option = "invalidOption";
        String defaultValue = "default";
        String result = commandLine.getOptionValue(option, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_tHSf0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] actual = commandLine.getOptionValues("opt");
        String[] expected = new String[]{"value1", "value2"};
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithEmptyArray_zkjh1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] actual = commandLine.getOptionValues("empty");
        String[] expected = new String[]{};
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_SxCi0() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        Supplier<Object> defaultValue = () -> new Object();
        CommandLine commandLine = new CommandLine();
        Object actual = commandLine.getParsedOptionValue(option, defaultValue);
        Object expected = new Object();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_kxFx0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String value = commandLine.getOptionValue(option);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_WGlb0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        try {
            Object result = commandLine.getParsedOptionValue(option);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_EjmD1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", true, "description");
        try {
            Object result = commandLine.getParsedOptionValue(option);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_dAbL2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "description");
        try {
            Object result = commandLine.getParsedOptionValue(option);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_ifas0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues(option);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_FTra0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithEmptyChar_FHCl1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('\0');
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullChar_TLVo2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('\u0000');
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNegativeChar_tMmX3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('\u0001');
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithPositiveChar_HWhu4() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('\u007F');
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithHighChar_hJSC5() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('\u0080');
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithLowChar_Pygo6() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('\u00FF');
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithFullChar_Kxmg7() throws Exception {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('\uFFFF');
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Cxub0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_DQJd1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result.length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_ZaXt2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result == Util.EMPTY_STRING_ARRAY;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_vLHi3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result != Util.EMPTY_STRING_ARRAY;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_SZJP4() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result != null;
        assert result.length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_rrym5() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result != null;
        assert result == Util.EMPTY_STRING_ARRAY;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_QsHQ6() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_DCqb8() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result != Util.EMPTY_STRING_ARRAY;
        assert result.length == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_zYMf9() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assert result != null;
        assert result != Util.EMPTY_STRING_ARRAY;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_TqCT0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        Supplier<Object> defaultValue = () -> null;
        Object expected = commandLine.getParsedOptionValue(opt, defaultValue);
        Object actual = null; // replace with actual value
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_RkxI0() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_wqcm1() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'b';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_AmHO2() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'c';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_WFVo3() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'd';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_gZMZ4() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'e';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_wwsE5() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'f';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_RoVK6() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'g';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_igTQ7() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'h';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_ZOaR8() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'i';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_gtqn9() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'j';
        Object defaultValue = new Object();
        try {
            Object result = commandLine.getParsedOptionValue(opt, defaultValue);
            assertNotNull(result);
        } catch (ParseException e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getParsedOptionValue_with_default_value_and_no_converter_lbMz0() throws ParseException {
        Option option = Option.builder("a").hasArg(true).build();
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getParsedOptionValue_with_no_default_value_and_no_converter_Ecvp2() throws ParseException {
        Option option = Option.builder("a").hasArg(true).build();
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getParsedOptionValue(option);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getParsedOptionValue_with_no_default_value_and_no_converter_and_type_mismatch_RjDq6() throws ParseException {
        Option option = Option.builder("a").hasArg(true).build();
        CommandLine commandLine = new CommandLine();
        boolean actual = false;
        try {
            commandLine.getParsedOptionValue(option);
        } catch (ParseException e) {
            actual = true;
        }
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionNameAsNull_shouldReturnDefaultValue_EhuJ0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String optionName = null;
        String defaultValue = "default";
        String result = commandLine.getParsedOptionValue(optionName, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionNameAsString_shouldReturnDefaultValue_TtKF1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String optionName = "option";
        String defaultValue = "default";
        String result = commandLine.getParsedOptionValue(optionName, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionNameAsStringAndOptionValueAsString_shouldReturnOptionValue_udCU2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String optionName = "option";
        String optionValue = "value";
        String result = commandLine.getParsedOptionValue(optionName, optionValue);
        assertEquals(optionValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionNameAsStringAndOptionValueAsBooleanArray_shouldReturnOptionValueAsString_MPpu9() throws ParseException {
        CommandLine commandLine = new CommandLine();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionValueTest1_Ilix0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionValueTest2_jLWQ1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String result = commandLine.getOptionValue(option);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionValueTest1_QYHO2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String result = commandLine.getOptionValue(option, () -> "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionValueTest1_RWit4() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String result = commandLine.getOptionValue(option, "default");
        assertEquals("default", result);
    }
}