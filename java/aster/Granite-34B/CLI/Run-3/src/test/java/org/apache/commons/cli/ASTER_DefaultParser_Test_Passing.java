/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    private DefaultParser defaultparser;
    private CommandLine cmd;
    private List<String> expectedOpts;
    private List<OptionGroup> optionGroups;
    private List<String> arguments;
    private Properties properties;
    private boolean stopAtNonOption;
    private boolean skipParsing;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIndexOfEqual_QTEd0() throws Exception {
        String token = "example=test";
        int expected = 7;
        int actual = DefaultParser.indexOfEqual(token);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithExpectedOpts_OFCd0() throws Exception {
        DefaultParser parser = new DefaultParser(true);
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithoutExpectedOpts_GDeP1() throws Exception {
        DefaultParser parser = new DefaultParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultParser_ReFo1() throws Exception {
        DefaultParser defaultParser = new DefaultParser();
        assertNotNull(defaultParser);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultParser2_aagL2() throws Exception {
        boolean allowPartialMatching = false;
        DefaultParser defaultParser = new DefaultParser(allowPartialMatching);
        assertNotNull(defaultParser);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_gDyH0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_NJLi0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_HQWK0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_eFTG1() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_gIPo2() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void handleConcatenatedOptionsTest1_xchB0() throws ParseException {
        final DefaultParser parser = new DefaultParser();
        final String token = "token";
        parser.handleConcatenatedOptions(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_gQrZ0() throws Exception {
        DefaultParser parser = new DefaultParser();
        String[] args = {};
        Properties props = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = null;
        try {
            cmd = parser.parse(null, args, props, stopAtNonOption);
        } catch (ParseException e) {
            fail("Failed with unexpected exception");
        }
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_knuu1() throws Exception {
        DefaultParser parser = new DefaultParser();
        String[] args = {};
        Properties props = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = null;
        try {
            cmd = parser.parse(new Options(), args, props, stopAtNonOption);
        } catch (ParseException e) {
            fail("Failed with unexpected exception");
        }
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArgs_shhT2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options opts = new Options();
        Properties props = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = null;
        try {
            cmd = parser.parse(opts, null, props, stopAtNonOption);
        } catch (ParseException e) {
            fail("Failed with unexpected exception");
        }
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArgs_XAmn3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options opts = new Options();
        Properties props = null;
        boolean stopAtNonOption = false;
        CommandLine cmd = null;
        try {
            cmd = parser.parse(opts, new String[]{}, props, stopAtNonOption);
        } catch (ParseException e) {
            fail("Failed with unexpected exception");
        }
        assertNotNull(cmd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_fznd0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_fznd0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties);
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingOption_FNLk1() throws Exception {
        Options options = new Options();
        options.addOption("a", true, "Option A");
        String[] arguments = {"-b", "2"};
        Properties properties = new Properties();
        try {
            new DefaultParser().parse(options, arguments, properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_WUZd2() throws Exception {
        Options options = new Options();
        options.addOption("a", true, "Option A");
        String[] arguments = {"-b", "2", "-c"};
        Properties properties = new Properties();
        try {
            new DefaultParser().parse(options, arguments, properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unexpected option: -c", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_khvD0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_khvD0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertNotEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_khvD0_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_khvD0_4() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_CoCv1_1() throws ParseException {
        Options options = new Options();
        options.addOption("option", "description");
        String[] arguments = new String[]{"-option", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_CoCv1_2() throws ParseException {
        Options options = new Options();
        options.addOption("option", "description");
        String[] arguments = new String[]{"-option", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_jczj3_1() throws ParseException {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("option1", "description1"));
        optionGroup.addOption(new Option("option2", "description2"));
        options.addOptionGroup(optionGroup);
        String[] arguments = new String[]{"-option1", "value1"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_jczj3_2() throws ParseException {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("option1", "description1"));
        optionGroup.addOption(new Option("option2", "description2"));
        options.addOptionGroup(optionGroup);
        String[] arguments = new String[]{"-option1", "value1"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_jczj3_3() throws ParseException {
        Options options = new Options();
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("option1", "description1"));
        optionGroup.addOption(new Option("option2", "description2"));
        options.addOptionGroup(optionGroup);
        String[] arguments = new String[]{"-option1", "value1"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertNull(commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_valt4_1() throws ParseException {
        Options options = new Options();
        options.addOption("option", "description");
        String[] arguments = new String[]{"-opt"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_Uesf0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_wamD1_1() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_wamD1_2() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_wamD1_3() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_xXKA2_1() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "2", "-b", "3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getArgs().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_xXKA2_2() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "2", "-b", "3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_xXKA2_3() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "1", "2", "-b", "3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(null, commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hTVE3_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {};
        Properties properties = new Properties();
        properties.setProperty("alpha", "1");
        properties.setProperty("beta", "2");
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_hTVE3_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {};
        Properties properties = new Properties();
        properties.setProperty("alpha", "1");
        properties.setProperty("beta", "2");
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_HBGM0_1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_HBGM0_2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertArrayEquals(arguments, commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_HBGM0_4() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption('o'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_HBGM0_5() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertFalse(commandLine.hasOption('f'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingRequiredOption_wPVh1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "Option");
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: o", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_zgoM2() throws Exception {
        Options options = new Options();
        options.addOption("o", "option", true, "Option");
        String[] arguments = new String[]{"arg1", "-x"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Invalid option: -x", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_oSHr3_1() throws Exception {
        Options options = new Options();
        options.addOption("o", "option", true, "Option");
        String[] arguments = new String[]{"arg1", "-x", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_oSHr3_2() throws Exception {
        Options options = new Options();
        options.addOption("o", "option", true, "Option");
        String[] arguments = new String[]{"arg1", "-x", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertArrayEquals(new String[]{"arg1"}, commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_oSHr3_4() throws Exception {
        Options options = new Options();
        options.addOption("o", "option", true, "Option");
        String[] arguments = new String[]{"arg1", "-x", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertFalse(commandLine.hasOption('o'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iiAv0_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] args = {"-a", "-b", "beta-value"};
        CommandLine commandLine = new DefaultParser().parse(options, args);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_iiAv0_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] args = {"-a", "-b", "beta-value"};
        CommandLine commandLine = new DefaultParser().parse(options, args);
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UDjP1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] args = {"-a", "-b", "beta-value", "--", "-c", "-d"};
        CommandLine commandLine = new DefaultParser().parse(options, args, true);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UDjP1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] args = {"-a", "-b", "beta-value", "--", "-c", "-d"};
        CommandLine commandLine = new DefaultParser().parse(options, args, true);
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UDjP1_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] args = {"-a", "-b", "beta-value", "--", "-c", "-d"};
        CommandLine commandLine = new DefaultParser().parse(options, args, true);
        assertEquals(Arrays.asList("-c", "-d"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_HGvJ2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] args = {};
        try {
            new DefaultParser().parse(options, args);
        } catch (Exception e) {
            assertEquals("Missing required option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_KNTh3() throws Exception {
        Options options = new Options();
        options.addOptionGroup(new OptionGroup()
                .addOption(Option.builder("a").longOpt("alpha").build())
                .addOption(Option.builder("b").longOpt("beta").build()));
        String[] args = {"-a"};
        CommandLine commandLine = new DefaultParser().parse(options, args);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_bmdI0() throws Exception {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(Arrays.asList("arg1", "arg2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_CUaB1() throws Exception {
        Options options = new Options();
        options.addOption("l", "long-option", true, "Long option with argument");
        String[] arguments = {"--long-option", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_NXHb2() throws Exception {
        Options options = new Options();
        options.addOption("s", "short-option", true, "Short option with argument");
        String[] arguments = {"-s", "arg"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg", commandLine.getOptionValue("short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_IIRh3() throws Exception {
        Options options = new Options();
        options.addRequiredOption("r", "required-option", true, "Required option with argument");
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            assertEquals("Missing required option: r", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_wZUo4() throws Exception {
        Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        String[] arguments = {"-o", "arg", "non-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(Arrays.asList("-o", "arg"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_nyFd0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_sIzT1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_sIzT1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Fqfp2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Fqfp2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Fqfp2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("b", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_Fqfp2_4() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("c", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ejEG3_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ejEG3_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ejEG3_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ejEG3_4() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        properties.setProperty("c", "3");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("3", commandLine.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_nppI4_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "non-option", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_nppI4_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "non-option", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_nppI4_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "non-option", "-c"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("b", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParse_null_options_nizU0() throws Exception {
        assertThrows(NullPointerException.class, () -> new DefaultParser().parse(null, new String[]{}, new Properties(), false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParse_null_arguments_yhUi1() throws Exception {
        assertThrows(NullPointerException.class, () -> new DefaultParser().parse(new Options(), null, new Properties(), false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParse_null_properties_ThBo2() throws Exception {
        assertThrows(NullPointerException.class, () -> new DefaultParser().parse(new Options(), new String[]{}, null, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_MUXv0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_ccCI1_1() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_ccCI1_2() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_qArd2_1() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_qArd2_2() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_qArd2_3() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("b", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_oYQZ3() throws Exception {
        Options options = new Options();
        options.addOption("a", "long-a", false, "Description of option A");
        String[] arguments = {"--long-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_vzYS4() throws Exception {
        Options options = new Options();
        options.addOption("a", "long-a", false, "Description of option A");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOptionAndOneArgument_PPLF5_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "long-a", true, "Description of option A");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOptionAndOneArgument_PPLF5_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "long-a", true, "Description of option A");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithNoOptions_NKtr0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOption_EBPE1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Description of alpha");
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatRequiresAnArgument_EgZr2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatRequiresAnArgument_EgZr2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAlias_hakS3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Description of alpha");
        options.addOption("b", "beta", false, "Description of beta");
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAlias_hakS3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Description of alpha");
        options.addOption("b", "beta", false, "Description of beta");
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAlias_hakS3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Description of alpha");
        options.addOption("b", "beta", false, "Description of beta");
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAlias_hakS3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Description of alpha");
        options.addOption("b", "beta", false, "Description of beta");
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAliasThatRequiresAnArgument_Kxqt4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        options.addOption("b", "beta", true, "Description of beta");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAliasThatRequiresAnArgument_Kxqt4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        options.addOption("b", "beta", true, "Description of beta");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAliasThatRequiresAnArgument_Kxqt4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        options.addOption("b", "beta", true, "Description of beta");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAliasThatRequiresAnArgument_Kxqt4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        options.addOption("b", "beta", true, "Description of beta");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAliasThatRequiresAnArgument_Kxqt4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        options.addOption("b", "beta", true, "Description of beta");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAliasThatRequiresAnArgument_Kxqt4_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        options.addOption("b", "beta", true, "Description of beta");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAliasThatRequiresAnArgument_Kxqt4_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        options.addOption("b", "beta", true, "Description of beta");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneOptionThatHasAnAliasThatRequiresAnArgument_Kxqt4_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Description of alpha");
        options.addOption("b", "beta", true, "Description of beta");
        final String[] arguments = {"-a", "value"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_MnAS0_1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_MnAS0_2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_MnAS0_3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_vNxL1() throws Exception {
        Options options = new Options();
        options.addOption("long-option", true, "This is a long option");
        String[] arguments = new String[]{"--long-option", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_ThUY2() throws Exception {
        Options options = new Options();
        options.addOption("short-option", true, "This is a short option");
        String[] arguments = new String[]{"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_WOCD3() throws Exception {
        Options options = new Options();
        options.addOption("option", true, "This is an option");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("option", "value");
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NCpY4_1() throws Exception {
        Options options = new Options();
        options.addOption("option", true, "This is an option");
        String[] arguments = new String[]{"arg1", "--option", "value", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NCpY4_2() throws Exception {
        Options options = new Options();
        options.addOption("option", true, "This is an option");
        String[] arguments = new String[]{"arg1", "--option", "value", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NCpY4_3() throws Exception {
        Options options = new Options();
        options.addOption("option", true, "This is an option");
        String[] arguments = new String[]{"arg1", "--option", "value", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_uPiK1_1() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getArgs().length == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_uPiK1_2() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getArgs()[0].equals("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_BmZU2_1() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getArgs().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_BmZU2_2() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getArgs()[0].equals("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_BmZU2_3() throws Exception {
        Options options = new Options();
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getArgs()[1].equals("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_ilyn3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--alpha"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_yMSu4() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_YMKv5_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_YMKv5_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getOptionValue("a").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentUsingLongForm_hljP6_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentUsingLongForm_hljP6_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"--alpha", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getOptionValue("alpha").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentUsingProperties_rsDb7_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value");
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgumentUsingProperties_rsDb7_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {};
        Properties properties = new Properties();
        properties.setProperty("alpha", "value");
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.getOptionValue("alpha").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsStringArrayPropertiesBoolean_uhrZ0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertLinesMatch(Arrays.asList("1", "2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsStringArray_rSRC1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertLinesMatch(Arrays.asList("1", "2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsStringArrayBoolean_AskP2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, stopAtNonOption);
        assertLinesMatch(Arrays.asList("1", "2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionsStringArrayProperties_Yufr3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties);
        assertLinesMatch(Arrays.asList("1", "2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_VaGt0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_BVaR1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_BVaR1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_mFvz2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_mFvz2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_mFvz2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_Vbkr3() throws Exception {
        final Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        final String[] arguments = {"--long-option", "value"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("long-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_PgYM4() throws Exception {
        final Options options = new Options();
        options.addOption("s", "short-option", true, "This is a short option");
        final String[] arguments = {"-s", "value"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("short-option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_mPpo5_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_mPpo5_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_mPpo5_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_mQHZ6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_mQHZ6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_mQHZ6_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_mQHZ6_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_udeQ7_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_udeQ7_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_udeQ7_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_udeQ7_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndProperties_bsuZ8() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "This is an option");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
    }
}