/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOptionAndNoMatchingOptions_wEpd0() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        String[] arguments = {"-x", "-y", "-z"};
        PosixParser posixParser = new PosixParser();
        try {
            String[] result = posixParser.flatten(options, arguments, true);
            assertNotEquals(result, Util.EMPTY_STRING_ARRAY);
            assertEquals(result.length, arguments.length);
            for (String token : result) {
                assertTrue(Arrays.asList(arguments).contains(token));
            }
        } catch (ParseException e) {
            fail("Exception not expected");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithoutStopAtNonOptionAndNoMatchingOptions_SZYF1() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        String[] arguments = {"-x", "-y", "-z"};
        PosixParser posixParser = new PosixParser();
        try {
            String[] result = posixParser.flatten(options, arguments, false);
            assertNotEquals(result, Util.EMPTY_STRING_ARRAY);
            assertEquals(result.length, arguments.length);
            for (String token : result) {
                assertTrue(Arrays.asList(arguments).contains(token));
            }
        } catch (ParseException e) {
            fail("Exception not expected");
        }
    }
}