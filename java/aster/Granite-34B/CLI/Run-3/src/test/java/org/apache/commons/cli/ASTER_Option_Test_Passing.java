/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_UqSh0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_hASP0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithNoLongOption_mVhz1() throws Exception {
        Option option = new Option("option", true, "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithNoOption_CWNd2() throws Exception {
        Option option = new Option(null, "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_dVBM0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(':', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparatorWithNoValueSeparatorSet_jcOr1() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_UGoz0_1() throws Exception {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals(null, option1.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_UGoz0_2() throws Exception {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals(null, option2.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_UGoz0_3() throws Exception {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertEquals(null, option3.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithLongOption_mjIY0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithoutLongOption_zZvc1() throws Exception {
        Option option = new Option("option", null, true, "description");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoValues_yuUT0() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        String value = option.getValue();
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithValues_jclM1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue();
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWhenDeprecatedIsNonNull_EzHF0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWhenDeprecatedIsNull_CdGz1() throws Exception {
        Option option = new Option("option", "description");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHashCode_QSCR0_1() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option1.hashCode(), option1.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHashCode_QSCR0_2() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option2.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHashCode_QSCR0_3() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option3.hashCode(), option3.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoValues_lYgx0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue(0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparatorWithOptionStringStringBooleanString_xFuA0() throws Exception {
        Option option = new Option("a", "alpha", true, "This is a test option");
        assert option.hasValueSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparatorWithOptionStringBooleanString_RIgj1() throws Exception {
        Option option = new Option("b", true, "This is another test option");
        assert option.hasValueSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getKeyWithOption_cVju0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("option", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getKeyWithLongOption_Feuo1() throws Exception {
        Option option = new Option(null, "longOption", true, "description");
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getKeyWithoutOptionOrLongOption_fpcQ2() throws Exception {
        Option option = new Option(null, null, true, "description");
        assertEquals(null, option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_ovHb0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgNameWithNoArg_bnji1() throws Exception {
        Option option = new Option("option", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgNameWithNoLongOption_rgTW2() throws Exception {
        Option option = new Option("option", "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt_NDzh0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.getOpt();
        String expected = "option";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithNoArg_HHDW1() throws Exception {
        Option option = new Option("option", true, "description");
        String actual = option.getOpt();
        String expected = "option";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptWithDescriptionOnly_nxXP2() throws Exception {
        Option option = new Option("option", "description");
        String actual = option.getOpt();
        String expected = "option";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_HEbt0_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertNotNull(clonedOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_HEbt0_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertNotEquals(option, clonedOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_HEbt0_4() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals(option.getLongOpt(), clonedOption.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_HEbt0_5() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals(option.hasArg(), clonedOption.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_HEbt0_6() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        Option clonedOption = (Option) option.clone();
        assertEquals(option.getDescription(), clonedOption.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_qPpd0_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String[] expected = null;
        String[] actual = option.getValues();
        Option option2 = new Option("option", true, "description");
        String[] expected2 = null;
        String[] actual2 = option2.getValues();
        Option option3 = new Option("option", "description");
        String[] expected3 = null;
        String[] actual3 = option3.getValues();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_qPpd0_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String[] expected = null;
        String[] actual = option.getValues();
        Option option2 = new Option("option", true, "description");
        String[] expected2 = null;
        String[] actual2 = option2.getValues();
        Option option3 = new Option("option", "description");
        String[] expected3 = null;
        String[] actual3 = option3.getValues();
        assertArrayEquals(expected2, actual2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_qPpd0_3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String[] expected = null;
        String[] actual = option.getValues();
        Option option2 = new Option("option", true, "description");
        String[] expected2 = null;
        String[] actual2 = option2.getValues();
        Option option3 = new Option("option", "description");
        String[] expected3 = null;
        String[] actual3 = option3.getValues();
        assertArrayEquals(expected3, actual3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRequiredTest_OvhC0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        boolean required = true;
        option.setRequired(required);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRequiredTest2_AeYv1() throws Exception {
        Option option = new Option("option", true, "description");
        boolean required = false;
        option.setRequired(required);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setRequiredTest3_ywno2() throws Exception {
        Option option = new Option("option", "description");
        boolean required = true;
        option.setRequired(required);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testisRequired_jnBu0() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assert option1.isRequired() == false;
        assert option2.isRequired() == false;
        assert option3.isRequired() == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testOptionStringStringBooleanString_ieLY0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        List<String> result = option.getValuesList();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testOptionStringBooleanString_LlJj1() throws Exception {
        Option option = new Option("option", true, "description");
        List<String> result = option.getValuesList();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testOptionStringString_hFSN2() throws Exception {
        Option option = new Option("option", "description");
        List<String> result = option.getValuesList();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_sSrs0_1() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertTrue(option1.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_sSrs0_2() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertTrue(option2.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_sSrs0_3() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertFalse(option3.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithUnlimitedValues_LEah1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(Option.UNLIMITED_VALUES);
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithZeroValues_oRQU2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(0);
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenOptionIsNotDeprecated_dIij2() throws Exception {
        Option option = new Option("c", "longC", false, "This is a third test option");
        String deprecatedString = option.toDeprecatedString();
        Assertions.assertEquals("", deprecatedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOptionAndLongOption_ZoAk0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOptionAndHasArg_Loyr1() throws Exception {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption_LFKC2() throws Exception {
        Option option = new Option("option", "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption1_LkHy0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("[ Option option longOption [ARG...] :: description :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption2_qulD1() throws Exception {
        Option option = new Option("option", true, "description");
        assertEquals("[ Option option [ARG] :: description :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption3_bjGJ2() throws Exception {
        Option option = new Option("option", "description");
        assertEquals("[ Option option :: description :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption4_dPOG3() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        assertEquals("[ Option option longOption :: description :: null ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_RImr0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_0_NWBg0()
    {
        Option m_option = new Option("option", "longOption", true, "description");
        String result = m_option.getArgName();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_1_Tugu1()
    {
        Option m_option = new Option("option", "longOption", false, "description");
        String result = m_option.getArgName();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_2_Ymfi2()
    {
        Option m_option = new Option("option", "description");
        String result = m_option.getArgName();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_tzQZ0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_odHd1() throws Exception {
        Option option = new Option("option", true, "description");
        option.setType(Integer.class);
        assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_lGWX2() throws Exception {
        Option option = new Option("option", "description");
        option.setType(Boolean.class);
        assertEquals(Boolean.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_JnVZ0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_vJQB1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(!option.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObjectType_uwFA2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(!option.equals(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameValues_Raxb3() throws Exception {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValues_HzXu4() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        assertTrue(!option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDescription_YsrU0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDescription_UHSN1() throws Exception {
        Option option = new Option("option", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDescription_tlrM2() throws Exception {
        Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_qwqM0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWhenOptionalArgIsPresent_fpIW0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWhenArgCountIsUnlimitedValuesAndValuesIsEmpty_ObCl1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(Option.UNLIMITED_VALUES);
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWhenArgCountIsUnlimitedValuesAndValuesIsNotEmpty_MqOh2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(Option.UNLIMITED_VALUES);
        option.addValue("value");
        assertFalse(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWhenArgCountIsNotUnlimitedValuesAndAcceptsArg_qtUz3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(1);
        assertTrue(option.requiresArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparator_takb0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setValueSeparator(';');
        assertEquals(';', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithNoArg_OdKV1() throws Exception {
        Option option = new Option("option", true, "description");
        option.setValueSeparator(':');
        assertEquals(':', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithNoOption_DmdD2() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator(',');
        assertEquals(',', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithInvalidChar_iKAi3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        char invalidChar = '\n';
        option.setValueSeparator(invalidChar);
        assertNotEquals(invalidChar, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_QNaX0_1() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertTrue(option1.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_QNaX0_2() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertTrue(option2.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_QNaX0_3() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertTrue(option3.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithNoArgs_GyYA1_1() throws Exception {
        Option option1 = new Option("option1", "longOption1", false, "description1");
        Option option2 = new Option("option2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertFalse(option1.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithNoArgs_GyYA1_2() throws Exception {
        Option option1 = new Option("option1", "longOption1", false, "description1");
        Option option2 = new Option("option2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertFalse(option2.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithNoArgs_GyYA1_3() throws Exception {
        Option option1 = new Option("option1", "longOption1", false, "description1");
        Option option2 = new Option("option2", false, "description2");
        Option option3 = new Option("option3", "description3");
        assertFalse(option3.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithValues_UHWr3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        assertFalse(option.acceptsArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_CXNH0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.addValue("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValueWithNoArg_nJZP1() throws Exception {
        Option option = new Option("option", true, "description");
        assertTrue(option.addValue("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValueWithNoLongOption_AZma2() throws Exception {
        Option option = new Option("option", "description");
        assertTrue(option.addValue("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringStringBooleanString_1_yzsK0() throws Exception {
        Option option = new Option("a", "alpha", true, "the letter a");
        boolean result = option.hasArgs();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringStringBooleanString_2_oCzV1() throws Exception {
        Option option = new Option("b", "bravo", false, "the letter b");
        boolean result = option.hasArgs();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringStringBooleanString_3_dLer2() throws Exception {
        Option option = new Option("c", "charlie", true, "the letter c");
        boolean result = option.hasArgs();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringBooleanString_1_ZSWy3() throws Exception {
        Option option = new Option("d", true, "the letter d");
        boolean result = option.hasArgs();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringBooleanString_2_vfEo4() throws Exception {
        Option option = new Option("e", false, "the letter e");
        boolean result = option.hasArgs();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringBooleanString_3_Yuqg5() throws Exception {
        Option option = new Option("f", true, "the letter f");
        boolean result = option.hasArgs();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringString_1_kWzY6() throws Exception {
        Option option = new Option("g", "gamma");
        boolean result = option.hasArgs();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringString_2_KmBX7() throws Exception {
        Option option = new Option("h", "hotel");
        boolean result = option.hasArgs();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasArgs_OptionStringString_3_zcHH8() throws Exception {
        Option option = new Option("i", "india");
        boolean result = option.hasArgs();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoDefault_FCaN0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue(null);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefault_kqof1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoArg_XzqK2() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoLongOption_ntfw3() throws Exception {
        Option option = new Option("option", "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoDescription_MYvw4() throws Exception {
        Option option = new Option("option", true, null);
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOption_csYr5() throws Exception {
        Option option = new Option(null, "longOption", true, "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOptionAndNoLongOption_YPjm6() throws Exception {
        Option option = new Option(null, null, true, "description");
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOptionAndNoDescription_IDiD7() throws Exception {
        Option option = new Option(null, "longOption", true, null);
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOptionAndNoLongOptionAndNoDescription_pqfJ8() throws Exception {
        Option option = new Option(null, null, true, null);
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNoOptionAndNoLongOptionAndNoDescriptionAndNoArg_dYjb9() throws Exception {
        Option option = new Option(null, null, false, null);
        String value = option.getValue("default");
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringStringBooleanString_bMYe0() throws Exception {
        Option option = new Option("a", "alpha", true, "This is a test option.");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringBooleanString_ozpF1() throws Exception {
        Option option = new Option("b", true, "This is another test option.");
        assertEquals('b', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringStringBooleanStringAndOptionStringBooleanString_CaWX3_1() throws Exception {
        Option option1 = new Option("d", "delta", true, "This is a test option.");
        Option option2 = new Option("d", true, "This is another test option.");
        assertEquals('d', option1.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringStringBooleanStringAndOptionStringBooleanString_CaWX3_2() throws Exception {
        Option option1 = new Option("d", "delta", true, "This is a test option.");
        Option option2 = new Option("d", true, "This is another test option.");
        assertEquals('d', option2.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringBooleanStringAndOptionStringStringBooleanString_WnhW5_1() throws Exception {
        Option option1 = new Option("f", true, "This is a test option.");
        Option option2 = new Option("f", "foxtrot", true, "This is another test option.");
        assertEquals('f', option1.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringBooleanStringAndOptionStringStringBooleanString_WnhW5_2() throws Exception {
        Option option1 = new Option("f", true, "This is a test option.");
        Option option2 = new Option("f", "foxtrot", true, "This is another test option.");
        assertEquals('f', option2.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringStringBooleanStringAndOptionStringBooleanStringAndOptionStringStringBooleanString_gjks9_1() throws Exception {
        Option option1 = new Option("j", "juliet", true, "This is a test option.");
        Option option2 = new Option("j", true, "This is another test option.");
        Option option3 = new Option("j", "juliet", true, "This is yet another test option.");
        assertEquals('j', option1.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringStringBooleanStringAndOptionStringBooleanStringAndOptionStringStringBooleanString_gjks9_2() throws Exception {
        Option option1 = new Option("j", "juliet", true, "This is a test option.");
        Option option2 = new Option("j", true, "This is another test option.");
        Option option3 = new Option("j", "juliet", true, "This is yet another test option.");
        assertEquals('j', option2.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithOptionStringStringBooleanStringAndOptionStringBooleanStringAndOptionStringStringBooleanString_gjks9_3() throws Exception {
        Option option1 = new Option("j", "juliet", true, "This is a test option.");
        Option option2 = new Option("j", true, "This is another test option.");
        Option option3 = new Option("j", "juliet", true, "This is yet another test option.");
        assertEquals('j', option3.getId());
    }
}