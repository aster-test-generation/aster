/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_yVGh0_1() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        String[] result = parser.flatten(options, arguments, true);
        assertTrue(result != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_yVGh0_2() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        String[] result = parser.flatten(options, arguments, true);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_yVGh0_3() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        String[] result = parser.flatten(options, arguments, true);
        assertEquals("arg1", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_yVGh0_4() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        String[] result = parser.flatten(options, arguments, true);
        assertEquals("arg2", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_yVGh0_5() throws Exception {
        PosixParser parser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        String[] result = parser.flatten(options, arguments, true);
        assertEquals("arg3", result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBurstToken_sRkN0() throws Exception {
        PosixParser posixParser = new PosixParser();
        posixParser.burstToken("token", true);
        posixParser.burstToken("token", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_eoKi0() throws Exception {
        Options options = new Options();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithNoOptions_Eruc0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"file1", "file2"};
        String[] result = new PosixParser().flatten(options, arguments, false);
        assertEquals(Arrays.asList(arguments), Arrays.asList(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOneOption_spPv1() throws Exception {
        Options options = new Options();
        options.addOption("f", "file", true, "file to process");
        String[] arguments = new String[]{"-f", "file1", "file2"};
        String[] result = new PosixParser().flatten(options, arguments, false);
        assertEquals(Arrays.asList("-f", "file1", "file2"), Arrays.asList(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithTwoOptions_IehS2() throws Exception {
        Options options = new Options();
        options.addOption("f", "file", true, "file to process");
        options.addOption("o", "output", true, "output file");
        String[] arguments = new String[]{"-f", "file1", "-o", "output1", "file2"};
        String[] result = new PosixParser().flatten(options, arguments, false);
        assertEquals(Arrays.asList("-f", "file1", "-o", "output1", "file2"), Arrays.asList(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOption_NjND5() throws Exception {
        Options options = new Options();
        options.addOption("f", "file", true, "file to process");
        options.addOption("o", "output", true, "output file");
        String[] arguments = new String[]{"-f", "file1", "file2", "-o", "output1", "-f", "file3", "file4"};
        String[] result = new PosixParser().flatten(options, arguments, true);
        assertEquals(Arrays.asList("-f", "file1", "file2", "-o", "output1", "-f", "file3"), Arrays.asList(result));
    }
}