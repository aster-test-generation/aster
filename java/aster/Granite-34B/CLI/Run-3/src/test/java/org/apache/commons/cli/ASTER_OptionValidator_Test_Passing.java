/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionValidator_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateNullOption_bgAs0() throws Exception {
        String option = null;
        String actual = OptionValidator.validate(option);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmptyOption_yzxH1_1() throws Exception {
        String option = "";
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidOptionName_hPBC2_1() throws Exception {
        String option = "a";
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidOptionNameWithAdditionalCharacter_kxRd3() throws Exception {
        String option = "a-b";
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionName_UHgB4() throws Exception {
        String option = "ab";
        String actual = OptionValidator.validate(option);
        assertEquals(option, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_NullOption_nbUN0() throws Exception {
        String option = null;
        String expected = null;
        String actual = OptionValidator.validate(option);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_ValidOption_fwKJ2() throws Exception {
        String option = "validOption";
        String expected = "validOption";
        String actual = OptionValidator.validate(option);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidate_InvalidOption_rlRd3() throws Exception {
        String option = "invalidOption";
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateWithNull_kNCT0() throws Exception {
        final String option = null;
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateWithEmpty_XeHo1() throws Exception {
        final String option = "";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateWithValidOption_bwcq2() throws Exception {
        final String option = "validOption";
        assertEquals("validOption", OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateWithInvalidFirstChar_SLqm3() throws Exception {
        final String option = "-invalidOption";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
            assertEquals("Illegal option name '-'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateWithInvalidChar_XtWo4() throws Exception {
        final String option = "invalid-Option";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateWithAdditionalLongChars_fbdI5() throws Exception {
        final String option = "validOption123";
        assertEquals("validOption123", OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateWithAdditionalLongCharsInvalidChar_ERku6() throws Exception {
        final String option = "invalidOption!@#";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }
}