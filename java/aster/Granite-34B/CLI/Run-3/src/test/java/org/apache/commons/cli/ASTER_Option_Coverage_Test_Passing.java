/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcase2_nakV1() {
        Option opt = new Option("x", "long", false, "desc");
        assertFalse(opt.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionEquals_Jriu0() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        Option option3 = new Option("option2", "longOption", true, "description");
        Option option4 = new Option("option", "longOption2", true, "description");
        Option option5 = new Option("option2", "longOption2", true, "description");
        assertTrue(option1.equals(option2));
        assertFalse(option1.equals(option3));
        assertFalse(option1.equals(option4));
        assertFalse(option1.equals(option5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_NCqa0() {
        Option option = new Option("option", "longOption", true, "description");
        String[] values = option.getValues();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption2_CCti1() {
        Option option = new Option("option", true, "description");
        String[] values = option.getValues();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption3_IscP2() {
        Option option = new Option("option", "description");
        String[] values = option.getValues();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithClass_hshx0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_xTEM0() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        assertEquals("default", option.getValue(defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionalArg_hIBt0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        boolean result = option.requiresArg();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithNull_NVaz1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName(null);
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithEmpty_csEV2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toDeprecatedString_with_option_is_not_deprecated_RQSq0() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toDeprecatedString();
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toDeprecatedString_with_option_and_without_longOption_is_not_deprecated_imNY3() {
        Option option = new Option("option", true, "description");
        String actual = option.toDeprecatedString();
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toDeprecatedString_with_option_and_null_longOption_is_not_deprecated_lGDS7() {
        Option option = new Option("option", (String) null, true, "description");
        String actual = option.toDeprecatedString();
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toDeprecatedString_with_option_and_empty_longOption_is_not_deprecated_NJjN9() {
        Option option = new Option("option", "", true, "description");
        String actual = option.toDeprecatedString();
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg1_pcVm0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.acceptsArg();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg2_RAcl1() {
        Option option = new Option("option", true, "description");
        boolean result = option.acceptsArg();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcase1_jYUm0_fid1() {
        Option opt = new Option("x", "long", true, "desc");
        assertFalse(opt.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionEquals_Jriu0_1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        Option option3 = new Option("option2", "longOption", true, "description");
        Option option4 = new Option("option", "longOption2", true, "description");
        Option option5 = new Option("option2", "longOption2", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionEquals_Jriu0_2() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        Option option3 = new Option("option2", "longOption", true, "description");
        Option option4 = new Option("option", "longOption2", true, "description");
        Option option5 = new Option("option2", "longOption2", true, "description");
        assertFalse(option1.equals(option3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionEquals_Jriu0_3() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        Option option3 = new Option("option2", "longOption", true, "description");
        Option option4 = new Option("option", "longOption2", true, "description");
        Option option5 = new Option("option2", "longOption2", true, "description");
        assertFalse(option1.equals(option4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionEquals_Jriu0_4() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        Option option3 = new Option("option2", "longOption", true, "description");
        Option option4 = new Option("option", "longOption2", true, "description");
        Option option5 = new Option("option2", "longOption2", true, "description");
        assertFalse(option1.equals(option5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated_Eaes0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_1_nbeO0_fid1() {
        Option option = new Option("test", "test", true, "test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_2_gFRS1() {
        Option option = new Option("test", "test", true, "test");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_wMqu0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg3_lDNa2_fid1() {
        Option option = new Option("option", "description");
        boolean result = option.acceptsArg();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOption_gVAQ1_QllG0() {
        Option option = new Option("a", "aa", true, "description");
        String actual = option.toString();
        String expected = "[ Option a aa [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, actual);
    }
}