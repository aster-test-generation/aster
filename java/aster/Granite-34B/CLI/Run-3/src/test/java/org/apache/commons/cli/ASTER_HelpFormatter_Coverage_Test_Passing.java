/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    HelpFormatter helpformatter;

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_hDEU0() throws Exception {
        helpformatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_wWlT0_1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("", helpFormatter.rtrim(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_wWlT0_2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("a", helpFormatter.rtrim("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_wWlT0_9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("This is a test", helpFormatter.rtrim("This is a test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_wWlT0_10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals("This is a test with spaces", helpFormatter.rtrim("This is a test with spaces"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithCmdLineSyntaxNull_vKXI0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        try {
            helpFormatter.printHelp(null, 0, "", "", new Options(), 1, 1, "", false);
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_Xlsw0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 0;
        int expected = 11;
        int actual = formatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_RNSF1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 15;
        int startPos = 0;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_WLyH2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 20;
        int startPos = 0;
        int expected = 20;
        int actual = formatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_zxoS3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 4;
        int startPos = 0;
        int expected = 4;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_zyKS4() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 10;
        int expected = 20;
        int actual = formatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_GfTp5() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 20;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_IaCX6() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 5;
        int expected = 14;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_UKER7() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 15;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_Rjqf8() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 25;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos10_Bnqm9() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 10;
        int startPos = 30;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_Mrek0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        Options options = new Options();
        int i1 = 10;
        int i2 = 5;
        helpFormatter.renderOptions(stringBuffer, i1, options, i2, i2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions2_vhbG1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        Options options = new Options();
        int i1 = 10;
        int i2 = 5;
        helpFormatter.renderOptions(stringBuffer, i1, options, i2, i1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions3_GQaO2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        Options options = new Options();
        int i1 = 10;
        int i2 = 5;
        helpFormatter.renderOptions(stringBuffer, i1, options, i1, i2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions4_IVbN3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        Options options = new Options();
        int i1 = 10;
        int i2 = 5;
        helpFormatter.renderOptions(stringBuffer, i1, options, i1, i1);
    }
}