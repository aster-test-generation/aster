/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithClass_ZGCl0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithObject_OKcB1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType((Object) String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated_MZem0() {
        Option option = new Option("test", "test", true, "test");
        boolean actual = option.isDeprecated();
        boolean expected = false;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_gzFw0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.acceptsArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithHasArgs_ElFq1() {
        Option option = new Option("option", "longOption", true, "description");
        option.hasArgs();
        boolean result = option.acceptsArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArgWithHasOptionalArg_OOQf2() {
        Option option = new Option("option", "longOption", true, "description");
        option.hasOptionalArg();
        boolean result = option.acceptsArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_OHjG0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArgName();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_LJMd0() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        String value = option.getValue(defaultValue);
        assert value.equals(defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionWithArgs_nmft1() {
        Option option = new Option("b", "beta", true, "This is another test option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionWithNoArgs_dOVB2() {
        Option option = new Option("c", "gamma", false, "This is yet another test option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionWithNoLongOption_RUAx3() {
        Option option = new Option("d", "This is a test option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOptionWithNoDescription_wQiP4() {
        Option option = new Option("e", "epsilon", true, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWhenOptionalArgIsZero_GpyJ0() {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.requiresArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWhenArgCountIsUnlimitedValuesAndValuesIsEmpty_svMV1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgs(Option.UNLIMITED_VALUES);
        boolean result = option.requiresArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue1_VWki0() {
        Option option = new Option("option", "longOption", true, "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_toDeprecatedString_1_AnVh0_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toDeprecatedString();
        String expected = "";
        assertEquals(expected, actual);
    }
}