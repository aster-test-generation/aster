/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_UnrecognizedOptionException_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_yLCB0() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message", "option");
        String option = e.getOption();
        Assertions.assertEquals("option", option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithOnlyMessage_pUvh1() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message");
        String option = e.getOption();
        Assertions.assertNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithNullMessage_cHgW2() {
        UnrecognizedOptionException e = new UnrecognizedOptionException(null);
        String option = e.getOption();
        Assertions.assertNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithEmptyMessage_KVkA3() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("");
        String option = e.getOption();
        Assertions.assertNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithNullOption_StHh5() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message", null);
        String option = e.getOption();
        Assertions.assertNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithEmptyOption_fdkQ6() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message", "");
        String option = e.getOption();
        Assertions.assertEquals("", option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithNonEmptyOption_MIoD8() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message", "non-empty-option");
        String option = e.getOption();
        Assertions.assertEquals("non-empty-option", option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithMultipleOptions_eTcZ9() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message", "option1,option2");
        String option = e.getOption();
        Assertions.assertEquals("option1,option2", option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithMultipleOptionsAndMultipleSpaces_imlO11() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message", "  option1  ,  option2  ,  option3  ");
        String option = e.getOption();
        Assertions.assertEquals("  option1  ,  option2  ,  option3  ", option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithMultipleOptionsAndMultipleSpacesAndTabs_vbSB12() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message", "  \toption1  \t,  \toption2  \t,  \toption3  \t");
        String option = e.getOption();
        Assertions.assertEquals("  \toption1  \t,  \toption2  \t,  \toption3  \t", option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithMultipleOptionsAndMultipleSpacesAndTabsAndNewLines_eyXX13() {
        UnrecognizedOptionException e = new UnrecognizedOptionException("message", "  \toption1  \t,  \toption2  \t,  \toption3  \t\n");
        String option = e.getOption();
        Assertions.assertEquals("  \toption1  \t,  \toption2  \t,  \toption3  \t\n", option);
    }
}