/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_hQmi0() {
        Options options = new Options();
        assertTrue(options.hasLongOption("test"));
        assertFalse(options.hasLongOption("invalid"));
        assertFalse(options.hasLongOption(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithShortOption_DWFE0() {
        Options options = new Options();
        Option option = options.getOption("a");
        assertEquals("Option 'a' should be returned", "a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithLongOption_Teqm1() {
        Options options = new Options();
        Option option = options.getOption("long-option");
        assertEquals("Option 'long-option' should be returned", "long-option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptions_Ungr0() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertNotNull(optionsList);
        assertTrue(optionsList.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsWithMultipleOptions_eGgs2() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertNotNull(optionsList);
        assertTrue(optionsList.size() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsWithSingleOption_GZkQ3() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertNotNull(optionsList);
        assertEquals(1, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsWithAllOptions_ImlY5() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertNotNull(optionsList);
        assertTrue(optionsList.size() == 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsWithHalfOptions_PvaW6() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertNotNull(optionsList);
        assertTrue(optionsList.size() == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SYEJ0() {
        Options options = new Options();
        assertEquals("[ Options: [ short [] ] [ long null ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_iaQH0() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertEquals(true, options.hasLongOption("longOpt"));
        assertEquals(true, options.hasShortOption("opt"));
        assertEquals(true, options.hasOption("opt"));
        assertEquals(true, options.hasOption("longOpt"));
        assertEquals(true, options.getOption("opt").isRequired());
        assertEquals(true, options.getOption("longOpt").isRequired());
        assertEquals(true, options.getRequiredOptions().contains("opt"));
        assertEquals(true, options.getRequiredOptions().contains("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_mTGi1() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertNotNull(returnedOptionGroups);
        assertEquals(2, returnedOptionGroups.size());
        assertTrue(returnedOptionGroups.contains(optionGroup1));
        assertTrue(returnedOptionGroups.contains(optionGroup2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RLDJ2() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        assertEquals(1, options.getOptions().size());
        assertEquals(1, options.getRequiredOptions().size());
        assertEquals(1, options.getMatchingOptions("opt").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_XwVp6() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        assertEquals(0, options.getOptions().size());
        assertEquals(0, options.getRequiredOptions().size());
        assertEquals(0, options.getMatchingOptions("invalidOpt").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithOptionGroup_UjWc2() {
        Options options1 = new Options();
        Options options2 = new Options();
        OptionGroup optionGroup = new OptionGroup();
        options2.addOptionGroup(optionGroup);
        options1.addOptions(options2);
        assertEquals(1, options1.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_IHiZ0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_oMXq0() {
        Options options = new Options();
        assertTrue(options.hasShortOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithNullOpt_FZGi1() {
        Options options = new Options();
        assertTrue(options.hasShortOption(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hasOptionTest1_Vaza0() {
        Options options = new Options();
        String opt = "opt";
        boolean result = options.hasOption(opt);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithRequired_UcOF2() {
        Options options = new Options();
        options.addOption("opt", "longOpt", false, "description");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgName_OBJX3() {
        Options options = new Options();
        options.addOption("opt", "longOpt", false, "description");
        assertEquals("arg", options.getOption("opt").getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_hQmi0_1() {
        Options options = new Options();
        assertTrue(options.hasLongOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptions_Ungr0_2() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertTrue(optionsList.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsWithMultipleOptions_eGgs2_2() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertTrue(optionsList.size() > 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsWithSingleOption_GZkQ3_2() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertEquals(1, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsWithAllOptions_ImlY5_2() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertTrue(optionsList.size() == 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionsWithHalfOptions_PvaW6_2() {
        Options options = new Options();
        Collection<Option> optionsList = options.getOptions();
        assertTrue(optionsList.size() == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_iaQH0_8() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
        assertEquals(true, options.getRequiredOptions().contains("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_mTGi1_2() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertEquals(2, returnedOptionGroups.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_mTGi1_3() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertTrue(returnedOptionGroups.contains(optionGroup1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsWithOptionGroups_mTGi1_4() {
        Options options = new Options();
        OptionGroup optionGroup1 = new OptionGroup();
        OptionGroup optionGroup2 = new OptionGroup();
        options.addOptionGroup(optionGroup1);
        options.addOptionGroup(optionGroup2);
        Collection<OptionGroup> returnedOptionGroups = options.getOptionGroups();
        assertTrue(returnedOptionGroups.contains(optionGroup2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RLDJ2_2() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RLDJ2_3() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        assertEquals(1, options.getMatchingOptions("opt").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_XwVp6_1() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithShortOpts_lWnr1_fQVN0() {
        Options options = new Options();
        options.addOption("a", null, false, null);
        options.addOption("b", null, false, null);
        options.addOption("c", null, false, null);
        assertEquals("[ Options: [ short [a, b, c] ] [ long null ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBothShortAndLongOpts_wHYc3_RyJc0() {
        Options options = new Options();
        options.addOption("a", "option1", false, "description");
        options.addOption("b", "option2", false, "description");
        options.addOption("c", "option3", false, "description");
        assertEquals("[ Options: [ short [a, b, c] ] [ long [option1, option2, option3] ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_withRequiredOpts_eyvW1_uHnf0_1() {
        Options options = new Options();
        options.addOption("requiredOption1", "description");
        options.addOption("requiredOption2", "description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals(2, requiredOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_withRequiredOpts_eyvW1_uHnf0_2() {
        Options options = new Options();
        options.addOption("requiredOption1", "description");
        options.addOption("requiredOption2", "description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertTrue(requiredOptions.contains("requiredOption1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRequiredOptions_withRequiredOpts_eyvW1_uHnf0_3() {
        Options options = new Options();
        options.addOption("requiredOption1", "description");
        options.addOption("requiredOption2", "description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertTrue(requiredOptions.contains("requiredOption2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_iaQH0_8_fid2() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", false, "description");
        assertEquals(true, options.getRequiredOptions().contains("longOpt"));
    }
}