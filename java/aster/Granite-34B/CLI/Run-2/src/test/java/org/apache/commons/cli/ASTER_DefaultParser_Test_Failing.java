/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_fdrx0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithAllowPartialMatching_UITr1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_RIKt0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_anWq0() throws Exception {
        DefaultParser parser = new DefaultParser();
        String token = "token";
        parser.handleConcatenatedOptions(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_tbWp0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithPartialMatching_ZkvX1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.handleConcatenatedOptions("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithFalseAllowPartialMatching_eazV1() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        parser.handleConcatenatedOptions("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithNullToken_adVt3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthTwo_gLaJ5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("ab");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthThree_nXIN6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthFour_ptGF7() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcd");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthFive_IOvC8() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcde");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthSix_bJIv9() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdef");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthSeven_teka10() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefg");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthEight_WGPg11() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefgh");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthNine_FtzO12() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghi");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthTen_ROvo13() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghij");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthEleven_yvpa14() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijk");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthTwelve_FoiZ15() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijkl");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthThirteen_SlJd16() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklm");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthFourteen_UTrG17() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmn");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthFifteen_KHcK18() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmno");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthSixteen_QqhJ19() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmnop");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthSeventeen_QXcZ20() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmnopq");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthEighteen_XZmv21() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("abcdefghijklmnopqrst");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithInvalidOption_sYJo3() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-x", "10"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Unknown option: -x"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithPartialMatchingAndInvalidOption_cUkv5() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-be", "-x"};
        try {
            new DefaultParser(true).parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Unknown option: -x"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithMissingOptionArgument_CbCw6() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Missing argument for option: -a"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_ehuZ4_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_ZkKu6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_SYwS1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_SYwS1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_BaSq2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_BaSq2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_BaSq2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("b", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_mBuD3_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_mBuD3_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValues_UtKF4_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValues_UtKF4_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValues_UtKF4_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgument_viPv5_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgument_viPv5_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgument_viPv5_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValuesAndTwoArguments_mkHL6_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(4, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValuesAndTwoArguments_mkHL6_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValuesAndTwoArguments_mkHL6_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValuesAndTwoArguments_mkHL6_4() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValuesAndTwoArguments_mkHL6_5() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg2", commandLine.getArgList().get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgumentAndStopAtNonOption_zvFk7_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgumentAndStopAtNonOption_zvFk7_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("value", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgumentAndStopAtNonOption_zvFk7_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("arg", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UsJl4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UsJl4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("nonOption", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UsJl4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithMissingRequiredOption_owjY4_1() {
        Options options = new Options();
        options.addOption("a", true, "Description");
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        Exception exception = assertThrows(ParseException.class, () -> new DefaultParser().parse(options, arguments, properties, stopAtNonOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wOEs4_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_fApL4() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        assertThrows(ParseException.class, () -> new DefaultParser().parse(options, arguments, properties, stopAtNonOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_vsZd1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_vQPn3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("a", "10");
        properties.setProperty("b", "20");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_amNn1_1() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_amNn1_2() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_amNn1_3() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("a", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_amNn1_4() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2_1() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(4, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2_2() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2_3() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("a", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2_4() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("b", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2_5() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("c", cmd.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2_6() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("d", cmd.getArgList().get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2_7() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2_8() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals("b", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ICxm3_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals(false, cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.getOptions()[1].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_12() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(true, commandLine.getOptions()[1].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_hbgs5_2() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        final Option alphaOption = new Option("a", "alpha", false, "the alpha option");
        final Option betaOption = new Option("b", "beta", false, "the beta option");
        group.addOption(alphaOption);
        group.addOption(betaOption);
        options.addOptionGroup(group);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(commandLine.hasOption(betaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EDAF4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "arg1", "-b", "arg2", "arg3"}, new Properties(), true);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EDAF4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "arg1", "-b", "arg2", "arg3"}, new Properties(), true);
        assertEquals("arg3", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColon_ULXH7_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a:value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[1].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_GRIi3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, args, null, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Missing required option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("beta-value", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DTth2_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "non-option-argument", "-b", "beta-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_wKIz1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_wKIz1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_cmNa2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_cmNa2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_cmNa2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("b", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_cmNa2_4() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("c", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_caIY3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "30");
        properties.setProperty("beta", "40");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_caIY3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "30");
        properties.setProperty("beta", "40");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("30", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_caIY3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "30");
        properties.setProperty("beta", "40");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("40", commandLine.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_UJRC2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_dsyY1() throws Exception {
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        String[] arguments = {"-a", "-b", "valueB"};
        Properties properties = new Properties();
        properties.setProperty("optionC", "valueC");
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColon_SmKE6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        final String[] args = {"-a:foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_GNcD1_2() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_GNcD1_3() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_kBoS2_2() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_kBoS2_3() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_kBoS2_4() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_kBoS2_5() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("c", commandLine.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_BIsX3_3() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_BIsX3_5() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingRequiredOption_RjoM2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
            fail("Expected MissingArgumentException");
        } catch (MissingArgumentException e) {
            assertEquals("Missing required option: a", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArg_bKKr1_1() throws ParseException {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a"}, new Properties(), false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArg_bKKr1_2() throws ParseException {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a"}, new Properties(), false);
        assertEquals("a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArgs_xhok2_1() throws ParseException {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, new Properties(), false);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArgs_xhok2_2() throws ParseException {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, new Properties(), false);
        assertEquals("a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArgs_xhok2_3() throws ParseException {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, new Properties(), false);
        assertEquals("b", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOneProperty_nxQi6_4() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, properties, false);
        assertEquals("c", cmd.getOptionValue("alpha", "d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOnePropertyAndOneArg_ymGs7_5() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b", "d"}, properties, false);
        assertEquals("c", cmd.getOptionValue("alpha", "d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_smTu2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, properties);
        assertEquals(false, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndPropertiesAndStopAtNonOption_tVLi3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "--", "-d", "-e", "-f"}, properties, true);
        assertEquals(false, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_erzI4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertTrue(commandLine.getOptions().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_erzI4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_erzI4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_erzI4_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_erzI4_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertLinesMatch(Arrays.asList("nonOption"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_rAId0_1() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_rAId0_2() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_Bbcj1_1() throws Exception {
        final Options options = new Options();
        final String[] args = {"-option1", "value1", "-option2", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_Bbcj1_2() throws Exception {
        final Options options = new Options();
        final String[] args = {"-option1", "value1", "-option2", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_uQrb2_1() throws Exception {
        final Options options = new Options();
        final String[] args = {"-option1", "value1", "non-option", "-option2", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, true);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithExpectedOpts_OikP0() {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.expectedOpts.add("option1");
        defaultParser.expectedOpts.add("option2");
        MissingOptionException exception = assertThrows(MissingOptionException.class, defaultParser::checkRequiredOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_PiHQ4() {
        Options options = new Options();
        options.addOption("option", "longOption", true, "description");
        String[] arguments = new String[]{"--longOption", "value", "nonOption"};
        boolean stopAtNonOption = true;
        CommandLine commandLine = new CommandLine();
        try {
            commandLine = new DefaultParser().parse(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertEquals("value", commandLine.getOptionValue("longOption"));
        assertNotEquals("nonOption", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_xxRV2_edRR0_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_xxRV2_edRR0_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ZZYD0_ttXK0_1() throws Exception {
        final Options options = new Options();
        final Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        final CommandLine commandLine = new DefaultParser().parse(options, new String[0], properties, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ZZYD0_ttXK0_2() throws Exception {
        final Options options = new Options();
        final Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        final CommandLine commandLine = new DefaultParser().parse(options, new String[0], properties, false);
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NullOptions_UMSR0_eXoz0() {
        final DefaultParser parser = new DefaultParser();
        final String[] args = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(null, args, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertLinesMatch(Arrays.asList("1", "2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_StopAtNonOption_eYRG3_JPiL0() throws ParseException {
        final DefaultParser parser = new DefaultParser();
        final Options options = new Options();
        final String[] args = {"-a", "1", "-b", "2", "3", "4"};
        CommandLine commandLine = parser.parse(options, args, null, true);
        assertLinesMatch(Arrays.asList("1", "2"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithUnknownToken_MecH2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("test");
        // Add assertions here
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithNullToken_adVt3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String token = null;
        parser.handleConcatenatedOptions(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgumentAndStopAtNonOption_zvFk7_3_fid1() throws Exception {
        final Options options = new Options();
        final String[] valueuments = {"-a", "value", "arg", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, valueuments, null, true);
        assertEquals("arg", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_10_fid1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_11_fid1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_10_fid1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_ehuZ4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_ZkKu6() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_SYwS1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_BaSq2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("a", commandLine.getArgList().get(0));
        assertEquals("b", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_mBuD3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("value", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValues_UtKF4() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("value1", commandLine.getArgList().get(0));
        assertEquals("value2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgument_viPv5() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("value", commandLine.getArgList().get(0));
        assertEquals("arg", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptionsAndValuesAndTwoArguments_mkHL6() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value1", "-b", "value2", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(4, commandLine.getArgList().size());
        assertEquals("value1", commandLine.getArgList().get(0));
        assertEquals("value2", commandLine.getArgList().get(1));
        assertEquals("arg1", commandLine.getArgList().get(2));
        assertEquals("arg2", commandLine.getArgList().get(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgumentAndStopAtNonOption_zvFk7() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("value", commandLine.getArgList().get(0));
        assertEquals("arg", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UsJl4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("nonOption", commandLine.getArgs()[0]);
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithMissingRequiredOption_owjY4() {
        Options options = new Options();
        options.addOption("a", true, "Description");
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        Exception exception = assertThrows(ParseException.class, () -> new DefaultParser().parse(options, arguments, properties, stopAtNonOption));
        assertEquals("Missing required option: a", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wOEs4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
        assertEquals("value2", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_amNn1() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(1, cmd.getArgList().size());
        assertEquals(1, cmd.getOptions().length);
        assertEquals("a", cmd.getArgList().get(0));
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_vZoX2() throws Exception {
        final Options options = new Options();
        final String[] args = {"-a", "-b", "c", "d"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(4, cmd.getArgList().size());
        assertEquals(2, cmd.getOptions().length);
        assertEquals("a", cmd.getArgList().get(0));
        assertEquals("b", cmd.getArgList().get(1));
        assertEquals("c", cmd.getArgList().get(2));
        assertEquals("d", cmd.getArgList().get(3));
        assertEquals("a", cmd.getOptions()[0].getOpt());
        assertEquals("b", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ICxm3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals(0, cmd.getArgList().size());
        assertEquals(2, cmd.getOptions().length);
        assertEquals("a", cmd.getOptions()[0].getOpt());
        assertEquals("b", cmd.getOptions()[1].getOpt());
        assertEquals(true, cmd.hasOption("a"));
        assertEquals(false, cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
        assertEquals(true, commandLine.getOptions()[1].hasArg());
        assertEquals(true, commandLine.getOptions()[1].hasArgName());
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("non-option-argument", commandLine.getArgs()[0]);
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
        assertEquals(true, commandLine.getOptions()[1].hasArg());
        assertEquals(true, commandLine.getOptions()[1].hasArgName());
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_hbgs5() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        final Option alphaOption = new Option("a", "alpha", false, "the alpha option");
        final Option betaOption = new Option("b", "beta", false, "the beta option");
        group.addOption(alphaOption);
        group.addOption(betaOption);
        options.addOptionGroup(group);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(commandLine.hasOption(alphaOption));
        assertTrue(commandLine.hasOption(betaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EDAF4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "arg1", "-b", "arg2", "arg3"}, new Properties(), true);
        assertTrue(commandLine.hasOption("a"));
        assertFalse(commandLine.hasOption("b"));
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg3", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals(false, commandLine.hasOption("a"));
        assertEquals(false, commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(true, commandLine.getOptions()[0].hasArg());
        assertEquals(true, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(true, commandLine.hasOption("alpha"));
        assertEquals("value", commandLine.getOptionValue("a"));
        assertEquals("value", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(true, commandLine.getOptions()[0].hasArg());
        assertEquals(true, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(true, commandLine.hasOption("alpha"));
        assertEquals("value", commandLine.getOptionValue("a"));
        assertEquals("value", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColon_ULXH7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a:value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
        assertEquals(true, commandLine.getOptions()[1].hasArg());
        assertEquals(true, commandLine.getOptions()[1].hasArgName());
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("non-option-argument", commandLine.getArgList().get(0));
        assertEquals("beta-value", commandLine.getArgList().get(1));
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
        assertEquals(true, commandLine.getOptions()[1].hasArg());
        assertEquals(true, commandLine.getOptions()[1].hasArg());
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DTth2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "non-option-argument", "-b", "beta-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("non-option-argument", commandLine.getArgList().get(0));
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_wKIz1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("a", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_cmNa2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgList().size());
        assertEquals("a", commandLine.getArgList().get(0));
        assertEquals("b", commandLine.getArgList().get(1));
        assertEquals("c", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_caIY3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "30");
        properties.setProperty("beta", "40");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("10", commandLine.getOptionValue("a"));
        assertEquals("20", commandLine.getOptionValue("b"));
        assertEquals("30", commandLine.getOptionValue("alpha"));
        assertEquals("40", commandLine.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_GNcD1() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-a"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_kBoS2() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-a", "-b", "-c"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgList().size());
        assertEquals(3, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("c", commandLine.getOptions()[2].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_BIsX3() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("1", commandLine.getOptionValue("a"));
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArg_bKKr1() throws ParseException {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a"}, new Properties(), false);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("a", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArgs_xhok2() throws ParseException {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, new Properties(), false);
        assertEquals(2, cmd.getArgs().length);
        assertEquals("a", cmd.getArgs()[0]);
        assertEquals("b", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOneProperty_nxQi6() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, properties, false);
        assertEquals(0, cmd.getArgs().length);
        assertTrue(cmd.hasOption("alpha"));
        assertEquals("b", cmd.getOptionValue("alpha"));
        assertEquals("c", cmd.getOptionValue("alpha", "d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOnePropertyAndOneArg_ymGs7() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b", "d"}, properties, false);
        assertEquals(1, cmd.getArgs().length);
        assertEquals("d", cmd.getArgs()[0]);
        assertTrue(cmd.hasOption("alpha"));
        assertEquals("b", cmd.getOptionValue("alpha"));
        assertEquals("c", cmd.getOptionValue("alpha", "d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_smTu2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, properties);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(false, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndPropertiesAndStopAtNonOption_tVLi3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "--", "-d", "-e", "-f"}, properties, true);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(false, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
        assertArrayEquals(new String[]{"-d", "-e", "-f"}, commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_erzI4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertFalse(commandLine.getArgList().isEmpty());
        assertTrue(commandLine.getOptions().length == 2);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("betaValue", commandLine.getOptionValue("b"));
        assertLinesMatch(Arrays.asList("nonOption"), commandLine.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_rAId0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_Bbcj1() throws Exception {
        final Options options = new Options();
        final String[] args = {"-option1", "value1", "-option2", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_uQrb2() throws Exception {
        final Options options = new Options();
        final String[] args = {"-option1", "value1", "non-option", "-option2", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, true);
        assertEquals("value1", commandLine.getOptionValue("option1"));
        assertEquals(null, commandLine.getOptionValue("option2"));
    }
}