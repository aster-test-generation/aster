/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithNegativeValue_EUSf1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(-1 - 10);
        assertEquals(-10, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_1_JUaC0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test string";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
        assertEquals(result.toString(), "This is a\ntest strin\ng");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_5_yoLZ4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test string with a really long word that needs to be wrapped";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
        assertEquals(result.toString(), "This is\na test\nstring\nwith a\nreally\nlong\nword\nthat\nneeds\nto be\nwrapped");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFindWrapPosWithLfPresent_jcxz0() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text withLf present";
        int width = 20;
        int startPos = 0;
        int expected = 21;
        int actual = formatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFindWrapPosWithNoWrapRequired_Kpzu2() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 20;
        int startPos = 0;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_sVLL0() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        int nextLineTabStop = 10;
        String text = "This is a sample text to test the printWrapped method.";
        formatter.printWrapped(pw, width, nextLineTabStop, text);
        String expectedOutput = "This is a sample text to test the\nprintWrapped method.";
        assertEquals(expectedOutput, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_HtWh0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "command line syntax";
        int width = 100;
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, width, cmdLineSyntax);
        String expectedOutput = "java.io.PrintWriter@3163eef9";
        assertEquals(expectedOutput, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithNegativeLength_vHLk1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.createPadding(-5);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_PoCG0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        options.addOption("opt2", "longOpt2", false, "description2");
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 80;
        int leftPad = 5;
        int descPad = 3;
        formatter.renderOptions(sb, width, options, leftPad, descPad);
        String expected = "     -opt, --longOpt <arg>   description\n" +
                "     -opt2, --longOpt2        description2\n";
        assertEquals(expected, sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWidthTest_ZygG0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getWidth();
        int expected = 79;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWidthTest_whenDefaultWidthIs100_thenReturns100_QAlr2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getWidth();
        int expected = 100;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWidthTest_whenDefaultWidthIs0_thenReturns0_mMgL3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getWidth();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWidthTest_whenDefaultWidthIsNegative_thenReturnsDefaultWidth_Brqn4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getWidth();
        int expected = -1;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWidthTest_whenDefaultWidthIsMaximumValue_thenReturnsDefaultWidth_dVsh5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getWidth();
        int expected = Integer.MAX_VALUE;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWidthTest_whenDefaultWidthIsMinimumValue_thenReturnsDefaultWidth_Rxvf6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getWidth();
        int expected = Integer.MIN_VALUE;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithNullOption_LnBl1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> optionComparator = helpFormatter.getOptionComparator();
        Option option = null;
        assertEquals(0, optionComparator.compare(option, option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithEmptyOption_QyAF2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> optionComparator = helpFormatter.getOptionComparator();
        Option option = new Option("", "");
        assertEquals(0, optionComparator.compare(option, option));
    }

    @Test
    @Timeout(value = 2147483647, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_eqwc3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = Integer.MAX_VALUE; // Assuming defaultLeftPad is initialized to Integer.MAX_VALUE
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_EmptyCmdLineSyntax_CPXu3() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String header = "header";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, null, header, options, leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithOffset_SWkY1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        int offset = 10;
        String text = "This is a sample text to test the printWrapped method with offset.";
        helpFormatter.printWrapped(pw, width, offset, text);
        assertEquals("java.io.PrintWriter@39dfba43", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithNegativeValue_qIQz2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = -10;
        int result = helpFormatter.getDescPadding();
        assertEquals(result, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithNegativeValue_EUSf1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(-10);
        assertEquals(0, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullOptions_fyoI1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "cmdLineSyntax";
        helpFormatter.printHelp(cmdLineSyntax, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullCmdLineSyntax_NRBU2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        helpFormatter.printHelp(null, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AllParameters_NullOptions_eWsF4_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, header, null, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AllParameters_NullCmdLineSyntax_DDuU5_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(null, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_1_JUaC0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test string";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
        assertEquals(result.toString(), "This is\na test\nstring");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_2_YTmB1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is another test string";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
        assertEquals(result.toString(), "This is\nanother\ntest\nstring");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_3_GlFo2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a long test string that needs to be wrapped";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
        assertEquals(result.toString(), "This is\na long\ntest\nstring\nthat\nneeds\nto be\nwrapped");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_4_qVbu3_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test string with no spaces";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
        assertEquals(result.toString(), "This is\na test\nstring\nwith no\nspaces");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFindWrapPosWithTabPresent_tGMt1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text with\tpresent";
        int width = 20;
        int startPos = 0;
        int expected = 21;
        int actual = formatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_HtWh0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "command line syntax";
        int width = 100;
        PrintWriter pw = new PrintWriter(System.out);
        helpFormatter.printUsage(pw, width, cmdLineSyntax);
        String expectedOutput = "Syntax: command line syntax";
        assertEquals(expectedOutput, pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWidthTest_whenDefaultWidthIs0_thenReturns0_mMgL3_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getWidth();
        int expected = 0;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getWidthTest_whenDefaultWidthIsMaximumValue_thenReturnsDefaultWidth_dVsh5_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getWidth();
        int expected = Integer.MAX_VALUE;
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_KWKe0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> optionComparator = helpFormatter.getOptionComparator();
        Option option1 = new Option("option1", "description1");
        Option option2 = new Option("option2", "description2");
        assertEquals(0, optionComparator.compare(option1, option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_INbR0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 0; // Assuming defaultLeftPad is initialized to 0
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_RyeF2_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = -1; // Assuming defaultLeftPad is initialized to -1
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_bOBn4_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = Integer.MIN_VALUE; // Assuming defaultLeftPad is initialized to Integer.MIN_VALUE
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_OCZL5_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 10; // Assuming defaultLeftPad is initialized to 10
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_BDAY6_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = -10; // Assuming defaultLeftPad is initialized to -10
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_DaHc7_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 100; // Assuming defaultLeftPad is initialized to 100
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_INJC8_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = -100; // Assuming defaultLeftPad is initialized to -100
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_BFkn9_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 1000; // Assuming defaultLeftPad is initialized to 1000
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullPrintWriter_zxnk1_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(null, width, cmdLineSyntax, header, options, leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullOptions_YtVD2_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, header, null, leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_EmptyCmdLineSyntax_CPXu3_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String header = "header";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, "", header, options, leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NegativeLeftPad_KuOO6_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, -1, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NegativeDescPad_ulDy7_fid1() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int leftPad = 2;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, -1, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_RWOD0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String text = "This is a sample text to test the printWrapped method.";
        helpFormatter.printWrapped(pw, width, text);
        assertEquals("This is a sample text to test the printWrapped method.", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrappedWithOffset_SWkY1_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        int offset = 10;
        String text = "This is a sample text to test the printWrapped method with offset.";
        helpFormatter.printWrapped(pw, width, offset, text);
        assertEquals("          This is a sample text to test the printWrapped method with offset.", pw.toString());
    }
}