/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test17_rYmp16() throws ParseException {
        CommandLine commandLine = new CommandLine();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_IBoE0() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertEquals(Option.EMPTY_ARRAY, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoOptions_GRjA1() {
        CommandLine commandLine = new CommandLine();
        Option[] options = commandLine.getOptions();
        assertEquals(0, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getOptionValue_withOptionAndDefaultValue_PcgP0() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        String actual = new CommandLine().getOptionValue(option, defaultValue);
        String expected = "default";
        assert actual.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithNullOption_RuOw1() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        String expected = null;
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithEmptyOption_JbKw2() {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        String expected = null;
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValueWithInvalidOption_dRvm3() {
        CommandLine commandLine = new CommandLine();
        String opt = "invalid";
        String expected = null;
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionValueTest_bUyc0() {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        String result = commandLine.getOptionValue(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_GWyt0() {
        CommandLine commandLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        assertEquals("default", commandLine.getOptionValue("opt", defaultValue));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionValueTest1_zRMM0() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOptionValueTest9_GJZM8() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Supplier<String> defaultValue = () -> "default";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_OwUR0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        Object defaultValue = new Object();
        Object result = commandLine.getParsedOptionValue(option, () -> defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue_nxFt0() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        String defaultValue = "default";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_Icvz0() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('a');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue2_cwvz1() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('b');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue3_gHGX2() {
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue('c');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndDefault_returnsDefault_WUao0() throws ParseException {
        Option option = new Option("option", "longOption", false, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndNoDefault_returnsNull_RLdt1() throws ParseException {
        Option option = new Option("option", "longOption", false, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndNoConverterAndDefault_returnsDefault_uber5() throws ParseException {
        Option option = new Option("option", "longOption", false, "description");
        CommandLine commandLine = new CommandLine();
        Integer result = commandLine.getParsedOptionValue(option, 456);
        assertEquals(new Integer(456), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getParsedOptionValue_withOptionAndNoConverterAndNoDefault_returnsNull_VPiU6() throws ParseException {
        Option option = new Option("option", "longOption", false, "description");
        CommandLine commandLine = new CommandLine();
        Integer result = commandLine.getParsedOptionValue(option, null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilderCoverage_FSAK1() {
        CommandLine.builder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_oTTO0() throws ParseException {
        CommandLine commandLine0 = new CommandLine();
        String opt0 = "opt0";
        commandLine0.getParsedOptionValue(opt0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getParsedOptionValue_char_Supplier_zkKW0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Supplier<Object> defaultValue = () -> new Object();
        Object result = commandLine.getParsedOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getParsedOptionValue_String_Supplier_Rtln2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "a";
        Supplier<Object> defaultValue = () -> new Object();
        Object result = commandLine.getParsedOptionValue(opt, defaultValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_CpsU0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Properties props = commandLine.getOptionProperties(option);
        assertEquals(props.size(), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_null_CfEb0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', (String) null);
        String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_empty_PNsG1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "");
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_text_NtdG4() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text");
        String expected = "text";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithSpace_jpgZ5() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text with space");
        String expected = "text with space";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithTab_sTIK6() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text\twith\tspace");
        String expected = "text\twith\tspace";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithEnter_WOYT7() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text\nwith\nspace");
        String expected = "text\nwith\nspace";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithEnterAndTab_bedJ8() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text\nwith\tspace");
        String expected = "text\nwith\tspace";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithTabAndEnter_hvJX9() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text\twith\nspace");
        String expected = "text\twith\nspace";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithEnterAndEnter_PlXo10() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text\n\nwith\n\nspace");
        String expected = "text\n\nwith\n\nspace";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithTabAndTab_BjkD11() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text\t\twith\t\tspace");
        String expected = "text\t\twith\t\tspace";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithEnterAndTabAndEnter_YobA12() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text\n\twith\n\tspace");
        String expected = "text\n\twith\n\tspace";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_String_textWithTabAndEnterAndTab_gUvO13() throws Exception {
        CommandLine commandLine = new CommandLine();
        String actual = commandLine.getOptionValue(' ', "text\t\nwith\t\nspace");
        String expected = "text\t\nwith\t\nspace";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptObject_XqDA0() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('a');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptObject2_TWPy1() {
        CommandLine commandLine = new CommandLine();
        Object result = commandLine.getOptionObject('b');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_fsSD0() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues('a');
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValuesWithCoverage_Cjtr1_1() {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getOptionValues('a');
        result = commandLine.getOptionValues('b');
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_vPzC0() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_ZJTp1() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getParsedOptionValue(option, () -> "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_eguK0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String[] actual = commandLine.getOptionValues(option);
        String[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_char_nrfq0() {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('a');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNoOption_hIDK1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        boolean result = commandLine.hasOption(option);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNullOption_OoMm2() {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        boolean result = commandLine.hasOption(option);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_jNgP5() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result1);
        assertTrue(result2);
        assertTrue(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndOneMissing_ICvq6() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result1);
        assertTrue(result2);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndAllMissing_WQEU7() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertFalse(result1);
        assertFalse(result2);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_ufhT0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgListWithCoverage_SzeO1() {
        CommandLine commandLine = new CommandLine();
        commandLine.getArgList();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_vbhv0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        Supplier<String> defaultValue = () -> "default";
        String result = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_Supplier_Lzuj0() {
        CommandLine cmdLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String result = cmdLine.getOptionValue('a', defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_Supplier_null_bjbd1() {
        CommandLine cmdLine = new CommandLine();
        Supplier<String> defaultValue = null;
        String result = cmdLine.getOptionValue('a', defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_Supplier_empty_JcXs2() {
        CommandLine cmdLine = new CommandLine();
        Supplier<String> defaultValue = () -> "";
        String result = cmdLine.getOptionValue('a', defaultValue);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_String_Supplier_TbdG4() {
        CommandLine cmdLine = new CommandLine();
        Supplier<String> defaultValue = () -> "default";
        String result = cmdLine.getOptionValue("option", defaultValue);
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_String_Supplier_null_zPev5() {
        CommandLine cmdLine = new CommandLine();
        Supplier<String> defaultValue = null;
        String result = cmdLine.getOptionValue("option", defaultValue);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_String_Supplier_empty_lVxb6() {
        CommandLine cmdLine = new CommandLine();
        Supplier<String> defaultValue = () -> "";
        String result = cmdLine.getOptionValue("option", defaultValue);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_char_Wpdr8() {
        CommandLine cmdLine = new CommandLine();
        String result = cmdLine.getOptionValue('a');
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_String_dEov9() {
        CommandLine cmdLine = new CommandLine();
        String result = cmdLine.getOptionValue("option");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_String_String_JukQ10() {
        CommandLine cmdLine = new CommandLine();
        String result = cmdLine.getOptionValue("option", "default");
        assertEquals("default", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_String_String_empty_ANZo12() {
        CommandLine cmdLine = new CommandLine();
        String result = cmdLine.getOptionValue("option", "");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_HXXo0() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_XlFJ0() {
        CommandLine commandLine = new CommandLine();
        try {
            Object result = commandLine.getParsedOptionValue('a');
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_MKMG1() {
        CommandLine commandLine = new CommandLine();
        try {
            Object result = commandLine.getParsedOptionValue('b');
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption2_QllL1() {
        CommandLine commandLine = new CommandLine();
        String opt = "test";
        boolean expected = false;
        boolean actual = commandLine.hasOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_OYih0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("opt"));
        assertFalse(commandLine.hasOption("otherOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionValue1_VZIT0() {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String value = commandLine.getOptionValue(option);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_jNgP5_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_jNgP5_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptions_jNgP5_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        commandLine.addOption(option3);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndOneMissing_ICvq6_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndOneMissing_ICvq6_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndOneMissing_ICvq6_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndAllMissing_WQEU7_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertFalse(result1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndAllMissing_WQEU7_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertFalse(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithMultipleOptionsAndAllMissing_WQEU7_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        boolean result1 = commandLine.hasOption(option1);
        boolean result2 = commandLine.hasOption(option2);
        boolean result3 = commandLine.hasOption(option3);
        assertFalse(result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_OYih0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_OYih0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("opt", "longOpt");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("otherOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOptions_RQFD2_vXcI0_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = Option.builder("option1").build();
        Option option2 = Option.builder("option2").build();
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(2, options.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOptions_RQFD2_vXcI0_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = Option.builder("option1").build();
        Option option2 = Option.builder("option2").build();
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option1, options[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOptions_RQFD2_vXcI0_3() {
        CommandLine commandLine = new CommandLine();
        Option option1 = Option.builder("option1").build();
        Option option2 = Option.builder("option2").build();
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        Option[] options = commandLine.getOptions();
        assertEquals(option2, options[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_withOptions_oqCb2_sjan0() {
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(Option.builder("option1").build());
        commandLine.addOption(Option.builder("option2").build());
        Iterator<Option> iterator = commandLine.iterator();
        while (iterator.hasNext()) {
            Option option = iterator.next();
            if (option.getOpt().equals("option1")) {
            } else if (option.getOpt().equals("option2")) {
            }
        }
    }
}