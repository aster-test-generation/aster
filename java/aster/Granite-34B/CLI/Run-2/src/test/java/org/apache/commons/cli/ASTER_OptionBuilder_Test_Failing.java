/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithtype_vwAm0() {
        OptionBuilder result = OptionBuilder.withType(new Object());
        assertEquals(result, OptionBuilder.withType((Class<?>) new Object()));
        assertEquals(result, OptionBuilder.withType((Class<?>) new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithtype_aRPC1() {
        OptionBuilder result = OptionBuilder.withType(new Object());
        assertEquals(result, OptionBuilder.withType((Class<?>) new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithtype6_EPot6() {
        OptionBuilder result = OptionBuilder.withType(new Object());
        assertEquals(result, OptionBuilder.withType((Class<?>) new Object()));
        assertEquals(result.getClass(), OptionBuilder.withType((Class<?>) new Object()).getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_LtNx0() {
        Option option = OptionBuilder.create();
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOpt_uHMv1_2_fid1() {
        Option option = OptionBuilder.create("longOpt");
        assertEquals("longOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndType_SVZb3_mtOr0_2() {
        Option option = Option.builder("longOpt").desc("description").type(Integer.class).build();
        assertEquals("longOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndTypeAndRequired_Zfzi4_zLyZ0_2() {
        Option option = Option.builder("longOpt").hasArg(true).argName("arg").required().build();
        assertEquals("longOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndTypeAndRequired_Zfzi4_zLyZ0_3() {
        Option option = Option.builder("longOpt").hasArg(true).argName("arg").required().build();
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndTypeAndRequired_Zfzi4_zLyZ0_4() {
        Option option = Option.builder("longOpt").hasArg(true).argName("arg").required().build();
        assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOpt_uHMv1() {
        Option option = OptionBuilder.create("longOpt");
        assertNotNull(option);
        assertEquals("longOpt", option.getLongOpt());
    }
}