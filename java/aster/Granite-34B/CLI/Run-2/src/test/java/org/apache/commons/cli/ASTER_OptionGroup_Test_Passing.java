/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredTrue_awTR0() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredFalse_mZBB1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_heTK0_1() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_heTK0_2() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertFalse(options.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoOptions_SEOQ1_2() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelected_eMjm0() {
        OptionGroup optionGroup = new OptionGroup();
        String selected = optionGroup.getSelected();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelectedForLineCoverage_nXxU1() {
        OptionGroup optionGroup = new OptionGroup();
        String selected = optionGroup.getSelected();
        selected = "test";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelectedForBranchCoverage_ZOgS2() {
        OptionGroup optionGroup = new OptionGroup();
        String selected = optionGroup.getSelected();
        if (selected == null) {
        } else {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoOptions_FNmY0() {
        OptionGroup group = new OptionGroup();
        assertEquals("[]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOneOption_wIlv1() {
        OptionGroup group = new OptionGroup();
        Option option = new Option("f", "file", false, "description");
        group.addOption(option);
        assertEquals("[-f description]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithTwoOptions_cUPq2() {
        OptionGroup group = new OptionGroup();
        Option option1 = new Option("f", "file", false, "description");
        Option option2 = new Option("d", "debug", false, "debug description");
        group.addOption(option1);
        group.addOption(option2);
        assertEquals("[-f description, -d debug description]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithDescriptionOnly_OfgP4() {
        OptionGroup group = new OptionGroup();
        Option option = new Option(null, "file", false, "description");
        group.addOption(option);
        assertEquals("[--file description]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CxuJ0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "longOption", true, "description");
        optionGroup.addOption(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNoArg_YpDK1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", true, "description");
        optionGroup.addOption(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNoLongOption_XESX2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        optionGroup.addOption(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelected_StKd0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        try {
            optionGroup.setSelected(option);
        } catch (AlreadySelectedException e) {
            assertEquals("Exception message", "Another option from this group has already been selected: option", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOneOption_Dsdx2_GHpc0_1() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("test", "testLong", false, "testDescription");
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOneOption_Dsdx2_GHpc0_2() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("test", "testLong", false, "testDescription");
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertEquals(1, options.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithOneOption_Dsdx2_GHpc0_3() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("test", "testLong", false, "testDescription");
        optionGroup.addOption(option);
        Collection<Option> options = optionGroup.getOptions();
        assertTrue(options.contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedWithNoSelectedOption_nnXb2_ZzRb0() {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "description");
        try {
            optionGroup.setSelected(option);
        } catch (AlreadySelectedException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertEquals("option", "option", optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsWithNoOptions_SEOQ1() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertNotNull(options);
        assertTrue(options.isEmpty());
    }
}