/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uBNP0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines_nUXg0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithException_qPpK1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        try {
            parser.handleConcatenatedOptions("token");
            fail("Expected exception");
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_JvPj0() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        String[] args = {"-a", "10"};
        CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines_zUOQ0() throws org.apache.commons.cli.ParseException {
        DefaultParser defaultParser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_rjVj0() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        String[] arguments = {"-a", "10"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_lNpg0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        String[] arguments = {"-a", "5"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("5", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_lRJH0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "10"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_jxRL0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        String[] arguments = {"--alpha", "10"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("10", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_CJEI1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        String[] arguments = {"--alpha=10"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("10", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_FAch0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "An alpha option");
        String[] arguments = {"-a", "alpha-value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("alpha-value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndArgument_sztA0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "long-option", true, "This is a long option");
        String[] arguments = {"--long-option", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndArgument_bxHF1() throws ParseException {
        Options options = new Options();
        options.addOption("s", "short-option", true, "This is a short option");
        String[] arguments = {"-s", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines_SmVJ0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "-option2", "value2", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_yeqU0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "An alpha option");
        String[] arguments = {"-a", "alphaValue"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_uHEQ0() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file");
        String[] arguments = {"--file", "test.txt"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("test.txt", commandLine.getOptionValue("file"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_lbTy1() throws ParseException {
        Options options = new Options();
        options.addOption("f", "file", true, "file");
        String[] arguments = {"--file=test.txt"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("test.txt", commandLine.getOptionValue("file"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_EIbj0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--", "arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(Arrays.asList("arg1", "arg2"), cmd.getArgList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines_kmjZ0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "-o", "value2", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rIpz0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--L", "-L", "--L=V", "-L=V", "--l", "--l=V"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_WPDv1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-LV"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_aeku5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_goVU0() throws org.apache.commons.cli.ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_lTOo0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = new String[]{"--op1", "value1", "--op2", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_ebgP1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("op1", "option1", true, "Option 1");
        String[] arguments = new String[]{"--option1", "value1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_eJQH2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("op1", "option1", true, "Option 1");
        String[] arguments = new String[]{"-op1", "value1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_GaWY3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("op1", "option1", true, "Option 1");
        String[] arguments = new String[]{"--option1=value1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_XReo4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("op1", "option1", true, "Option 1");
        String[] arguments = new String[]{"-op1=value1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_dNxm1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_Elsf4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = null;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArgs_DdjD2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, null, props, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArgs_mcVb3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidStopAtNonOption_ENhk6() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse1_rDlq0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-S", "arg1", "-L", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_JtAu1_1_fid1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
    }
}