/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNamesTest1_RKyT0() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<String> result = optionGroup.getNames();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedWithNullOption_mAKV0() throws org.apache.commons.cli.AlreadySelectedException {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setSelected(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedWithNonNullOptionAndNoSelectedOption_sgiH1() throws org.apache.commons.cli.AlreadySelectedException {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "longOption", true, "description");
        optionGroup.setSelected(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FEkP0() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("a", "alpha", false, "Alpha"));
        optionGroup.addOption(new Option("b", "beta", false, "Beta"));
        String actual = optionGroup.toString();
        String expected = "[-a Alpha, -b Beta]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoDescription_pKRd1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("a", "alpha", false, null));
        optionGroup.addOption(new Option("b", "beta", false, null));
        String actual = optionGroup.toString();
        String expected = "[-a, -b]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptOnly_IrtT2() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option(null, "alpha", false, "Alpha"));
        optionGroup.addOption(new Option(null, "beta", false, "Beta"));
        String actual = optionGroup.toString();
        String expected = "[--alpha Alpha, --beta Beta]";
        assertEquals(expected, actual);
    }
}