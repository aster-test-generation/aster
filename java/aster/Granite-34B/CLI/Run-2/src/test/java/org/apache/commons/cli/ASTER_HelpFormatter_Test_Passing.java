/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPadding_LIjA0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(result, helpFormatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithPositiveValue_dZxb1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = 10;
        int result = helpFormatter.getDescPadding();
        assertEquals(result, 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescPaddingWithNegativeValue_qIQz2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = 0;
        int result = helpFormatter.getDescPadding();
        assertEquals(result, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_ypac0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(100);
        assertEquals(100, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithZero_vFwK2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(0);
        assertEquals(0, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_hzTT0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String longOptSeparator = helpFormatter.getLongOptSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparatorWithCoverage_FecH1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String longOptSeparator = helpFormatter.getLongOptSeparator();
        longOptSeparator = helpFormatter.getLongOptSeparator();
        longOptSeparator = helpFormatter.getLongOptSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_CLTF0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        helpFormatter.printHelp(cmdLineSyntax, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullOptions_fyoI1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "cmdLineSyntax";
        Options options = new Options();
        helpFormatter.printHelp(cmdLineSyntax, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullCmdLineSyntax_NRBU2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "App [options] file ..."; // Provide a valid command line syntax
        helpFormatter.printHelp(cmdLineSyntax, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AllParameters_Xqej3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AllParameters_NullOptions_eWsF4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        Options options = new Options();
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AllParameters_NullCmdLineSyntax_DDuU5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        String cmdLineSyntax = "cmdLineSyntax";
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AllParameters_NullHeader_QMgL6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, null, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AllParameters_NullFooter_eFxk7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        boolean autoUsage = true;
        helpFormatter.printHelp(cmdLineSyntax, header, options, null, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_2_YTmB1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is another test string";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_3_GlFo2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a long test string that needs to be wrapped";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_4_qVbu3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test string with no spaces";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_6_aOXX5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 5;
        String text = "This is a test string with a really long word that needs to be wrapped";
        StringBuffer result = helpFormatter.renderWrappedText(stringBuffer, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFindWrapPosWithTabPresent_tGMt1() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text with\tpresent";
        int width = 20;
        int startPos = 0;
        int expected = 21;
        int actual = formatter.findWrapPos(text, width, startPos);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFindWrapPosWithNoLfOrTabPresent_MszM3() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 2;
        int startPos = 0;
        int expected = 2;
        int actual = formatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFindWrapPosWithStartPosGreaterThanLength_Fsaj4() {
        HelpFormatter formatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 2;
        int startPos = 20;
        int expected = -1;
        int actual = formatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_BxqB0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String name = "test";
        helpFormatter.setArgName(name);
        assertEquals(name, helpFormatter.defaultArgName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgNameCoverage_RBLa1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setArgName(null);
        helpFormatter.setArgName("");
        helpFormatter.setArgName(" ");
        helpFormatter.setArgName("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_mQwp0() {
        HelpFormatter formatter = new HelpFormatter();
        int padding = 10;
        formatter.setLeftPadding(padding);
        assertEquals(padding, formatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_zeroPadding_UPHH1() {
        HelpFormatter formatter = new HelpFormatter();
        int padding = 0;
        formatter.setLeftPadding(padding);
        assertEquals(padding, formatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_negativePadding_LxDZ2() {
        HelpFormatter formatter = new HelpFormatter();
        int padding = -10;
        formatter.setLeftPadding(padding);
        assertEquals(padding, formatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_maxPadding_uKVh3() {
        HelpFormatter formatter = new HelpFormatter();
        int padding = Integer.MAX_VALUE;
        formatter.setLeftPadding(padding);
        assertEquals(padding, formatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_minPadding_yDdE4() {
        HelpFormatter formatter = new HelpFormatter();
        int padding = Integer.MIN_VALUE;
        formatter.setLeftPadding(padding);
        assertEquals(padding, formatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_hmNZ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoAutoUsage_XVlA1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "footer";
        boolean autoUsage = false;
        helpFormatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoFooter_ExZc2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "";
        boolean autoUsage = true;
        helpFormatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoHeader_DphG3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "command line syntax";
        String header = "";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelpWithNoCmdLineSyntax_TYmW5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String cmdLineSyntax = "";
        String header = "header";
        Options options = new Options();
        int leftPad = 5;
        int descPad = 3;
        String footer = "footer";
        boolean autoUsage = true;
        try {
            helpFormatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("cmdLineSyntax not provided", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionComparator_nGfo0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setOptionComparator(null);
        assertEquals(null, helpFormatter.optionComparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_HZfv0() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        options.addOptionGroup(new OptionGroup());
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("cmdLineSyntax", options, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_JPZZ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.createPadding(10);
        assertEquals("          ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithZeroLength_POXM2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.createPadding(0);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_edjd0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        int width = 100;
        formatter.printHelp(width, cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withLongOptions_eitw1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("long-option", true, "This is a long option");
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        int width = 100;
        formatter.printHelp(width, cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_withOptionGroups_VdDf3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("option1", "This is option 1"));
        group.addOption(new Option("option2", "This is option 2"));
        options.addOptionGroup(group);
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        int width = 100;
        formatter.printHelp(width, cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpFormatterInitialization_Nxrp2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertNotNull(helpFormatter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_rigt0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "test";
        helpFormatter.setNewLine(newline);
        assertEquals(newline, helpFormatter.defaultNewLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLineWithNull_JDAk1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = null;
        helpFormatter.setNewLine(newline);
        assertEquals(newline, helpFormatter.defaultNewLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLineWithEmpty_PHPi2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "";
        helpFormatter.setNewLine(newline);
        assertEquals(newline, helpFormatter.defaultNewLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_awSr0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String syntaxPrefix = helpFormatter.getSyntaxPrefix();
        assertNotNull(syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefixWithCoverage_bPvR1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String syntaxPrefix = helpFormatter.getSyntaxPrefix();
        assertEquals("usage: ", syntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_PbkS0() {
        HelpFormatter formatter = new HelpFormatter();
        String prefix = "testPrefix";
        formatter.setLongOptPrefix(prefix);
        assertEquals(prefix, formatter.defaultLongOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefixCoverage_ksea1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLongOptPrefix(null);
        formatter.setLongOptPrefix("");
        formatter.setLongOptPrefix(" ");
        formatter.setLongOptPrefix("testPrefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getArgNameTest_rGhE0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String argName = helpFormatter.getArgName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithDifferentOptions_rWGw3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> optionComparator = helpFormatter.getOptionComparator();
        Option option1 = new Option("option1", "description1");
        Option option2 = new Option("option2", "description2");
        assertEquals(-1, optionComparator.compare(option1, option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparatorWithSimilarOptions_jXTB4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> optionComparator = helpFormatter.getOptionComparator();
        Option option1 = new Option("option", "description");
        Option option2 = new Option("option", "description");
        assertEquals(0, optionComparator.compare(option1, option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_lOdk0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        int width = 100;
        boolean autoUsage = true;
        helpFormatter.printHelp(width, cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_Edey0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "test";
        helpFormatter.setOptPrefix(prefix);
        assertEquals(prefix, helpFormatter.defaultOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefixWithNull_cEVz1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = null;
        helpFormatter.setOptPrefix(prefix);
        assertEquals(prefix, helpFormatter.defaultOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefixWithEmpty_YQGg2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "";
        helpFormatter.setOptPrefix(prefix);
        assertEquals(prefix, helpFormatter.defaultOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setDescPaddingTest_KqPd0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setDescPaddingTest_zero_Qqdf1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setDescPaddingTest_negative_YOdc2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(-10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_INbR0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = 1; // Assuming defaultLeftPad is initialized to1
        org.junit.jupiter.api.Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLeftPadding_bOBn4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.getLeftPadding();
        int expected = Integer.MIN_VALUE; // Assuming defaultLeftPad is initialized to Integer.MIN_VALUE
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_VFtX0() {
        HelpFormatter helpFormatter = new HelpFormatter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefixWithOneArgument_WmhM2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String longOptPrefix = "test";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefixWithTwoArguments_lzyT3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String longOptPrefix = "test";
        boolean longOptPrefixWithNull = false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefixWithThreeArguments_jicM4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String longOptPrefix = "test";
        boolean longOptPrefixWithNull = false;
        String longOptPrefixWithEmpty = "";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNullInput_yAdk0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithEmptyInput_nRaA1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String result = helpFormatter.rtrim("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNoTrailingWhitespaces_zAVM2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String input = "Hello World";
        String result = helpFormatter.rtrim(input);
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithTrailingWhitespaces_PoBQ3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String input = "Hello World   ";
        String expected = "Hello World";
        String result = helpFormatter.rtrim(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_QiAl0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "Usage: ";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithNullPrefix_Wvdn1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = null;
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithEmptyPrefix_pETy2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithInvalidPrefix_xznb4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "Invalid prefix";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithLongPrefix_tRZu5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "This is a long prefix that should be truncated";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithShortPrefix_ZCPz6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "Short";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithRandomPrefix_MlQd7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "RandomPrefix";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithUnicodePrefix_zIZd8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "UnicodePrefix";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithSpecialCharacterPrefix_PpHb9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "Special!Prefix";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithPrefixThatContainsSpace_HEKj10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "Prefix With Space";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithPrefixThatContainsTab_mbkU11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "Prefix\tWith\tTab";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefixWithPrefixThatContainsNewline_YYjL12() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String prefix = "Prefix\nWith\nNewline";
        helpFormatter.setSyntaxPrefix(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_vZsm0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        String footer = "footer";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_feHL0() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullPrintWriter_zxnk1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NullOptions_YtVD2() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, header, new Options(), leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_EmptyHeader_iwyJ4() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        int width = 100;
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, "", options, leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NegativeWidth_eYyf5() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int leftPad = 2;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, -1, cmdLineSyntax, header, options, leftPad, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NegativeLeftPad_KuOO6() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int descPad = 3;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, 0, descPad, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_NegativeDescPad_ulDy7() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        String cmdLineSyntax = "command line syntax";
        String header = "header";
        int width = 100;
        int leftPad = 2;
        String footer = "footer";
        formatter.printHelp(pw, width, cmdLineSyntax, header, options, leftPad, 0, footer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWrapped_RWOD0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        int width = 80;
        String text = "java.io.PrintWriter@680e9811";
        helpFormatter.printWrapped(pw, width, text);
        assertEquals("java.io.PrintWriter@680e9811", pw.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_AllParameters_NullAutoUsage_fixed_YnRg8_HfGh0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        helpFormatter.printHelp(cmdLineSyntax, header, options, footer, false);
    }
}