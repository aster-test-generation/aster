/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_LuKc0() {
        OptionBuilder.hasArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithBoolean_CtSU1() {
        OptionBuilder.hasArg(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithFalse_LATY2() {
        OptionBuilder.hasArg(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_dmcy3() {
        OptionBuilder.hasArgs(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgs_giBr4() {
        OptionBuilder.hasOptionalArgs(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_wIZD5() {
        OptionBuilder.hasOptionalArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithNoArgs_JqmH6() {
        OptionBuilder.hasArgs();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgsWithNoArgs_DzLt7() {
        OptionBuilder.hasOptionalArgs();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs28_gpgt27() {
        OptionBuilder.hasArgs(28);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChar_higN0() throws Exception {
        Option option = OptionBuilder.create('a');
        assertEquals("a", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateString_pVJg1() throws Exception {
        Option option = OptionBuilder.create("abc");
        assertEquals("abc", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOpt_uHMv1_1() {
        Option option = OptionBuilder.create("longOpt");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOpt_uHMv1_2() {
        Option option = OptionBuilder.create("longOpt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndType_SVZb3_mtOr0_1() {
        Option option = Option.builder("longOpt").desc("description").type(Integer.class).build();
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndType_SVZb3_mtOr0_3() {
        Option option = Option.builder("longOpt").desc("description").type(Integer.class).build();
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndType_SVZb3_mtOr0_4() {
        Option option = Option.builder("longOpt").desc("description").type(Integer.class).build();
        assertEquals(Integer.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndTypeAndRequired_Zfzi4_zLyZ0_1() {
        Option option = Option.builder("longOpt").hasArg(true).argName("arg").required().build();
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithLongOptAndDescriptionAndTypeAndRequired_Zfzi4_zLyZ0_5() {
        Option option = Option.builder("longOpt").hasArg(true).argName("arg").required().build();
        assertTrue(option.isRequired());
    }
}