/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Util_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_multipleHyphens_DPWG5() {
        String result = Util.stripLeadingHyphens("---hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotes_WithInputWithSingleQuotes_ReturnsInputWithoutQuotes_Dpdp3() {
        String input = "'test'";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotes_WithInputWithBothQuotes_ReturnsInputWithoutQuotes_COWN5() {
        String input = "\"'test'\"";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_multipleHyphens_DPWG5_fid1() {
        String result = Util.stripLeadingHyphens("----hello");
        assertEquals("-hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotes_WithInputWithSingleQuotes_ReturnsInputWithoutQuotes_Dpdp3_fid1() {
        String input = "''test''";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotes_WithInputWithBothQuotes_ReturnsInputWithoutQuotes_COWN5_fid1() {
        String input = "\"''test''\"";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        Assertions.assertEquals(expected, actual);
    }
}