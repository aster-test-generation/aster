/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextNextLineTabStopPosWidth_zPhL0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 15;
        String text = "This is a test text";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedTextNextLineTabStopPosWidthExceeds_YmWS1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 20;
        String text = "This is a test text";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_Zncr0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String s = "   a   ";
        String expected = "   a";
        String actual = helpFormatter.rtrim(s);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim2_RLcP1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String s = "   a  b  c";
        String expected = "   a  b  c";
        String actual = helpFormatter.rtrim(s);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_semt2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 20;
        int startPos = 5;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithNullOptionComparator_ujdf1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        helpFormatter.renderOptions(new StringBuffer(), 100, options, 10, 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithEmptyArgName_bIvv3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "b", true, "description");
        option.setArgName("");
        options.addOption(option);
        helpFormatter.renderOptions(new StringBuffer(), 100, options, 10, 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithNoDescription_gcVb5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "b", true, "description");
        option.setDescription(null);
        options.addOption(option);
        helpFormatter.renderOptions(new StringBuffer(), 100, options, 10, 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_kiDb0_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 14;
        int startPos = 5;
        int expected = 14;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_Sobt3_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 9;
        int startPos = 0;
        int expected = 9;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_ySGd4_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 14;
        int startPos = 0;
        int expected = 14;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_xhNZ5_fid2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a test string";
        int width = 20;
        int startPos = 0;
        int expected = 14;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assertEquals(expected, actual);
    }
}