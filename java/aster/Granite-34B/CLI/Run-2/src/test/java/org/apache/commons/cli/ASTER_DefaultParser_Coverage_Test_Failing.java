/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_TQrh0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_nZKu0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "-o", "value2", "arg1", "arg2"};
        Properties properties = new Properties();
        properties.setProperty("option1", "value1");
        properties.setProperty("option2", "value2");
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_kHhA0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndArgument_GwXV0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "10"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_IZdB0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_Itbl1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--option1=value1", "--option2=value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_JtAu1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getOptionValue('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_JtAu1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", cmd.getOptionValue('b'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUncoveredLines2_ZmTC1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "-o", "value2", "arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNumberFormatException_zWEJ1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--option", "abc"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(null, commandLine.getParsedOptionValue("--option", Double.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyMatchingOpts_nvFI0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--test"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        Assertions.assertTrue(commandLine.hasOption("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_BsXy0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArguments_RLhz2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = null;
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_QtLE3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_qDFF0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] args = new String[]{"-a", "-b", "-c"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(null, args, props, false);
        assertEquals(args.length, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_eZYp1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, false);
        assertEquals(args.length, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_ifHH4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c"};
        CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(args.length, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DtSk6_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "file1", "file2"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, true);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DtSk6_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "file1", "file2"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, true);
        assertEquals("file1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DtSk6_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "file1", "file2"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, true);
        assertEquals("file2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_ZuvG7_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "file1", "file2"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, false);
        assertEquals(5, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_ZuvG7_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "file1", "file2"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, false);
        assertEquals("file1", commandLine.getArgs()[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_ZuvG7_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "file1", "file2"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, false);
        assertEquals("file2", commandLine.getArgs()[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_xEmH0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = null;
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyOptions_rRXH1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArguments_ZhSW2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = null;
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_uboS3() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_kWwk4() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-a", "-b", "-c"};
        Properties properties = null;
        boolean stopAtNonOption = true;
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_ohEQ1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"-S", "arg1", "-L", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_rGxk0() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"--option", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_fKON1() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"--option"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(true, commandLine.hasOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionWithEqual_MooQ2() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-o", "value"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionWithoutEqual_BnPq3() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {"-o"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(true, commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_sLji0() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--long-option"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("long-option"), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_hRhL1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-s"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("s"), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_ZGWy2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--long-option", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("long-option"), "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndValue_brhj3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-s", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("s"), "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndNegativeValue_GlUG4() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--long-option", "-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("long-option"), "-value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndNegativeValue_OLzk5() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-s", "-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("s"), "-value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSign_YMRC6() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--long-option="};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("long-option"), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndEqualSign_gpbI7() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-s="};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("s"), "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSignAndValue_DoAw8() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--long-option=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("long-option"), "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse2_JtAu1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-a", "arg1", "-b", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", cmd.getOptionValue('a'));
        assertEquals("arg2", cmd.getOptionValue('b'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DtSk6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "file1", "file2"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, true);
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("file1", commandLine.getArgs()[0]);
        assertEquals("file2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_ZuvG7() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] args = new String[]{"-a", "-b", "-c", "file1", "file2"};
        Properties props = new Properties();
        CommandLine commandLine = parser.parse(options, args, props, false);
        assertEquals(5, commandLine.getArgs().length);
        assertEquals("file1", commandLine.getArgs()[3]);
        assertEquals("file2", commandLine.getArgs()[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndEqualSignAndValue_NbIj9() throws ParseException {
        Options options = new Options();
        String[] arguments = {"-s=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(commandLine.getOptionValue("s"), "value");
    }
}