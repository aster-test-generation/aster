/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithUnsupportedOptionType_Wwpn3() {
        Options options = PatternOptionBuilder.parsePattern("a@bc");
        assertEquals(String.class, options.getOption("a").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithConverter_IyaJ4() {
        Options options = PatternOptionBuilder.parsePattern("a#bc");
        assertEquals(File.class, options.getOption("a").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithNoMatchingOption_ZEqg8() {
        Options options = PatternOptionBuilder.parsePattern("a|b|c");
        assertTrue(options.getMatchingOptions("d").isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternWithRequiredOptionThatIsAlsoAnOptionGroup_Ihom9() {
        Options options = PatternOptionBuilder.parsePattern("a!|bc");
        assertTrue(options.getOption("a").isRequired());
    }
}