/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Util_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_null_ytFc0() {
        String result = Util.stripLeadingHyphens(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_empty_IrXs1() {
        String result = Util.stripLeadingHyphens("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_noHyphens_RVef2() {
        String result = Util.stripLeadingHyphens("hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_oneHyphen_Jfeg3() {
        String result = Util.stripLeadingHyphens("-hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingHyphens_twoHyphens_oQji4() {
        String result = Util.stripLeadingHyphens("--hello");
        assertEquals("hello", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotes_WithNullInput_ReturnsNull_JcNG0() {
        String input = null;
        String expected = null;
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotes_WithEmptyInput_ReturnsEmpty_dYTQ1() {
        String input = "";
        String expected = "";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotes_WithInputWithoutQuotes_ReturnsInput_fomM2() {
        String input = "test";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStripLeadingAndTrailingQuotes_WithInputWithDoubleQuotes_ReturnsInputWithoutQuotes_CJSA4() {
        String input = "\"test\"";
        String expected = "test";
        String actual = Util.stripLeadingAndTrailingQuotes(input);
        Assertions.assertEquals(expected, actual);
    }
}