/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithEmptyToken_LXqJ2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithTokenLengthOne_lVZp4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.handleConcatenatedOptions("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultParser_UwyA1() {
        DefaultParser defaultParser = new DefaultParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultParserWithAllowPartialMatching_ZjOH2() {
        DefaultParser defaultParser = new DefaultParser(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_cfXB0() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_JDpc0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_OwMN1_1() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_OwMN1_2() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_UXRZ2_1() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_UXRZ2_2() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_UXRZ2_3() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_QTUT3() throws Exception {
        final Options options = new Options();
        options.addOption("l", "long-option", false, "Long option");
        final String[] args = {"--long-option"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_kvAh4() throws Exception {
        final Options options = new Options();
        options.addOption("s", "short-option", false, "Short option");
        final String[] args = {"-s"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_Fdsn5_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_Fdsn5_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_GIwv6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_GIwv6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_GIwv6_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_GIwv6_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg2", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_qnWg7_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_qnWg7_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("arg1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_qnWg7_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_qnWg7_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("arg2", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_qnWg7_5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("arg3", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_fRwj0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_vNvN1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_vNvN1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_COdH2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_COdH2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_COdH2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_igSx3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_ehuZ4_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_dlQH5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_ZkKu6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value1", "--option", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_rztm0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_Egsv1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_Egsv1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RBjs2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RBjs2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RBjs2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_ZgOK3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_ZgOK3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_ZgOK3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UsJl4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_LXaC3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wOEs4_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultParser_uCNi0() {
        new DefaultParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultParserBoolean_zpgL1() {
        new DefaultParser(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_rHjW0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_xQub2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "-b", "2", "3", "4"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_QDfu4() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("a", "a", true, "Description");
        options.addRequiredOption("b", "b", true, "Description");
        final String[] arguments = {"-a", "1", "-b", "2"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_XhKV0_1() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_XhKV0_2() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ICxm3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals(0, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ICxm3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals(2, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ICxm3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals("a", cmd.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ICxm3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals("b", cmd.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_ICxm3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, properties, false);
        assertEquals(true, cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndNoArguments_ZRly0_1() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndNoArguments_ZRly0_2() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndOneArgument_NtDq1_1() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndOneArgument_NtDq1_2() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndOneArgument_NtDq1_3() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndNoArguments_dImi2_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", false, "Option");
        final String[] args = {};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndNoArguments_dImi2_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", false, "Option");
        final String[] args = {};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_LMXR0_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_SnkP1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_SnkP1_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_SnkP1_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_SnkP1_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_SnkP1_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_SnkP1_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(true, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_12() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RFTc2_13() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("non-option-argument", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(true, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_13() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_GEOF3_14() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_Ftrl0() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{}, null, false);
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_iwwi1() throws Exception {
        final Options options = new Options();
        final Option option = new Option("a", "alpha", false, "the alpha option");
        options.addOption(option);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOptionAndValue_CWfU2() throws Exception {
        final Options options = new Options();
        final Option option = new Option("a", "alpha", true, "the alpha option");
        options.addOption(option);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "foo"}, null, false);
        assertEquals("foo", commandLine.getOptionValue(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_DUIx3_1() throws Exception {
        final Options options = new Options();
        final Option alphaOption = new Option("a", "alpha", false, "the alpha option");
        final Option betaOption = new Option("b", "beta", false, "the beta option");
        options.addOption(alphaOption);
        options.addOption(betaOption);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b"}, null, false);
        assertTrue(commandLine.hasOption(alphaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_DUIx3_2() throws Exception {
        final Options options = new Options();
        final Option alphaOption = new Option("a", "alpha", false, "the alpha option");
        final Option betaOption = new Option("b", "beta", false, "the beta option");
        options.addOption(alphaOption);
        options.addOption(betaOption);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b"}, null, false);
        assertTrue(commandLine.hasOption(betaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndValues_RIFA4_1() throws Exception {
        final Options options = new Options();
        final Option alphaOption = new Option("a", "alpha", true, "the alpha option");
        final Option betaOption = new Option("b", "beta", true, "the beta option");
        options.addOption(alphaOption);
        options.addOption(betaOption);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "foo", "-b", "bar"}, null, false);
        assertEquals("foo", commandLine.getOptionValue(alphaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndValues_RIFA4_2() throws Exception {
        final Options options = new Options();
        final Option alphaOption = new Option("a", "alpha", true, "the alpha option");
        final Option betaOption = new Option("b", "beta", true, "the beta option");
        options.addOption(alphaOption);
        options.addOption(betaOption);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "foo", "-b", "bar"}, null, false);
        assertEquals("bar", commandLine.getOptionValue(betaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_hbgs5_1() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        final Option alphaOption = new Option("a", "alpha", false, "the alpha option");
        final Option betaOption = new Option("b", "beta", false, "the beta option");
        group.addOption(alphaOption);
        group.addOption(betaOption);
        options.addOptionGroup(group);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(commandLine.hasOption(alphaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_XoDn0() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], new Properties(), false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_kjRj1_1() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"arg1"}, new Properties(), false);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_kjRj1_2() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"arg1"}, new Properties(), false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_uqqH2_1() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"arg1", "arg2", "arg3"}, new Properties(), false);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_uqqH2_2() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"arg1", "arg2", "arg3"}, new Properties(), false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_uqqH2_3() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"arg1", "arg2", "arg3"}, new Properties(), false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_uqqH2_4() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"arg1", "arg2", "arg3"}, new Properties(), false);
        assertEquals("arg3", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Jfaw3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Jfaw3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EDAF4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "arg1", "-b", "arg2", "arg3"}, new Properties(), true);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EDAF4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "arg1", "-b", "arg2", "arg3"}, new Properties(), true);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_UFNd0_2() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_AQJO1_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_dLZM2_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_konp3_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_wOoc0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_snHE1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_snHE1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_owBl2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_owBl2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_qfFs3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_qfFs3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColon_ULXH7_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a:value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingColon_ULXH7_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a:value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_YomG0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_IaCu1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_IaCu1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_KZgi2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_KZgi2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_KZgi2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_zvQy3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_zvQy3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_zvQy3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_IBsp4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value1", "-a", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_IBsp4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value1", "-a", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_IBsp4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value1", "-a", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(2, commandLine.getOptionValues("a").length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_IBsp4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value1", "-a", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValues("a")[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_IBsp4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value1", "-a", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("value2", commandLine.getOptionValues("a")[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSign_Uazn5_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSign_Uazn5_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSign_Uazn5_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(true, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_12() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RmSu2_13() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] args = {"-a", "-b", "beta-value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("beta-value", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("file1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals("file2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_kGPz0_1() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_kGPz0_2() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("non-option-argument", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_6() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_7() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_9() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_10() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_11() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("beta", commandLine.getOptions()[1].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_12() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(true, commandLine.getOptions()[1].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndOptions_igtB1_14() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"-a", "-b", "beta-value", "non-option-argument"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("Beta option", commandLine.getOptions()[1].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DTth2_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "non-option-argument", "-b", "beta-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("non-option-argument", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DTth2_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "non-option-argument", "-b", "beta-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DTth2_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "non-option-argument", "-b", "beta-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DTth2_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "non-option-argument", "-b", "beta-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DTth2_6() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "non-option-argument", "-b", "beta-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_DTth2_8() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a", "non-option-argument", "-b", "beta-value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_ZnNe0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_WAkC1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wiQh2_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wiQh2_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_PEWe3_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_PEWe3_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_rkgi4_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_rkgi4_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingJavaPropertiesSyntax_pgsy6_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-avalue"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingJavaPropertiesSyntax_pgsy6_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-avalue"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_vBty0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_RCII1_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs().length == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_RCII1_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs()[0].equals("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_UPEl2_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_UPEl2_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs()[0].equals("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_UPEl2_3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs()[1].equals("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_OSpm3_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_OSpm3_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptionValue("o").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QoxP4_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QoxP4_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptionValues("o").length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QoxP4_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptionValues("o")[0].equals("value1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QoxP4_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptionValues("o")[1].equals("value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_baqI5_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_baqI5_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptionValue("o").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_baqI5_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs().length == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_baqI5_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs()[0].equals("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_efGd6_1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_efGd6_2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptionValue("o").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_efGd6_3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_efGd6_4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs()[0].equals("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_efGd6_5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs()[1].equals("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_Blxo0_1() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_Blxo0_2() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_PwKv0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_caIY3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "30");
        properties.setProperty("beta", "40");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_caIY3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20"};
        final Properties properties = new Properties();
        properties.setProperty("alpha", "30");
        properties.setProperty("beta", "40");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("20", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yFhA4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20", "non-option", "-c", "30"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yFhA4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20", "non-option", "-c", "30"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yFhA4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20", "non-option", "-c", "30"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("20", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yFhA4_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20", "non-option", "-c", "30"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("non-option", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yFhA4_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20", "non-option", "-c", "30"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("-c", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yFhA4_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20", "non-option", "-c", "30"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("30", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_kcig3() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "1", "2", "-b", "3"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_kcoU0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_iSHT1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_WXZy2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_WXZy2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_AOIR3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] arguments = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_hrLG4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_hrLG4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_qoKB0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertTrue(cmd.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_PoEQ1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_XgyE2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_XgyE2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_mNMp3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertEquals("value", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_SLnI4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] args = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertEquals("alphaValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_SLnI4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] args = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertEquals("betaValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithRequiredOptions_pSwn1_1() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "the alpha option");
        options.addRequiredOption("b", "bravo", true, "the bravo option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "alphaValue", "-b", "bravoValue"}, null, false);
        assertEquals("alphaValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithRequiredOptions_pSwn1_2() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "the alpha option");
        options.addRequiredOption("b", "bravo", true, "the bravo option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "alphaValue", "-b", "bravoValue"}, null, false);
        assertEquals("bravoValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithMissingRequiredOptions_ZlmB2_1() {
        final Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "the alpha option");
        options.addRequiredOption("b", "bravo", true, "the bravo option");
        final DefaultParser parser = new DefaultParser();
        final MissingOptionException ex = assertThrows(MissingOptionException.class,
                () -> parser.parse(options, new String[]{"-b", "bravoValue"}, null, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithProperties_UeCx4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "bravo", true, "the bravo option");
        final Properties properties = new Properties();
        properties.setProperty("a", "alphaValue");
        properties.setProperty("b", "bravoValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{}, properties, false);
        assertEquals("alphaValue", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithProperties_UeCx4_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "bravo", true, "the bravo option");
        final Properties properties = new Properties();
        properties.setProperty("a", "alphaValue");
        properties.setProperty("b", "bravoValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{}, properties, false);
        assertEquals("bravoValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_kyUa1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        final String[] args = {"-a"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_kyUa1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        final String[] args = {"-a"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_stmw2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a", "value"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_stmw2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a", "value"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_stmw2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a", "value"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_ybbT3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a=value"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_ybbT3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a=value"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_ybbT3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a=value"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_bhmo2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_bhmo2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_bhmo2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_bhmo2_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_wWvB0_1() throws Exception {
        final Options options = new Options();
        final String[] args = new String[]{"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_wWvB0_2() throws Exception {
        final Options options = new Options();
        final String[] args = new String[]{"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_wWvB0_3() throws Exception {
        final Options options = new Options();
        final String[] args = new String[]{"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_YcXS1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        final String[] args = new String[]{"-a", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_YcXS1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        final String[] args = new String[]{"-a", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_YcXS1_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        final String[] args = new String[]{"-a", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_YcXS1_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        final String[] args = new String[]{"-a", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_PopK2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        final String[] args = new String[]{"-a", "alphaValue", "-b", "betaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_PopK2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        final String[] args = new String[]{"-a", "alphaValue", "-b", "betaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_PopK2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        final String[] args = new String[]{"-a", "alphaValue", "-b", "betaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_PopK2_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        final String[] args = new String[]{"-a", "alphaValue", "-b", "betaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_PopK2_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        final String[] args = new String[]{"-a", "alphaValue", "-b", "betaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OgMd3_1() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").hasArg().desc("description").build());
        group.addOption(Option.builder("b").longOpt("beta").hasArg().desc("description").build());
        options.addOptionGroup(group);
        final String[] args = new String[]{"-a", "alphaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OgMd3_2() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").hasArg().desc("description").build());
        group.addOption(Option.builder("b").longOpt("beta").hasArg().desc("description").build());
        options.addOptionGroup(group);
        final String[] args = new String[]{"-a", "alphaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OgMd3_3() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").hasArg().desc("description").build());
        group.addOption(Option.builder("b").longOpt("beta").hasArg().desc("description").build());
        options.addOptionGroup(group);
        final String[] args = new String[]{"-a", "alphaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OgMd3_4() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").hasArg().desc("description").build());
        group.addOption(Option.builder("b").longOpt("beta").hasArg().desc("description").build());
        options.addOptionGroup(group);
        final String[] args = new String[]{"-a", "alphaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_NLLm0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_hGys2() throws Exception {
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        String[] arguments = {"-a", "-b", "valueB", "--", "nonOption"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_cinl3() throws Exception {
        Options options = new Options();
        options.addOption("a", "optionA", false, "Option A");
        options.addOption("b", "optionB", true, "Option B");
        options.addRequiredOption("c", "optionC", false, "Option C");
        String[] arguments = {"-a", "-b", "valueB"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
            Assertions.fail("Expected MissingOptionException");
        } catch (MissingOptionException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_vTAB0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.getArgs().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_xXkp1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_Ucsf2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        final String[] args = {"-a", "foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_toQF3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        final String[] args = {"-a=foo"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("foo", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_OyHj0_2() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_BIsX3_1() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_BIsX3_2() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_BIsX3_4() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_BIsX3_6() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {};
        final Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("2", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EdSj4_1() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b", "file.txt"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EdSj4_2() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b", "file.txt"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EdSj4_3() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b", "file.txt"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EdSj4_4() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b", "file.txt"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EdSj4_5() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b", "file.txt"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("file.txt", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_kvnL0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_oPfC1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_oPfC1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_oPfC1_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_mNQm3_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_mNQm3_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_mNQm3_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArgs_eLuG0() throws ParseException {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[0], new Properties(), false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_zTjU3_1() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"--alpha"}, new Properties(), false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_zTjU3_2() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"--alpha"}, new Properties(), false);
        assertTrue(cmd.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_oVpm4_1() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a"}, new Properties(), false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_oVpm4_2() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a"}, new Properties(), false);
        assertTrue(cmd.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArg_bRUs5_1() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, new Properties(), false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArg_bRUs5_2() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, new Properties(), false);
        assertTrue(cmd.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArg_bRUs5_3() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, new Properties(), false);
        assertEquals("b", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOneProperty_nxQi6_1() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, properties, false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOneProperty_nxQi6_2() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, properties, false);
        assertTrue(cmd.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOneProperty_nxQi6_3() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, properties, false);
        assertEquals("b", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOnePropertyAndOneArg_ymGs7_1() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b", "d"}, properties, false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOnePropertyAndOneArg_ymGs7_2() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b", "d"}, properties, false);
        assertEquals("d", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOnePropertyAndOneArg_ymGs7_3() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b", "d"}, properties, false);
        assertTrue(cmd.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgAndOnePropertyAndOneArg_ymGs7_4() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final Properties properties = new Properties();
        properties.setProperty("alpha", "c");
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b", "d"}, properties, false);
        assertEquals("b", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_SwKR0_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_SwKR0_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties);
        assertEquals(false, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_SwKR0_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_TSvJ1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"});
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_TSvJ1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"});
        assertEquals(true, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_TSvJ1_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"});
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_smTu2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, properties);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndProperties_smTu2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"}, properties);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndPropertiesAndStopAtNonOption_tVLi3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "--", "-d", "-e", "-f"}, properties, true);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndPropertiesAndStopAtNonOption_tVLi3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "--", "-d", "-e", "-f"}, properties, true);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArgumentsAndPropertiesAndStopAtNonOption_tVLi3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c", "--", "-d", "-e", "-f"}, properties, true);
        assertArrayEquals(new String[]{"-d", "-e", "-f"}, commandLine.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_BGoM0_1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_BGoM0_2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptions().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_BgDg1_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_BgDg1_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptions().length == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_BgDg1_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_BoPD2_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_BoPD2_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptions().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_BoPD2_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_BoPD2_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_MwyV3_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_MwyV3_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getOptions().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_MwyV3_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_MwyV3_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_MwyV3_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_MwyV3_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_erzI4_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertFalse(commandLine.getArgList().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_erzI4_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_graP3_1() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("option1", "option1", true, "Option 1");
        options.addRequiredOption("option2", "option2", true, "Option 2");
        final String[] arguments = {"-option1", "value1", "-option2", "value2"};
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_graP3_2() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("option1", "option1", true, "Option 1");
        options.addRequiredOption("option2", "option2", true, "Option 2");
        final String[] arguments = {"-option1", "value1", "-option2", "value2"};
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, new Properties(), false);
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_vkSy4_1() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("option1").longOpt("option1").hasArg(true).argName("value1").build());
        group.addOption(Option.builder("option2").longOpt("option2").hasArg(true).argName("value2").build());
        options.addOptionGroup(group);
        final String[] arguments = {"-option1", "value1"};
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_vkSy4_2() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("option1").longOpt("option1").hasArg(true).argName("value1").build());
        group.addOption(Option.builder("option2").longOpt("option2").hasArg(true).argName("value2").build());
        options.addOptionGroup(group);
        final String[] arguments = {"-option1", "value1"};
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, new Properties(), false);
        assertEquals(null, commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("g"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_8() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_9() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("i"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_10() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("j"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_11() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("k"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_12() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_13() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("m"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_14() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_15() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_16() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_17() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0_18() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(false, commandLine.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_uQrb2_2() throws Exception {
        final Options options = new Options();
        final String[] args = {"-option1", "value1", "non-option", "-option2", "value2"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, true);
        assertEquals(null, commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_ToKG3() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("option1", "option1", true, "Option 1");
        final String[] args = {};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, args, properties, false);
            fail("Expected exception");
        } catch (final MissingOptionException e) {
            assertEquals("Missing required option: option1", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_jpNf4_1() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("option1").longOpt("option1").hasArg(true).build());
        group.addOption(Option.builder("option2").longOpt("option2").hasArg(true).build());
        options.addOptionGroup(group);
        final String[] args = {"-option1", "value1"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_jpNf4_2() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("option1").longOpt("option1").hasArg(true).build());
        group.addOption(Option.builder("option2").longOpt("option2").hasArg(true).build());
        options.addOptionGroup(group);
        final String[] args = {"-option1", "value1"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals(null, commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_XRGU0() {
        Options options = new Options();
        String[] arguments = new String[0];
        boolean stopAtNonOption = false;
        CommandLine commandLine = new CommandLine();
        try {
            commandLine = new DefaultParser().parse(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_ZsGG1() {
        Options options = new Options();
        options.addOption("option", "longOption", true, "description");
        String[] arguments = new String[]{"--longOption", "value"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new CommandLine();
        try {
            commandLine = new DefaultParser().parse(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertEquals("value", commandLine.getOptionValue("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_vqXI2() {
        Options options = new Options();
        options.addRequiredOption("option", "longOption", true, "description");
        String[] arguments = new String[]{"--longOption", "value"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new CommandLine();
        try {
            commandLine = new DefaultParser().parse(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertEquals("value", commandLine.getOptionValue("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_RhKV3() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("option1", "longOption1", true, "description1"));
        group.addOption(new Option("option2", "longOption2", true, "description2"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"--longOption1", "value1"};
        boolean stopAtNonOption = false;
        CommandLine commandLine = new CommandLine();
        try {
            commandLine = new DefaultParser().parse(options, arguments, stopAtNonOption);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertEquals("value1", commandLine.getOptionValue("longOption1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_SjYA0() {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine commandLine = new CommandLine();
        try {
            commandLine = new DefaultParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Failed to parse command line: " + e.getMessage());
        }
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithPartialMatching_fiCb4_UPXU0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("option", "o", true, "description");
        CommandLine commandLine = parser.parse(options, new String[]{"token"}, new Properties());
        assertEquals("token", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_fEfR1_pDgJ0_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_fEfR1_pDgJ0_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(1, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_fEfR1_pDgJ0_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_fEfR1_pDgJ0_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_fEfR1_pDgJ0_5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(false, commandLine.getOptions()[0].hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_fEfR1_pDgJ0_6() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_fEfR1_pDgJ0_7() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_DLXp2_aQEv0_1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        final String[] args = {"-a", "-b"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_DLXp2_aQEv0_2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        final String[] args = {"-a", "-b"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, new Properties(), false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_DLXp2_aQEv0_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        final String[] args = {"-a", "-b"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, new Properties(), false);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_DLXp2_aQEv0_4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "alpha option");
        options.addOption("b", "beta", false, "beta option");
        final String[] args = {"-a", "-b"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, new Properties(), false);
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_xxRV2_edRR0_3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(2, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithOptionsAndArguments_vBwR1_JpNK0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithOptionsAndArguments_vBwR1_JpNK0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithPartialMatching_zSFD4_kTSa0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-be"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("10", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithPartialMatching_zSFD4_kTSa0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-be"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithOption_PkqP5_dhuG0() {
        final DefaultParser parser = new DefaultParser();
        final Options options = new Options();
        options.addOption("a", "a", true, "description");
        final String[] args = {"-a", "1"};
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, args, null, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals("1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithInvalidOption_sYJo3_fid1() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-x", "10"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertFalse(e.getMessage().contains("Unknown option: -x"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithPartialMatchingAndInvalidOption_cUkv5_fid1() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-be", "-x"};
        try {
            new DefaultParser(true).parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertFalse(e.getMessage().contains("Unknown option: -x"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_WithMissingOptionArgument_CbCw6_fid1() {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertFalse(e.getMessage().contains("Missing argument for option: -a"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_ehuZ4_2_fid1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"-o", "value1", "-o", "value1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoLongOptions_ZkKu6_2_fid1() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option");
        final String[] arguments = {"--option", "value1", "--option", "value1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals("value1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueAndOneArgumentAndStopAtNonOption_zvFk7_1_fid1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"-a", "value", "arg", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals(4, commandLine.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UsJl4_2_fid1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "alphaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertEquals("alphaValue", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_UsJl4_4_fid1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue", "nonOption"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, true);
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_OwMN1() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_UXRZ2() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_Fdsn5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("o"));
        assertEquals("arg1", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_GIwv6() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertTrue(commandLine.hasOption("o"));
        assertEquals("arg1", commandLine.getOptionValue("o"));
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg2", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArgumentsAndStopAtNonOption_qnWg7() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "Option with argument");
        final String[] args = {"-o", "arg1", "arg2", "arg3"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertTrue(commandLine.hasOption("o"));
        assertEquals("arg1", commandLine.getOptionValue("o"));
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg2", commandLine.getArgList().get(0));
        assertEquals("arg3", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_vNvN1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_COdH2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_Egsv1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_RBjs2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_ZgOK3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_XhKV0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, null, false);
        assertEquals(0, cmd.getArgList().size());
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndNoArguments_ZRly0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptionsAndOneArgument_NtDq1() throws Exception {
        final Options options = new Options();
        final String[] args = {"arg1"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndNoArguments_dImi2() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", false, "Option");
        final String[] args = {};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_LMXR0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_SnkP1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_DUIx3() throws Exception {
        final Options options = new Options();
        final Option alphaOption = new Option("a", "alpha", false, "the alpha option");
        final Option betaOption = new Option("b", "beta", false, "the beta option");
        options.addOption(alphaOption);
        options.addOption(betaOption);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b"}, null, false);
        assertTrue(commandLine.hasOption(alphaOption));
        assertTrue(commandLine.hasOption(betaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionsAndValues_RIFA4() throws Exception {
        final Options options = new Options();
        final Option alphaOption = new Option("a", "alpha", true, "the alpha option");
        final Option betaOption = new Option("b", "beta", true, "the beta option");
        options.addOption(alphaOption);
        options.addOption(betaOption);
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "foo", "-b", "bar"}, null, false);
        assertEquals("foo", commandLine.getOptionValue(alphaOption));
        assertEquals("bar", commandLine.getOptionValue(betaOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleArgument_kjRj1() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"arg1"}, new Properties(), false);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_uqqH2() throws Exception {
        final Options options = new Options();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"arg1", "arg2", "arg3"}, new Properties(), false);
        assertEquals(3, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
        assertEquals("arg3", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Jfaw3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final Properties properties = new Properties();
        properties.setProperty("alpha", "true");
        properties.setProperty("beta", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertTrue(commandLine.hasOption("a"));
        assertFalse(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_UFNd0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_snHE1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_owBl2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_qfFs3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_IaCu1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_KZgi2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_zvQy3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_IBsp4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value1", "-a", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals(2, commandLine.getOptionValues("a").length);
        assertEquals("value1", commandLine.getOptionValues("a")[0]);
        assertEquals("value2", commandLine.getOptionValues("a")[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgumentAndEqualSign_Uazn5() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a=value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_SMFZ1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_NnZq4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a", "file1", "file2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, true);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alpha", commandLine.getOptions()[0].getLongOpt());
        assertEquals(false, commandLine.getOptions()[0].hasArg());
        assertEquals(false, commandLine.getOptions()[0].hasArgName());
        assertEquals("Alpha option", commandLine.getOptions()[0].getDescription());
        assertEquals("file1", commandLine.getArgList().get(0));
        assertEquals("file2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_kGPz0() throws Exception {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_wiQh2() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "-b"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_PEWe3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a", "value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_rkgi4() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-a=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingJavaPropertiesSyntax_pgsy6() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        String[] arguments = {"-avalue"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_RCII1() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs().length == 1);
        assertTrue(commandLine.getArgs()[0].equals("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_UPEl2() throws Exception {
        final Options options = new Options();
        final String[] arguments = {"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgs().length == 2);
        assertTrue(commandLine.getArgs()[0].equals("arg1"));
        assertTrue(commandLine.getArgs()[1].equals("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_OSpm3() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
        assertTrue(commandLine.getOptionValue("o").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_QoxP4() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value1", "-o", "value2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
        assertTrue(commandLine.getOptionValues("o").length == 2);
        assertTrue(commandLine.getOptionValues("o")[0].equals("value1"));
        assertTrue(commandLine.getOptionValues("o")[1].equals("value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArgument_baqI5() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
        assertTrue(commandLine.getOptionValue("o").equals("value"));
        assertTrue(commandLine.getArgs().length == 1);
        assertTrue(commandLine.getArgs()[0].equals("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndTwoArguments_efGd6() throws Exception {
        final Options options = new Options();
        options.addOption("o", "option", true, "description");
        final String[] arguments = {"-o", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
        assertTrue(commandLine.getOptionValue("o").equals("value"));
        assertTrue(commandLine.getArgs().length == 2);
        assertTrue(commandLine.getArgs()[0].equals("arg1"));
        assertTrue(commandLine.getArgs()[1].equals("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_Blxo0() throws Exception {
        final Options options = new Options();
        final String[] args = {};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, new Properties(), false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yFhA4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "10", "-b", "20", "non-option", "-c", "30"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgList().size());
        assertEquals("10", commandLine.getOptionValue("a"));
        assertEquals("20", commandLine.getOptionValue("b"));
        assertEquals("non-option", commandLine.getArgList().get(0));
        assertEquals("-c", commandLine.getArgList().get(1));
        assertEquals("30", commandLine.getArgList().get(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_WXZy2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertTrue(commandLine.hasOption("a"));
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_hrLG4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", true, "Beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, arguments, new Properties(), false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_XgyE2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertTrue(cmd.hasOption("a"));
        assertTrue(cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptionArguments_SLnI4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] args = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, args, new Properties(), false);
        assertEquals("alphaValue", cmd.getOptionValue("a"));
        assertEquals("betaValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithRequiredOptions_pSwn1() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "the alpha option");
        options.addRequiredOption("b", "bravo", true, "the bravo option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "alphaValue", "-b", "bravoValue"}, null, false);
        assertEquals("alphaValue", cmd.getOptionValue("a"));
        assertEquals("bravoValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithMissingRequiredOptions_ZlmB2() {
        final Options options = new Options();
        options.addRequiredOption("a", "alpha", true, "the alpha option");
        options.addRequiredOption("b", "bravo", true, "the bravo option");
        final DefaultParser parser = new DefaultParser();
        final MissingOptionException ex = assertThrows(MissingOptionException.class,
                () -> parser.parse(options, new String[]{"-b", "bravoValue"}, null, false));
        assertTrue(ex.getMessage().contains("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithProperties_UeCx4() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "bravo", true, "the bravo option");
        final Properties properties = new Properties();
        properties.setProperty("a", "alphaValue");
        properties.setProperty("b", "bravoValue");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{}, properties, false);
        assertEquals("alphaValue", cmd.getOptionValue("a"));
        assertEquals("bravoValue", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_kyUa1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        final String[] args = {"-a"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValue_stmw2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a", "value"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndValueUsingEqualSign_ybbT3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha");
        final String[] args = {"-a=value"};
        final CommandLine commandLine = new DefaultParser().parse(options, args, null, false);
        assertEquals(0, commandLine.getArgs().length);
        assertTrue(commandLine.hasOption("a"));
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_GywZ1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final String[] args = {"-a"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_bhmo2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] args = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArgument_GFxT3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final String[] args = {"-a", "value"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(1, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_wWvB0() throws Exception {
        final Options options = new Options();
        final String[] args = new String[]{"arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_YcXS1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        final String[] args = new String[]{"-a", "value", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("value", commandLine.getOptionValue("a"));
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_PopK2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "description");
        options.addOption("b", "beta", true, "description");
        final String[] args = new String[]{"-a", "alphaValue", "-b", "betaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
        assertEquals("betaValue", commandLine.getOptionValue("b"));
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OgMd3() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").hasArg().desc("description").build());
        group.addOption(Option.builder("b").longOpt("beta").hasArg().desc("description").build());
        options.addOptionGroup(group);
        final String[] args = new String[]{"-a", "alphaValue", "arg1", "arg2"};
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, null, false);
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
        assertEquals(2, commandLine.getArgList().size());
        assertEquals("arg1", commandLine.getArgList().get(0));
        assertEquals("arg2", commandLine.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_OyHj0() throws ParseException {
        final Options options = new Options();
        final String[] arguments = {};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = false;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgList().size());
        assertEquals(0, commandLine.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_EdSj4() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        final String[] arguments = {"-a", "-b", "file.txt"};
        final Properties properties = new Properties();
        final boolean stopAtNonOption = true;
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgList().size());
        assertEquals(2, commandLine.getOptions().length);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("file.txt", commandLine.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_oPfC1() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
        assertEquals("10", commandLine.getOptionValue("a"));
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_mNQm3() throws Exception {
        Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-a", "10", "-b"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser(true);
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
        assertEquals("10", commandLine.getOptionValue("a"));
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneLongOption_zTjU3() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"--alpha"}, new Properties(), false);
        assertEquals(0, cmd.getArgs().length);
        assertTrue(cmd.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneShortOption_oVpm4() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a"}, new Properties(), false);
        assertEquals(0, cmd.getArgs().length);
        assertTrue(cmd.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOptionAndOneArg_bRUs5() throws ParseException {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "Alpha option");
        final DefaultParser parser = new DefaultParser();
        final CommandLine cmd = parser.parse(options, new String[]{"-a", "b"}, new Properties(), false);
        assertEquals(0, cmd.getArgs().length);
        assertTrue(cmd.hasOption("alpha"));
        assertEquals("b", cmd.getOptionValue("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_SwKR0() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(false, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithArguments_TSvJ1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[]{"-a", "-b", "-c"});
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(true, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoOptions_BGoM0() throws Exception {
        final Options options = new Options();
        final String[] arguments = {};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgList().isEmpty());
        assertTrue(commandLine.getOptions().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleOption_BgDg1() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        final String[] arguments = {"-a"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgList().isEmpty());
        assertTrue(commandLine.getOptions().length == 1);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_BoPD2() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "the alpha option");
        options.addOption("b", "beta", false, "the beta option");
        final String[] arguments = {"-a", "-b"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgList().isEmpty());
        assertTrue(commandLine.getOptions().length == 2);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("b", commandLine.getOptions()[1].getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionArguments_MwyV3() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", true, "the alpha option");
        options.addOption("b", "beta", true, "the beta option");
        final String[] arguments = {"-a", "alphaValue", "-b", "betaValue"};
        final DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        assertTrue(commandLine.getArgList().isEmpty());
        assertTrue(commandLine.getOptions().length == 2);
        assertEquals("a", commandLine.getOptions()[0].getOpt());
        assertEquals("alphaValue", commandLine.getOptionValue("a"));
        assertEquals("b", commandLine.getOptions()[1].getOpt());
        assertEquals("betaValue", commandLine.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptions_graP3() throws Exception {
        final Options options = new Options();
        options.addRequiredOption("option1", "option1", true, "Option 1");
        options.addRequiredOption("option2", "option2", true, "Option 2");
        final String[] arguments = {"-option1", "value1", "-option2", "value2"};
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_vkSy4() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("option1").longOpt("option1").hasArg(true).argName("value1").build());
        group.addOption(Option.builder("option2").longOpt("option2").hasArg(true).argName("value2").build());
        options.addOptionGroup(group);
        final String[] arguments = {"-option1", "value1"};
        final CommandLine commandLine = new DefaultParser().parse(options, arguments, new Properties(), false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
        assertEquals(null, commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_JLit0() throws Exception {
        final Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha");
        options.addOption("b", "bravo", false, "Bravo");
        options.addOption("c", "charlie", false, "Charlie");
        options.addOption("d", "delta", false, "Delta");
        options.addOption("e", "echo", false, "Echo");
        options.addOption("f", "foxtrot", false, "Foxtrot");
        options.addOption("g", "golf", false, "Golf");
        options.addOption("h", "hotel", false, "Hotel");
        options.addOption("i", "india", false, "India");
        options.addOption("j", "juliet", false, "Juliet");
        options.addOption("k", "kilo", false, "Kilo");
        options.addOption("l", "lima", false, "Lima");
        options.addOption("m", "mike", false, "Mike");
        options.addOption("n", "november", false, "November");
        options.addOption("o", "oscar", false, "Oscar");
        options.addOption("p", "papa", false, "Papa");
        options.addOption("q", "quebec", false, "Quebec");
        options.addOption("r", "romeo", false, "Romeo");
        options.addOption("s", "sierra", false, "Sierra");
        options.addOption("t", "tango", false, "Tango");
        options.addOption("u", "uniform", false, "Uniform");
        options.addOption("v", "victor", false, "Victor");
        options.addOption("w", "whiskey", false, "Whiskey");
        options.addOption("x", "xray", false, "Xray");
        options.addOption("y", "yankee", false, "Yankee");
        options.addOption("z", "zulu", false, "Zulu");
        final Properties properties = new Properties();
        properties.setProperty("a", "true");
        properties.setProperty("b", "false");
        properties.setProperty("c", "true");
        properties.setProperty("d", "false");
        properties.setProperty("e", "true");
        properties.setProperty("f", "false");
        properties.setProperty("g", "true");
        properties.setProperty("h", "false");
        properties.setProperty("i", "true");
        properties.setProperty("j", "false");
        properties.setProperty("k", "true");
        properties.setProperty("l", "false");
        properties.setProperty("m", "true");
        properties.setProperty("n", "false");
        properties.setProperty("o", "true");
        properties.setProperty("p", "false");
        properties.setProperty("q", "true");
        properties.setProperty("r", "false");
        properties.setProperty("s", "true");
        properties.setProperty("t", "false");
        properties.setProperty("u", "true");
        properties.setProperty("v", "false");
        properties.setProperty("w", "true");
        properties.setProperty("x", "false");
        properties.setProperty("y", "true");
        properties.setProperty("z", "false");
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, new String[0], properties, false);
        assertEquals(true, commandLine.hasOption("a"));
        assertEquals(false, commandLine.hasOption("b"));
        assertEquals(true, commandLine.hasOption("c"));
        assertEquals(false, commandLine.hasOption("d"));
        assertEquals(true, commandLine.hasOption("e"));
        assertEquals(false, commandLine.hasOption("f"));
        assertEquals(true, commandLine.hasOption("g"));
        assertEquals(false, commandLine.hasOption("h"));
        assertEquals(true, commandLine.hasOption("i"));
        assertEquals(false, commandLine.hasOption("j"));
        assertEquals(true, commandLine.hasOption("k"));
        assertEquals(false, commandLine.hasOption("l"));
        assertEquals(true, commandLine.hasOption("m"));
        assertEquals(false, commandLine.hasOption("n"));
        assertEquals(true, commandLine.hasOption("o"));
        assertEquals(false, commandLine.hasOption("p"));
        assertEquals(true, commandLine.hasOption("q"));
        assertEquals(false, commandLine.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroups_jpNf4() throws Exception {
        final Options options = new Options();
        final OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("option1").longOpt("option1").hasArg(true).build());
        group.addOption(Option.builder("option2").longOpt("option2").hasArg(true).build());
        options.addOptionGroup(group);
        final String[] args = {"-option1", "value1"};
        final Properties properties = new Properties();
        final DefaultParser parser = new DefaultParser();
        final CommandLine commandLine = parser.parse(options, args, properties, false);
        assertEquals("value1", commandLine.getOptionValue("option1"));
        assertEquals(null, commandLine.getOptionValue("option2"));
    }
}