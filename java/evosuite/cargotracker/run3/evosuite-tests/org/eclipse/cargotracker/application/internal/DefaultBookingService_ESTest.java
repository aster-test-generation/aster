/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 16:29:43 GMT 2024
 */

package org.eclipse.cargotracker.application.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import org.eclipse.cargotracker.application.internal.DefaultBookingService;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultBookingService_ESTest extends DefaultBookingService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TrackingId trackingId0 = new TrackingId();
      DefaultBookingService defaultBookingService0 = new DefaultBookingService();
      // Undeclared exception!
      try { 
        defaultBookingService0.requestPossibleRoutesForCargo(trackingId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.application.internal.DefaultBookingService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TrackingId trackingId0 = new TrackingId();
      DefaultBookingService defaultBookingService0 = new DefaultBookingService();
      // Undeclared exception!
      try { 
        defaultBookingService0.changeDeadline(trackingId0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.application.internal.DefaultBookingService", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultBookingService defaultBookingService0 = new DefaultBookingService();
      TrackingId trackingId0 = new TrackingId();
      UnLocode unLocode0 = new UnLocode();
      // Undeclared exception!
      try { 
        defaultBookingService0.changeDestination(trackingId0, unLocode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.application.internal.DefaultBookingService", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultBookingService defaultBookingService0 = new DefaultBookingService();
      Itinerary itinerary0 = new Itinerary();
      // Undeclared exception!
      try { 
        defaultBookingService0.assignCargoToRoute(itinerary0, (TrackingId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.application.internal.DefaultBookingService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultBookingService defaultBookingService0 = new DefaultBookingService();
      UnLocode unLocode0 = new UnLocode();
      // Undeclared exception!
      try { 
        defaultBookingService0.bookNewCargo(unLocode0, unLocode0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.application.internal.DefaultBookingService", e);
      }
  }
}
