/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 16:10:37 GMT 2024
 */

package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Location;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CargoRoute_ESTest extends CargoRoute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Location location0 = new Location(",`zrlA`3Z<PEt!S", "");
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      Location location1 = new Location("", ")^(N{#{W&s9");
      CargoRoute cargoRoute0 = new CargoRoute("C7IUOGxd", location0, location1, localDate0, false, false, location1, (String) null, linkedList0);
      assertFalse(cargoRoute0.isMisrouted());
      assertFalse(cargoRoute0.isClaimed());
      assertEquals(")^(N{#{W&s9 ()", cargoRoute0.getLastKnownLocation());
      assertEquals(",`zrlA`3Z<PEt!S", cargoRoute0.getOriginCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Location location0 = new Location("J`2s'rnkKa", "Dt{");
      LocalDate localDate0 = MockLocalDate.ofEpochDay(846L);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute((String) null, location0, location0, localDate0, false, true, location0, "Dt{", linkedList0);
      boolean boolean0 = cargoRoute0.isMisrouted();
      assertTrue(cargoRoute0.isClaimed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Location location0 = new Location("mA*:O9WUv.j1", "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute");
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("mA*:O9WUv.j1", location0, location0, localDate0, true, true, location0, "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", linkedList0);
      boolean boolean0 = cargoRoute0.isClaimed();
      assertTrue(cargoRoute0.isMisrouted());
      assertTrue(boolean0);
      assertEquals("mA*:O9WUv.j1", cargoRoute0.getTrackingId());
      assertEquals("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", cargoRoute0.getTransportStatus());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Location location0 = new Location("mA*:O9WUv.j1", "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute");
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("mA*:O9WUv.j1", location0, location0, localDate0, true, true, location0, "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", linkedList0);
      String string0 = cargoRoute0.getTransportStatus();
      assertEquals("mA*:O9WUv.j1", cargoRoute0.getTrackingId());
      assertTrue(cargoRoute0.isClaimed());
      assertTrue(cargoRoute0.isMisrouted());
      assertEquals("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Location location0 = new Location("mA*:O9WUv.j1", "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute");
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", location0, location0, localDate0, true, true, location0, "", linkedList0);
      cargoRoute0.getTransportStatus();
      assertTrue(cargoRoute0.isClaimed());
      assertTrue(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Location location0 = new Location("mA*:O9WUv.j1", "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute");
      LocalDate localDate0 = MockLocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(291, 0, zoneOffset0);
      Leg leg0 = new Leg("org.eclipse.cargotracker.interfaces.booking.facade.dto.Location", location0, location0, localDateTime0, localDateTime0);
      List<Leg> list0 = List.of(leg0, leg0, leg0, leg0, leg0, leg0, leg0, leg0, leg0);
      CargoRoute cargoRoute0 = new CargoRoute((String) null, location0, location0, localDate0, true, true, location0, "org.eclipse.cargotracker.interfaces.booking.facade.dto.Location", list0);
      String string0 = cargoRoute0.getTrackingId();
      assertNull(string0);
      assertTrue(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Location location0 = new Location("mA*:O9WUv.j1", "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute");
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("mA*:O9WUv.j1", location0, location0, localDate0, true, true, location0, "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", linkedList0);
      String string0 = cargoRoute0.getTrackingId();
      assertEquals("mA*:O9WUv.j1", string0);
      assertTrue(cargoRoute0.isClaimed());
      assertEquals("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", cargoRoute0.getTransportStatus());
      assertTrue(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Location location0 = new Location((String) null, ".");
      Period period0 = Period.ofDays((-1110));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute(".", location0, location0, localDate0, false, true, location0, (String) null, linkedList0);
      cargoRoute0.getOriginName();
      assertFalse(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Location location0 = new Location("", "");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3103L));
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("S`0I^", location0, location0, localDate0, false, false, location0, "", linkedList0);
      cargoRoute0.getOriginName();
      assertEquals("S`0I^", cargoRoute0.getTrackingId());
      assertFalse(cargoRoute0.isClaimed());
      assertFalse(cargoRoute0.isMisrouted());
      assertEquals("", cargoRoute0.getTransportStatus());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Location location0 = new Location("mA*:O9WUv.j1", "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute");
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("mA*:O9WUv.j1", location0, location0, localDate0, true, true, location0, "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", linkedList0);
      cargoRoute0.getOriginCode();
      assertEquals("mA*:O9WUv.j1", cargoRoute0.getTrackingId());
      assertEquals("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", cargoRoute0.getTransportStatus());
      assertTrue(cargoRoute0.isClaimed());
      assertTrue(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Location location0 = new Location("", "");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3103L));
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("S`0I^", location0, location0, localDate0, false, false, location0, "", linkedList0);
      cargoRoute0.getOriginCode();
      assertEquals("", cargoRoute0.getTransportStatus());
      assertFalse(cargoRoute0.isClaimed());
      assertFalse(cargoRoute0.isMisrouted());
      assertEquals("S`0I^", cargoRoute0.getTrackingId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Location location0 = new Location("", (String) null);
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", location0, location0, localDate0, true, true, location0, "H,bpJsq>8", linkedList0);
      cargoRoute0.getLastKnownLocationName();
      assertTrue(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
      assertEquals("", cargoRoute0.getTrackingId());
      assertEquals("H,bpJsq>8", cargoRoute0.getTransportStatus());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Location location0 = new Location("", "");
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", location0, location0, localDate0, true, false, location0, "", linkedList0);
      cargoRoute0.getLastKnownLocationName();
      assertTrue(cargoRoute0.isMisrouted());
      assertFalse(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Location location0 = new Location("mA*:O9WUv.j1", "org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute");
      LocalDate localDate0 = MockLocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(291, 0, zoneOffset0);
      Leg leg0 = new Leg("org.eclipse.cargotracker.interfaces.booking.facade.dto.Location", location0, location0, localDateTime0, localDateTime0);
      List<Leg> list0 = List.of(leg0, leg0, leg0, leg0, leg0, leg0, leg0, leg0, leg0);
      CargoRoute cargoRoute0 = new CargoRoute((String) null, location0, location0, localDate0, true, true, location0, "org.eclipse.cargotracker.interfaces.booking.facade.dto.Location", list0);
      cargoRoute0.getLastKnownLocationCode();
      assertTrue(cargoRoute0.isClaimed());
      assertTrue(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Location location0 = new Location("", "");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3103L));
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("S`0I^", location0, location0, localDate0, false, false, location0, "", linkedList0);
      cargoRoute0.getLastKnownLocationCode();
      assertFalse(cargoRoute0.isMisrouted());
      assertFalse(cargoRoute0.isClaimed());
      assertEquals("", cargoRoute0.getTransportStatus());
      assertEquals("S`0I^", cargoRoute0.getTrackingId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Location location0 = new Location("", "");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3103L));
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("S`0I^", location0, location0, localDate0, false, false, location0, "", linkedList0);
      cargoRoute0.getLastKnownLocation();
      assertEquals("S`0I^", cargoRoute0.getTrackingId());
      assertFalse(cargoRoute0.isClaimed());
      assertFalse(cargoRoute0.isMisrouted());
      assertEquals("", cargoRoute0.getTransportStatus());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Location location0 = new Location((String) null, ".");
      Period period0 = Period.ofDays((-1110));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute(".", location0, location0, localDate0, false, true, location0, (String) null, linkedList0);
      cargoRoute0.getFinalDestinationName();
      assertFalse(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Location location0 = new Location("", "");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3103L));
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("'<I~V=uKZ`$KkY", location0, location0, localDate0, true, true, location0, "S`0I^", linkedList0);
      cargoRoute0.getFinalDestinationName();
      assertEquals("S`0I^", cargoRoute0.getTransportStatus());
      assertEquals("'<I~V=uKZ`$KkY", cargoRoute0.getTrackingId());
      assertTrue(cargoRoute0.isClaimed());
      assertTrue(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Location location0 = new Location((String) null, ".");
      Period period0 = Period.ofDays((-1110));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute(".", location0, location0, localDate0, false, true, location0, (String) null, linkedList0);
      cargoRoute0.getFinalDestinationCode();
      assertFalse(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Location location0 = new Location("", "_\b#d|L%");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", location0, location0, localDate0, false, false, location0, "", linkedList0);
      cargoRoute0.getFinalDestinationCode();
      assertFalse(cargoRoute0.isClaimed());
      assertEquals("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", cargoRoute0.getTrackingId());
      assertEquals("", cargoRoute0.getTransportStatus());
      assertFalse(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("4@'NyP", (Location) null, (Location) null, localDate0, true, true, (Location) null, "4@'NyP", linkedList0);
      // Undeclared exception!
      try { 
        cargoRoute0.getOriginName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", (Location) null, (Location) null, localDate0, true, true, (Location) null, "", linkedList0);
      // Undeclared exception!
      try { 
        cargoRoute0.getOriginCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", (Location) null, (Location) null, localDate0, false, false, (Location) null, "", linkedList0);
      // Undeclared exception!
      try { 
        cargoRoute0.getOrigin();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", (Location) null, (Location) null, localDate0, true, true, (Location) null, "", linkedList0);
      // Undeclared exception!
      try { 
        cargoRoute0.getLastKnownLocationCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", (Location) null, (Location) null, localDate0, false, false, (Location) null, "", linkedList0);
      // Undeclared exception!
      try { 
        cargoRoute0.getFinalDestinationName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", (Location) null, (Location) null, localDate0, false, false, (Location) null, "", linkedList0);
      // Undeclared exception!
      try { 
        cargoRoute0.getFinalDestinationCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", (Location) null, (Location) null, localDate0, true, true, (Location) null, "", linkedList0);
      // Undeclared exception!
      try { 
        cargoRoute0.getFinalDestination();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = null;
      try {
        cargoRoute0 = new CargoRoute("org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg", (Location) null, (Location) null, (LocalDate) null, true, true, (Location) null, "org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg", linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.application.util.DateConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", (Location) null, (Location) null, localDate0, true, true, (Location) null, "", linkedList0);
      boolean boolean0 = cargoRoute0.isRouted();
      assertTrue(cargoRoute0.isClaimed());
      assertFalse(boolean0);
      assertTrue(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Location location0 = new Location("A", "A");
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      linkedList0.add((Leg) null);
      CargoRoute cargoRoute0 = new CargoRoute("A", location0, location0, localDate0, true, true, location0, "A", linkedList0);
      boolean boolean0 = cargoRoute0.isRouted();
      assertTrue(boolean0);
      assertTrue(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Location location0 = new Location("?=zlRxfQsLAW.wC", "ZRPotiK_}");
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("skJA(B", location0, location0, localDate0, true, false, location0, "org.eclipse.cargotracker.application.util.DateConverter", linkedList0);
      cargoRoute0.getLastKnownLocationName();
      assertFalse(cargoRoute0.isClaimed());
      assertEquals("org.eclipse.cargotracker.application.util.DateConverter", cargoRoute0.getTransportStatus());
      assertTrue(cargoRoute0.isMisrouted());
      assertEquals("skJA(B", cargoRoute0.getTrackingId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      Location location0 = new Location("N7[`R;*Jd;ee>m;oE K", (String) null);
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      CargoRoute cargoRoute0 = new CargoRoute("", location0, location0, localDate0, false, true, location0, "", linkedList0);
      cargoRoute0.getTrackingId();
      assertFalse(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Location location0 = new Location("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", "_\b#d|L%");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", location0, location0, localDate0, false, false, location0, "", linkedList0);
      cargoRoute0.getFinalDestinationCode();
      assertEquals("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", cargoRoute0.getTrackingId());
      assertFalse(cargoRoute0.isMisrouted());
      assertEquals("", cargoRoute0.getTransportStatus());
      assertFalse(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Location location0 = new Location((String) null, ".");
      Period period0 = Period.ofDays((-1110));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute(".", location0, location0, localDate0, false, true, location0, (String) null, linkedList0);
      cargoRoute0.getOriginCode();
      assertFalse(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Location location0 = new Location("", "");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3103L));
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("S`0I^", location0, location0, localDate0, false, false, location0, "", linkedList0);
      boolean boolean0 = cargoRoute0.isClaimed();
      assertFalse(boolean0);
      assertFalse(cargoRoute0.isMisrouted());
      assertEquals("", cargoRoute0.getTransportStatus());
      assertEquals("S`0I^", cargoRoute0.getTrackingId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Location location0 = new Location((String) null, ".");
      Period period0 = Period.ofDays((-1110));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute(".", location0, location0, localDate0, false, true, location0, (String) null, linkedList0);
      cargoRoute0.getArrivalDeadline();
      assertFalse(cargoRoute0.isMisrouted());
      assertTrue(cargoRoute0.isClaimed());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      Location location0 = new Location("N7[`R;*Jd;ee>m;oE K", (String) null);
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      CargoRoute cargoRoute0 = new CargoRoute("", location0, location0, localDate0, false, true, location0, "", linkedList0);
      cargoRoute0.getFinalDestination();
      assertTrue(cargoRoute0.isClaimed());
      assertFalse(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      Location location0 = new Location("N7[`R;*Jd;ee>m;oE K", (String) null);
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      CargoRoute cargoRoute0 = new CargoRoute("", location0, location0, localDate0, false, true, location0, "", linkedList0);
      cargoRoute0.getOrigin();
      assertTrue(cargoRoute0.isClaimed());
      assertFalse(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Location location0 = new Location("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", "_\b#d|L%");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", location0, location0, localDate0, false, false, location0, "", linkedList0);
      cargoRoute0.getNextLocation();
      assertEquals("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", cargoRoute0.getTrackingId());
      assertFalse(cargoRoute0.isClaimed());
      assertEquals("", cargoRoute0.getTransportStatus());
      assertFalse(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Location location0 = new Location(",`zrlA`3Z<PEt!S", "");
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("C7IUOGxd", location0, location0, localDate0, false, false, location0, (String) null, linkedList0);
      String string0 = cargoRoute0.getTransportStatus();
      assertFalse(cargoRoute0.isMisrouted());
      assertFalse(cargoRoute0.isClaimed());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Location location0 = new Location((String) null, ".");
      Period period0 = Period.ofDays((-1110));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute(".", location0, location0, localDate0, false, true, location0, (String) null, linkedList0);
      cargoRoute0.getLastKnownLocationCode();
      assertTrue(cargoRoute0.isClaimed());
      assertFalse(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("", (Location) null, (Location) null, localDate0, true, true, (Location) null, "", linkedList0);
      // Undeclared exception!
      try { 
        cargoRoute0.getLastKnownLocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Location location0 = new Location((String) null, ".");
      Period period0 = Period.ofDays((-1110));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute(".", location0, location0, localDate0, false, true, location0, (String) null, linkedList0);
      cargoRoute0.getLegs();
      assertTrue(cargoRoute0.isClaimed());
      assertFalse(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      Location location0 = new Location("", (String) null);
      CargoRoute cargoRoute0 = new CargoRoute("4@'NyP", (Location) null, location0, localDate0, true, true, (Location) null, ":GL/}:'RwhI\"1-", linkedList0);
      cargoRoute0.getFinalDestinationName();
      assertEquals("4@'NyP", cargoRoute0.getTrackingId());
      assertTrue(cargoRoute0.isClaimed());
      assertEquals(":GL/}:'RwhI\"1-", cargoRoute0.getTransportStatus());
      assertTrue(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      Location location0 = new Location("N7[`R;*Jd;ee>m;oE K", (String) null);
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      CargoRoute cargoRoute0 = new CargoRoute("", location0, location0, localDate0, false, true, location0, "", linkedList0);
      cargoRoute0.getOriginName();
      assertTrue(cargoRoute0.isClaimed());
      assertFalse(cargoRoute0.isMisrouted());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Location location0 = new Location("?=zlRxfQsLAW.wC", "ZRPotiK_}");
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      CargoRoute cargoRoute0 = new CargoRoute("skJA(B", location0, location0, localDate0, true, false, location0, "org.eclipse.cargotracker.application.util.DateConverter", linkedList0);
      boolean boolean0 = cargoRoute0.isMisrouted();
      assertEquals("skJA(B", cargoRoute0.getTrackingId());
      assertTrue(boolean0);
      assertEquals("org.eclipse.cargotracker.application.util.DateConverter", cargoRoute0.getTransportStatus());
      assertFalse(cargoRoute0.isClaimed());
  }
}
