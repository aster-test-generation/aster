/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 16:50:31 GMT 2024
 */

package org.eclipse.cargotracker.domain.model.handling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HandlingEvent_ESTest extends HandlingEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      // Undeclared exception!
      try { 
        handlingEvent0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.domain.model.handling.HandlingEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      // Undeclared exception!
      try { 
        handlingEvent0.getSummary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.domain.model.handling.HandlingEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cargo cargo0 = new Cargo();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.CUSTOMS;
      HandlingEvent handlingEvent0 = null;
      try {
        handlingEvent0 = new HandlingEvent(cargo0, (LocalDateTime) null, (LocalDateTime) null, handlingEvent_Type0, (Location) null, (Voyage) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/Validate
         //
         verifyException("org.eclipse.cargotracker.domain.model.handling.HandlingEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cargo cargo0 = new Cargo();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.UNLOAD;
      HandlingEvent handlingEvent0 = null;
      try {
        handlingEvent0 = new HandlingEvent(cargo0, (LocalDateTime) null, (LocalDateTime) null, handlingEvent_Type0, (Location) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/Validate
         //
         verifyException("org.eclipse.cargotracker.domain.model.handling.HandlingEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.CLAIM;
      boolean boolean0 = handlingEvent_Type0.requiresVoyage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.CLAIM;
      HandlingEvent.Type handlingEvent_Type1 = HandlingEvent.Type.CUSTOMS;
      boolean boolean0 = handlingEvent_Type0.sameValueAs(handlingEvent_Type1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.CLAIM;
      boolean boolean0 = handlingEvent_Type0.sameValueAs(handlingEvent_Type0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.CLAIM;
      boolean boolean0 = handlingEvent_Type0.sameValueAs((HandlingEvent.Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.UNLOAD;
      boolean boolean0 = handlingEvent_Type0.prohibitsVoyage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      Object object0 = new Object();
      boolean boolean0 = handlingEvent0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      boolean boolean0 = handlingEvent0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      boolean boolean0 = handlingEvent0.equals(handlingEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      HandlingEvent handlingEvent1 = new HandlingEvent();
      // Undeclared exception!
      try { 
        handlingEvent1.equals(handlingEvent0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/EqualsBuilder
         //
         verifyException("org.eclipse.cargotracker.domain.model.handling.HandlingEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      boolean boolean0 = handlingEvent_Type0.prohibitsVoyage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      LocalDateTime localDateTime0 = handlingEvent0.getCompletionTime();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      LocalDateTime localDateTime0 = handlingEvent0.getRegistrationTime();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      // Undeclared exception!
      try { 
        handlingEvent0.getVoyage();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.eclipse.cargotracker.domain.model.voyage.Voyage
         //
         verifyException("org.eclipse.cargotracker.domain.model.handling.HandlingEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      Location location0 = handlingEvent0.getLocation();
      assertNull(location0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      // Undeclared exception!
      try { 
        handlingEvent0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/builder/HashCodeBuilder
         //
         verifyException("org.eclipse.cargotracker.domain.model.handling.HandlingEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      handlingEvent0.getType();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HandlingEvent handlingEvent0 = new HandlingEvent();
      Cargo cargo0 = handlingEvent0.getCargo();
      assertNull(cargo0);
  }
}
