/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 16:01:40 GMT 2024
 */

package org.eclipse.cargotracker.interfaces.booking.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.eclipse.cargotracker.interfaces.booking.web.ItinerarySelection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ItinerarySelection_ESTest extends ItinerarySelection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      LinkedList<Leg> linkedList0 = new LinkedList<Leg>();
      RouteCandidate routeCandidate0 = new RouteCandidate(linkedList0);
      List<RouteCandidate> list0 = List.of(routeCandidate0);
      itinerarySelection0.routeCandidates = list0;
      // Undeclared exception!
      try { 
        itinerarySelection0.assignItinerary(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.web.ItinerarySelection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      itinerarySelection0.setTrackingId("[kN9NPW(!#i^K");
      String string0 = itinerarySelection0.getTrackingId();
      assertEquals("[kN9NPW(!#i^K", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      itinerarySelection0.setTrackingId("");
      String string0 = itinerarySelection0.getTrackingId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      itinerarySelection0.routeCandidates = null;
      LinkedList<RouteCandidate> linkedList0 = new LinkedList<RouteCandidate>();
      itinerarySelection0.routeCandidates = (List<RouteCandidate>) linkedList0;
      List<RouteCandidate> list0 = itinerarySelection0.getRouteCanditates();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      itinerarySelection0.routeCandidates = null;
      LinkedList<RouteCandidate> linkedList0 = new LinkedList<RouteCandidate>();
      LinkedList<Leg> linkedList1 = new LinkedList<Leg>();
      RouteCandidate routeCandidate0 = new RouteCandidate(linkedList1);
      linkedList0.add(routeCandidate0);
      itinerarySelection0.routeCandidates = (List<RouteCandidate>) linkedList0;
      List<RouteCandidate> list0 = itinerarySelection0.getRouteCanditates();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      LinkedList<RouteCandidate> linkedList0 = new LinkedList<RouteCandidate>();
      itinerarySelection0.routeCandidates = (List<RouteCandidate>) linkedList0;
      List<RouteCandidate> list0 = itinerarySelection0.getRouteCandidates();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      itinerarySelection0.routeCandidates = null;
      LinkedList<RouteCandidate> linkedList0 = new LinkedList<RouteCandidate>();
      LinkedList<Leg> linkedList1 = new LinkedList<Leg>();
      RouteCandidate routeCandidate0 = new RouteCandidate(linkedList1);
      linkedList0.add(routeCandidate0);
      itinerarySelection0.routeCandidates = (List<RouteCandidate>) linkedList0;
      List<RouteCandidate> list0 = itinerarySelection0.getRouteCandidates();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      LinkedList<RouteCandidate> linkedList0 = new LinkedList<RouteCandidate>();
      itinerarySelection0.routeCandidates = (List<RouteCandidate>) linkedList0;
      // Undeclared exception!
      try { 
        itinerarySelection0.assignItinerary((-2384));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2384, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      List<RouteCandidate> list0 = List.of();
      itinerarySelection0.routeCandidates = list0;
      // Undeclared exception!
      try { 
        itinerarySelection0.assignItinerary(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      CargoRoute cargoRoute0 = itinerarySelection0.getCargo();
      assertNull(cargoRoute0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      String string0 = itinerarySelection0.getTrackingId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      List<RouteCandidate> list0 = itinerarySelection0.getRouteCandidates();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      // Undeclared exception!
      try { 
        itinerarySelection0.load();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.booking.web.ItinerarySelection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ItinerarySelection itinerarySelection0 = new ItinerarySelection();
      List<RouteCandidate> list0 = itinerarySelection0.getRouteCanditates();
      assertNull(list0);
  }
}
