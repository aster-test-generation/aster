/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 15:48:13 GMT 2024
 */

package org.eclipse.pathfinder.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDateTime;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.pathfinder.api.TransitEdge;
import org.eclipse.pathfinder.api.TransitPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransitPath_ESTest extends TransitPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TransitEdge transitEdge0 = new TransitEdge((String) null, (String) null, ",]oL}\"", localDateTime0, localDateTime0);
      List<TransitEdge> list0 = List.of(transitEdge0, transitEdge0);
      TransitPath transitPath0 = new TransitPath(list0);
      LinkedList<TransitEdge> linkedList0 = new LinkedList<TransitEdge>();
      linkedList0.add(transitEdge0);
      transitPath0.setTransitEdges(linkedList0);
      List<TransitEdge> list1 = transitPath0.getTransitEdges();
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TransitPath transitPath0 = new TransitPath();
      LinkedList<TransitEdge> linkedList0 = new LinkedList<TransitEdge>();
      TransitEdge transitEdge0 = new TransitEdge();
      List<TransitEdge> list0 = linkedList0.subList(0, 0);
      linkedList0.add(transitEdge0);
      transitPath0.setTransitEdges(list0);
      // Undeclared exception!
      try { 
        transitPath0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TransitEdge transitEdge0 = new TransitEdge((String) null, (String) null, ",]oL}\"", localDateTime0, localDateTime0);
      List<TransitEdge> list0 = List.of(transitEdge0, transitEdge0);
      TransitPath transitPath0 = new TransitPath(list0);
      String string0 = transitPath0.toString();
      assertEquals("TransitPath{transitEdges=[TransitEdge{voyageNumber=null, fromUnLocode=null, toUnLocode=,]oL}\", fromDate=2014-02-14T20:21:21.320, toDate=2014-02-14T20:21:21.320}, TransitEdge{voyageNumber=null, fromUnLocode=null, toUnLocode=,]oL}\", fromDate=2014-02-14T20:21:21.320, toDate=2014-02-14T20:21:21.320}]}", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TransitPath transitPath0 = new TransitPath();
      List<TransitEdge> list0 = transitPath0.getTransitEdges();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TransitPath transitPath0 = new TransitPath((List<TransitEdge>) null);
      List<TransitEdge> list0 = transitPath0.getTransitEdges();
      assertNull(list0);
  }
}
