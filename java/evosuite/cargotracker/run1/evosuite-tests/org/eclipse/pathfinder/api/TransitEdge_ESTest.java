/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 15:50:16 GMT 2024
 */

package org.eclipse.pathfinder.api;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import org.eclipse.pathfinder.api.TransitEdge;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransitEdge_ESTest extends TransitEdge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0, 0, zoneOffset0);
      TransitEdge transitEdge0 = new TransitEdge("uR%4&", "|^L70$M^^UQ", "", localDateTime0, (LocalDateTime) null);
      assertEquals("TransitEdge{voyageNumber=uR%4&, fromUnLocode=|^L70$M^^UQ, toUnLocode=, fromDate=1969-12-31T06:00, toDate=null}", transitEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      transitEdge0.setVoyageNumber("uw6n~:V4k#S}k");
      String string0 = transitEdge0.getVoyageNumber();
      assertEquals("uw6n~:V4k#S}k", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      transitEdge0.setVoyageNumber("");
      String string0 = transitEdge0.getVoyageNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-3687L), 0, zoneOffset0);
      TransitEdge transitEdge0 = new TransitEdge("", (String) null, "uR%4&", localDateTime0, localDateTime0);
      transitEdge0.getToUnLocode();
      assertEquals("TransitEdge{voyageNumber=, fromUnLocode=null, toUnLocode=uR%4&, fromDate=1969-12-31T04:58:33, toDate=1969-12-31T04:58:33}", transitEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge("", "", "", (LocalDateTime) null, (LocalDateTime) null);
      String string0 = transitEdge0.getToUnLocode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      TransitEdge transitEdge0 = new TransitEdge("", ",@z", ")}xXM!A:", localDateTime0, localDateTime0);
      transitEdge0.getFromUnLocode();
      assertEquals("TransitEdge{voyageNumber=, fromUnLocode=,@z, toUnLocode=)}xXM!A:, fromDate=1970-01-01T18:00, toDate=1970-01-01T18:00}", transitEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      transitEdge0.setFromUnLocode("");
      String string0 = transitEdge0.getFromUnLocode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-3687L), 0, zoneOffset0);
      TransitEdge transitEdge0 = new TransitEdge("", (String) null, "uR%4&", localDateTime0, localDateTime0);
      transitEdge0.getFromDate();
      assertEquals("TransitEdge{voyageNumber=, fromUnLocode=null, toUnLocode=uR%4&, fromDate=1969-12-31T04:58:33, toDate=1969-12-31T04:58:33}", transitEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      transitEdge0.setToDate(localDateTime0);
      LocalDateTime localDateTime1 = transitEdge0.getToDate();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      LocalDateTime localDateTime0 = transitEdge0.getToDate();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      String string0 = transitEdge0.toString();
      assertEquals("TransitEdge{voyageNumber=null, fromUnLocode=null, toUnLocode=null, fromDate=null, toDate=null}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      LocalDateTime localDateTime0 = transitEdge0.getFromDate();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      String string0 = transitEdge0.getVoyageNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      transitEdge0.setFromDate(localDateTime0);
      assertEquals("TransitEdge{voyageNumber=null, fromUnLocode=null, toUnLocode=null, fromDate=2014-02-14T20:21:21.320, toDate=null}", transitEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      String string0 = transitEdge0.getFromUnLocode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      transitEdge0.setToUnLocode("");
      assertEquals("", transitEdge0.getToUnLocode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransitEdge transitEdge0 = new TransitEdge();
      String string0 = transitEdge0.getToUnLocode();
      assertNull(string0);
  }
}
