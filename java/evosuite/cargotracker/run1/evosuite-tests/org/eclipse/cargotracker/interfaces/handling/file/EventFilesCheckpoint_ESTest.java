/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 15:54:43 GMT 2024
 */

package org.eclipse.cargotracker.interfaces.handling.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EventFilesCheckpoint_ESTest extends EventFilesCheckpoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      File file0 = MockFile.createTempFile("org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint", "org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint");
      linkedList0.add(file0);
      eventFilesCheckpoint0.setFiles(linkedList0);
      File file1 = eventFilesCheckpoint0.nextFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
      assertNull(file1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Wt?p9k&[umvJ#8s6ef");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      MockFile mockFile0 = new MockFile("Wt?p9k&[umvJ#8s6ef");
      List<File> list0 = List.of((File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0);
      eventFilesCheckpoint0.setFiles(list0);
      File file0 = eventFilesCheckpoint0.nextFile();
      assertNotNull(file0);
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      linkedList0.add((File) null);
      MockFile mockFile0 = new MockFile((File) null, "");
      linkedList0.add((File) mockFile0);
      eventFilesCheckpoint0.setFiles(linkedList0);
      File file0 = eventFilesCheckpoint0.nextFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      MockFile mockFile0 = new MockFile(".CwIUQm>T6WV?y;)O(C");
      List<File> list0 = List.of((File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0);
      eventFilesCheckpoint0.setFiles(list0);
      File file0 = eventFilesCheckpoint0.nextFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      eventFilesCheckpoint0.setFilePointer(373L);
      long long0 = eventFilesCheckpoint0.getFilePointer();
      assertEquals(373L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      eventFilesCheckpoint0.setFilePointer((-2491L));
      long long0 = eventFilesCheckpoint0.getFilePointer();
      assertEquals((-2491L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Wt?p9k&[umvJ#8s6ef");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      MockFile mockFile0 = new MockFile("Wt?p9k&[umvJ#8s6ef");
      List<File> list0 = List.of((File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0);
      eventFilesCheckpoint0.setFiles(list0);
      File file0 = eventFilesCheckpoint0.currentFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      eventFilesCheckpoint0.nextFile();
      MockFile mockFile0 = new MockFile((File) null, "");
      eventFilesCheckpoint0.setFiles(linkedList0);
      linkedList0.add((File) null);
      linkedList0.add((File) mockFile0);
      File file0 = eventFilesCheckpoint0.currentFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      eventFilesCheckpoint0.setFiles((List<File>) null);
      // Undeclared exception!
      try { 
        eventFilesCheckpoint0.nextFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      eventFilesCheckpoint0.setFiles((List<File>) null);
      // Undeclared exception!
      try { 
        eventFilesCheckpoint0.currentFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      File file0 = MockFile.createTempFile("org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint", "org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint");
      linkedList0.add(file0);
      linkedList0.addFirst(file0);
      eventFilesCheckpoint0.setFiles(linkedList0);
      File file1 = eventFilesCheckpoint0.nextFile();
      assertNotNull(file1);
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      eventFilesCheckpoint0.nextFile();
      eventFilesCheckpoint0.currentFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      LinkedList<File> linkedList0 = new LinkedList<File>();
      File file0 = MockFile.createTempFile("org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint", "org.eclipse.cargotracker.interfaces.handling.file.EventFilesCheckpoint");
      linkedList0.add(file0);
      eventFilesCheckpoint0.setFiles(linkedList0);
      File file1 = eventFilesCheckpoint0.currentFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
      assertNotNull(file1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      eventFilesCheckpoint0.currentFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      MockFile mockFile0 = new MockFile(".CwIUQm>T6WV?y;)O(C");
      List<File> list0 = List.of((File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0, (File) mockFile0);
      eventFilesCheckpoint0.setFiles(list0);
      File file0 = eventFilesCheckpoint0.currentFile();
      assertEquals(0L, eventFilesCheckpoint0.getFilePointer());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EventFilesCheckpoint eventFilesCheckpoint0 = new EventFilesCheckpoint();
      long long0 = eventFilesCheckpoint0.getFilePointer();
      assertEquals(0L, long0);
  }
}
