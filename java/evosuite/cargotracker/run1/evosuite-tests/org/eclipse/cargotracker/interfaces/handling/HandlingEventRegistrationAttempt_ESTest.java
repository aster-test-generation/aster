/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 15:51:51 GMT 2024
 */

package org.eclipse.cargotracker.interfaces.handling;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.Clock;
import java.time.LocalDateTime;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.eclipse.cargotracker.interfaces.handling.HandlingEventRegistrationAttempt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HandlingEventRegistrationAttempt_ESTest extends HandlingEventRegistrationAttempt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      UnLocode unLocode0 = new UnLocode();
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt((LocalDateTime) null, (LocalDateTime) null, (TrackingId) null, voyageNumber0, handlingEvent_Type0, unLocode0);
      UnLocode unLocode1 = handlingEventRegistrationAttempt0.getUnLocode();
      assertNull(unLocode1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      UnLocode unLocode0 = new UnLocode();
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt((LocalDateTime) null, (LocalDateTime) null, (TrackingId) null, voyageNumber0, handlingEvent_Type0, unLocode0);
      HandlingEvent.Type handlingEvent_Type1 = handlingEventRegistrationAttempt0.getType();
      assertTrue(handlingEvent_Type1.prohibitsVoyage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TrackingId trackingId0 = new TrackingId();
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.LOAD;
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt(localDateTime0, localDateTime0, trackingId0, voyageNumber0, handlingEvent_Type0, (UnLocode) null);
      HandlingEvent.Type handlingEvent_Type1 = handlingEventRegistrationAttempt0.getType();
      assertTrue(handlingEvent_Type1.requiresVoyage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      UnLocode unLocode0 = new UnLocode();
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt((LocalDateTime) null, (LocalDateTime) null, (TrackingId) null, voyageNumber0, handlingEvent_Type0, unLocode0);
      TrackingId trackingId0 = handlingEventRegistrationAttempt0.getTrackingId();
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt1 = new HandlingEventRegistrationAttempt((LocalDateTime) null, (LocalDateTime) null, trackingId0, (VoyageNumber) null, handlingEvent_Type0, unLocode0);
      VoyageNumber voyageNumber1 = handlingEventRegistrationAttempt1.getVoyageNumber();
      assertNull(voyageNumber1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      UnLocode unLocode0 = new UnLocode();
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt((LocalDateTime) null, (LocalDateTime) null, (TrackingId) null, voyageNumber0, handlingEvent_Type0, unLocode0);
      LocalDateTime localDateTime0 = handlingEventRegistrationAttempt0.getRegistrationTime();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      UnLocode unLocode0 = new UnLocode();
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt((LocalDateTime) null, (LocalDateTime) null, (TrackingId) null, voyageNumber0, handlingEvent_Type0, unLocode0);
      LocalDateTime localDateTime0 = handlingEventRegistrationAttempt0.getCompletionTime();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TrackingId trackingId0 = new TrackingId();
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt(localDateTime0, localDateTime0, trackingId0, voyageNumber0, handlingEvent_Type0, (UnLocode) null);
      UnLocode unLocode0 = handlingEventRegistrationAttempt0.getUnLocode();
      assertNull(unLocode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TrackingId trackingId0 = new TrackingId();
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt(localDateTime0, localDateTime0, trackingId0, voyageNumber0, handlingEvent_Type0, (UnLocode) null);
      String string0 = handlingEventRegistrationAttempt0.toString();
      assertEquals("HandlingEventRegistrationAttempt{registrationTime=2014-02-14T20:21:21.320, completionTime=2014-02-14T20:21:21.320, trackingId=null, voyageNumber=null, type=RECEIVE, unLocode=null}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TrackingId trackingId0 = new TrackingId();
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt(localDateTime0, localDateTime0, trackingId0, voyageNumber0, handlingEvent_Type0, (UnLocode) null);
      LocalDateTime localDateTime1 = handlingEventRegistrationAttempt0.getRegistrationTime();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TrackingId trackingId0 = new TrackingId();
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt(localDateTime0, localDateTime0, trackingId0, voyageNumber0, handlingEvent_Type0, (UnLocode) null);
      VoyageNumber voyageNumber1 = handlingEventRegistrationAttempt0.getVoyageNumber();
      assertNull(voyageNumber1.getIdString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TrackingId trackingId0 = new TrackingId();
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt(localDateTime0, localDateTime0, trackingId0, voyageNumber0, handlingEvent_Type0, (UnLocode) null);
      TrackingId trackingId1 = handlingEventRegistrationAttempt0.getTrackingId();
      assertSame(trackingId0, trackingId1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      TrackingId trackingId0 = new TrackingId();
      VoyageNumber voyageNumber0 = new VoyageNumber();
      HandlingEvent.Type handlingEvent_Type0 = HandlingEvent.Type.RECEIVE;
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt(localDateTime0, localDateTime0, trackingId0, voyageNumber0, handlingEvent_Type0, (UnLocode) null);
      LocalDateTime localDateTime1 = handlingEventRegistrationAttempt0.getCompletionTime();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrackingId trackingId0 = new TrackingId();
      VoyageNumber voyageNumber0 = new VoyageNumber();
      UnLocode unLocode0 = new UnLocode();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HandlingEventRegistrationAttempt handlingEventRegistrationAttempt0 = new HandlingEventRegistrationAttempt(localDateTime0, (LocalDateTime) null, trackingId0, voyageNumber0, (HandlingEvent.Type) null, unLocode0);
      handlingEventRegistrationAttempt0.getType();
      assertEquals("HandlingEventRegistrationAttempt{registrationTime=2014-02-14T20:21:21.320, completionTime=null, trackingId=null, voyageNumber=null, type=null, unLocode=null}", handlingEventRegistrationAttempt0.toString());
  }
}
