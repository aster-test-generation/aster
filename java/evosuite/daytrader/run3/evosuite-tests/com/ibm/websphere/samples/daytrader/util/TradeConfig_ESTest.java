/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 16:20:28 GMT 2024
 */

package com.ibm.websphere.samples.daytrader.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TradeConfig_ESTest extends TradeConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TradeConfig.getRandomPriceChangeFactor();
      TradeConfig.getLongRun();
      TradeConfig.getJDBCDriverNeedsGlobalTransation();
      TradeConfig.rndNewUserID();
      TradeConfig.getPrimIterations();
      TradeConfig.setRunTimeMode(71);
      TradeConfig.getListQuotePriceChangeFrequency();
      TradeConfig.rndNewUserID();
      TradeConfig.getRunTimeMode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      TradeConfig.nextUserID();
      // Undeclared exception!
      try { 
        TradeConfig.rndEmail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = TradeConfig.rndAddress();
      assertNotNull(string0);
      assertEquals("0 Oak St.", string0);
      
      TradeConfig.getWebInterfaceNames();
      int int0 = TradeConfig.ASYNCH;
      TradeConfig.getRandomPriceChangeFactor();
      TradeConfig.nextUserID();
      TradeConfig.getPrimIterations();
      TradeConfig.nextUserID();
      TradeConfig.getOrderProcessingMode();
      TradeConfig.rndFullName();
      int int1 = TradeConfig.STATS_PAGE;
      TradeConfig.getOrderFee("uid:1");
      TradeConfig.getMAX_USERS();
      TradeConfig.getWebInterfaceNames();
      TradeConfig.rndAddress();
      TradeConfig.getScenarioAction(true);
      TradeConfig.getMAX_QUOTES();
      TradeConfig.getWebInterfaceNames();
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TradeConfig.getListQuotePriceChangeFrequency();
      TradeConfig.rndBoolean();
      TradeConfig.rndNewUserID();
      TradeConfig.setMAX_USERS(98);
      TradeConfig.rndSymbol();
      TradeConfig.setWebInterface(1);
      TradeConfig.setMAX_QUOTES((-49));
      TradeConfig.rndAddress();
      TradeConfig.rndUserID();
      TradeConfig.getUpdateQuotePrices();
      TradeConfig.rndCreditCard();
      TradeConfig.getPage(0);
      TradeConfig.getMAX_QUOTES();
      TradeConfig.getWebInterfaceNames();
      System.setCurrentTimeMillis(100);
      TradeConfig.rndUserID();
      TradeConfig.getMAX_USERS();
      TradeConfig.rndEmail(" threadID=");
      TradeConfig.rndQuantity();
      TradeConfig.getScenarioMixes();
      TradeConfig.rndFullName();
      TradeConfig.getWebInterface();
      TradeConfig.rndAddress();
      TradeConfig.rndBalance();
      TradeConfig.rndFullName();
      TradeConfig.getOrderProcessingMode();
      TradeConfig.getPage(1);
      System.setCurrentTimeMillis((-49));
      TradeConfig.getRunTimeModeNames();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TradeConfig.setLongRun(false);
      TradeConfig.getMarketSummaryInterval();
      TradeConfig.getJDBCDriverNeedsGlobalTransation();
      TradeConfig.getScenarioAction(true);
      TradeConfig.rndBigDecimal(20);
      TradeConfig.setScenarioCount((-1380));
      TradeConfig.getLongRun();
      TradeConfig.getScenarioAction(true);
      TradeConfig.getWebInterfaceNames();
      TradeConfig.setListQuotePriceChangeFrequency((-297));
      TradeConfig.setDisplayOrderAlerts(false);
      TradeConfig.getRandomPriceChangeFactor();
      TradeConfig.getMarketSummaryInterval();
      TradeConfig.rndBoolean();
      // Undeclared exception!
      try { 
        TradeConfig.getPage(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 20 out of bounds for length 10
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      float float0 = TradeConfig.rndPrice();
      assertEquals(1.0F, float0, 0.01F);
      
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:1999,s:2999", string0);
      
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = TradeConfig.random();
      assertEquals(0.0, double0, 0.01);
      
      TradeConfig.setListQuotePriceChangeFrequency(200);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:999", string0);
      
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      String string1 = TradeConfig.rndEmail("s:999");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = TradeConfig.rndNewUserID();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ru:19213924092813200", string2);
      
      String string3 = TradeConfig.rndNewUserID();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ru:19213924092813201", string3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = TradeConfig.getListQuotePriceChangeFrequency();
      assertEquals(100, int0);
      
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
      
      TradeConfig.setMAX_USERS(98);
      String string1 = TradeConfig.rndSymbol();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:0", string1);
      
      TradeConfig.setWebInterface(1);
      TradeConfig.setMAX_QUOTES((-49));
      String string2 = TradeConfig.rndAddress();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("100 Oak St.", string2);
      
      String string3 = TradeConfig.rndUserID();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("uid:1", string3);
      
      boolean boolean1 = TradeConfig.getUpdateQuotePrices();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = TradeConfig.rndCreditCard();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("20-300-400-500", string4);
      
      String string5 = TradeConfig.getPage(0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("/welcomeImg.jsp", string5);
      
      String string6 = TradeConfig.rndAddress();
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("600 Oak St.", string6);
      
      String string7 = TradeConfig.getUserID();
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("uid:0", string7);
      
      TradeConfig.setMAX_USERS(0);
      TradeConfig.setMAX_QUOTES(0);
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(98);
      assertNotNull(bigDecimal0);
      assertEquals((short)68, bigDecimal0.shortValue());
      assertEquals((byte)68, bigDecimal0.byteValue());
      
      int int1 = TradeConfig.rndInt(0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = TradeConfig.getScenarioCount();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean2 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      TradeConfig.incrementScenarioCount();
      int int3 = TradeConfig.getListQuotePriceChangeFrequency();
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(100, int3);
      
      BigDecimal bigDecimal1 = TradeConfig.getOrderFee("-");
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      String string8 = TradeConfig.getPage(0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertEquals("/welcomeImg.jsp", string8);
      
      // Undeclared exception!
      try { 
        TradeConfig.nextUserID();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      int int0 = TradeConfig.getScenarioCount();
      assertEquals(0, int0);
      
      TradeConfig.setListQuotePriceChangeFrequency(0);
      int int1 = TradeConfig.getListQuotePriceChangeFrequency();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(20, int2);
      
      boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertFalse(boolean0);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('h', char0);
      
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(20);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      TradeConfig.setScenarioCount(20);
      boolean boolean1 = TradeConfig.getLongRun();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char char1 = TradeConfig.getScenarioAction(false);
      assertFalse(char1 == char0);
      assertEquals('q', char1);
      
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      TradeConfig.setListQuotePriceChangeFrequency((-587));
      TradeConfig.setDisplayOrderAlerts(false);
      BigDecimal bigDecimal1 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      int int3 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(20, int3);
      
      int int4 = TradeConfig.getListQuotePriceChangeFrequency();
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals((-587), int4);
      
      BigDecimal bigDecimal2 = TradeConfig.getOrderFee("Async_2-Phase");
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      
      // Undeclared exception!
      try { 
        TradeConfig.getPage(9990);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9990 out of bounds for length 10
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("");
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      TradeConfig.setPrimIterations(2762);
      TradeConfig.setLongRun(false);
      float float0 = TradeConfig.rndPrice();
      assertEquals(1.0F, float0, 0.01F);
      
      TradeConfig.setScenarioCount(2762);
      TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
      TradeConfig.setAccessMode(2762);
      boolean boolean1 = TradeConfig.getDisplayOrderAlerts();
      assertTrue(boolean1);
      
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      TradeConfig.setMAX_HOLDINGS(0);
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
      
      TradeConfig.setMAX_USERS((-3));
      int int1 = TradeConfig.getMAX_QUOTES();
      assertFalse(int1 == int0);
      assertEquals(10000, int1);
      
      int int2 = TradeConfig.getMAX_QUOTES();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(10000, int2);
      
      // Undeclared exception!
      try { 
        TradeConfig.getUserID();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TradeConfig.setLongRun(false);
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      TradeConfig.setDisplayOrderAlerts(false);
      TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
      TradeConfig.setAccessMode(0);
      boolean boolean0 = TradeConfig.getDisplayOrderAlerts();
      assertFalse(boolean0);
      
      int int1 = TradeConfig.getOrderProcessingMode();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      TradeConfig.setMAX_HOLDINGS((-1));
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TradeConfig.getOrderFee((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TradeConfig.setScenarioCount((-613566757));
      String string0 = TradeConfig.rndSymbol();
      assertNotNull(string0);
      assertEquals("s:0", string0);
      
      int int0 = TradeConfig.getMarketSummaryInterval();
      assertEquals(20, int0);
      
      int int1 = TradeConfig.getScenarioCount();
      assertFalse(int1 == int0);
      assertEquals((-613566757), int1);
      
      int int2 = TradeConfig.getScenarioCount();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-613566757), int2);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('h', char0);
      
      int int3 = TradeConfig.getListQuotePriceChangeFrequency();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(100, int3);
      
      String string1 = TradeConfig.getPage(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/register.jsp", string1);
      
      TradeConfig.setMAX_USERS((-613566757));
      // Undeclared exception!
      try { 
        TradeConfig.getPage(2328);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2328 out of bounds for length 10
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:999", string0);
      
      char char0 = TradeConfig.getScenarioAction(true);
      assertEquals('q', char0);
      
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal((-2196));
      assertNotNull(bigDecimal0);
      assertEquals((byte)110, bigDecimal0.byteValue());
      assertEquals((short) (-658), bigDecimal0.shortValue());
      
      TradeConfig.setScenarioCount((-2196));
      boolean boolean0 = TradeConfig.getLongRun();
      assertTrue(boolean0);
      
      char char1 = TradeConfig.getScenarioAction(false);
      assertTrue(char1 == char0);
      assertEquals('q', char1);
      
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      TradeConfig.setListQuotePriceChangeFrequency(0);
      TradeConfig.setDisplayOrderAlerts(true);
      BigDecimal bigDecimal1 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      int int0 = TradeConfig.getMarketSummaryInterval();
      assertEquals(20, int0);
      
      boolean boolean1 = TradeConfig.rndBoolean();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        TradeConfig.getPage((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 10
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      TradeConfig.setMAX_USERS((-835));
      String string0 = TradeConfig.rndSymbol();
      assertNotNull(string0);
      assertEquals("s:0", string0);
      
      TradeConfig.setWebInterface((-2587));
      TradeConfig.setMAX_QUOTES(9980);
      String string1 = TradeConfig.rndAddress();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("100 Oak St.", string1);
      
      boolean boolean0 = TradeConfig.getUpdateQuotePrices();
      assertTrue(boolean0);
      
      String string2 = TradeConfig.rndCreditCard();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("20-300-400-500", string2);
      
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      // Undeclared exception!
      try { 
        TradeConfig.rndUserID();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -835
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = TradeConfig.getScenarioCount();
      assertEquals(0, int0);
      
      int int1 = TradeConfig.getAccessMode();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      float float0 = TradeConfig.rndFloat(763);
      assertEquals(0.0F, float0, 0.01F);
      
      TradeConfig.setListQuotePriceChangeFrequency(763);
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      int int2 = TradeConfig.getRunTimeMode();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = TradeConfig.getMAX_USERS();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(15000, int3);
      
      int int4 = TradeConfig.getWebInterface();
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = TradeConfig.getScenarioCount();
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      
      TradeConfig.setListQuotePriceChangeFrequency(0);
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
      
      int int6 = TradeConfig.getScenarioCount();
      assertFalse(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      
      int int7 = TradeConfig.getWebInterface();
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertFalse(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertEquals(0, int7);
      
      int int8 = TradeConfig.getMAX_HOLDINGS();
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int6);
      assertEquals(10, int8);
      
      int int9 = TradeConfig.getListQuotePriceChangeFrequency();
      assertTrue(int9 == int7);
      assertTrue(int9 == int2);
      assertTrue(int9 == int4);
      assertTrue(int9 == int6);
      assertTrue(int9 == int1);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertTrue(int9 == int0);
      assertTrue(int9 == int5);
      assertEquals(0, int9);
      
      // Undeclared exception!
      TradeConfig.getUserID();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
      
      String[] stringArray0 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string0 = TradeConfig.rndFullName();
      assertNotNull(string0);
      assertEquals("first:0 last:500", string0);
      
      int int0 = TradeConfig.getMarketSummaryInterval();
      assertEquals(20, int0);
      
      String string1 = TradeConfig.rndEmail("\t---Log.printCollection -- collection size=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\t---Log.printCollection -- collection size=@20.com", string1);
      
      TradeConfig.setOrderProcessingMode(20);
      String string2 = TradeConfig.rndBalance();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1000000", string2);
      
      String string3 = TradeConfig.rndCreditCard();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("30-400-500-600", string3);
      
      TradeConfig.setMAX_HOLDINGS((-2347));
      String string4 = TradeConfig.nextUserID();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("uid:0", string4);
      
      float float0 = TradeConfig.rndFloat(20);
      assertEquals(14.0F, float0, 0.01F);
      
      int int1 = TradeConfig.getMAX_QUOTES();
      assertFalse(int1 == int0);
      assertEquals(10000, int1);
      
      int int2 = TradeConfig.getMAX_HOLDINGS();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-2347), int2);
      
      TradeConfig.incrementSellDeficit();
      boolean boolean1 = TradeConfig.getDisplayOrderAlerts();
      assertTrue(boolean1);
      
      TradeConfig.setMAX_HOLDINGS((-2347));
      TradeConfig.setMAX_USERS(20);
      TradeConfig.setWebInterface((-2347));
      TradeConfig.setListQuotePriceChangeFrequency((-6));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:999", string0);
      
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      char char0 = TradeConfig.getScenarioAction(true);
      assertEquals('q', char0);
      
      TradeConfig.setUpdateQuotePrices(true);
      boolean boolean1 = TradeConfig.getLongRun();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = TradeConfig.rndNewUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ru:19213924092813200", string1);
      
      TradeConfig.setRunTimeMode('q');
      int int0 = TradeConfig.getListQuotePriceChangeFrequency();
      assertEquals(100, int0);
      
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("ru:19213924092813200");
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = TradeConfig.getOrderFee("s:999");
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      
      System.setCurrentTimeMillis((-217L));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      int int0 = TradeConfig.getScenarioCount();
      assertEquals(0, int0);
      
      TradeConfig.setListQuotePriceChangeFrequency(0);
      int int1 = TradeConfig.getListQuotePriceChangeFrequency();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(20, int2);
      
      boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertFalse(boolean0);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('h', char0);
      
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(20);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      TradeConfig.setScenarioCount(20);
      boolean boolean1 = TradeConfig.getLongRun();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char char1 = TradeConfig.getScenarioAction(false);
      assertFalse(char1 == char0);
      assertEquals('q', char1);
      
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      TradeConfig.setListQuotePriceChangeFrequency((-587));
      TradeConfig.setDisplayOrderAlerts(false);
      BigDecimal bigDecimal1 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      
      int int3 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(20, int3);
      
      boolean boolean2 = TradeConfig.rndBoolean();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        TradeConfig.getPage((-1141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1141 out of bounds for length 10
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TradeConfig.incrementSellDeficit();
      TradeConfig.setAccessMode(0);
      boolean boolean0 = TradeConfig.getUpdateQuotePrices();
      assertTrue(boolean0);
      
      int int0 = TradeConfig.getWebInterface();
      assertEquals(0, int0);
      
      String string0 = TradeConfig.rndAddress();
      assertNotNull(string0);
      assertEquals("0 Oak St.", string0);
      
      TradeConfig.setMAX_QUOTES(0);
      boolean boolean1 = TradeConfig.rndBoolean();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[][] intArray0 = TradeConfig.getScenarioMixes();
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      
      TradeConfig tradeConfig0 = new TradeConfig();
      assertNotNull(tradeConfig0);
      assertEquals(1, tradeConfig0.getPrimIterations());
      assertEquals(0, tradeConfig0.getScenarioCount());
      assertEquals(0, tradeConfig0.getMAX_QUOTES());
      assertEquals(10, tradeConfig0.getMAX_HOLDINGS());
      assertEquals(0, tradeConfig0.getRunTimeMode());
      assertEquals(0, tradeConfig0.getOrderProcessingMode());
      assertEquals("1000000", tradeConfig0.rndBalance());
      assertEquals(100, tradeConfig0.getListQuotePriceChangeFrequency());
      assertEquals(20, tradeConfig0.getMarketSummaryInterval());
      assertFalse(tradeConfig0.getJDBCDriverNeedsGlobalTransation());
      assertTrue(tradeConfig0.getLongRun());
      assertEquals(15000, tradeConfig0.getMAX_USERS());
      assertTrue(tradeConfig0.getPublishQuotePriceChange());
      assertEquals(0, tradeConfig0.getAccessMode());
      assertEquals(0, tradeConfig0.getWebInterface());
      assertTrue(tradeConfig0.getUpdateQuotePrices());
      assertTrue(tradeConfig0.getDisplayOrderAlerts());
      assertEquals(1, TradeConfig.REGISTER_PAGE);
      assertEquals(0, TradeConfig.HOME_OP);
      assertEquals(3, TradeConfig.QUOTE_PAGE);
      assertEquals(1, TradeConfig.ASYNCH);
      assertEquals(9, TradeConfig.MARKET_SUMMARY_PAGE);
      assertEquals(4, TradeConfig.HOME_PAGE);
      assertEquals(9, TradeConfig.UPDATEACCOUNT_OP);
      assertEquals(4, TradeConfig.REGISTER_OP);
      assertEquals(1, TradeConfig.DIRECT);
      assertEquals(7, TradeConfig.CONFIG_PAGE);
      assertEquals(0, TradeConfig.WELCOME_PAGE);
      assertEquals(0, TradeConfig.JSP);
      assertEquals(0, TradeConfig.SYNCH);
      assertEquals(3, TradeConfig.LOGOUT_OP);
      assertEquals(7, TradeConfig.BUY_OP);
      assertEquals(2, TradeConfig.JSP_Images_HTTP2);
      assertEquals(2, TradeConfig.PORTFOLIO_PAGE);
      assertEquals(0, TradeConfig.EJB3);
      assertEquals(10, TradeConfig.QUOTES_PER_PAGE);
      assertEquals(5, TradeConfig.ACCOUNT_PAGE);
      assertEquals(5, TradeConfig.ACCOUNT_OP);
      assertEquals(8, TradeConfig.SELL_OP);
      assertEquals(6, TradeConfig.ORDER_PAGE);
      assertEquals(2, TradeConfig.ASYNCH_2PHASE);
      assertEquals(1, TradeConfig.QUOTE_OP);
      assertEquals(2, TradeConfig.SESSION_TO_DIRECT);
      assertEquals(6, TradeConfig.PORTFOLIO_OP);
      assertEquals(2, TradeConfig.LOGIN_OP);
      assertEquals(1000, TradeConfig.KEYBLOCKSIZE);
      assertEquals(8, TradeConfig.STATS_PAGE);
      assertTrue(TradeConfig.RND_USER);
      assertFalse(TradeConfig.JDBCDriverNeedsGlobalTransation);
      assertEquals(5, TradeConfig.verifyPercent);
      assertEquals(0, TradeConfig.STANDARD);
      assertEquals(1, TradeConfig.JSP_Images);
      
      boolean boolean2 = TradeConfig.rndBoolean();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = TradeConfig.rndSymbol();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:0", string1);
      
      double double0 = TradeConfig.random();
      assertEquals(0.2, double0, 0.01);
      
      double double1 = TradeConfig.random();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.3, double1, 0.01);
      
      int int1 = TradeConfig.getAccessMode();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = TradeConfig.getDisplayOrderAlerts();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = TradeConfig.getListQuotePriceChangeFrequency();
      assertEquals(100, int0);
      
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
      
      TradeConfig.setMAX_USERS(98);
      String string1 = TradeConfig.rndSymbol();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:0", string1);
      
      TradeConfig.setWebInterface(1);
      TradeConfig.setMAX_QUOTES((-49));
      String string2 = TradeConfig.rndUserID();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("uid:0", string2);
      
      String string3 = TradeConfig.rndUserID();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("uid:2", string3);
      
      boolean boolean0 = TradeConfig.getUpdateQuotePrices();
      assertTrue(boolean0);
      
      String string4 = TradeConfig.rndCreditCard();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("10-200-300-400", string4);
      
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      TradeConfig.setListQuotePriceChangeFrequency(100);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = TradeConfig.getListQuotePriceChangeFrequency();
      assertEquals(100, int0);
      
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
      
      TradeConfig.setMAX_USERS(98);
      String string1 = TradeConfig.rndSymbol();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:0", string1);
      
      TradeConfig.setWebInterface(1);
      TradeConfig.setMAX_QUOTES((-49));
      String string2 = TradeConfig.rndAddress();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("100 Oak St.", string2);
      
      TradeConfig.setAccessMode(100);
      String string3 = TradeConfig.rndUserID();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("uid:1", string3);
      
      boolean boolean1 = TradeConfig.getUpdateQuotePrices();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = TradeConfig.rndCreditCard();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("20-300-400-500", string4);
      
      String string5 = TradeConfig.getPage(0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("/welcomeImg.jsp", string5);
      
      String string6 = TradeConfig.rndAddress();
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("600 Oak St.", string6);
      
      String string7 = TradeConfig.getUserID();
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("uid:0", string7);
      
      TradeConfig.setMAX_USERS(0);
      TradeConfig.setMAX_QUOTES(0);
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(98);
      assertNotNull(bigDecimal0);
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertEquals((short)68, bigDecimal0.shortValue());
      
      int int1 = TradeConfig.rndInt(0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = TradeConfig.getScenarioCount();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean2 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      TradeConfig.incrementScenarioCount();
      int int3 = TradeConfig.getWebInterface();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      String string8 = TradeConfig.rndSymbols();
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals("s:0,s:0,s:0,s:0,s:0,s:0,s:0,s:0,s:0,s:0", string8);
      
      boolean boolean3 = TradeConfig.getDisplayOrderAlerts();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('h', char0);
      
      int int4 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(20, int4);
      
      TradeConfig.setOrderProcessingMode(0);
      boolean boolean4 = TradeConfig.rndBoolean();
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string9 = TradeConfig.rndEmail("20-300-400-500");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      
      boolean boolean5 = TradeConfig.getUpdateQuotePrices();
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TradeConfig.setDisplayOrderAlerts(true);
      TradeConfig.setPrimIterations(0);
      TradeConfig.setMAX_USERS((-316));
      String string0 = TradeConfig.getPage(0);
      assertNotNull(string0);
      assertEquals("/welcome.jsp", string0);
      
      boolean boolean0 = TradeConfig.getLongRun();
      assertTrue(boolean0);
      
      TradeConfig.incrementSellDeficit();
      String string1 = TradeConfig.rndBalance();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1000000", string1);
      
      int int0 = 111;
      TradeConfig.setOrderProcessingMode(111);
      String string2 = TradeConfig.rndSymbol();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("s:0", string2);
      
      String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(1962.6179F);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short)196, bigDecimal0.shortValue());
      
      int int1 = TradeConfig.getAccessMode();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      TradeConfig.setMAX_QUOTES((-1));
      int int2 = TradeConfig.getScenarioCount();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      TradeConfig.setMAX_HOLDINGS(111);
      boolean boolean1 = TradeConfig.getUpdateQuotePrices();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("1000000", "1000000");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = TradeConfig.getUpdateQuotePrices();
      assertTrue(boolean0);
      
      char char0 = TradeConfig.getScenarioAction(true);
      assertEquals('h', char0);
      
      TradeConfig.setUpdateQuotePrices(false);
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TradeConfig.setLongRun(true);
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      int int1 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      float float0 = TradeConfig.rndPrice();
      assertEquals(1.0F, float0, 0.01F);
      
      String string0 = TradeConfig.nextUserID();
      assertNotNull(string0);
      assertEquals("uid:0", string0);
      
      TradeConfig.incrementScenarioCount();
      String[] stringArray0 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = TradeConfig.rndNewUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ru:19213924092813200", string1);
      
      TradeConfig.setPrimIterations(20);
      TradeConfig tradeConfig0 = new TradeConfig();
      assertNotNull(tradeConfig0);
      assertEquals(0, tradeConfig0.getAccessMode());
      assertTrue(tradeConfig0.getLongRun());
      assertTrue(tradeConfig0.getPublishQuotePriceChange());
      assertEquals(10000, tradeConfig0.getMAX_QUOTES());
      assertEquals(15000, tradeConfig0.getMAX_USERS());
      assertFalse(tradeConfig0.getJDBCDriverNeedsGlobalTransation());
      assertEquals(0, tradeConfig0.getWebInterface());
      assertEquals("1000000", tradeConfig0.rndBalance());
      assertEquals(0, tradeConfig0.getRunTimeMode());
      assertEquals(0, tradeConfig0.getOrderProcessingMode());
      assertEquals(1, tradeConfig0.getScenarioCount());
      assertTrue(tradeConfig0.getDisplayOrderAlerts());
      assertEquals(100, tradeConfig0.getListQuotePriceChangeFrequency());
      assertEquals(20, tradeConfig0.getMarketSummaryInterval());
      assertTrue(tradeConfig0.getUpdateQuotePrices());
      assertEquals(20, tradeConfig0.getPrimIterations());
      assertEquals(10, tradeConfig0.getMAX_HOLDINGS());
      assertEquals(4, TradeConfig.REGISTER_OP);
      assertEquals(6, TradeConfig.PORTFOLIO_OP);
      assertEquals(1, TradeConfig.QUOTE_OP);
      assertEquals(2, TradeConfig.SESSION_TO_DIRECT);
      assertEquals(0, TradeConfig.WELCOME_PAGE);
      assertEquals(4, TradeConfig.HOME_PAGE);
      assertEquals(0, TradeConfig.STANDARD);
      assertEquals(1, TradeConfig.DIRECT);
      assertEquals(3, TradeConfig.LOGOUT_OP);
      assertEquals(1000, TradeConfig.KEYBLOCKSIZE);
      assertEquals(7, TradeConfig.BUY_OP);
      assertEquals(8, TradeConfig.STATS_PAGE);
      assertEquals(6, TradeConfig.ORDER_PAGE);
      assertEquals(5, TradeConfig.verifyPercent);
      assertEquals(1, TradeConfig.ASYNCH);
      assertEquals(2, TradeConfig.PORTFOLIO_PAGE);
      assertEquals(1, TradeConfig.REGISTER_PAGE);
      assertEquals(3, TradeConfig.QUOTE_PAGE);
      assertEquals(8, TradeConfig.SELL_OP);
      assertFalse(TradeConfig.JDBCDriverNeedsGlobalTransation);
      assertEquals(5, TradeConfig.ACCOUNT_PAGE);
      assertEquals(9, TradeConfig.UPDATEACCOUNT_OP);
      assertEquals(2, TradeConfig.ASYNCH_2PHASE);
      assertEquals(7, TradeConfig.CONFIG_PAGE);
      assertEquals(2, TradeConfig.LOGIN_OP);
      assertEquals(2, TradeConfig.JSP_Images_HTTP2);
      assertTrue(TradeConfig.RND_USER);
      assertEquals(1, TradeConfig.JSP_Images);
      assertEquals(0, TradeConfig.JSP);
      assertEquals(5, TradeConfig.ACCOUNT_OP);
      assertEquals(10, TradeConfig.QUOTES_PER_PAGE);
      assertEquals(0, TradeConfig.HOME_OP);
      assertEquals(9, TradeConfig.MARKET_SUMMARY_PAGE);
      assertEquals(0, TradeConfig.SYNCH);
      assertEquals(0, TradeConfig.EJB3);
      
      TradeConfig.setAccessMode(2);
      int int2 = TradeConfig.rndInt(0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string2 = TradeConfig.nextUserID();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("uid:1", string2);
      
      TradeConfig.setUpdateQuotePrices(true);
      TradeConfig.setUpdateQuotePrices(false);
      System.setCurrentTimeMillis(0);
      TradeConfig.setDisplayOrderAlerts(true);
      String string3 = TradeConfig.rndSymbols();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("s:2999,s:3999,s:4999", string3);
      
      boolean boolean0 = TradeConfig.getUpdateQuotePrices();
      assertFalse(boolean0);
      
      TradeConfig.setMAX_HOLDINGS(0);
      String[] stringArray1 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      int int3 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(20, int3);
      
      boolean boolean1 = TradeConfig.rndBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = TradeConfig.nextUserID();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("uid:2", string4);
      
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = TradeConfig.rndCreditCard();
      assertNotNull(string0);
      assertEquals("0-100-200-300", string0);
      
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      String string1 = TradeConfig.rndEmail("0-100-200-300");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = TradeConfig.rndNewUserID();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ru:19213924092813200", string2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TradeConfig.incrementSellDeficit();
      int[][] intArray0 = TradeConfig.getScenarioMixes();
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = TradeConfig.getMAX_USERS();
      assertEquals(15000, int0);
      
      TradeConfig.setMAX_QUOTES(15000);
      String string0 = TradeConfig.rndAddress();
      assertNotNull(string0);
      assertEquals("0 Oak St.", string0);
      
      TradeConfig.setPublishQuotePriceChange(false);
      String string1 = TradeConfig.rndBalance();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1000000", string1);
      
      String string2 = TradeConfig.rndSymbol();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("s:1499", string2);
      
      float float0 = TradeConfig.rndPrice();
      assertEquals(41.0F, float0, 0.01F);
      
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("1000000");
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      int int1 = TradeConfig.getMAX_USERS();
      assertTrue(int1 == int0);
      assertEquals(15000, int1);
      
      System.setCurrentTimeMillis(0L);
      BigDecimal bigDecimal1 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      int int2 = TradeConfig.rndInt(15000);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7500, int2);
      
      BigDecimal bigDecimal2 = TradeConfig.getOrderFee("0 Oak St.");
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      
      BigDecimal bigDecimal3 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal3);
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertEquals((short)1, bigDecimal3.shortValue());
      
      String string3 = TradeConfig.rndNewUserID();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ru:19200", string3);
      
      boolean boolean1 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TradeConfig.setPrimIterations(0);
      TradeConfig.setPrimIterations(15000);
      String string4 = TradeConfig.rndBalance();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("1000000", string4);
      
      boolean boolean2 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      TradeConfig.setPublishQuotePriceChange(false);
      // Undeclared exception!
      try { 
        TradeConfig.getPage((-1761));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1761 out of bounds for length 10
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = TradeConfig.rndBalance();
      assertNotNull(string0);
      assertEquals("1000000", string0);
      
      TradeConfig.setMAX_QUOTES((-2196));
      String string1 = TradeConfig.rndBalance();
      assertNotNull(string1);
      assertEquals("1000000", string1);
      
      String string2 = TradeConfig.rndSymbol();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("s:0", string2);
      
      // Undeclared exception!
      try { 
        TradeConfig.getPage((-2196));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2196 out of bounds for length 10
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TradeConfig.setLongRun(false);
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      TradeConfig.setDisplayOrderAlerts(false);
      TradeConfig.setPrimIterations(0);
      int int1 = TradeConfig.getMAX_HOLDINGS();
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String string0 = TradeConfig.rndFullName();
      assertNotNull(string0);
      assertEquals("first:200 last:1500", string0);
      
      String string1 = TradeConfig.nextUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uid:0", string1);
      
      TradeConfig.setLongRun(true);
      TradeConfig.setPublishQuotePriceChange(false);
      TradeConfig tradeConfig0 = new TradeConfig();
      assertNotNull(tradeConfig0);
      assertEquals(10, tradeConfig0.getMAX_HOLDINGS());
      assertFalse(tradeConfig0.getDisplayOrderAlerts());
      assertEquals(0, tradeConfig0.getScenarioCount());
      assertTrue(tradeConfig0.getUpdateQuotePrices());
      assertTrue(tradeConfig0.getLongRun());
      assertEquals(10000, tradeConfig0.getMAX_QUOTES());
      assertEquals(0, tradeConfig0.getAccessMode());
      assertFalse(tradeConfig0.getJDBCDriverNeedsGlobalTransation());
      assertEquals(15000, tradeConfig0.getMAX_USERS());
      assertEquals("1000000", tradeConfig0.rndBalance());
      assertEquals(0, tradeConfig0.getRunTimeMode());
      assertEquals(20, tradeConfig0.getMarketSummaryInterval());
      assertFalse(tradeConfig0.getPublishQuotePriceChange());
      assertEquals(0, tradeConfig0.getWebInterface());
      assertEquals(0, tradeConfig0.getOrderProcessingMode());
      assertEquals(100, tradeConfig0.getListQuotePriceChangeFrequency());
      assertEquals(0, tradeConfig0.getPrimIterations());
      assertEquals(0, TradeConfig.EJB3);
      assertEquals(10, TradeConfig.QUOTES_PER_PAGE);
      assertEquals(7, TradeConfig.BUY_OP);
      assertEquals(2, TradeConfig.PORTFOLIO_PAGE);
      assertEquals(2, TradeConfig.JSP_Images_HTTP2);
      assertEquals(5, TradeConfig.ACCOUNT_PAGE);
      assertEquals(1, TradeConfig.DIRECT);
      assertEquals(2, TradeConfig.ASYNCH_2PHASE);
      assertEquals(0, TradeConfig.JSP);
      assertEquals(4, TradeConfig.REGISTER_OP);
      assertEquals(6, TradeConfig.PORTFOLIO_OP);
      assertEquals(8, TradeConfig.SELL_OP);
      assertEquals(3, TradeConfig.LOGOUT_OP);
      assertEquals(7, TradeConfig.CONFIG_PAGE);
      assertEquals(1, TradeConfig.REGISTER_PAGE);
      assertEquals(1, TradeConfig.ASYNCH);
      assertEquals(0, TradeConfig.HOME_OP);
      assertEquals(1, TradeConfig.JSP_Images);
      assertEquals(9, TradeConfig.UPDATEACCOUNT_OP);
      assertFalse(TradeConfig.JDBCDriverNeedsGlobalTransation);
      assertEquals(2, TradeConfig.LOGIN_OP);
      assertEquals(0, TradeConfig.STANDARD);
      assertEquals(0, TradeConfig.WELCOME_PAGE);
      assertEquals(3, TradeConfig.QUOTE_PAGE);
      assertEquals(6, TradeConfig.ORDER_PAGE);
      assertEquals(1, TradeConfig.QUOTE_OP);
      assertEquals(4, TradeConfig.HOME_PAGE);
      assertEquals(0, TradeConfig.SYNCH);
      assertEquals(2, TradeConfig.SESSION_TO_DIRECT);
      assertEquals(9, TradeConfig.MARKET_SUMMARY_PAGE);
      assertEquals(5, TradeConfig.verifyPercent);
      assertEquals(1000, TradeConfig.KEYBLOCKSIZE);
      assertEquals(8, TradeConfig.STATS_PAGE);
      assertEquals(5, TradeConfig.ACCOUNT_OP);
      assertTrue(TradeConfig.RND_USER);
      
      int int2 = TradeConfig.rndInt((-1234));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-493), int2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      TradeConfig.incrementScenarioCount();
      String string0 = TradeConfig.rndAddress();
      assertNotNull(string0);
      assertEquals("200 Oak St.", string0);
      
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      String string1 = TradeConfig.rndBalance();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1000000", string1);
      
      float float0 = TradeConfig.rndQuantity();
      assertEquals(61.0F, float0, 0.01F);
      
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int1 = TradeConfig.getScenarioCount();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int[][] intArray0 = TradeConfig.getScenarioMixes();
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      
      int int2 = TradeConfig.getRunTimeMode();
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      TradeConfig.setWebInterface(0);
      TradeConfig.setPrimIterations(0);
      TradeConfig.setDisplayOrderAlerts(false);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = TradeConfig.getMAX_HOLDINGS();
      assertEquals(10, int0);
      
      int int1 = TradeConfig.getMAX_USERS();
      assertFalse(int1 == int0);
      assertEquals(15000, int1);
      
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("o:=,>:#LL0g~IM", "\t---Log.printCollection -- complete");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
      
      boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      boolean boolean1 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = TradeConfig.getScenarioAction(true);
      assertEquals('h', char0);
      
      TradeConfig.setUpdateQuotePrices(true);
      System.setCurrentTimeMillis(0);
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      float float0 = TradeConfig.rndQuantity();
      assertEquals(21.0F, float0, 0.01F);
      
      // Undeclared exception!
      TradeConfig.getUserID();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = TradeConfig.getScenarioCount();
      assertEquals(0, int0);
      
      TradeConfig.setListQuotePriceChangeFrequency(0);
      int int1 = TradeConfig.getListQuotePriceChangeFrequency();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertFalse(boolean0);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('h', char0);
      
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      int int1 = TradeConfig.getListQuotePriceChangeFrequency();
      assertFalse(int1 == int0);
      assertEquals(100, int1);
      
      int int2 = TradeConfig.getMAX_HOLDINGS();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, int2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = TradeConfig.getListQuotePriceChangeFrequency();
      assertEquals(100, int0);
      
      TradeConfig.setDisplayOrderAlerts(true);
      TradeConfig.setDisplayOrderAlerts(true);
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("Method enter --");
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      TradeConfig.setMAX_USERS(100);
      String[] stringArray1 = TradeConfig.getOrderProcessingModeNames();
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      TradeConfig.setPrimIterations(100);
      String[] stringArray2 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(3, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      TradeConfig.setUpdateQuotePrices(true);
      TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
      String string0 = TradeConfig.rndFullName();
      assertNotNull(string0);
      assertEquals("first:0 last:500", string0);
      
      int int1 = TradeConfig.getWebInterface();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      TradeConfig.incrementSellDeficit();
      String string1 = TradeConfig.nextUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uid:0", string1);
      
      TradeConfig.setWebInterface(100);
      TradeConfig tradeConfig0 = new TradeConfig();
      assertNotNull(tradeConfig0);
      assertEquals(10000, tradeConfig0.getMAX_QUOTES());
      assertTrue(tradeConfig0.getPublishQuotePriceChange());
      assertEquals(0, tradeConfig0.getAccessMode());
      assertTrue(tradeConfig0.getJDBCDriverNeedsGlobalTransation());
      assertTrue(tradeConfig0.getUpdateQuotePrices());
      assertEquals(0, tradeConfig0.getOrderProcessingMode());
      assertEquals(100, tradeConfig0.getWebInterface());
      assertTrue(tradeConfig0.getDisplayOrderAlerts());
      assertEquals(0, tradeConfig0.getScenarioCount());
      assertEquals(10, tradeConfig0.getMAX_HOLDINGS());
      assertEquals(100, tradeConfig0.getPrimIterations());
      assertEquals(20, tradeConfig0.getMarketSummaryInterval());
      assertEquals("1000000", tradeConfig0.rndBalance());
      assertEquals(0, tradeConfig0.getRunTimeMode());
      assertEquals(100, tradeConfig0.getListQuotePriceChangeFrequency());
      assertEquals(100, tradeConfig0.getMAX_USERS());
      assertTrue(tradeConfig0.getLongRun());
      assertEquals(6, TradeConfig.ORDER_PAGE);
      assertEquals(1, TradeConfig.DIRECT);
      assertEquals(2, TradeConfig.ASYNCH_2PHASE);
      assertTrue(TradeConfig.JDBCDriverNeedsGlobalTransation);
      assertEquals(6, TradeConfig.PORTFOLIO_OP);
      assertEquals(0, TradeConfig.WELCOME_PAGE);
      assertEquals(0, TradeConfig.SYNCH);
      assertEquals(3, TradeConfig.LOGOUT_OP);
      assertEquals(1000, TradeConfig.KEYBLOCKSIZE);
      assertEquals(1, TradeConfig.QUOTE_OP);
      assertEquals(8, TradeConfig.STATS_PAGE);
      assertEquals(2, TradeConfig.SESSION_TO_DIRECT);
      assertEquals(0, TradeConfig.STANDARD);
      assertEquals(0, TradeConfig.HOME_OP);
      assertEquals(0, TradeConfig.EJB3);
      assertEquals(10, TradeConfig.QUOTES_PER_PAGE);
      assertEquals(1, TradeConfig.JSP_Images);
      assertEquals(5, TradeConfig.verifyPercent);
      assertEquals(9, TradeConfig.MARKET_SUMMARY_PAGE);
      assertTrue(TradeConfig.RND_USER);
      assertEquals(5, TradeConfig.ACCOUNT_OP);
      assertEquals(4, TradeConfig.HOME_PAGE);
      assertEquals(0, TradeConfig.JSP);
      assertEquals(7, TradeConfig.CONFIG_PAGE);
      assertEquals(2, TradeConfig.JSP_Images_HTTP2);
      assertEquals(2, TradeConfig.LOGIN_OP);
      assertEquals(2, TradeConfig.PORTFOLIO_PAGE);
      assertEquals(1, TradeConfig.ASYNCH);
      assertEquals(1, TradeConfig.REGISTER_PAGE);
      assertEquals(3, TradeConfig.QUOTE_PAGE);
      assertEquals(7, TradeConfig.BUY_OP);
      assertEquals(5, TradeConfig.ACCOUNT_PAGE);
      assertEquals(9, TradeConfig.UPDATEACCOUNT_OP);
      assertEquals(4, TradeConfig.REGISTER_OP);
      assertEquals(8, TradeConfig.SELL_OP);
      
      float float0 = TradeConfig.rndFloat((-123));
      assertEquals((-24.6F), float0, 0.01F);
      
      String string2 = TradeConfig.rndUserID();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("uid:2", string2);
      
      String string3 = TradeConfig.rndCreditCard();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("30-400-500-600", string3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:999", string0);
      
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      String string1 = TradeConfig.rndEmail("s:999");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      String string2 = TradeConfig.rndFullName();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("first:500 last:3000", string2);
      
      int int1 = TradeConfig.getRunTimeMode();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(20, int2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TradeConfig.setMAX_USERS(10);
      String string0 = TradeConfig.rndSymbol();
      assertNotNull(string0);
      assertEquals("s:0", string0);
      
      TradeConfig.setWebInterface(1);
      TradeConfig.setMAX_QUOTES(1);
      String string1 = TradeConfig.rndUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uid:0", string1);
      
      boolean boolean0 = TradeConfig.getUpdateQuotePrices();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("\t---Log.printCollection -- collection size=", "uid:0");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = TradeConfig.getListQuotePriceChangeFrequency();
      assertEquals(100, int0);
      
      int int1 = TradeConfig.verifyPercent;
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
      
      char char0 = TradeConfig.getScenarioAction(true);
      assertEquals('h', char0);
      
      TradeConfig.setListQuotePriceChangeFrequency((-12));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = TradeConfig.rndBalance();
      assertNotNull(string0);
      assertEquals("1000000", string0);
      
      int int0 = TradeConfig.getWebInterface();
      assertEquals(0, int0);
      
      int int1 = TradeConfig.rndInt(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      TradeConfig.setDisplayOrderAlerts(true);
      String string1 = TradeConfig.rndSymbols();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:1999,s:2999", string1);
      
      int int2 = TradeConfig.getScenarioCount();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      float float0 = TradeConfig.rndQuantity();
      assertEquals(81.0F, float0, 0.01F);
      
      String string2 = TradeConfig.rndEmail("1000000");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = TradeConfig.getPage(0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/welcome.jsp", string3);
      
      int int3 = TradeConfig.getOrderProcessingMode();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = TradeConfig.getMAX_QUOTES();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(10000, int4);
      
      String string4 = TradeConfig.nextUserID();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("uid:0", string4);
      
      float float1 = TradeConfig.rndQuantity();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(121.0F, float1, 0.01F);
      
      TradeConfig.setRunTimeMode(0);
      TradeConfig.setMAX_HOLDINGS(0);
      TradeConfig.setWebInterface(0);
      int int5 = TradeConfig.getMAX_HOLDINGS();
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      
      int int6 = TradeConfig.getMAX_USERS();
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertEquals(15000, int6);
      
      int int7 = TradeConfig.getPrimIterations();
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertEquals(1, int7);
      
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      TradeConfig.setMarketSummaryInterval(3);
      String string5 = TradeConfig.rndCreditCard();
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("70-800-900-0", string5);
      
      float float2 = TradeConfig.rndFloat(20);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(2.0F, float2, 0.01F);
      
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = true;
      char char0 = TradeConfig.getScenarioAction(true);
      assertEquals('h', char0);
      
      String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      TradeConfig.setUpdateQuotePrices(true);
      int int0 = 0;
      TradeConfig.setMarketSummaryInterval(0);
      // Undeclared exception!
      TradeConfig.getUserID();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = TradeConfig.getMarketSummaryInterval();
      assertEquals(20, int0);
      
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      TradeConfig.setListQuotePriceChangeFrequency(6432);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      int int1 = TradeConfig.getRunTimeMode();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      int int0 = TradeConfig.getMarketSummaryInterval();
      assertEquals(20, int0);
      
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TradeConfig.setLongRun(false);
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("@mQ-Kb\"f gk", "\t---Log.printCollection -- collection size=");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("");
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      TradeConfig.setPrimIterations(2762);
      TradeConfig.setLongRun(false);
      float float0 = TradeConfig.rndPrice();
      assertEquals(1.0F, float0, 0.01F);
      
      TradeConfig.setScenarioCount(2762);
      TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
      TradeConfig.setAccessMode(2762);
      boolean boolean1 = TradeConfig.getDisplayOrderAlerts();
      assertTrue(boolean1);
      
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      int int1 = (-2274);
      TradeConfig.setMAX_USERS((-2274));
      String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int2 = TradeConfig.rndInt(2762);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(276, int2);
      
      String[] stringArray1 = TradeConfig.getOrderProcessingModeNames();
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("", "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TradeConfig.setAccessMode(1);
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("u:N-4z-WF2ps", "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:999", string0);
      
      int int0 = (-2196);
      TradeConfig.setMAX_QUOTES((-2196));
      String string1 = TradeConfig.rndBalance();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1000000", string1);
      
      // Undeclared exception!
      TradeConfig.getUserID();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TradeConfig.setOrderProcessingMode((-1335));
      // Undeclared exception!
      TradeConfig.getUserID();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = TradeConfig.nextUserID();
      assertNotNull(string0);
      assertEquals("uid:0", string0);
      
      String string1 = TradeConfig.rndEmail("uid:0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = TradeConfig.rndSymbols();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("s:1999,s:2999", string2);
      
      int int0 = TradeConfig.EJB3;
      assertEquals(0, int0);
      
      int int1 = TradeConfig.getMarketSummaryInterval();
      assertFalse(int1 == int0);
      assertEquals(20, int1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      TradeConfig.setPrimIterations(9983);
      float float0 = TradeConfig.rndPrice();
      assertEquals(1.0F, float0, 0.01F);
      
      TradeConfig.setScenarioCount(0);
      String string0 = "";
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("f*L^5SsL,UMzfv;`yA", "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("");
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("", "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = TradeConfig.rndEmail("?#1JSIG");
      assertNotNull(string0);
      
      int int0 = TradeConfig.getMAX_USERS();
      assertEquals(15000, int0);
      
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("#}iuYX<3eCK$-@|<gM%");
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      int int1 = TradeConfig.rndInt(15000);
      assertFalse(int1 == int0);
      assertEquals(1500, int1);
      
      System.setCurrentTimeMillis(1500);
      TradeConfig.setRunTimeMode(1500);
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("?#1JSIG@0.com", "?#1JSIG@0.com");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('h', char0);
      
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = TradeConfig.getMAX_USERS();
      assertEquals(15000, int0);
      
      String string0 = TradeConfig.rndSymbol();
      assertNotNull(string0);
      assertEquals("s:0", string0);
      
      TradeConfig.setUpdateQuotePrices(true);
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      String string1 = TradeConfig.rndSymbols();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:1999,s:2999", string1);
      
      TradeConfig.incrementSellDeficit();
      String string2 = TradeConfig.rndBalance();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1000000", string2);
      
      String string3 = TradeConfig.rndBalance();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1000000", string3);
      
      TradeConfig.setRunTimeMode((-180));
      TradeConfig.setScenarioCount(15000);
      boolean boolean1 = TradeConfig.getPublishQuotePriceChange();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = TradeConfig.getAccessMode();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
      int int2 = TradeConfig.getAccessMode();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:999", string0);
      
      String string1 = TradeConfig.nextUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uid:0", string1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float float0 = TradeConfig.rndPrice();
      assertEquals(1.0F, float0, 0.01F);
      
      TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TradeConfig.setListQuotePriceChangeFrequency(9973);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('h', char0);
      
      TradeConfig.setUpdateQuotePrices(true);
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      float float0 = TradeConfig.rndPrice();
      assertEquals(1.0F, float0, 0.01F);
      
      String[] stringArray0 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      float float1 = TradeConfig.rndPrice();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(21.0F, float1, 0.01F);
      
      int int0 = TradeConfig.getPrimIterations();
      assertEquals(1, int0);
      
      TradeConfig.setUpdateQuotePrices(true);
      TradeConfig.setListQuotePriceChangeFrequency(1553);
      TradeConfig.setPublishQuotePriceChange(true);
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal((-1265.3363F));
      assertNotNull(bigDecimal0);
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertEquals((short) (-253), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:999", string0);
      
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = TradeConfig.getPage(0);
      assertNotNull(string0);
      assertEquals("/welcome.jsp", string0);
      
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      String string0 = TradeConfig.nextUserID();
      assertNotNull(string0);
      assertEquals("uid:0", string0);
      
      String string1 = TradeConfig.rndEmail("uid:0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int[][] intArray0 = TradeConfig.getScenarioMixes();
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = TradeConfig.nextUserID();
      assertNotNull(string0);
      assertEquals("uid:0", string0);
      
      int[][] intArray0 = TradeConfig.getScenarioMixes();
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = TradeConfig.getWebInterface();
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("9");
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      TradeConfig.setPrimIterations(0);
      String string0 = TradeConfig.nextUserID();
      assertNotNull(string0);
      assertEquals("uid:0", string0);
      
      TradeConfig.setPublishQuotePriceChange(true);
      TradeConfig tradeConfig0 = new TradeConfig();
      assertNotNull(tradeConfig0);
      assertEquals("1000000", tradeConfig0.rndBalance());
      assertEquals(0, tradeConfig0.getPrimIterations());
      assertEquals(0, tradeConfig0.getRunTimeMode());
      assertEquals(0, tradeConfig0.getScenarioCount());
      assertTrue(tradeConfig0.getLongRun());
      assertEquals(10000, tradeConfig0.getMAX_QUOTES());
      assertEquals(10, tradeConfig0.getMAX_HOLDINGS());
      assertTrue(tradeConfig0.getPublishQuotePriceChange());
      assertTrue(tradeConfig0.getUpdateQuotePrices());
      assertEquals(0, tradeConfig0.getOrderProcessingMode());
      assertFalse(tradeConfig0.getJDBCDriverNeedsGlobalTransation());
      assertEquals(20, tradeConfig0.getMarketSummaryInterval());
      assertEquals(100, tradeConfig0.getListQuotePriceChangeFrequency());
      assertEquals(0, tradeConfig0.getWebInterface());
      assertEquals(15000, tradeConfig0.getMAX_USERS());
      assertTrue(tradeConfig0.getDisplayOrderAlerts());
      assertEquals(0, tradeConfig0.getAccessMode());
      assertEquals(5, TradeConfig.verifyPercent);
      assertEquals(5, TradeConfig.ACCOUNT_PAGE);
      assertEquals(10, TradeConfig.QUOTES_PER_PAGE);
      assertEquals(4, TradeConfig.REGISTER_OP);
      assertEquals(8, TradeConfig.SELL_OP);
      assertEquals(2, TradeConfig.PORTFOLIO_PAGE);
      assertEquals(0, TradeConfig.EJB3);
      assertEquals(2, TradeConfig.ASYNCH_2PHASE);
      assertEquals(6, TradeConfig.PORTFOLIO_OP);
      assertEquals(0, TradeConfig.SYNCH);
      assertEquals(3, TradeConfig.LOGOUT_OP);
      assertEquals(0, TradeConfig.WELCOME_PAGE);
      assertEquals(1, TradeConfig.DIRECT);
      assertEquals(0, TradeConfig.HOME_OP);
      assertEquals(7, TradeConfig.CONFIG_PAGE);
      assertEquals(2, TradeConfig.JSP_Images_HTTP2);
      assertEquals(7, TradeConfig.BUY_OP);
      assertEquals(0, TradeConfig.JSP);
      assertEquals(1, TradeConfig.ASYNCH);
      assertTrue(TradeConfig.RND_USER);
      assertEquals(1, TradeConfig.REGISTER_PAGE);
      assertEquals(3, TradeConfig.QUOTE_PAGE);
      assertEquals(2, TradeConfig.LOGIN_OP);
      assertEquals(9, TradeConfig.UPDATEACCOUNT_OP);
      assertEquals(9, TradeConfig.MARKET_SUMMARY_PAGE);
      assertEquals(1000, TradeConfig.KEYBLOCKSIZE);
      assertEquals(8, TradeConfig.STATS_PAGE);
      assertEquals(4, TradeConfig.HOME_PAGE);
      assertFalse(TradeConfig.JDBCDriverNeedsGlobalTransation);
      assertEquals(5, TradeConfig.ACCOUNT_OP);
      assertEquals(0, TradeConfig.STANDARD);
      assertEquals(2, TradeConfig.SESSION_TO_DIRECT);
      assertEquals(1, TradeConfig.QUOTE_OP);
      assertEquals(6, TradeConfig.ORDER_PAGE);
      assertEquals(1, TradeConfig.JSP_Images);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
      
      String string0 = TradeConfig.nextUserID();
      assertNotNull(string0);
      assertEquals("uid:0", string0);
      
      String string1 = TradeConfig.rndEmail("uid:0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      float float0 = TradeConfig.rndQuantity();
      assertEquals(21.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = TradeConfig.HOME_PAGE;
      assertEquals(4, int0);
      
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
      
      TradeConfig.setMAX_USERS(98);
      String string1 = TradeConfig.rndSymbol();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:0", string1);
      
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("v9C", "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      float float0 = TradeConfig.rndQuantity();
      assertEquals(1.0F, float0, 0.01F);
      
      int int0 = TradeConfig.rndInt(0);
      assertEquals(0, int0);
      
      String string0 = TradeConfig.rndCreditCard();
      assertNotNull(string0);
      assertEquals("20-300-400-500", string0);
      
      TradeConfig tradeConfig0 = new TradeConfig();
      assertNotNull(tradeConfig0);
      assertFalse(tradeConfig0.getJDBCDriverNeedsGlobalTransation());
      assertEquals(15000, tradeConfig0.getMAX_USERS());
      assertEquals(0, tradeConfig0.getWebInterface());
      assertTrue(tradeConfig0.getPublishQuotePriceChange());
      assertEquals(0, tradeConfig0.getAccessMode());
      assertTrue(tradeConfig0.getLongRun());
      assertEquals(10000, tradeConfig0.getMAX_QUOTES());
      assertEquals(100, tradeConfig0.getListQuotePriceChangeFrequency());
      assertEquals(20, tradeConfig0.getMarketSummaryInterval());
      assertEquals("1000000", tradeConfig0.rndBalance());
      assertEquals(0, tradeConfig0.getRunTimeMode());
      assertEquals(0, tradeConfig0.getOrderProcessingMode());
      assertEquals(1, tradeConfig0.getPrimIterations());
      assertTrue(tradeConfig0.getDisplayOrderAlerts());
      assertEquals(10, tradeConfig0.getMAX_HOLDINGS());
      assertEquals(0, tradeConfig0.getScenarioCount());
      assertTrue(tradeConfig0.getUpdateQuotePrices());
      assertEquals(1000, TradeConfig.KEYBLOCKSIZE);
      assertEquals(0, TradeConfig.WELCOME_PAGE);
      assertEquals(8, TradeConfig.STATS_PAGE);
      assertEquals(4, TradeConfig.HOME_PAGE);
      assertEquals(6, TradeConfig.ORDER_PAGE);
      assertEquals(1, TradeConfig.DIRECT);
      assertEquals(0, TradeConfig.STANDARD);
      assertEquals(2, TradeConfig.ASYNCH_2PHASE);
      assertEquals(6, TradeConfig.PORTFOLIO_OP);
      assertEquals(2, TradeConfig.SESSION_TO_DIRECT);
      assertEquals(4, TradeConfig.REGISTER_OP);
      assertEquals(9, TradeConfig.MARKET_SUMMARY_PAGE);
      assertEquals(5, TradeConfig.verifyPercent);
      assertEquals(1, TradeConfig.QUOTE_OP);
      assertEquals(3, TradeConfig.LOGOUT_OP);
      assertEquals(1, TradeConfig.REGISTER_PAGE);
      assertEquals(1, TradeConfig.ASYNCH);
      assertEquals(7, TradeConfig.BUY_OP);
      assertEquals(0, TradeConfig.EJB3);
      assertEquals(10, TradeConfig.QUOTES_PER_PAGE);
      assertEquals(0, TradeConfig.HOME_OP);
      assertEquals(0, TradeConfig.SYNCH);
      assertEquals(0, TradeConfig.JSP);
      assertEquals(2, TradeConfig.JSP_Images_HTTP2);
      assertEquals(8, TradeConfig.SELL_OP);
      assertEquals(5, TradeConfig.ACCOUNT_OP);
      assertTrue(TradeConfig.RND_USER);
      assertEquals(7, TradeConfig.CONFIG_PAGE);
      assertEquals(1, TradeConfig.JSP_Images);
      assertEquals(3, TradeConfig.QUOTE_PAGE);
      assertEquals(2, TradeConfig.PORTFOLIO_PAGE);
      assertEquals(9, TradeConfig.UPDATEACCOUNT_OP);
      assertEquals(2, TradeConfig.LOGIN_OP);
      assertFalse(TradeConfig.JDBCDriverNeedsGlobalTransation);
      assertEquals(5, TradeConfig.ACCOUNT_PAGE);
      
      TradeConfig.KEYBLOCKSIZE = 1;
      TradeConfig.setMAX_HOLDINGS(3);
      String string1 = TradeConfig.rndNewUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ru:19213924092813200", string1);
      
      TradeConfig.setMAX_USERS((-1530));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("", "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = TradeConfig.getListQuotePriceChangeFrequency();
      assertEquals(100, int0);
      
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
      
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
      
      TradeConfig.setMAX_USERS(98);
      String string1 = TradeConfig.rndSymbol();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:0", string1);
      
      TradeConfig.setPrimIterations(0);
      TradeConfig.setLongRun(false);
      float float0 = TradeConfig.rndPrice();
      assertEquals(21.0F, float0, 0.01F);
      
      TradeConfig.setScenarioCount(3470);
      TradeConfig.setJDBCDriverNeedsGlobalTransation(false);
      TradeConfig.setAccessMode((-1787));
      boolean boolean1 = TradeConfig.getDisplayOrderAlerts();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = TradeConfig.getOrderProcessingMode();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      TradeConfig.setMAX_HOLDINGS(1);
      String string2 = TradeConfig.rndNewUserID();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ru:19213924092813201", string2);
      
      TradeConfig.setMAX_USERS(1);
      char char0 = TradeConfig.getScenarioAction(true);
      assertEquals('q', char0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = TradeConfig.getOrderFee("9");
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      String string0 = TradeConfig.rndSymbols();
      assertNotNull(string0);
      assertEquals("s:999", string0);
      
      TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
      String string1 = TradeConfig.rndFullName();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("first:200 last:1500", string1);
      
      int int0 = TradeConfig.getWebInterface();
      assertEquals(0, int0);
      
      TradeConfig.incrementSellDeficit();
      float float0 = TradeConfig.rndQuantity();
      assertEquals(81.0F, float0, 0.01F);
      
      // Undeclared exception!
      TradeConfig.getUserID();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = TradeConfig.rndAddress();
      assertNotNull(string0);
      assertEquals("0 Oak St.", string0);
      
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = TradeConfig.getMAX_QUOTES();
      assertEquals(10000, int0);
      
      TradeConfig.setListQuotePriceChangeFrequency(10000);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TradeConfig.setOrderProcessingMode((-121));
      TradeConfig.setDisplayOrderAlerts(false);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = TradeConfig.getWebInterface();
      assertEquals(0, int0);
      
      int int1 = TradeConfig.getMAX_USERS();
      assertFalse(int1 == int0);
      assertEquals(15000, int1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TradeConfig.setPublishQuotePriceChange(false);
      boolean boolean0 = TradeConfig.getDisplayOrderAlerts();
      assertTrue(boolean0);
      
      String[] stringArray0 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = TradeConfig.getAccessMode();
      assertEquals(0, int0);
      
      TradeConfig.setPublishQuotePriceChange(false);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = TradeConfig.rndBalance();
      assertNotNull(string0);
      assertEquals("1000000", string0);
      
      String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = TradeConfig.nextUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uid:0", string1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = TradeConfig.rndSymbol();
      assertNotNull(string0);
      assertEquals("s:0", string0);
      
      String string1 = TradeConfig.rndNewUserID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ru:19213924092813200", string1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String[] stringArray0 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      TradeConfig.setWebInterface(40);
      boolean boolean0 = TradeConfig.getLongRun();
      assertTrue(boolean0);
      
      TradeConfig.setDisplayOrderAlerts(false);
      TradeConfig.setPublishQuotePriceChange(true);
      int int0 = TradeConfig.getPrimIterations();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = TradeConfig.getAccessMode();
      assertEquals(0, int0);
      
      TradeConfig.setDisplayOrderAlerts(false);
      int int1 = TradeConfig.getWebInterface();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = TradeConfig.rndNewUserID();
      assertNotNull(string0);
      assertEquals("ru:19213924092813200", string0);
      
      String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String[] stringArray1 = TradeConfig.getRunTimeModeNames();
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = 0;
      TradeConfig.setWebInterface(0);
      int int3 = TradeConfig.getMAX_QUOTES();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(10000, int3);
      
      String string1 = TradeConfig.rndSymbol();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:0", string1);
      
      TradeConfig.incrementSellDeficit();
      String string2 = TradeConfig.rndCreditCard();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("10-200-300-400", string2);
      
      String string3 = TradeConfig.rndAddress();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("500 Oak St.", string3);
      
      String string4 = TradeConfig.rndBalance();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("1000000", string4);
      
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("ru:19213924092813200", "10-200-300-400");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("daytrader", "daytrader");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TradeConfig.getLongRun();
      // Undeclared exception!
      TradeConfig.getUserID();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = TradeConfig.rndNewUserID();
      assertEquals("ru:19213924092813200", string0);
      
      int int0 = TradeConfig.QUOTES_PER_PAGE;
      String string1 = TradeConfig.newUserPrefix;
      BigDecimal bigDecimal0 = TradeConfig.MAXIMUM_STOCK_PRICE;
      TradeConfig.getLongRun();
      String string2 = TradeConfig.rndBalance();
      assertEquals("1000000", string2);
      
      BigDecimal bigDecimal1 = TradeConfig.getOrderFee("ru:19213924092813200");
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      TradeConfig.getUserID();
  }
}
