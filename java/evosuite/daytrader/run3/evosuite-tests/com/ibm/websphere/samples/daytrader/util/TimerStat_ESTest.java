/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 16:15:01 GMT 2024
 */

package com.ibm.websphere.samples.daytrader.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.websphere.samples.daytrader.util.TimerStat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimerStat_ESTest extends TimerStat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setCount(2509);
      timerStat0.setTotalTime((-3228.31707));
      double double0 = timerStat0.getAvgSecs();
      assertEquals((-3228.31707), timerStat0.getTotalTime(), 0.01);
      assertEquals((-0.0012866947269828616), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setTotalTime(540.0961152008);
      double double0 = timerStat0.getTotalTime();
      assertEquals(540.0961152008, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setTotalTime((-370.7389863577));
      double double0 = timerStat0.getTotalTime();
      assertEquals((-370.7389863577), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setMin((-0.9959199999999999));
      double double0 = timerStat0.getMinSecs();
      assertEquals((-0.9959199999999999), timerStat0.getMin(), 0.01);
      assertEquals((-9.9592E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      assertEquals(1000000.0, timerStat0.getMinSecs(), 0.01);
      
      timerStat0.setMin(0);
      double double0 = timerStat0.getMin();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setMin((-1139.5976881));
      double double0 = timerStat0.getMin();
      assertEquals((-1.1395976880999998), timerStat0.getMinSecs(), 0.01);
      assertEquals((-1139.5976881), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setMax(3.677681180104012E-4);
      double double0 = timerStat0.getMaxSecs();
      assertEquals(3.677681180104012E-4, timerStat0.getMax(), 0.01);
      assertEquals(3.6776811801040116E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setMax((-1313.788474));
      double double0 = timerStat0.getMaxSecs();
      assertEquals((-1313.788474), timerStat0.getMax(), 0.01);
      assertEquals((-1.3137884739999999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setMax(831.2203399825188);
      double double0 = timerStat0.getMax();
      assertEquals(0.8312203399825188, timerStat0.getMaxSecs(), 0.01);
      assertEquals(831.2203399825188, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setMax((-1139.5976881));
      double double0 = timerStat0.getMax();
      assertEquals((-1139.5976881), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setCount((-936));
      int int0 = timerStat0.getCount();
      assertEquals((-936), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setCount(1);
      double double0 = timerStat0.getAvgSecs();
      assertEquals(1, timerStat0.getCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setTotalTime(540.0961152008);
      double double0 = timerStat0.getAvgSecs();
      assertEquals(540.0961152008, timerStat0.getTotalTime(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      int int0 = timerStat0.getCount();
      assertEquals(Double.NaN, timerStat0.getAvgSecs(), 0.01);
      assertEquals(1000000.0, timerStat0.getMinSecs(), 0.01);
      assertEquals(0.0, timerStat0.getMax(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      double double0 = timerStat0.getTotalTime();
      assertEquals(1.0E9, timerStat0.getMin(), 0.01);
      assertEquals(0.0, timerStat0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      double double0 = timerStat0.getMin();
      assertEquals(1.0E9, double0, 0.01);
      assertEquals(0.0, timerStat0.getTotalTime(), 0.01);
      assertEquals(0.0, timerStat0.getMaxSecs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      timerStat0.setCount(2509);
      int int0 = timerStat0.getCount();
      assertEquals(2509, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      assertEquals(1.0E9, timerStat0.getMin(), 0.01);
      
      timerStat0.setMin(0.0);
      double double0 = timerStat0.getMinSecs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      double double0 = timerStat0.getMaxSecs();
      assertEquals(Double.NaN, timerStat0.getAvgSecs(), 0.01);
      assertEquals(1000000.0, timerStat0.getMinSecs(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      double double0 = timerStat0.getMax();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1000000.0, timerStat0.getMinSecs(), 0.01);
      assertEquals(Double.NaN, timerStat0.getAvgSecs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimerStat timerStat0 = new TimerStat();
      double double0 = timerStat0.getMinSecs();
      assertEquals(Double.NaN, timerStat0.getAvgSecs(), 0.01);
      assertEquals(1000000.0, double0, 0.01);
      assertEquals(0.0, timerStat0.getMax(), 0.01);
  }
}
