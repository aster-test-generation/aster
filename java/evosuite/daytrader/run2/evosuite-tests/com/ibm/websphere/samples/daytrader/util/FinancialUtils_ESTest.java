/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 16:13:16 GMT 2024
 */

package com.ibm.websphere.samples.daytrader.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialUtils_ESTest extends FinancialUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FinancialUtils.printChangeHTML(0.0);
      assertEquals("<FONT color=\"#009900\">0.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(1966);
      HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();
      List<HoldingDataBean> list0 = List.of(holdingDataBean0, holdingDataBean0, holdingDataBean0, holdingDataBean0);
      BigDecimal bigDecimal0 = FinancialUtils.computeHoldingsTotal(list0);
      assertEquals((byte) (-128), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();
      List<HoldingDataBean> list0 = List.of(holdingDataBean0, holdingDataBean0, holdingDataBean0, holdingDataBean0);
      BigDecimal bigDecimal0 = FinancialUtils.computeHoldingsTotal(list0);
      assertEquals((byte) (-96), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FinancialUtils financialUtils0 = new FinancialUtils();
      BigDecimal bigDecimal0 = FinancialUtils.computeGainPercent(financialUtils0.ZERO, financialUtils0.ONE);
      assertEquals((short) (-100), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = FinancialUtils.HUNDRED;
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal2 = bigDecimal0.divideToIntegralValue(bigDecimal1, mathContext0);
      BigDecimal bigDecimal3 = FinancialUtils.computeGain(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertEquals((byte)1, bigDecimal3.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FinancialUtils.printGainPercentHTML((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.FinancialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-2632L), 1932735283);
      // Undeclared exception!
      try { 
        FinancialUtils.printGainPercentHTML(bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FinancialUtils.printGainHTML((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.FinancialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 2146748711);
      // Undeclared exception!
      try { 
        FinancialUtils.printGainHTML(bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      // Undeclared exception!
      try { 
        FinancialUtils.computeHoldingsTotal(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class com.ibm.websphere.samples.daytrader.entities.HoldingDataBean (java.lang.Object is in module java.base of loader 'bootstrap'; com.ibm.websphere.samples.daytrader.entities.HoldingDataBean is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @2379c8b2)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.FinancialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FinancialUtils financialUtils0 = new FinancialUtils();
      HoldingDataBean holdingDataBean0 = new HoldingDataBean((Integer) 2, 1809.16714972599, financialUtils0.ONE, (Date) null, "WO]D\"':v*8hvZ/<");
      List<HoldingDataBean> list0 = List.of(holdingDataBean0, holdingDataBean0, holdingDataBean0, holdingDataBean0);
      // Undeclared exception!
      try { 
        FinancialUtils.computeHoldingsTotal(list0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FinancialUtils.computeGainPercent((BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.FinancialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigDecimal bigDecimal0 = FinancialUtils.ONE;
      BigDecimal bigDecimal1 = bigDecimal0.movePointLeft(2145434956);
      // Undeclared exception!
      try { 
        FinancialUtils.computeGainPercent(bigDecimal1, bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        FinancialUtils.computeGain((BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.FinancialUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimal bigDecimal0 = FinancialUtils.computeHoldingsTotal((Collection<?>) null);
      BigDecimal bigDecimal1 = new BigDecimal(647.93912);
      // Undeclared exception!
      try { 
        FinancialUtils.computeGain(bigDecimal0, bigDecimal1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1535L));
      String string0 = FinancialUtils.printGainPercentHTML(bigDecimal0);
      assertEquals("(<B><FONT color=\"#ff0000\">-1535.00%</FONT></B>)<IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimal bigDecimal0 = FinancialUtils.ONE;
      String string0 = FinancialUtils.printGainPercentHTML(bigDecimal0);
      assertEquals("(<B><FONT color=\"#009900\">+1.00%</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = FinancialUtils.printChangeHTML((-1342.338812556878));
      assertEquals("<FONT color=\"#ff0000\">-1342.338812556878</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = FinancialUtils.printChangeHTML(100.0);
      assertEquals("<FONT color=\"#009900\">100.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-63.0));
      String string0 = FinancialUtils.printGainHTML(bigDecimal0);
      assertEquals("<FONT color=\"#ff0000\">-63.00</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigDecimal bigDecimal0 = FinancialUtils.ONE;
      String string0 = FinancialUtils.printGainHTML(bigDecimal0);
      assertEquals("<FONT color=\"#009900\">1.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HoldingDataBean holdingDataBean0 = HoldingDataBean.getRandomInstance();
      linkedList0.add((Object) holdingDataBean0);
      BigDecimal bigDecimal0 = FinancialUtils.computeHoldingsTotal(linkedList0);
      assertEquals((byte)104, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigDecimal bigDecimal0 = FinancialUtils.HUNDRED;
      BigDecimal bigDecimal1 = FinancialUtils.computeHoldingsTotal((Collection<?>) null);
      BigDecimal bigDecimal2 = FinancialUtils.computeGainPercent(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigDecimal bigDecimal0 = FinancialUtils.computeHoldingsTotal((Collection<?>) null);
      BigDecimal bigDecimal1 = FinancialUtils.computeGain(bigDecimal0, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = FinancialUtils.printQuoteLink((String) null);
      assertEquals("<A href=\"app?action=quotes&symbols=null\">null</A>", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FinancialUtils financialUtils0 = new FinancialUtils();
      BigDecimal bigDecimal0 = FinancialUtils.computeGain(financialUtils0.ONE, financialUtils0.HUNDRED);
      BigDecimal bigDecimal1 = FinancialUtils.computeGainPercent(financialUtils0.HUNDRED, bigDecimal0);
      assertEquals((short) (-201), bigDecimal1.shortValue());
  }
}
