/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 01 16:19:07 GMT 2024
 */

package com.ibm.websphere.samples.daytrader.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TradeConfig_ESTest extends TradeConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TradeConfig.rndBigDecimal(0.0F);
      TradeConfig.rndFloat((-2221));
      TradeConfig.rndFullName();
      TradeConfig.getRandomPriceChangeFactor();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TradeConfig.getOrderFee("uid:0");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TradeConfig.getOrderFee(" BswrAm/_");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TradeConfig.rndSymbols();
      TradeConfig.rndInt(558);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TradeConfig.rndFloat((-2028));
      TradeConfig.rndInt((-1127));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TradeConfig.setWebInterface(117);
      TradeConfig.getWebInterface();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TradeConfig.setWebInterface((-568));
      TradeConfig.getWebInterface();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TradeConfig.setScenarioCount((-2221));
      TradeConfig.getScenarioCount();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TradeConfig.setRunTimeMode(1);
      TradeConfig.getRunTimeMode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TradeConfig.setRunTimeMode((-510));
      TradeConfig.getRunTimeMode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TradeConfig.setOrderProcessingMode(15000);
      TradeConfig.getOrderProcessingMode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TradeConfig.setMAX_HOLDINGS((-3487));
      TradeConfig.getMAX_HOLDINGS();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TradeConfig.setAccessMode(2712);
      TradeConfig.getAccessMode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TradeConfig.setConfigParam("r1EV", "r1EV");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      TradeConfig.rndUserID();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        TradeConfig.rndEmail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TradeConfig.setMAX_USERS((-3487));
      // Undeclared exception!
      try { 
        TradeConfig.getUserID();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3487
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        TradeConfig.getPage((-2750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2750 out of bounds for length 10
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TradeConfig.getOrderFee((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.websphere.samples.daytrader.util.TradeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = TradeConfig.rndInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = TradeConfig.getMAX_USERS();
      assertEquals(15000, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TradeConfig.incrementScenarioCount();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TradeConfig.rndFloat((-2221));
      float float0 = TradeConfig.rndFloat((-595));
      assertEquals((-59.5F), float0, 0.01F);
      
      TradeConfig.getScenarioAction(true);
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertEquals((short)0, bigDecimal0.shortValue());
      
      float float1 = TradeConfig.rndQuantity();
      assertEquals(101.0F, float1, 0.01F);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('o', char0);
      
      char char1 = TradeConfig.getScenarioAction(false);
      assertEquals('a', char1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TradeConfig.setMAX_USERS(108);
      String string0 = TradeConfig.getUserID();
      assertEquals("uid:1", string0);
      
      String string1 = TradeConfig.rndUserID();
      assertEquals("uid:2", string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertEquals("s:999", string0);
      
      String string1 = TradeConfig.rndSymbols();
      assertEquals("s:2999,s:3999,s:4999", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = TradeConfig.nextUserID();
      assertEquals("uid:0", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = TradeConfig.rndSymbols();
      assertEquals("s:999", string0);
      
      TradeConfig.rndFullName();
      TradeConfig.random();
      TradeConfig.rndFullName();
      TradeConfig.random();
      BigDecimal bigDecimal0 = TradeConfig.getRandomPriceChangeFactor();
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      String string1 = TradeConfig.rndCreditCard();
      assertEquals("0-100-200-300", string1);
      
      TradeConfig.rndEmail("s:999");
      TradeConfig.rndEmail("s999@40.com");
      float float0 = TradeConfig.rndPrice();
      assertEquals(121.0F, float0, 0.01F);
      
      String string2 = TradeConfig.rndFullName();
      assertEquals("first:700 last:4000", string2);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('b', char0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TradeConfig.random();
      float float0 = TradeConfig.rndQuantity();
      assertEquals(21.0F, float0, 0.01F);
      
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('q', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
      boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = TradeConfig.rndBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = TradeConfig.rndAddress();
      assertEquals("0 Oak St.", string0);
      
      float float0 = TradeConfig.rndFloat(20);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TradeConfig.setMAX_USERS(0);
      // Undeclared exception!
      try { 
        TradeConfig.getUserID();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = TradeConfig.getAccessMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = TradeConfig.getWebInterface();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = TradeConfig.getMAX_HOLDINGS();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = TradeConfig.getRunTimeModeNames();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = TradeConfig.getMAX_QUOTES();
      assertEquals(10000, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TradeConfig.setMAX_QUOTES(3526);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TradeConfig.setListQuotePriceChangeFrequency(1230);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = TradeConfig.rndBalance();
      assertEquals("1000000", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = TradeConfig.getLongRun();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TradeConfig.rndNewUserID();
      String string0 = TradeConfig.rndNewUserID();
      assertEquals("ru:19213924092813201", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TradeConfig tradeConfig0 = new TradeConfig();
      assertEquals(5, TradeConfig.ACCOUNT_PAGE);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char char0 = TradeConfig.getScenarioAction(false);
      assertEquals('h', char0);
      
      int int0 = TradeConfig.getScenarioCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TradeConfig.setPublishQuotePriceChange(false);
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TradeConfig.setAccessMode((-732));
      int int0 = TradeConfig.getAccessMode();
      assertEquals((-732), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TradeConfig.setMAX_HOLDINGS(0);
      int int0 = TradeConfig.getMAX_HOLDINGS();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = TradeConfig.getUpdateQuotePrices();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = TradeConfig.getRunTimeMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[][] intArray0 = TradeConfig.getScenarioMixes();
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TradeConfig.setDisplayOrderAlerts(false);
      boolean boolean0 = TradeConfig.getDisplayOrderAlerts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = TradeConfig.getOrderProcessingModeNames();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      TradeConfig.getUserID();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = TradeConfig.getPrimIterations();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TradeConfig.setPrimIterations(831);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = TradeConfig.getPage(1);
      assertEquals("/register.jsp", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = TradeConfig.getWebInterfaceNames();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TradeConfig.setOrderProcessingMode((-595));
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals((-595), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TradeConfig.setLongRun(false);
      boolean boolean0 = TradeConfig.getLongRun();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TradeConfig.setUpdateQuotePrices(false);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TradeConfig.incrementSellDeficit();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = TradeConfig.getScenarioCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TradeConfig.setMarketSummaryInterval(0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TradeConfig.rndBigDecimal(0.0F);
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal((-119.0F));
      assertEquals((byte) (-11), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = TradeConfig.rndSymbol();
      assertEquals("s:0", string0);
      
      BigDecimal bigDecimal0 = TradeConfig.rndBigDecimal(516);
      assertEquals((byte)51, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = TradeConfig.getJDBCDriverNeedsGlobalTransation();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = TradeConfig.getListQuotePriceChangeFrequency();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = TradeConfig.getDisplayOrderAlerts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = TradeConfig.getMarketSummaryInterval();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = TradeConfig.getOrderProcessingMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = TradeConfig.getPublishQuotePriceChange();
      assertTrue(boolean0);
  }
}
