import unittest
from youtube_dl.aes import aes_cbc_decrypt


class TestAESFunctions(unittest.TestCase):
    def test_aes_decrypt(self):
        data = [0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x31, 0x37, 0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d, 0xa2, 0x34]
        expanded_key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0xcf, 0x9f, 0x4f, 0x3c, 0x76, 0x2e,
                        0xa0, 0x88, 0x23, 0x2a, 0xfa, 0x54, 0xa3, 0x6c, 0xfe, 0x2c, 0x39, 0x76, 0x17, 0xb1, 0x39, 0x05,
                        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0xcf, 0x9f, 0x4f, 0x3c, 0x76, 0x2e,
                        0xa0, 0x88, 0x23, 0x2a, 0xfa, 0x54, 0xa3, 0x6c, 0xfe, 0x2c, 0x39, 0x76, 0x17, 0xb1, 0x39, 0x05]
        result = aes_decrypt(data, expanded_key)
        expected = [0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x31, 0x37, 0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d, 0xa2, 0x34]
        self.assertEqual(result, expected)

    def test_xor(self):
        data1 = [0x32, 0x88, 0x31, 0xe0]
        data2 = [0x2b, 0x7e, 0x15, 0x16]
        result = xor(data1, data2)
        expected = [0x19, 0xf6, 0x24, 0xf6]
        self.assertEqual(result, expected)

    def test_sub_bytes_inv(self):
        data = [0x7a, 0xd5, 0x89, 0x5e, 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0xcf, 0x9f]
        result = sub_bytes_inv(data)
        expected = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76]
        self.assertEqual(result, expected)

    def test_shift_rows_inv(self):
        data = [0x7a, 0xd5, 0x89, 0x5e, 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0xcf, 0x9f]
        result = shift_rows_inv(data)
        expected = [0x7a, 0x7e, 0xd2, 0x9f, 0x2b, 0xf7, 0x89, 0xa6, 0x28, 0xd5, 0xcf, 0x16, 0xab, 0xae, 0x15, 0x5e]
        self.assertEqual(result, expected)

    def test_mix_columns_inv(self):
        data = [0x7a, 0xd5, 0x89, 0x5e, 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0xcf, 0x9f]
        result = mix_columns_inv(data)
        expected = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76]
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()