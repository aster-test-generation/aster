# Automatically generated by Pynguin.
import tornado.queues as module_0
import datetime as module_1

def test_case_0():
    try:
        float_0 = -2358.64542
        queue_iterator_0 = module_0._QueueIterator(float_0)
        var_0 = None
        int_0 = 2266
        queue_0 = module_0.Queue(int_0)
        queue_0.put_nowait(var_0)
        awaitable_0 = queue_iterator_0.__anext__()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        lifo_queue_0 = module_0.LifoQueue(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1727
        queue_0 = module_0.Queue(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        queue_0 = module_0.Queue()
        var_0 = queue_0.get_nowait()
    except BaseException:
        pass

def test_case_4():
    try:
        queue_0 = module_0.Queue()
        bool_0 = queue_0.empty()
        var_0 = queue_0.get_nowait()
    except BaseException:
        pass

def test_case_5():
    try:
        queue_0 = module_0.Queue()
        queue_full_0 = module_0.QueueFull()
        int_0 = queue_0.qsize()
        awaitable_0 = queue_0.get()
    except BaseException:
        pass

def test_case_6():
    try:
        queue_0 = module_0.Queue()
        queue_0.task_done()
    except BaseException:
        pass

def test_case_7():
    try:
        none_type_0 = None
        queue_0 = module_0.Queue()
        awaitable_0 = queue_0.join(none_type_0)
    except BaseException:
        pass

def test_case_8():
    try:
        queue_0 = module_0.Queue()
        queue_empty_0 = module_0.QueueEmpty()
        str_0 = queue_0.__str__()
        queue_1 = module_0.Queue()
        var_0 = queue_1.__aiter__()
        var_1 = None
        queue_0.put_nowait(var_1)
        queue_0.task_done()
        bool_0 = queue_0.full()
        bool_1 = queue_0.full()
        queue_2 = module_0.Queue()
        int_0 = -1681
        lifo_queue_0 = module_0.LifoQueue(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        queue_0 = module_0.Queue()
        str_0 = queue_0.__repr__()
        queue_1 = module_0.Queue()
        str_1 = queue_1.__str__()
        queue_2 = module_0.Queue()
        var_0 = None
        bool_0 = queue_0.full()
        lifo_queue_0 = module_0.LifoQueue()
        queue_3 = module_0.Queue()
        future_0 = queue_3.put(var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        queue_0 = module_0.Queue()
        int_0 = queue_0.qsize()
        var_0 = None
        queue_0.put_nowait(var_0)
        str_0 = queue_0.__str__()
        queue_0.put_nowait(var_0)
        bool_0 = queue_0.full()
        var_1 = queue_0.get_nowait()
        str_1 = "x5&nYVw&<;'OT"
        queue_empty_0 = None
        str_2 = None
        dict_0 = {str_1: queue_empty_0, str_0: queue_0, str_1: queue_empty_0, str_2: queue_empty_0}
        timedelta_0 = module_1.timedelta(**dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1198
        queue_0 = module_0.Queue()
        str_0 = queue_0.__repr__()
        var_0 = None
        queue_0.put_nowait(var_0)
        var_1 = queue_0.__aiter__()
        var_2 = None
        queue_0.put_nowait(var_2)
        queue_1 = module_0.Queue(int_0)
        queue_0.task_done()
        bool_0 = queue_0.full()
        var_3 = queue_1.get_nowait()
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 2
        queue_0 = module_0.Queue(int_0)
        str_0 = 'a'
        queue_0.put_nowait(str_0)
        str_1 = 'b'
        queue_0.put_nowait(str_1)
        str_2 = 'c'
        queue_0.put_nowait(str_2)
    except BaseException:
        pass