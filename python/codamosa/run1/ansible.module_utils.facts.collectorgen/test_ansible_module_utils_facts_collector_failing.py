# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        float_0 = -2660.0
        list_0 = [float_0]
        int_0 = 3600
        var_0 = module_0.collector_classes_from_gather_subset(list_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        cycle_found_in_fact_deps_0 = None
        unresolved_fact_dep_0 = None
        str_0 = 'y[b'
        var_0 = module_0.collector_classes_from_gather_subset(cycle_found_in_fact_deps_0, unresolved_fact_dep_0, str_0)
        str_1 = ''
        var_1 = module_0.find_unresolved_requires(str_0, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace()
        int_0 = -32
        var_1 = base_fact_collector_0.collect(int_0)
        dict_0 = {}
        base_fact_collector_1 = module_0.BaseFactCollector(dict_0)
        float_0 = 1000.0
        var_2 = base_fact_collector_1.collect(float_0)
        bytes_0 = b'\x16\xe9o\n\x19n\xea\x04p\x81\xdc)\x9f\x15\x90U'
        var_3 = module_0.tsort(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.get_collector_names()
        bytes_0 = b'\x80\x055S\xcb+K\xa8[\xf8\xc3\xcf\x12\x07\xb4\x7f\xac'
        list_0 = [bytes_0]
        str_0 = ']M#9mDfkY@[U\x0cO[\t='
        str_1 = '\n    Darwin-specific subclass of Hardware.  Defines memory and CPU facts:\n    - processor\n    - processor_cores\n    - memtotal_mb\n    - memfree_mb\n    - model\n    - osversion\n    - osrevision\n    - uptime_seconds\n    '
        str_2 = None
        float_0 = -2246.39
        dict_0 = {str_0: str_0, str_1: str_1, str_2: float_0, str_1: list_0}
        var_1 = module_0.resolve_requires(dict_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        int_0 = None
        dict_0 = None
        list_1 = [dict_0, dict_0, int_0, list_0]
        tuple_0 = (list_1,)
        var_0 = module_0.collector_classes_from_gather_subset(list_0, int_0, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '#^;'
        str_1 = '5_K^hB\t\x0cVk&C'
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_1: str_1}
        var_0 = module_0.resolve_requires(str_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        cycle_found_in_fact_deps_0 = None
        unresolved_fact_dep_0 = None
        str_0 = 'y[b'
        var_0 = module_0.collector_classes_from_gather_subset(cycle_found_in_fact_deps_0, unresolved_fact_dep_0, str_0)
        str_1 = ';ZyPnh 1g+^.{-*|'
        complex_0 = None
        str_2 = '@'
        dict_0 = {str_1: complex_0, str_0: unresolved_fact_dep_0}
        var_1 = module_0.find_unresolved_requires(str_2, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '!h-Gardware'
        var_0 = module_0.get_collector_names(str_0, str_0, str_0)
        str_1 = {str_0, str_0, str_0, str_0, str_0}
        str_2 = {str_0, str_0}
        str_3 = '!all'
        var_1 = module_0.get_collector_names(str_1, str_2, str_3)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = ']'
        str_1 = '5_K^hB\t\x0cVk&C'
        dict_0 = {str_0: var_0, str_0: str_0, str_1: str_1, str_1: str_1}
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_1 = module_0.resolve_requires(str_0, dict_0)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        str_2 = "[VC'\\!S&oW4'q$"
        var_2 = module_0.find_collectors_for_platform(str_2, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = module_0.get_collector_names()
        base_fact_collector_0 = None
        str_0 = 'IY$'
        bytes_0 = b'-\x0b\x00/\x8c<\xb5\xad\xee[\xd2\x83f\x190\x96\xd4'
        var_1 = module_0.get_collector_names(base_fact_collector_0, str_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'b'
        str_1 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_0 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_0 = 'min'
        list_0 = [cycle_found_in_fact_deps_0, base_fact_collector_0, str_0]
        float_0 = -4264.89543
        var_0 = module_0.collector_classes_from_gather_subset(cycle_found_in_fact_deps_0, base_fact_collector_0, str_0, list_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0)
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = ']'
        tuple_0 = ()
        base_fact_collector_0 = module_0.BaseFactCollector()
        int_0 = 2013
        base_fact_collector_1 = module_0.BaseFactCollector(int_0, str_0)
        var_1 = base_fact_collector_1.collect_with_namespace(tuple_0)
        dict_0 = {str_0: var_0, str_0: str_0, str_0: str_0, str_0: str_0}
        collector_not_found_error_1 = module_0.CollectorNotFoundError()
        base_fact_collector_2 = module_0.BaseFactCollector()
        var_2 = base_fact_collector_2.collect_with_namespace(collector_not_found_error_1, collector_not_found_error_1)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_3 = base_fact_collector_2.collect()
        set_0 = {base_fact_collector_1, base_fact_collector_1}
        var_4 = module_0.build_fact_id_to_collector_map(set_0)
        list_1 = [dict_0]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_1)
        bytes_0 = b''
        list_2 = None
        var_5 = module_0.select_collector_classes(bytes_0, list_2)
        str_1 = 'd\n\x0cYWd*tYJsWWOin'
        set_1 = set()
        dict_1 = {base_fact_collector_0: dict_0, str_0: str_1, base_fact_collector_2: set_1}
        var_6 = module_0.select_collector_classes(dict_0, dict_1)
        cycle_found_in_fact_deps_1 = module_0.CycleFoundInFactDeps()
        bytes_1 = b'+\x9e'
        complex_0 = None
        var_7 = module_0.find_unresolved_requires(bytes_1, complex_0)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = []
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0)
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = ']'
        str_1 = '5_K^hB\t\x0cVk&C'
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_2 = '"?y]!U5VQ |tNXTH'
        dict_0 = {str_0: str_0, str_2: str_1}
        var_1 = module_0.tsort(dict_0)
    except BaseException:
        pass