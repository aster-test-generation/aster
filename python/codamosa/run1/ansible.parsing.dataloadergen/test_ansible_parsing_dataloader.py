# Automatically generated by Pynguin.
import ansible.parsing.dataloader as module_0
import tempfile as module_1

def test_case_0():
    pass

def test_case_1():
    data_loader_0 = module_0.DataLoader()

def test_case_2():
    dict_0 = None
    int_0 = -294
    data_loader_0 = module_0.DataLoader()
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, dict_0, bool_0, bool_0)
    list_0 = [data_loader_0, tuple_1, int_0]
    var_0 = data_loader_0.is_file(list_0)

def test_case_3():
    data_loader_0 = module_0.DataLoader()
    var_0 = data_loader_0.cleanup_all_tmp_files()
    str_0 = ''
    bytes_0 = b'\x96e:\xbc\x9d\x0f\x958?\xbf\x10\n'
    tuple_0 = (str_0, bytes_0)
    var_1 = data_loader_0.path_dwim(tuple_0)
    var_2 = data_loader_0.is_directory(str_0)

def test_case_4():
    data_loader_0 = module_0.DataLoader()
    data_loader_1 = module_0.DataLoader()
    bool_0 = False
    var_0 = data_loader_0.set_basedir(bool_0)

def test_case_5():
    data_loader_0 = module_0.DataLoader()
    var_0 = data_loader_0.cleanup_tmp_file(data_loader_0)

def test_case_6():
    data_loader_0 = module_0.DataLoader()
    var_0 = data_loader_0.cleanup_all_tmp_files()

def test_case_7():
    var_0 = module_1.mkdtemp()
    str_0 = '/testfile'
    var_1 = var_0 + str_0
    str_1 = 'w'
    var_2 = open(var_1, str_1)
    data_loader_0 = module_0.DataLoader()
    str_2 = '/testfile'
    var_3 = var_0 + str_2
    bool_0 = False
    var_4 = data_loader_0.get_real_file(var_3, bool_0)

def test_case_8():
    float_0 = 0.001
    data_loader_0 = module_0.DataLoader()
    data_loader_1 = module_0.DataLoader()
    str_0 = "\n    name: local\n    short_description: execute on controller\n    description:\n        - This connection plugin allows ansible to execute tasks on the Ansible 'controller' instead of on a remote host.\n    author: ansible (@core)\n    version_added: historical\n    extends_documentation_fragment:\n        - connection_pipelining\n    notes:\n        - The remote user is ignored, the user with which the ansible CLI was executed is used instead.\n"
    dict_0 = {}
    var_0 = data_loader_1.path_dwim_relative_stack(str_0, float_0, dict_0)

def test_case_9():
    int_0 = -898
    list_0 = [int_0]
    data_loader_0 = module_0.DataLoader()
    var_0 = data_loader_0.cleanup_all_tmp_files()
    dict_0 = {}
    var_1 = data_loader_0.load_from_file(dict_0, data_loader_0, list_0)
    data_loader_1 = module_0.DataLoader()

def test_case_10():
    list_0 = []
    data_loader_0 = module_0.DataLoader()
    var_0 = data_loader_0.set_vault_secrets(data_loader_0)
    list_1 = []
    bytes_0 = b"!\xac\x9awM\xe1\xf0';e"
    tuple_0 = ()
    data_loader_1 = module_0.DataLoader()
    var_1 = data_loader_1.path_dwim_relative_stack(list_1, bytes_0, tuple_0)
    var_2 = data_loader_0.is_file(list_0)
    int_0 = 480
    var_3 = data_loader_1.cleanup_tmp_file(int_0)
    var_4 = data_loader_0.load_from_file(list_1)

def test_case_11():
    int_0 = -888
    list_0 = [int_0]
    data_loader_0 = module_0.DataLoader()
    dict_0 = {}
    int_1 = False
    var_0 = data_loader_0.cleanup_tmp_file(int_1)
    var_1 = data_loader_0.load_from_file(dict_0, data_loader_0, list_0)
    data_loader_1 = module_0.DataLoader()
    data_loader_2 = module_0.DataLoader()
    str_0 = '.=wa]/:9u'
    str_1 = ';a(0v\x0c;n}'
    var_2 = data_loader_2.find_vars_files(str_0, str_1)
    var_3 = data_loader_0.cleanup_all_tmp_files()

def test_case_12():
    str_0 = "d^b7'~i4C{ 8"
    int_0 = 3945
    int_1 = 703
    data_loader_0 = module_0.DataLoader()
    var_0 = data_loader_0.path_dwim_relative(str_0, str_0, int_0, int_1)

def test_case_13():
    str_0 = 'A_4\r\\IT,?rpgY'
    str_1 = '(\\S+)-(?:(\\d*):)?(.*)-(~?\\w+[\\w.+]*)'
    str_2 = 'Raspbian'
    data_loader_0 = module_0.DataLoader()
    var_0 = data_loader_0.path_dwim_relative(str_0, str_1, str_2)

def test_case_14():
    str_0 = "d^b7'~i4C{ 8"
    str_1 = '/~.EhO&'
    int_0 = 3945
    int_1 = 703
    data_loader_0 = module_0.DataLoader()
    var_0 = data_loader_0.path_dwim_relative(str_0, str_1, int_0, int_1)
    list_0 = [int_0, data_loader_0]
    var_1 = data_loader_0.set_vault_secrets(list_0)
    data_loader_1 = module_0.DataLoader()
    dict_0 = {}
    var_2 = data_loader_0.is_executable(dict_0)
    bool_0 = None
    var_3 = data_loader_0.path_dwim_relative(data_loader_0, bool_0, str_1)

def test_case_15():
    var_0 = module_1.mkdtemp()
    str_0 = '/testfile'
    var_1 = var_0 + str_0
    str_1 = 'w'
    var_2 = open(var_1, str_1)
    data_loader_0 = module_0.DataLoader()
    str_2 = '/testfile'
    var_3 = var_0 + str_2
    bool_0 = True
    var_4 = data_loader_0.get_real_file(var_3, bool_0)