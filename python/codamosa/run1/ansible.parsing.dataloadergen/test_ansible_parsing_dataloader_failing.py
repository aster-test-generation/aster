# Automatically generated by Pynguin.
import ansible.parsing.dataloader as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        data_loader_0 = module_0.DataLoader()
        data_loader_1 = module_0.DataLoader()
        list_0 = [data_loader_0]
        var_0 = data_loader_0.load(data_loader_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'e\xa5\x9f\xa4'
        dict_0 = {bytes_0: bytes_0}
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.load_from_file(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'S@: '
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_real_file(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -2060.5548
        data_loader_0 = module_0.DataLoader()
        data_loader_1 = module_0.DataLoader()
        bool_0 = True
        var_0 = data_loader_1.set_basedir(bool_0)
        var_1 = data_loader_1.is_directory(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 64
        str_0 = ')|$% ch'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_tmp_file(str_0)
        data_loader_1 = module_0.DataLoader()
        var_1 = data_loader_1.list_directory(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -862
        list_0 = [int_0]
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        data_loader_1 = module_0.DataLoader()
        dict_0 = {}
        int_1 = 480
        var_1 = data_loader_0.cleanup_tmp_file(int_1)
        var_2 = data_loader_1.load_from_file(dict_0, data_loader_0, list_0)
        str_0 = ''
        display_0 = module_1.Display()
        var_3 = data_loader_0.find_vars_files(str_0, str_0)
        var_4 = data_loader_1.get_real_file(data_loader_1, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'O~c=\\b^gZ'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.is_executable(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        data_loader_0 = module_0.DataLoader()
        float_0 = None
        str_0 = 'URL for repository not specified, use -h for help'
        var_0 = data_loader_0.path_dwim_relative_stack(str_0, float_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        set_0 = {bool_0}
        float_0 = 1593.0
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.path_dwim_relative(bool_0, set_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "d^b7'~i4C{ 8"
        int_0 = 3945
        int_1 = 703
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.path_dwim_relative(str_0, str_0, int_0, int_1)
        bool_0 = False
        var_1 = data_loader_0.get_real_file(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -283
        set_0 = None
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.find_vars_files(int_0, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.load_from_file(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -898
        list_0 = [int_0]
        bytes_0 = b"!\xac\x9awM\xe1\xf0';e+!"
        tuple_0 = ()
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.path_dwim_relative_stack(list_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        data_loader_0 = module_0.DataLoader()
        tuple_0 = (bool_0, data_loader_0)
        data_loader_1 = module_0.DataLoader()
        var_0 = data_loader_1.is_file(tuple_0)
        str_0 = 'qfO"x^s/iVA$'
        str_1 = 'SemanticVersion(%r)'
        var_1 = data_loader_1.find_vars_files(str_0, str_1, data_loader_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '~-l$7fWRyyWEl,0TD-^'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.is_file(str_0)
        str_1 = 'DM['
        var_1 = data_loader_0.get_real_file(str_1, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        bool_0 = False
        data_loader_1 = None
        data_loader_2 = module_0.DataLoader()
        data_loader_3 = module_0.DataLoader()
        bool_1 = False
        bytes_0 = None
        var_1 = data_loader_3.path_dwim_relative_stack(bool_1, bool_0, bytes_0, data_loader_1)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -898
        list_0 = [int_0]
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        data_loader_1 = module_0.DataLoader()
        dict_0 = {}
        bool_0 = True
        var_1 = data_loader_1.load_from_file(dict_0, data_loader_0, list_0)
        var_2 = data_loader_1.load_from_file(dict_0, bool_0)
        str_0 = '\\tR 5M)-#68P:l6A'
        var_3 = data_loader_1.cleanup_all_tmp_files()
        data_loader_2 = module_0.DataLoader()
        data_loader_3 = module_0.DataLoader()
        float_0 = -1244.06
        var_4 = data_loader_3.path_dwim_relative_stack(float_0, list_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -898
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        str_0 = '\\tR 5M)-#68P:l6A'
        bool_0 = True
        data_loader_1 = module_0.DataLoader()
        float_0 = -1244.06
        set_0 = {str_0, bool_0}
        tuple_0 = (int_0, str_0, set_0)
        str_1 = '/*F>5[H9A+^e[w%}mo'
        var_1 = data_loader_0.path_dwim_relative_stack(tuple_0, float_0, str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -898
        list_0 = [int_0]
        str_0 = '\\tR 5M)-#68P:l6A'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.path_dwim_relative_stack(str_0, list_0, str_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -898
        list_0 = [int_0]
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        dict_0 = {}
        bool_0 = True
        var_1 = data_loader_0.cleanup_tmp_file(data_loader_0)
        var_2 = data_loader_0.load_from_file(dict_0, data_loader_0, list_0)
        complex_0 = None
        var_3 = data_loader_0.set_basedir(complex_0)
        var_4 = data_loader_0.load_from_file(dict_0, bool_0)
        data_loader_1 = module_0.DataLoader()
        str_0 = '1\x0c?ZM?pLl4@'
        data_loader_2 = module_0.DataLoader()
        var_5 = data_loader_2.is_file(str_0)
        data_loader_3 = module_0.DataLoader()
        var_6 = data_loader_2.path_exists(dict_0)
        str_1 = '3-bKSgk~xY\thqPC4QJ9s'
        str_2 = 'BA5x)npf'
        var_7 = data_loader_3.path_dwim_relative_stack(str_1, list_0, str_2, str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = -845
        list_0 = [int_0]
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        data_loader_1 = module_0.DataLoader()
        dict_0 = {}
        int_1 = 480
        var_1 = data_loader_0.cleanup_tmp_file(int_1)
        var_2 = data_loader_1.load_from_file(dict_0, data_loader_0, list_0)
        str_0 = 'S`'
        display_0 = module_1.Display()
        var_3 = data_loader_0.find_vars_files(str_0, str_0)
        bytes_0 = b''
        var_4 = data_loader_0.cleanup_all_tmp_files()
        bytes_1 = b''
        str_1 = 'kBwy\rK}\\"n|_'
        var_5 = data_loader_0.path_dwim_relative_stack(dict_0, bytes_0, bytes_1, str_1)
        int_2 = 3
        var_6 = data_loader_0.get_real_file(int_2, dict_0)
    except BaseException:
        pass