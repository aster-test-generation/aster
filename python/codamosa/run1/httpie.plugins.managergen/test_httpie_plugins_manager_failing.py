# Automatically generated by Pynguin.
import httpie.plugins.manager as module_0

def test_case_0():
    try:
        plugin_manager_0 = module_0.PluginManager()
        list_0 = plugin_manager_0.get_transport_plugins()
        type_0 = None
        list_1 = [list_0, type_0, type_0, type_0]
        var_0 = plugin_manager_0.register(*list_1)
        list_2 = plugin_manager_0.get_formatters()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '^[a-zA-Z0-9_.-]+$'
        dict_0 = {str_0: str_0}
        plugin_manager_0 = module_0.PluginManager(**dict_0)
        list_0 = plugin_manager_0.get_auth_plugins()
        plugin_manager_1 = module_0.PluginManager()
        list_1 = plugin_manager_1.get_converters()
        set_0 = None
        float_0 = -1867.7
        plugin_manager_2 = module_0.PluginManager()
        list_2 = plugin_manager_2.get_auth_plugins()
        tuple_0 = (set_0, float_0, plugin_manager_2)
        str_1 = '=g\x0bs/'
        str_2 = '\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        '
        str_3 = '/ 0yl}T53'
        dict_1 = {str_1: str_2, str_3: str_2}
        plugin_manager_3 = module_0.PluginManager(**dict_1)
        list_3 = plugin_manager_2.get_formatters()
        var_0 = plugin_manager_3.unregister(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '&\\5]T'
        plugin_manager_0 = module_0.PluginManager()
        type_0 = plugin_manager_0.get_auth_plugin(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        plugin_manager_0 = module_0.PluginManager()
        list_0 = []
        plugin_manager_1 = module_0.PluginManager(*list_0)
        var_0 = plugin_manager_1.load_installed_plugins()
        list_1 = plugin_manager_0.get_auth_plugins()
        list_2 = plugin_manager_0.get_converters()
        list_3 = plugin_manager_0.get_converters()
        var_1 = plugin_manager_1.__repr__()
        list_4 = [list_3, list_3, list_1, list_3]
        plugin_manager_2 = module_0.PluginManager(*list_4)
    except BaseException:
        pass

def test_case_4():
    try:
        plugin_manager_0 = module_0.PluginManager()
        list_0 = plugin_manager_0.get_formatters()
        str_0 = '%s:%s'
        list_1 = [str_0]
        plugin_manager_1 = module_0.PluginManager(*list_1)
        list_2 = plugin_manager_1.get_transport_plugins()
    except BaseException:
        pass