# Automatically generated by Pynguin.
import httpie.cli.argtypes as module_0
import httpie.cli.requestitems as module_1

def test_case_0():
    try:
        str_0 = ',N9F\t_e>x.xIi{;'
        str_1 = "(i{G:oI'h)W{#k"
        str_2 = '|,t'
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_0, str_1, str_2)
        str_3 = module_1.process_empty_header_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'WFGva2'
        request_items_0 = module_1.RequestItems(str_0)
        str_1 = None
        str_2 = 'y'
        str_3 = '$A'
        str_4 = ' 5Q{/}W[W&@'
        key_value_arg_0 = module_0.KeyValueArg(str_4, str_0, str_2, str_3)
        str_5 = None
        str_6 = module_1.process_query_param_arg(key_value_arg_0)
        str_7 = 'ZLuziGqVYnn~QYyew[o0'
        key_value_arg_1 = module_0.KeyValueArg(str_5, str_1, str_2, str_7)
        tuple_0 = module_1.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ci?jRDt'
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_0, str_0, str_0)
        tuple_0 = module_1.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_0, str_0, str_0)
        str_1 = module_1.process_data_embed_file_contents_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ')K}}ZFm7UV6wK_UJe'
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_0, str_0, str_0)
        var_0 = module_1.process_data_embed_raw_json_file_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'ci?jRDt'
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_0, str_0, str_0)
        var_0 = module_1.process_data_raw_json_embed_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_0, str_0, str_0)
        var_0 = module_1.process_data_embed_raw_json_file_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'WFGva2'
        request_items_0 = module_1.RequestItems(str_0)
        str_1 = 'y'
        key_value_arg_0 = module_0.KeyValueArg(str_1, str_1, str_1, str_1)
        tuple_0 = module_1.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_0, str_0, str_0)
        optional_0 = module_1.process_header_arg(key_value_arg_0)
        str_1 = module_1.process_data_embed_file_contents_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        str_1 = '1ChdDBBZ \rV(gb{q">>'
        tuple_0 = None
        tuple_1 = (str_0, tuple_0, str_0)
        request_items_0 = module_1.RequestItems(tuple_1)
        key_value_arg_0 = module_0.KeyValueArg(str_1, str_0, str_1, str_1)
        var_0 = module_1.process_data_raw_json_embed_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Tw;0\\E'
        str_1 = '1'
        str_2 = 'w'
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_1, str_2, str_2)
        var_0 = module_1.process_data_raw_json_embed_arg(key_value_arg_0)
        str_3 = 'xc]\nW,CMx \x0bA^A'
        key_value_arg_1 = module_0.KeyValueArg(str_2, str_2, str_0, str_3)
        optional_0 = module_1.process_header_arg(key_value_arg_1)
        tuple_0 = module_1.process_file_upload_arg(key_value_arg_1)
        tuple_1 = module_1.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'test_load_text_file'
        str_1 = '3c0yH*79khRy)I'
        str_2 = '%f'
        key_value_arg_0 = module_0.KeyValueArg(str_0, str_0, str_1, str_2)
        str_3 = module_1.load_text_file(key_value_arg_0)
        str_4 = 'w'
        var_0 = open(str_0, str_4)
        str_5 = 'rb'
        var_1 = open(str_0, str_5)
        str_6 = 'test_load_text_file'
        key_value_arg_1 = module_0.KeyValueArg(str_6, str_6)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '^[a-zA-Z0-9_.-]+$'
        str_1 = 'R'
        str_2 = 'q!;E\t%Z%Z-mya@v`/c'
        key_value_arg_0 = module_0.KeyValueArg(str_1, str_2, str_2, str_2)
        optional_0 = module_1.process_header_arg(key_value_arg_0)
        str_3 = '8/+: R\nT\n1N'
        str_4 = 'w'
        str_5 = '5cNK=rA1E0_d2'
        str_6 = "<=JX';N+434?@:~,\r&"
        key_value_arg_1 = module_0.KeyValueArg(str_5, str_4, str_0, str_6)
        str_7 = 'hy7_W=X\tYF\x0crO'
        key_value_arg_2 = module_0.KeyValueArg(str_3, str_4, str_6, str_7)
        var_0 = key_value_arg_1.__repr__()
        var_1 = module_1.process_data_embed_raw_json_file_arg(key_value_arg_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        str_1 = 'Tw;0\\E'
        str_2 = "8aBd;Wu&'Ru2P0FU"
        str_3 = None
        key_value_arg_0 = module_0.KeyValueArg(str_1, str_1, str_0, str_3)
        none_type_0 = None
        str_4 = 'v %?e~$_8mEPJ+0Z'
        key_value_arg_1 = module_0.KeyValueArg(str_2, none_type_0, str_1, str_4)
        var_0 = key_value_arg_0.__eq__(key_value_arg_0)
        str_5 = ']s:,'
        str_6 = '\n    Optional key-value pairs to be included in the request. The separator used\n    determines the type:\n\n    \':\' HTTP headers:\n\n        Referer:http://httpie.org  Cookie:foo=bar  User-Agent:bacon/1.0\n\n    \'==\' URL parameters to be appended to the request URI:\n\n        search==httpie\n\n    \'=\' Data fields to be serialized into a JSON object (with --json, -j)\n        or form data (with --form, -f):\n\n        name=HTTPie  language=Python  description=\'CLI HTTP client\'\n\n    \':=\' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:=\'["red", "green", "blue"]\'\n\n    \'@\' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@\'~/Documents/CV.pdf;type=application/pdf\'\n\n    \'=@\' A data field like \'=\', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    \':=@\' A raw JSON field like \':=\', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '
        str_7 = '1<t"Joh>>'
        str_8 = '(builtin)'
        key_value_arg_2 = module_0.KeyValueArg(str_5, str_6, str_7, str_8)
        tuple_0 = module_1.process_file_upload_arg(key_value_arg_2)
    except BaseException:
        pass