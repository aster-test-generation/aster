# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        bool_0 = True
        var_0 = module_0.unique(bool_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = None
        str_0 = '~{F1_04$~EfoT%u'
        int_0 = -1886
        var_0 = module_0.difference(tuple_0, str_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'masked-runtime'
        bytes_0 = b'\xe1\xaa'
        bytes_1 = b'+V^\xeb\xe9I\x16'
        bytes_2 = b'\x89Z\xa8r}ub%e=k\x12\x06"\x90^\x15\x05\x01'
        list_0 = []
        var_0 = module_0.difference(bytes_1, bytes_2, list_0)
        dict_0 = {str_0: bytes_0, str_0: bytes_0, str_0: bytes_0, str_0: str_0}
        var_1 = module_0.min(bytes_0, dict_0)
        var_2 = module_0.human_readable(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'MemrA{\x0b&kR3'
        dict_0 = {str_0: str_0}
        bool_0 = False
        list_0 = [bool_0, str_0, dict_0]
        bool_1 = True
        float_0 = -3162.445
        var_0 = module_0.symmetric_difference(list_0, bool_1, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1
        int_1 = [int_0, int_0, int_0, int_0, int_0]
        str_0 = '5jH&GW'
        list_0 = [int_1, str_0, int_1]
        var_0 = module_0.symmetric_difference(str_0, list_0, list_0)
        float_0 = -3533.8243
        var_1 = module_0.max(float_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        float_0 = 0.2
        var_0 = module_0.min(dict_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -3533.8243
        var_0 = module_0.max(float_0, float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xeb1\xc0\x99\xf8\x08'
        list_0 = [bytes_0, bytes_0]
        var_0 = module_0.logarithm(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0}
        var_0 = module_0.power(set_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        var_0 = module_0.inversepower(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = None
        bool_0 = False
        var_0 = module_0.inversepower(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '6!L'
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        set_0 = {str_0, filter_module_0, filter_module_0}
        var_0 = module_0.human_readable(str_0, filter_module_0, set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = None
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        filter_module_1 = module_0.FilterModule()
        var_1 = module_0.human_readable(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '|\x0c'
        var_0 = module_0.human_to_bytes(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.rekey_on_member(bool_0, filter_module_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Ni:F|FG~-OJ\x0c\n'
        str_1 = 'brand'
        int_0 = 350
        var_0 = {str_0: str_1, str_1: int_0, str_1: int_0}
        var_1 = {str_0: var_0, str_1: str_1}
        var_2 = module_0.rekey_on_member(var_1, str_1)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = module_0.unique(bool_0, bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ':rQ[M*f9qz\x0b$"'
        float_0 = 1215.87
        int_0 = 10
        set_0 = set()
        filter_module_0 = module_0.FilterModule()
        bytes_0 = None
        int_1 = 10
        var_0 = module_0.difference(bytes_0, set_0, int_1)
        str_1 = '6;kY*Ed^v\n{.{n'
        tuple_0 = (float_0, int_0, set_0, str_1)
        tuple_1 = (tuple_0,)
        list_0 = [tuple_1, tuple_0, str_0]
        var_1 = module_0.symmetric_difference(str_0, tuple_1, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        str_1 = 'A%+GakA45Ek2\\'
        float_0 = -494.61
        list_0 = [str_0, float_0]
        var_0 = module_0.unique(float_0, list_0)
        str_2 = 'ZR{N'
        dict_0 = {str_2: str_0, str_1: str_0, str_2: str_1}
        float_1 = 1904.34
        var_1 = module_0.rekey_on_member(str_0, dict_0, float_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'Ni:F|FG~-OJ\x0c\n'
        str_1 = 'brand'
        str_2 = '(gUh?'
        bytes_0 = b"\x7f\xf9\x88\x11\xa1\xf3h\xe7X\xe2\x852\xda\x8e^'A"
        str_3 = 'fKIX%N)jk@EE1v>{r}'
        str_4 = 'upuX[g/M|l!)b\x0c\tk'
        dict_0 = {str_2: str_0, str_3: str_3, str_4: bytes_0}
        var_0 = module_0.intersect(str_2, bytes_0, dict_0)
        int_0 = 351
        var_1 = {str_0: str_1, str_1: int_0, int_0: int_0, str_1: int_0}
        var_2 = {str_0: var_1, str_1: var_1}
        var_3 = module_0.rekey_on_member(var_2, str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.rekey_on_member(bool_0, filter_module_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'o\x0b=QR'
        str_1 = 'Ds'
        bool_0 = False
        set_0 = {str_0, str_0, bool_0, str_1}
        dict_0 = {bool_0: set_0}
        tuple_0 = (bool_0, set_0, dict_0)
        str_2 = '\x0bI2\t|'
        var_0 = module_0.union(str_1, tuple_0, str_2)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = 2382.06
        str_0 = 'MemrA{\x0b&kR3'
        var_0 = module_0.min(float_0, str_0)
        str_1 = None
        dict_0 = {}
        bool_0 = False
        var_1 = module_0.rekey_on_member(dict_0, bool_0)
        dict_1 = {str_0: var_0, str_1: str_0}
        int_0 = -1703
        var_2 = module_0.max(int_0, dict_1)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'brand'
        int_0 = 1782
        var_0 = {str_0: str_0, str_0: int_0, str_0: int_0}
        list_0 = [var_0]
        dict_0 = {str_0: list_0, str_0: var_0}
        var_1 = module_0.rekey_on_member(list_0, dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'upuX[g/M|l!)b\x0c\tk'
        filter_module_0 = None
        var_0 = module_0.rekey_on_member(str_0, filter_module_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = 522.69995
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.human_to_bytes(float_0, filter_module_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = ''
        float_0 = -494.61
        list_0 = [str_0, float_0]
        var_0 = module_0.unique(float_0, list_0)
        bool_0 = False
        var_1 = module_0.logarithm(bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = -976
        str_0 = 'Hr|.\nlMe>:&?%RbIX7'
        dict_0 = {}
        var_0 = module_0.difference(str_0, dict_0, int_0)
        str_1 = 'Ni:F|FG~-OJ\x0c\n'
        str_2 = 'brcnd'
        int_1 = 351
        var_1 = {str_1: str_2, str_2: int_1, str_2: int_1}
        var_2 = {str_1: var_1, str_2: var_1}
        var_3 = module_0.rekey_on_member(var_2, str_2)
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = True
        str_0 = '1A'
        ansible_filter_type_error_0 = None
        bytes_0 = b'c\xa0(\xeey\x82i\xb8\xd9\xb6\x02\xe31|'
        var_0 = module_0.unique(bool_0, str_0, ansible_filter_type_error_0, bytes_0)
    except BaseException:
        pass

def test_case_29():
    try:
        float_0 = 869.99015
        list_0 = [float_0, float_0]
        bool_0 = True
        list_1 = [list_0, bool_0, bool_0, bool_0]
        var_0 = module_0.symmetric_difference(bool_0, list_0, list_1)
        str_0 = '/etc/ssh'
        dict_0 = {str_0: list_0, str_0: str_0, str_0: list_0}
        str_1 = 'upuX[g/M|l!)b\x0c\tk'
        bytes_0 = b'\xf7\xad\xe6Y\x04\x93\xad\xa1\x0b\xdb'
        tuple_0 = (str_1, bytes_0)
        var_1 = module_0.min(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_30():
    try:
        float_0 = -1261.28
        str_0 = 'upuX[g/M|l!)b\x0c\tk'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = 'upuX[g/M|l!)b\x0c\tk'
        var_0 = module_0.intersect(float_0, dict_0, str_1)
        int_0 = 32600
        var_1 = module_0.power(float_0, int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        float_0 = 998.7
        float_1 = 1462.25092
        list_0 = [float_0, float_1, float_1]
        float_2 = 2.718281828459045
        list_1 = [float_0, float_2]
        var_0 = module_0.difference(float_1, list_0, list_1)
        str_0 = "Ta'SA')C?-O\x0c_"
        dict_0 = {str_0: var_0, str_0: list_1, str_0: str_0}
        var_1 = module_0.human_readable(dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'name'
        str_1 = 'iW'
        str_2 = '0000:00:12:34:56'
        str_3 = 'eth0'
        str_4 = {str_1: str_2, str_0: str_3, str_1: str_3}
        str_5 = 'eth1'
        tuple_0 = None
        str_6 = 'upuX[g/M|l!)b\x0c\tk'
        var_0 = module_0.intersect(tuple_0, str_6, str_4)
        str_7 = 'eth2'
        str_8 = [str_4, str_7, str_1]
        str_9 = '|D8@(s(!'
        str_10 = 'Origi|al Dat]: %s'
        var_1 = str_10 % str_5
        var_2 = module_0.rekey_on_member(str_8, str_9)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'Ni:F|FG~-OJ\x0c\n'
        str_1 = 'brand'
        int_0 = 351
        var_0 = {str_0: str_1, str_1: int_0, int_0: int_0, str_1: int_0}
        var_1 = {str_0: var_0, str_1: var_0}
        var_2 = module_0.rekey_on_member(var_1, str_1)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'nam'
        str_1 = 'ip'
        bool_0 = True
        var_0 = module_0.inversepower(bool_0)
        str_2 = "}<S'AZEI4V$%VLpguH7"
        set_0 = {str_0}
        tuple_0 = (str_2, set_0)
        tuple_1 = (tuple_0,)
        str_3 = 'C=S\x0cg0MM'
        dict_0 = {str_2: set_0, str_3: str_0, str_2: str_1, str_3: str_3}
        var_1 = module_0.min(tuple_1, dict_0)
        str_4 = '192.168.0.1'
        str_5 = {str_4: str_0, str_0: str_4, str_1: str_4}
        str_6 = '192.168.0.2'
        list_0 = [str_5, str_6, dict_0]
        list_1 = [str_3]
        var_2 = module_0.unique(list_0, list_0, list_1)
        bool_1 = False
        float_0 = 2.718281828459045
        var_3 = module_0.unique(tuple_0, tuple_1, bool_1, float_0)
    except BaseException:
        pass