# Automatically generated by Pynguin.
import typesystem.fields as module_0
import decimal as module_1

def test_case_0():
    try:
        str_0 = '6L7\x0bE0zr\rbn'
        field_0 = module_0.Field()
        validation_result_0 = field_0.validate_or_error(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(boolean_0)
    except BaseException:
        pass

def test_case_2():
    try:
        string_0 = module_0.String()
        int_0 = None
        any_0 = string_0.validate(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'X}m'
        string_0 = module_0.String(pattern=str_0, format=str_0)
        any_0 = string_0.validate(string_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -59
        number_0 = module_0.Number(minimum=int_0, maximum=int_0, exclusive_minimum=int_0, exclusive_maximum=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        number_0 = module_0.Number()
        any_0 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1500
        number_0 = module_0.Number(maximum=int_0, exclusive_maximum=int_0, multiple_of=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        array_0 = module_0.Array()
        bool_0 = True
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(array_0, strict=bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'y}'
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(choice_0)
    except BaseException:
        pass

def test_case_10():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        any_0 = module_0.Any()
        any_1 = any_0.validate(field_0)
        any_2 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'else'
        bool_0 = None
        const_0 = module_0.Const(str_0)
        any_0 = const_0.validate(str_0, bool_0)
        number_0 = module_0.Number(precision=str_0)
        any_1 = const_0.validate(number_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'else'
        bool_0 = None
        const_0 = module_0.Const(str_0)
        any_0 = const_0.validate(str_0, bool_0)
        number_0 = module_0.Number(precision=str_0)
        any_1 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -59
        number_0 = module_0.Number(multiple_of=int_0)
        str_0 = 'm)f)YZ5R^7k'
        string_0 = module_0.String(max_length=int_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        str_0 = '|\r'
        field_0 = module_0.Field(description=str_0, default=str_0)
        any_0 = field_0.get_default_value()
        str_1 = 'X}m4'
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, pattern=str_1, format=str_1)
        str_2 = '}yGmf"8%"JCVX[k0G,7'
        dict_0 = {str_2: str_1}
        string_1 = module_0.String(allow_blank=bool_0, max_length=dict_0, pattern=str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = None
        optional_0 = None
        list_0 = []
        object_0 = module_0.Object(min_properties=int_0, required=list_0)
        any_0 = object_0.validate(optional_0)
    except BaseException:
        pass

def test_case_16():
    try:
        none_type_0 = None
        decimal_0 = module_1.Decimal()
        dict_0 = {}
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        number_0 = module_0.Number(exclusive_minimum=decimal_0, exclusive_maximum=decimal_0, **dict_0)
        time_0 = module_0.Time()
        list_0 = [dict_0, decimal_0, number_0, time_0]
        object_0 = module_0.Object(additional_properties=none_type_0, property_names=number_0, required=list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        choice_0 = module_0.Choice()
        str_0 = 'phs%gq3t6<h_2~e9f\x0b9T'
        str_1 = 'o>HAp~#R%[s\t'
        field_0 = module_0.Field(default=str_0)
        str_2 = "88K_B'Z,7%"
        dict_0 = {str_1: field_0, str_0: field_0, str_1: field_0, str_2: field_0}
        const_0 = module_0.Const(choice_0)
        int_0 = 2263
        sequence_0 = None
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, property_names=field_0, min_properties=const_0, max_properties=int_0, required=sequence_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'yy"WQg\nA<{cKL\x0cWr3ld'
        field_0 = module_0.Field(default=str_0)
        dict_0 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(additional_properties=field_0, required=str_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        field_0 = module_0.Field()
        str_0 = '6L7\x0bE0zr\rbn'
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_0, property_names=field_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        dict_0 = {}
        array_0 = module_0.Array(field_0, dict_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 3
        bool_0 = True
        array_0 = module_0.Array(int_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 2731
        bool_0 = True
        str_0 = "3~It'R\t&m6WA&`2/"
        string_0 = module_0.String(allow_blank=bool_0, min_length=int_0, format=str_0)
        str_1 = '$+QWYfd/M|'
        any_0 = string_0.validate(str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        list_0 = []
        array_0 = module_0.Array(list_0)
        any_0 = array_0.validate(array_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = None
        array_0 = module_0.Array(int_0)
        any_0 = array_0.validate(int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 1
        int_1 = -10
        integer_0 = module_0.Integer(minimum=int_1, maximum=int_0)
        string_0 = module_0.String(max_length=int_0, min_length=int_0)
        var_0 = [integer_0, string_0]
        union_0 = module_0.Union(var_0)
        str_0 = 'test'
        any_0 = union_0.validate(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = True
        str_0 = 's_e9 ^q,qMB>yF)(L4'
        boolean_0 = module_0.Boolean(description=str_0, allow_null=bool_0)
        any_0 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        decimal_0 = module_1.Decimal()
        dict_0 = {}
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        number_0 = module_0.Number(exclusive_minimum=decimal_0, exclusive_maximum=decimal_0, **dict_0)
        time_0 = module_0.Time()
        field_0 = module_0.Field(default=boolean_0)
        list_0 = [bool_0, boolean_0]
        array_0 = module_0.Array(list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        boolean_0 = module_0.Boolean()
        list_0 = [boolean_0, boolean_0, boolean_0, boolean_0]
        array_0 = module_0.Array(list_0)
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'F^C[p.L"agv\'$s"'
        field_0 = module_0.Field(title=str_0)
        dict_0 = {str_0: field_0}
        object_0 = module_0.Object(properties=dict_0)
        const_0 = module_0.Const(object_0)
        array_0 = module_0.Array()
        list_0 = [const_0, dict_0, array_0]
        bool_0 = True
        any_0 = module_0.Any()
        any_1 = any_0.validate(list_0, bool_0)
        decimal_0 = module_0.Decimal()
        decimal_1 = module_0.Decimal(precision=str_0)
        str_1 = None
        bool_1 = False
        field_1 = module_0.Field(title=str_0, description=str_1, default=bool_1)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = -73
        field_0 = module_0.Field()
        str_0 = 'g(I'
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, min_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '\x0b&H!+A;HRm$^>g>'
        bool_0 = False
        str_1 = ':'
        string_0 = module_0.String(trim_whitespace=bool_0, pattern=str_0, format=str_1)
        number_0 = module_0.Number(precision=str_0)
        any_0 = number_0.validate(bool_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 6
        number_0 = module_0.Number(multiple_of=int_0)
        any_0 = number_0.validate(int_0)
        str_0 = 'Cannot convert regular expression with non-standard flags to JSON schema: '
        boolean_0 = module_0.Boolean(title=str_0, description=str_0)
        str_1 = None
        boolean_1 = module_0.Boolean(title=str_1, description=str_1)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = '\x0b&H!+A;HRm$^>g>'
        bool_0 = False
        str_1 = ':'
        string_0 = module_0.String(trim_whitespace=bool_0, pattern=str_0, format=str_1)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = -10
        int_1 = 10
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_1)
        int_2 = 1
        string_0 = module_0.String(max_length=int_1, min_length=int_2)
        var_0 = [integer_0, string_0]
        union_0 = module_0.Union(var_0)
        int_3 = -5
        any_0 = union_0.validate(int_3)
        int_4 = -10
        integer_1 = module_0.Integer(minimum=int_4, maximum=int_1)
        string_1 = module_0.String(max_length=int_1, min_length=int_2)
        var_1 = [integer_1, string_1]
        union_1 = module_0.Union(var_1)
        str_0 = 'test'
        any_1 = union_1.validate(str_0)
        integer_2 = module_0.Integer(minimum=int_1, maximum=int_1)
        var_2 = [integer_2, string_1]
        union_2 = module_0.Union(var_2)
        int_5 = -20
        any_2 = union_2.validate(int_5)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'u\t}\x0cmum@(P\r?<i-FY6D\n'
        field_0 = module_0.Field(description=str_0)
        text_0 = module_0.Text()
        field_1 = module_0.Field(default=text_0)
        union_0 = field_1.__or__(field_0)
        int_0 = -51
        str_1 = 'dO3z3eo"\r@`$"k+nh'
        dict_0 = {str_1: str_1}
        string_0 = module_0.String(max_length=int_0, pattern=dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        bool_0 = None
        boolean_0 = module_0.Boolean(default=bool_0)
        any_0 = boolean_0.validate(bool_0)
    except BaseException:
        pass

def test_case_37():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        any_0 = union_0.validate(field_0)
    except BaseException:
        pass

def test_case_38():
    try:
        list_0 = []
        union_0 = module_0.Union(list_0)
        any_0 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'd\x0c[_v}&3'
        field_0 = module_0.Field(default=str_0)
        dict_0 = {str_0: field_0}
        const_0 = module_0.Const(dict_0)
        string_0 = module_0.String(min_length=const_0, format=str_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = -118
        bool_0 = False
        field_0 = module_0.Field(default=int_0, allow_null=bool_0)
        object_0 = module_0.Object(additional_properties=field_0, min_properties=int_0)
        any_0 = object_0.validate(object_0)
    except BaseException:
        pass

def test_case_41():
    try:
        date_0 = module_0.Date()
        choice_0 = module_0.Choice()
        object_0 = module_0.Object(properties=choice_0)
        bool_0 = None
        any_0 = object_0.validate(choice_0, strict=bool_0)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 1671
        object_0 = module_0.Object(min_properties=int_0)
        any_0 = object_0.validate(int_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'X}m'
        string_0 = module_0.String(pattern=str_0, format=str_0)
        any_0 = string_0.validate(str_0)
        set_0 = {str_0, str_0}
        int_0 = -2491
        str_1 = '\n    Parse and validate a YAML string, returning positionally marked error\n    messages on parse or validation failures.\n\n    content - A YAML string or bytestring.\n    validator - A Field instance or Schema class to validate against.\n\n    Returns a two-tuple of (value, error_messages)\n    '
        number_0 = module_0.Number(minimum=set_0, exclusive_minimum=int_0, precision=str_1)
    except BaseException:
        pass

def test_case_44():
    try:
        number_0 = module_0.Number()
        string_0 = module_0.String()
        var_0 = [number_0, string_0]
        union_0 = module_0.Union(var_0)
        bool_0 = True
        any_0 = union_0.validate(var_0, bool_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = ' ai+??[\x0cB'
        number_0 = module_0.Number(precision=str_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_46():
    try:
        field_0 = module_0.Field()
        str_0 = '9|v{#'
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        field_1 = None
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_1, property_names=field_1)
        choice_0 = module_0.Choice()
        float_0 = -951.206427
        number_0 = module_0.Number(multiple_of=float_0)
        number_1 = module_0.Number(maximum=choice_0, exclusive_maximum=number_0, precision=str_0, multiple_of=float_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = '34),bt('
        list_0 = [str_0, str_0, str_0]
        decimal_0 = module_0.Decimal(multiple_of=list_0)
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = -37
        number_0 = module_0.Number(multiple_of=int_0)
        any_0 = number_0.validate(int_0)
        decimal_0 = module_0.Decimal(minimum=int_0, exclusive_minimum=int_0, multiple_of=int_0)
        any_1 = decimal_0.serialize(any_0)
        str_0 = 'pattern'
        str_1 = ']U#UBK'
        int_1 = -1276
        string_0 = module_0.String(min_length=int_1)
        dict_0 = {str_0: int_0, str_1: string_0}
        choice_0 = module_0.Choice(choices=dict_0)
        str_2 = '3&\rAE$f/q'
        bool_0 = True
        any_2 = module_0.Any(title=str_2, description=str_1, allow_null=bool_0)
        field_0 = None
        str_3 = 'additional_items'
        str_4 = 'Union'
        field_1 = module_0.Field(default=any_1, allow_null=bool_0)
        str_5 = 'Q)u %[f!%7\'JH\\"'
        field_2 = module_0.Field(description=str_1, default=int_1, allow_null=bool_0)
        dict_1 = {str_3: field_0, str_4: field_1, str_0: field_1, str_5: field_2}
        object_0 = module_0.Object(properties=dict_1, additional_properties=field_2, property_names=field_0, max_properties=int_1)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = 'g$.ScYT02(AWZbl*QLk"'
        string_0 = module_0.String()
        field_0 = module_0.Field(description=str_0, default=string_0)
        str_1 = ';\x0c\n6b)s\\}t#:tfhh\tS`>'
        int_0 = 4
        str_2 = None
        dict_0 = {str_1: field_0, str_2: field_0}
        dict_1 = {}
        object_0 = module_0.Object(properties=dict_0, min_properties=int_0, **dict_1)
    except BaseException:
        pass

def test_case_50():
    try:
        int_0 = None
        string_0 = module_0.String()
        dict_0 = {}
        dict_1 = {}
        decimal_0 = module_0.Decimal(exclusive_minimum=int_0, precision=dict_0, **dict_1)
        any_0 = decimal_0.serialize(int_0)
        any_1 = string_0.validate(int_0)
    except BaseException:
        pass

def test_case_51():
    try:
        int_0 = None
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(int_0)
    except BaseException:
        pass

def test_case_52():
    try:
        set_0 = set()
        float_0 = module_0.Float(exclusive_minimum=set_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = ' ai+??[\x0cB'
        int_0 = -2212
        number_0 = module_0.Number(precision=str_0, multiple_of=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = ''
        number_0 = module_0.Number(precision=str_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_55():
    try:
        list_0 = None
        number_0 = module_0.Number()
        any_0 = number_0.validate(list_0)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = ''
        field_0 = module_0.Field(title=str_0)
        string_0 = module_0.String(pattern=str_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = "wYPP'tR9$I4~"
        number_0 = module_0.Number(exclusive_maximum=str_0, precision=str_0)
    except BaseException:
        pass

def test_case_58():
    try:
        int_0 = -96
        int_1 = -1480
        number_0 = module_0.Number(multiple_of=int_1)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_59():
    try:
        str_0 = 't}]^/jQ=\\t/nc%::1m'
        field_0 = module_0.Field(title=str_0)
        int_0 = 785
        array_0 = module_0.Array(field_0)
        sequence_0 = None
        object_0 = module_0.Object(min_properties=int_0, required=sequence_0)
        boolean_0 = module_0.Boolean(description=str_0)
        str_1 = None
        dict_0 = {str_1: field_0}
        object_1 = module_0.Object(properties=boolean_0, pattern_properties=dict_0)
    except BaseException:
        pass

def test_case_60():
    try:
        int_0 = -75
        field_0 = module_0.Field()
        str_0 = 'iS&HS*('
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(additional_properties=field_0, min_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_61():
    try:
        str_0 = ';-/Er'
        field_0 = module_0.Field(default=str_0)
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        int_0 = 641
        dict_1 = {}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, property_names=field_0, min_properties=int_0, **dict_1)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_62():
    try:
        str_0 = 'Yh&&d3J^w.[\x0c>'
        field_0 = None
        str_1 = 'parse_error'
        dict_0 = {str_0: field_0, str_1: field_0, str_0: field_0, str_0: field_0}
        int_0 = -737
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_0, min_properties=str_0, max_properties=int_0)
    except BaseException:
        pass

def test_case_63():
    try:
        number_0 = module_0.Number()
        int_0 = -87
        number_1 = module_0.Number(multiple_of=int_0)
        int_1 = 1671
        bool_0 = False
        float_0 = -1168.554
        string_0 = module_0.String(trim_whitespace=bool_0, max_length=int_0, min_length=int_1, format=float_0)
    except BaseException:
        pass

def test_case_64():
    try:
        list_0 = None
        object_0 = module_0.Object(properties=list_0)
        any_0 = object_0.validate(list_0)
    except BaseException:
        pass

def test_case_65():
    try:
        str_0 = 'yy"WQg\nA<{cKL\x0cWr3ld'
        field_0 = module_0.Field(default=str_0)
        union_0 = field_0.__or__(field_0)
        int_0 = 3833
        field_1 = None
        number_0 = module_0.Number(exclusive_maximum=int_0, precision=str_0)
        const_0 = module_0.Const(field_1)
        any_0 = const_0.validate(str_0)
    except BaseException:
        pass

def test_case_66():
    try:
        date_time_0 = module_0.DateTime()
        str_0 = ''
        field_0 = module_0.Field(description=str_0)
        str_1 = 'E*'
        field_1 = module_0.Field(title=str_1, default=str_0)
        union_0 = field_0.__or__(field_1)
        object_0 = module_0.Object(additional_properties=field_0, max_properties=union_0)
    except BaseException:
        pass

def test_case_67():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        bool_0 = None
        any_0 = union_0.validate(bool_0)
    except BaseException:
        pass

def test_case_68():
    try:
        str_0 = 'yy"WQgA{cKL$Wr3ld'
        field_0 = module_0.Field(default=str_0)
        dict_0 = {}
        object_0 = module_0.Object(additional_properties=field_0, required=str_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_69():
    try:
        float_0 = 405.0
        float_1 = 401.8647314045573
        number_0 = module_0.Number(minimum=float_1, maximum=float_0, multiple_of=float_1)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_70():
    try:
        dict_0 = {}
        str_0 = '[Z{9"ISRq;*UXI'
        bool_0 = False
        field_0 = module_0.Field(allow_null=bool_0)
        optional_0 = None
        object_0 = module_0.Object(properties=dict_0, additional_properties=str_0, property_names=field_0, required=optional_0)
    except BaseException:
        pass

def test_case_71():
    try:
        field_0 = module_0.Field()
        str_0 = '6L7\x0bE0zr\rbn'
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        field_1 = None
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_1, property_names=field_1)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_72():
    try:
        int_0 = -75
        field_0 = module_0.Field()
        str_0 = 'iS&HS*('
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_73():
    try:
        int_0 = -75
        field_0 = module_0.Field()
        float_0 = -1835.45967
        number_0 = module_0.Number(minimum=int_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_74():
    try:
        str_0 = 'yy"WQgA{cKL$Wr3ld'
        field_0 = module_0.Field(default=str_0)
        dict_0 = {str_0: field_0, str_0: field_0}
        int_0 = None
        decimal_0 = module_0.Decimal(exclusive_maximum=int_0)
        optional_0 = None
        object_0 = module_0.Object(properties=decimal_0, pattern_properties=optional_0, min_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_75():
    try:
        bool_0 = None
        array_0 = module_0.Array(bool_0)
        any_0 = array_0.serialize(bool_0)
        boolean_0 = module_0.Boolean()
        any_1 = boolean_0.validate(bool_0)
    except BaseException:
        pass

def test_case_76():
    try:
        int_0 = None
        array_0 = module_0.Array(int_0)
        bool_0 = True
        string_0 = module_0.String(allow_blank=bool_0)
        any_0 = string_0.validate(int_0, strict=bool_0)
    except BaseException:
        pass

def test_case_77():
    try:
        integer_0 = None
        const_0 = module_0.Const(integer_0)
        str_0 = 'nL\x0c~e\t][x\x0b\tX\nE'
        field_0 = module_0.Field(description=str_0)
        dict_0 = {str_0: field_0}
        array_0 = module_0.Array(field_0, field_0, dict_0)
    except BaseException:
        pass

def test_case_78():
    try:
        int_0 = -25
        int_1 = -8
        int_2 = [int_0, int_0, int_1, int_1, int_1, int_1]
        integer_0 = module_0.Integer()
        str_0 = '1@TG`)HuW@g/5:'
        bool_0 = False
        field_0 = module_0.Field(allow_null=bool_0)
        any_0 = field_0.serialize(int_2)
        list_0 = [bool_0, any_0, any_0, str_0]
        choice_0 = module_0.Choice(choices=list_0)
    except BaseException:
        pass

def test_case_79():
    try:
        int_0 = -25
        int_1 = -8
        int_2 = [int_0, int_0, int_1, int_1, int_1, int_1]
        integer_0 = module_0.Integer()
        field_0 = module_0.Field(default=integer_0)
        array_0 = module_0.Array(field_0, field_0, int_1, int_2)
    except BaseException:
        pass

def test_case_80():
    try:
        decimal_0 = module_1.Decimal()
        boolean_0 = module_0.Boolean()
        decimal_1 = module_1.Decimal()
        integer_0 = module_0.Integer(minimum=decimal_0, maximum=decimal_0, exclusive_maximum=decimal_0, precision=boolean_0, multiple_of=decimal_1)
        field_0 = module_0.Field(default=integer_0)
        dict_0 = {}
        array_0 = module_0.Array(field_0, **dict_0)
        optional_0 = None
        int_0 = 801
        bool_0 = False
        array_1 = module_0.Array(field_0, field_0, optional_0, int_0, bool_0)
        any_0 = array_0.validate(field_0)
    except BaseException:
        pass

def test_case_81():
    try:
        int_0 = 10
        number_0 = module_0.Number(minimum=int_0, maximum=int_0)
        int_1 = 17
        const_0 = module_0.Const(number_0)
        bool_0 = True
        any_0 = number_0.validate(int_1, strict=bool_0)
    except BaseException:
        pass

def test_case_82():
    try:
        int_0 = -156
        int_1 = [int_0, int_0, int_0, int_0, int_0, int_0]
        date_0 = module_0.Date()
        field_0 = module_0.Field(default=int_0)
        bool_0 = False
        array_0 = module_0.Array(date_0, field_0, int_0, bool_0)
        any_0 = array_0.validate(int_1)
    except BaseException:
        pass

def test_case_83():
    try:
        list_0 = []
        float_0 = 45.997918
        integer_0 = module_0.Integer(exclusive_maximum=float_0, multiple_of=float_0)
        bool_0 = True
        array_0 = module_0.Array(integer_0, bool_0, bool_0)
        any_0 = array_0.validate(list_0, strict=bool_0)
    except BaseException:
        pass

def test_case_84():
    try:
        string_0 = module_0.String()
        str_0 = 'abc'
        any_0 = string_0.serialize(str_0)
        int_0 = 123
        any_1 = string_0.serialize(int_0)
        str_1 = 'date'
        string_1 = module_0.String(format=str_1)
        str_2 = '2020-01-02'
        str_3 = "'w)m.3*hD_hZ"
        dict_0 = {str_3: str_2}
        any_2 = string_0.serialize(dict_0)
        any_3 = string_1.serialize(string_0)
    except BaseException:
        pass

def test_case_85():
    try:
        int_0 = -162
        int_1 = [int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0]
        time_0 = module_0.Time()
        array_0 = module_0.Array(time_0)
        any_0 = array_0.validate(int_1)
    except BaseException:
        pass

def test_case_86():
    try:
        list_0 = []
        array_0 = module_0.Array(list_0)
        list_1 = [list_0, array_0, array_0, array_0]
        any_0 = array_0.validate(list_1)
    except BaseException:
        pass

def test_case_87():
    try:
        bool_0 = True
        str_0 = ''
        int_0 = 5
        int_1 = 2
        number_0 = module_0.Number(exclusive_minimum=int_1, multiple_of=int_0)
        any_0 = number_0.validate(int_0)
        str_1 = '^[0-9]*$'
        str_2 = 'date'
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, max_length=int_0, min_length=int_1, pattern=str_1, format=str_2)
        str_3 = 'abcde'
        any_1 = string_0.validate(str_3)
    except BaseException:
        pass

def test_case_88():
    try:
        bool_0 = True
        str_0 = ''
        int_0 = 5
        int_1 = 4
        str_1 = 'date'
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, max_length=int_0, min_length=int_1, pattern=str_0, format=str_1)
        str_2 = 'abcde'
        any_0 = string_0.validate(str_2)
    except BaseException:
        pass

def test_case_89():
    try:
        str_0 = 'gy5MV'
        string_0 = module_0.String()
        string_1 = module_0.String()
        integer_0 = module_0.Integer()
        var_0 = {str_0: string_0, str_0: string_1, str_0: integer_0, str_0: integer_0}
        object_0 = module_0.Object(properties=var_0)
        str_1 = 'Gianni'
        int_0 = 44
        var_1 = {str_0: str_1, string_0: integer_0, object_0: str_0, str_1: str_0, str_0: int_0}
        any_0 = object_0.validate(var_1)
    except BaseException:
        pass

def test_case_90():
    try:
        str_0 = 'cognome'
        str_1 = 'gy5MV'
        string_0 = module_0.String()
        string_1 = module_0.String()
        integer_0 = module_0.Integer()
        var_0 = {str_0: string_0, str_0: string_1, str_0: integer_0, str_1: integer_0}
        object_0 = module_0.Object(properties=var_0)
        str_2 = 'Gianni'
        int_0 = 44
        var_1 = {str_1: str_2, string_0: integer_0, object_0: str_1, str_0: str_1, str_1: int_0}
        any_0 = object_0.validate(var_1)
    except BaseException:
        pass

def test_case_91():
    try:
        number_0 = module_0.Number()
        string_0 = module_0.String()
        var_0 = [number_0, number_0, string_0]
        union_0 = module_0.Union(var_0)
        str_0 = ''
        any_0 = union_0.validate(str_0)
    except BaseException:
        pass

def test_case_92():
    try:
        list_0 = []
        float_0 = 31.575787903638926
        integer_0 = module_0.Integer(exclusive_maximum=float_0, multiple_of=float_0)
        bool_0 = True
        field_0 = module_0.Field(default=list_0, allow_null=bool_0)
        int_0 = 3
        bool_1 = True
        dict_0 = {}
        array_0 = module_0.Array(list_0, field_0, int_0, bool_1, **dict_0)
        any_0 = array_0.validate(float_0)
    except BaseException:
        pass

def test_case_93():
    try:
        field_0 = module_0.Field()
        list_0 = [field_0]
        union_0 = module_0.Union(list_0)
        union_1 = union_0.__or__(field_0)
        any_0 = union_1.validate(field_0)
    except BaseException:
        pass

def test_case_94():
    try:
        choice_0 = None
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(choice_0)
        int_0 = None
        number_0 = module_0.Number(maximum=int_0, exclusive_minimum=int_0, multiple_of=int_0)
        int_1 = None
        int_2 = None
        array_0 = module_0.Array(int_0, int_1, int_2)
    except BaseException:
        pass

def test_case_95():
    try:
        str_0 = 'some_string'
        field_0 = module_0.Field(default=str_0)
        any_0 = field_0.get_default_value()
        any_1 = field_0.get_default_value()
        var_0 = lambda : str_0
        field_1 = module_0.Field(default=var_0)
        any_2 = field_1.get_default_value()
    except BaseException:
        pass

def test_case_96():
    try:
        boolean_0 = module_0.Boolean()
        list_0 = [boolean_0, boolean_0, boolean_0, boolean_0, boolean_0, boolean_0, boolean_0, boolean_0, boolean_0, boolean_0]
        bool_0 = True
        str_0 = '8Ir"\'e6v1\\4r0fmO'
        field_0 = module_0.Field(title=str_0)
        int_0 = 531
        array_0 = module_0.Array(field_0, field_0, int_0)
        any_0 = array_0.validate(list_0, strict=bool_0)
    except BaseException:
        pass