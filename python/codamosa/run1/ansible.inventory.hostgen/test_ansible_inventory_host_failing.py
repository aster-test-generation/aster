# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        float_0 = -610.43793
        bytes_0 = b'\x93\xa9\x8b\xe7\x98\x83\xeeo\xba(W\x08\x02o'
        host_0 = module_0.Host(bytes_0)
        var_0 = host_0.__setstate__(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.get_vars()
    except BaseException:
        pass

def test_case_2():
    try:
        host_0 = module_0.Host()
        group_0 = module_1.Group()
        str_0 = '7@*\r%^M\n'
        var_0 = host_0.__repr__()
        var_1 = host_0.add_group(group_0)
        var_2 = host_0.remove_group(group_0)
        set_0 = {host_0, str_0}
        var_3 = host_0.populate_ancestors(set_0)
        var_4 = host_0.populate_ancestors()
    except BaseException:
        pass

def test_case_3():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__hash__()
        host_1 = module_0.Host()
        var_1 = host_1.populate_ancestors()
        group_0 = module_1.Group()
        var_2 = host_1.add_group(group_0)
        var_3 = group_0.__str__()
        var_4 = host_1.remove_group(group_0)
        int_0 = 839
        var_5 = host_1.remove_group(int_0)
        str_0 = 'c48KqTf\x0co)i#9n'
        host_2 = module_0.Host()
        list_0 = [var_1, group_0, var_3]
        var_6 = host_2.populate_ancestors(list_0)
        str_1 = "Q`\n:z-C,a!'LX"
        str_2 = None
        dict_0 = {str_0: host_2, str_1: var_4, str_2: var_1, str_0: var_5}
        host_3 = module_0.Host(dict_0, list_0)
    except BaseException:
        pass