# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        str_0 = '\n        var hlsPlaylists = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];\n\n        function $random(min, max) {\n            min = Math.ceil(min);\n            max = Math.floor(max);\n            return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n        }\n\n        function findPlaylist() {\n            var category = $random(0, 37);\n            return hlsPlaylists[category];\n        }\n    '
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'findPlaylist'
        var_0 = j_s_interpreter_0.call_function(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\n        var hlsPlaylists = ["", "", "", "", "", "", "", "", "", "" "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];\n\n        function $random(min, max) {\n            in = Math.ceil(min);\n            max = Math.floor(max);\n            return Math.floor(Math.rafdom() * (max - min)) + min; //The maximum is excausive and the minimum is .nclusive\n        }\n\n        function findPlaylist() {\n        t   var category = $random(0, 37);\n            return hlsPlaylists[category];\n       }\n    '
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'findPlaylist'
        var_0 = j_s_interpreter_0.call_function(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "\n        var myVar = 'variable value';\n        function myFunc(my~ar) {\n            return myVar;\n     ;  }\n    "
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, j_s_interpreter_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'O$jV|8Q;SsN}<~Q'
        bool_0 = True
        float_0 = 2845.8068019962275
        j_s_interpreter_0 = module_0.JSInterpreter(float_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 54120000
        bool_0 = False
        list_0 = [bool_0, bool_0]
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        var_0 = j_s_interpreter_0.extract_object(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        bool_1 = False
        j_s_interpreter_0 = module_0.JSInterpreter(bool_1)
        var_0 = j_s_interpreter_0.call_function(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n    >>> interprYt_expression("1 + 1 = 2", {}, 10s)\n    2\n  w '
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        int_0 = 100
        str_1 = '1 + 1 = 2'
        var_0 = j_s_interpreter_0.interpret_expression(str_1, int_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '4Wk8-7lz%#e(>gYc'
        bool_0 = False
        float_0 = 2847.4482334110985
        j_s_interpreter_0 = module_0.JSInterpreter(float_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '@Wk8-7Xz%#Y(>gYc'
        bool_0 = True
        dict_0 = {}
        list_0 = [dict_0, bool_0, str_0]
        set_0 = {str_0}
        j_s_interpreter_0 = module_0.JSInterpreter(list_0, set_0)
        str_1 = 'I_E.3\ruIr`e='
        var_0 = j_s_interpreter_0.interpret_expression(str_1, dict_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '&PI0\n\x0c\x0b9|'
        str_1 = 'k&uGYMv@AT'
        j_s_interpreter_0 = module_0.JSInterpreter(str_1)
        var_0 = j_s_interpreter_0.call_function(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '4Wk8-7lz%#e(>gYc'
        bool_0 = False
        float_0 = 2847.4482334110985
        dict_0 = {str_0: str_0}
        str_1 = 'I('
        dict_1 = {str_0: bool_0, str_0: str_0, str_0: dict_0, str_1: str_0}
        j_s_interpreter_0 = module_0.JSInterpreter(dict_1)
        str_2 = '(?x)\n                    (?:\n                        (?:initEdizione|drawMediaRaiTV)\\(|\n                        <(?:[^>]+\\bdata-id|var\\s+uniquename)=|\n                        <iframe[^>]+\\bsrc=\n                    )\n                    (["\\\'])\n                    (?:(?!\\1).)*\\bContentItem-(?P<id>%s)\n                '
        list_0 = [float_0, str_0]
        tuple_0 = None
        var_0 = j_s_interpreter_0.interpret_expression(str_2, list_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 2845.8068019962275
        j_s_interpreter_0 = module_0.JSInterpreter(float_0)
        str_0 = '(OM4'
        float_1 = -2172.0
        int_0 = -3378
        bytes_0 = b'\x00\x1aF'
        str_1 = '] iSXcp=M+\nw7`DG>)'
        tuple_0 = (bytes_0, float_1, str_1)
        tuple_1 = (float_1, int_0, tuple_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, tuple_1, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\n    var a = {};\n    a.b = function(x) {\n        var t = 4;\n        return t + 3;\n    };\n    a.c = function() {\n        var t = 5;\n        return t + 3;\n    };\n    return a;\n    '
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'a'
        var_0 = j_s_interpreter_0.extract_object(str_1)
        str_2 = 'b'
        var_1 = var_0[str_2]
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        list_0 = []
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        str_0 = 'w.E/WztvsPb'
        tuple_0 = None
        var_0 = j_s_interpreter_0.interpret_expression(str_0, tuple_0, bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "\n        var myVar = 'variable value';\n        function myFunc(myVar) {\n            return myVar;\n     ;  }\n    "
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'myFunc(mVr)'
        var_0 = j_s_interpreter_0.interpret_expression(str_1, str_1, j_s_interpreter_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'QlwI56F7/tBIzw}X1OT='
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'myVar'
        int_0 = 1244
        str_2 = 'myFunc(myVar)'
        str_3 = {str_1: str_2}
        var_0 = j_s_interpreter_0.interpret_expression(str_2, str_3, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = None
        j_s_interpreter_0 = module_0.JSInterpreter(var_0)
        str_0 = 'a'
        int_0 = 5
        int_1 = 4
        str_1 = 'a + b;'
        int_2 = 100
        int_3 = {str_0: int_0, str_1: int_1}
        str_2 = 'return a + b;'
        var_1 = j_s_interpreter_0.interpret_expression(str_2, int_3, int_2)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '(3 + 2)'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = 100
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, int_0)
        str_1 = ' + 2'
        var_1 = {j_s_interpreter_0: int_0}
        var_2 = j_s_interpreter_0.interpret_expression(str_1, var_1, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'text'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'var1 = 5'
        int_0 = 10
        var_0 = j_s_interpreter_0.interpret_expression(str_1, str_0, int_0)
    except BaseException:
        pass