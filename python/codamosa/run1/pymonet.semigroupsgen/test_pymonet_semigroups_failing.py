# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0, list_0]
        str_0 = 'g!'
        semigroup_0 = module_0.Semigroup(str_0)
        bool_0 = semigroup_0.__eq__(list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b''
        one_0 = module_0.One(bytes_0)
        int_0 = 1245
        semigroup_0 = module_0.Semigroup(int_0)
        var_0 = semigroup_0.fold(one_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b';\x19\x8f\xfb\x03\xf9\xdfE\x06\xce\xa9\xae\x1a'
        tuple_0 = ()
        str_0 = 'Q\\!$Q>R7-|w9'
        list_0 = [bytes_0, tuple_0, bytes_0]
        last_0 = module_0.Last(list_0)
        semigroup_0 = module_0.Semigroup(last_0)
        sum_0 = module_0.Sum(str_0)
        max_0 = module_0.Max(sum_0)
        str_1 = max_0.__str__()
        sum_1 = module_0.Sum(tuple_0)
        str_2 = sum_1.__str__()
        str_3 = sum_1.__str__()
        semigroup_1 = module_0.Semigroup(bytes_0)
        str_4 = sum_1.__str__()
        sum_2 = module_0.Sum(semigroup_1)
        sum_3 = sum_2.concat(sum_1)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 424.378826
        first_0 = module_0.First(float_0)
        str_0 = '\n        :returns: True\n        :rtype: Boolean\n        '
        max_0 = module_0.Max(str_0)
        one_0 = module_0.One(first_0)
        sum_0 = module_0.Sum(one_0)
        bool_0 = False
        sum_1 = module_0.Sum(bool_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_4():
    try:
        max_0 = None
        set_0 = {max_0, max_0}
        last_0 = module_0.Last(set_0)
        semigroup_0 = module_0.Semigroup(last_0)
        bytes_0 = b'B\x9d\xa8\x93r\xa7A\xef\xb2!\x80\xbd\x8a\xd8Y+\xe0\xefo\x06'
        min_0 = module_0.Min(bytes_0)
        map_0 = module_0.Map(semigroup_0)
        str_0 = '\n        Returns True when errors list are not empty.\n\n        :returns: True for empty errors not list\n        :rtype: Boolean\n        '
        var_0 = map_0.concat(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        bool_0 = True
        sum_0 = module_0.Sum(bool_0)
        one_0 = module_0.One(list_0)
        float_0 = 1453.82
        map_0 = module_0.Map(float_0)
        bool_1 = False
        last_0 = module_0.Last(bool_1)
        last_1 = module_0.Last(last_0)
        var_0 = one_0.concat(last_1)
        int_0 = -2502
        min_0 = module_0.Min(int_0)
        bytes_0 = b'\x90>\x96\x95\x0e\x9fA}\xd7\x04\xa6\xb9\xb8'
        max_0 = module_0.Max(bytes_0)
        var_1 = max_0.concat(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        max_0 = module_0.Max(str_0)
        str_1 = 'Map[value=None]'
        min_0 = module_0.Min(str_1)
        var_0 = min_0.concat(max_0)
        float_0 = None
        sum_0 = module_0.Sum(float_0)
        list_0 = []
        semigroup_0 = module_0.Semigroup(list_0)
        sum_1 = module_0.Sum(semigroup_0)
    except BaseException:
        pass