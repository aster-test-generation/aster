# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_1, callable_1, callable_1]
        var_0 = None
        var_1 = module_0.identity(var_0)
        var_2 = module_0.compose(var_1, *list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_1, callable_1, callable_1]
        var_0 = module_0.compose(callable_1, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        var_0 = module_0.pipe(callable_0)
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_0, callable_1, callable_1, callable_1, callable_1, callable_1, callable_1]
        var_1 = module_0.compose(callable_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        var_0 = module_0.cond(list_0)
        var_1 = module_0.fn()
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        var_0 = module_0.pipe(callable_1)
        dict_0 = None
        list_0 = [dict_0, dict_0, dict_0]
        var_1 = module_0.pipe(dict_0, *list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 2854.315
        list_0 = [float_0, float_0, float_0, float_0]
        var_0 = module_0.curry(float_0, list_0)
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_1 = [callable_1, callable_0, callable_1, callable_0, callable_1, callable_1, callable_0, callable_0, callable_1, callable_1, callable_1, callable_0, callable_0, callable_0, callable_1, callable_0, callable_1, callable_1, callable_0, callable_1, callable_0, callable_0, callable_1]
        var_1 = module_0.compose(list_1, *list_1)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        var_0 = module_0.cond(list_0)
        str_0 = 'hX\n}'
        list_1 = [str_0, list_0, var_0]
        var_1 = module_0.compose(str_0, *list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '(l>3Hl|wl{x}E@KXU'
        var_0 = module_0.compose(str_0)
        list_0 = []
        bytes_0 = b'}\x07\xea>\x9f\xa4\x05\xf2\xac}'
        var_1 = module_0.curry(list_0, bytes_0)
        bool_0 = False
        var_2 = module_0.pipe(bool_0)
        var_3 = None
        var_4 = module_0.identity(var_3)
        var_5 = module_0.identity(var_4)
        var_6 = module_0.identity(var_5)
        list_1 = [var_1]
        var_7 = module_0.pipe(var_6, *list_1)
    except BaseException:
        pass