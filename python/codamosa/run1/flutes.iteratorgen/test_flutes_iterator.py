# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'Mhf`.<?l KJ (~iwz!YC'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = list(lazy_list_0)

def test_case_2():
    str_0 = '@>)"xp\t\x0c[fyy6~ 2|+'
    lazy_list_0 = module_0.LazyList(str_0)

def test_case_3():
    int_0 = -605
    list_0 = [int_0, int_0, int_0]
    range_0 = module_0.Range(*list_0)
    var_0 = range_0.__getitem__(int_0)

def test_case_4():
    str_0 = '(B^(\rpb^R'
    int_0 = -732
    iterable_0 = None
    bytes_0 = b'\x92'
    iterator_0 = module_0.split_by(iterable_0, separator=bytes_0)
    iterator_1 = module_0.chunk(int_0, iterator_0)
    iterator_2 = module_0.split_by(iterator_1, separator=int_0)
    dict_0 = {str_0: iterator_1}
    var_0 = module_0.scanr(iterator_2, dict_0)
    lazy_list_0 = module_0.LazyList(str_0)
    var_1 = lazy_list_0.__iter__()

def test_case_5():
    var_0 = lambda x: x * x
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = 4
    int_4 = 5
    int_5 = [int_0, int_1, int_2, int_3, int_4]
    map_list_0 = module_0.MapList(var_0, int_5)
    var_1 = map_list_0.__getitem__(int_2)
    var_2 = lambda x: x * x
    int_6 = [int_0, int_1, int_2, int_3, int_4]
    map_list_1 = module_0.MapList(var_2, int_6)
    var_3 = slice(int_0, int_3, int_1)
    var_4 = map_list_1.__getitem__(var_3)

def test_case_6():
    int_0 = -636
    list_0 = [int_0, int_0]
    range_0 = module_0.Range(*list_0)
    var_0 = range_0.__getitem__(int_0)

def test_case_7():
    int_0 = -636
    list_0 = [int_0, int_0]
    range_0 = module_0.Range(*list_0)
    var_0 = range_0.__getitem__(int_0)
    int_1 = range_0.__len__()

def test_case_8():
    int_0 = -636
    list_0 = [int_0, int_0]
    range_0 = module_0.Range(*list_0)
    iterator_0 = range_0.__iter__()
    var_0 = range_0.__getitem__(int_0)

def test_case_9():
    str_0 = '@>)"xp\t\x0c[fyy6~ 2|+'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = lazy_list_0.__iter__()
    bool_0 = True
    var_1 = lazy_list_0.__getitem__(bool_0)
    var_2 = list(lazy_list_0)

def test_case_10():
    int_0 = 1000
    list_0 = [int_0, int_0]
    range_0 = module_0.Range(*list_0)
    var_0 = range_0.__getitem__(int_0)
    var_1 = iter(list_0)

def test_case_11():
    int_0 = -829
    var_0 = range(int_0)
    iterator_0 = module_0.drop_until(int_0, var_0)
    var_1 = list(iterator_0)

def test_case_12():
    int_0 = 10
    var_0 = range(int_0)
    iterator_0 = module_0.chunk(int_0, var_0)
    var_1 = list(iterator_0)

def test_case_13():
    int_0 = 2
    int_1 = 6
    var_0 = range(int_1)
    iterator_0 = module_0.chunk(int_0, var_0)
    var_1 = list(iterator_0)
    int_2 = 3
    var_2 = range(int_1)
    iterator_1 = module_0.chunk(int_2, var_2)
    var_3 = list(iterator_1)
    int_3 = 4
    var_4 = range(int_1)
    iterator_2 = module_0.chunk(int_3, var_4)
    var_5 = list(iterator_2)

def test_case_14():
    int_0 = -1
    int_1 = 5
    var_0 = range(int_0)
    iterator_0 = module_0.take(int_1, var_0)
    var_1 = list(iterator_0)

def test_case_15():
    int_0 = 5
    int_1 = 1000000
    var_0 = range(int_1)
    iterator_0 = module_0.drop(int_0, var_0)
    var_1 = [x for x in iterator_0]

def test_case_16():
    int_0 = 10
    var_0 = range(int_0)
    int_1 = 5
    int_2 = 1000000
    var_1 = range(int_2)
    iterator_0 = module_0.take(int_1, var_1)
    var_2 = list(iterator_0)

def test_case_17():
    int_0 = 10
    var_0 = range(int_0)
    int_1 = 3
    var_1 = lambda x: x % int_1 == int_1
    str_0 = ' Split by: '
    bool_0 = False
    str_1 = '.'
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_1)
    var_2 = list(iterator_0)
    var_3 = range(int_0)
    var_4 = list(iterator_0)
    var_5 = lambda x: x.isupper()
    iterator_1 = module_0.split_by(str_0, criterion=var_5)
    var_6 = list(iterator_1)

def test_case_18():
    str_0 = 'Mhf`.<?lKJ (iwz!YC'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = list(lazy_list_0)
    var_1 = lazy_list_0.__iter__()

def test_case_19():
    str_0 = 'oD=2rE:tIt^0D~sRm`ph'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = list(lazy_list_0)
    var_1 = lazy_list_0.__len__()

def test_case_20():
    int_0 = 3
    int_1 = 0
    var_0 = lambda x: x % int_0 == int_1
    str_0 = ' Split by: '
    bool_0 = True
    str_1 = '.'
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_1)
    var_1 = list(iterator_0)
    var_2 = range(int_1)
    iterator_1 = module_0.split_by(var_2, bool_0, separator=int_0)
    var_3 = list(iterator_1)
    var_4 = lambda x: x.isupper()
    iterator_2 = module_0.split_by(str_0, criterion=var_4)
    var_5 = list(iterator_2)

def test_case_21():
    int_0 = 10
    var_0 = range(int_0)
    var_1 = lambda x: x % int_0 == int_0
    bool_0 = True
    str_0 = '.'
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
    var_2 = list(iterator_0)
    var_3 = range(int_0)
    bytes_0 = b'z*\x01)s\xb1\xef'
    bytes_1 = b'\x08,\xd7\xbf'
    tuple_0 = (str_0, bytes_1)
    iterator_1 = module_0.drop(int_0, tuple_0)
    map_list_0 = module_0.MapList(bytes_0, iterator_1)
    iterator_2 = map_list_0.__iter__()
    iterator_3 = module_0.split_by(var_3, bool_0, separator=int_0)
    var_4 = list(iterator_3)
    list_0 = [var_2]
    list_1 = []
    map_list_1 = module_0.MapList(list_0, list_1)
    var_5 = lambda x: x.isupper()
    str_1 = None
    iterator_4 = module_0.split_by(str_1, criterion=var_4, separator=str_0)

def test_case_22():
    int_0 = 7
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    int_1 = 2
    var_1 = lazy_list_0[int_1]
    var_2 = print(var_1)
    int_2 = 1
    int_3 = 3
    var_3 = lazy_list_0[int_2:int_3]

def test_case_23():
    str_0 = '@>)"xp:\x0c[fyy6~ 2|+'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = lazy_list_0.__iter__()
    var_1 = list(var_0)

def test_case_24():
    var_0 = lambda s, x: x + s
    str_0 = 'a'
    str_1 = 'b'
    str_2 = 'c'
    str_3 = 'd'
    str_4 = [str_0, str_1, str_2, str_3]
    var_1 = module_0.scanl(var_0, str_4)
    var_2 = list(var_1)