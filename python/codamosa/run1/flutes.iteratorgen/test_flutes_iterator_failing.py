# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        str_0 = 'XX|9jo{,?1JG^i/ZGD(Q'
        str_1 = '3J\ri\x0c/'
        var_0 = module_0.scanr(str_0, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 658
        iterator_0 = module_0.take(int_0, int_0)
        set_0 = {int_0, int_0, int_0, int_0}
        list_0 = []
        map_list_0 = module_0.MapList(set_0, list_0)
        int_1 = map_list_0.__len__()
        dict_0 = {}
        str_0 = '+oG'
        iterator_1 = module_0.drop_until(dict_0, str_0)
        tuple_0 = (str_0,)
        list_1 = [int_0]
        range_0 = module_0.Range(*list_1)
        bytes_0 = b'\xa0\xbe\x07\xe4\xd7i\x89\x90\xe6I'
        var_0 = module_0.scanr(tuple_0, bytes_0, *list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'F&gQQb8%QDO6a-N@'
        list_0 = [str_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -636
        list_0 = [int_0, int_0]
        range_0 = module_0.Range(*list_0)
        bool_0 = True
        map_list_0 = module_0.MapList(bool_0, bool_0)
        var_0 = range_0.__getitem__(map_list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1693
        bool_0 = False
        str_0 = "!'7t\r&]UQ%s:_*"
        map_list_0 = module_0.MapList(bool_0, str_0)
        iterator_0 = map_list_0.__iter__()
        iterator_1 = module_0.chunk(int_0, iterator_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        var_0 = lazy_list_0.__iter__()
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -636
        list_0 = [int_0, int_0]
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__len__()
        var_0 = range_0.__getitem__(int_0)
        bytes_0 = b'\xba\x92\x02\xfe\x89\xa9'
        bytes_1 = b'gK\x83\xbe\x0e\xdc\x0e\xffX\xf2\xa6'
        iterator_0 = module_0.drop(int_0, bytes_1)
        map_list_0 = module_0.MapList(bytes_0, iterator_0)
        int_2 = map_list_0.__len__()
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = '+oG'
        iterator_0 = module_0.drop_until(dict_0, str_0)
        bytes_0 = b'\xebR\xe6\x03'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__iter__()
        var_1 = lazy_list_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = []
        var_1 = iter(var_0)
        lazy_list_0 = module_0.LazyList(var_1)
        var_2 = list(lazy_list_0)
        int_0 = 1
        var_3 = range(int_0, int_0)
        var_4 = iter(var_3)
        lazy_list_1 = module_0.LazyList(var_4)
        var_5 = list(lazy_list_1)
        var_6 = list(var_3)
        int_1 = 2
        int_2 = 4
        list_0 = [int_0, var_5, int_1, int_2]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        var_0 = lazy_list_0.__iter__()
        str_0 = '+oG'
        iterator_0 = module_0.drop_until(dict_0, str_0)
        str_1 = '=Mog_cd(Nzc#k'
        dict_1 = {}
        bytes_0 = b'\xa0\xbe\x07\xe4\xd7i\x89\x90\xe6I'
        list_0 = [bytes_0, bytes_0, dict_0]
        var_1 = module_0.scanr(dict_1, str_1, *list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = None
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        var_0 = lazy_list_0.__getitem__(set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 658
        int_1 = None
        iterator_0 = module_0.take(int_1, int_0)
        bool_0 = False
        iterator_1 = module_0.drop(int_1, bool_0)
        iterator_2 = None
        bytes_0 = b'\xebR\xe6\x03'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__iter__()
        var_1 = lazy_list_0.__getitem__(iterator_2)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 658
        int_1 = None
        iterator_0 = module_0.take(int_1, int_0)
        dict_0 = {}
        str_0 = '+oG'
        iterator_1 = module_0.drop_until(dict_0, str_0)
        tuple_0 = (str_0,)
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        int_2 = 1283
        str_1 = 's%!72]>g=dn2Nb+'
        iterator_2 = module_0.chunk(int_2, str_1)
        iterator_3 = module_0.split_by(tuple_0)
        iterator_4 = module_0.chunk(int_1, iterator_3)
        float_0 = -2748.2
        lazy_list_0 = module_0.LazyList(tuple_0)
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 658
        int_1 = None
        iterator_0 = module_0.take(int_1, int_0)
        dict_0 = {}
        str_0 = '+oG'
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        bytes_0 = b'\xa0\xbe\x07\xe4\xd7i\x89\x90\xe6I'
        lazy_list_0 = module_0.LazyList(bytes_0)
        int_2 = 874
        bool_0 = True
        var_0 = range_0.__getitem__(bool_0)
        iterator_1 = module_0.chunk(int_2, str_0)
        var_1 = lazy_list_0.__iter__()
        int_3 = range_0.__next__()
        var_2 = lazy_list_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1494
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__next__()
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 4610
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 3
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.chunk(int_0, var_0)
        var_1 = list(iterator_0)
        int_2 = 7
        var_2 = range(int_2)
        var_3 = list(iterator_0)
        int_3 = 0
        int_4 = [int_3, int_3]
        iterator_1 = module_0.chunk(int_0, int_4)
        var_4 = list(iterator_1)
        iterator_2 = module_0.chunk(int_0, var_3)
        var_5 = list(iterator_2)
        int_5 = 0
        iterator_3 = module_0.chunk(int_5, iterator_1)
        var_6 = next(iterator_3)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -1
        var_0 = range(int_0)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = range(int_0)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 2
        int_1 = 1
        int_2 = 3
        int_3 = 4
        int_4 = 5
        int_5 = [int_1, int_0, int_2, int_3, int_4]
        iterator_0 = module_0.drop(int_0, int_5)
        var_0 = list(iterator_0)
        int_6 = 100
        int_7 = [int_1, int_0, int_2, int_4]
        iterator_1 = module_0.drop(int_6, int_7)
        var_1 = list(iterator_1)
        int_8 = 0
        int_9 = [int_1, int_0, int_2]
        iterator_2 = module_0.drop(int_8, int_9)
        var_2 = list(iterator_2)
        int_10 = [int_1, int_0, int_2]
        iterator_3 = module_0.drop(int_2, int_10)
        var_3 = list(iterator_3)
        var_4 = []
        iterator_4 = module_0.drop(int_1, var_4)
        iterator_5 = module_0.drop(int_8, int_8)
        var_5 = list(iterator_5)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -21
        int_1 = 999969
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = [x for x in iterator_0]
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 3
        var_0 = lambda x: x % int_0 == int_0
        bool_0 = False
        str_0 = '.'
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_1 = list(iterator_0)
        var_2 = range(int_0)
        iterator_1 = module_0.split_by(var_2, bool_0, separator=int_0)
        var_3 = list(iterator_1)
        str_1 = None
        iterator_2 = module_0.split_by(str_1, criterion=var_3, separator=str_0)
        var_4 = list(iterator_2)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = []
        var_1 = iter(var_0)
        lazy_list_0 = module_0.LazyList(var_1)
        var_2 = list(lazy_list_0)
        int_0 = 1
        int_1 = 1000
        var_3 = range(int_0, int_1)
        var_4 = iter(var_3)
        lazy_list_1 = module_0.LazyList(var_4)
        var_5 = list(lazy_list_1)
        var_6 = list(var_3)
        float_0 = -1999.2178360465427
        var_7 = lazy_list_1.__getitem__(float_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = -1
        int_1 = 5
        int_2 = 891
        float_0 = -683.40274
        iterator_0 = module_0.chunk(int_2, float_0)
        iterator_1 = module_0.take(int_1, int_0)
        var_0 = list(iterator_1)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 1000
        int_1 = -129
        list_0 = [int_1]
        range_0 = module_0.Range(*list_0)
        iterator_0 = range_0.__iter__()
        range_1 = module_0.Range(*list_0)
        var_0 = range_1.__getitem__(int_1)
        iterable_0 = None
        iterator_1 = module_0.split_by(iterable_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        var_1 = iter(list_0)
        iterable_1 = None
        iterator_2 = module_0.drop(int_0, iterable_1)
        var_2 = list(lazy_list_0)
    except BaseException:
        pass