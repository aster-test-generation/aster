# Automatically generated by Pynguin.
import httpie.models as module_0
import httpie.output.streams as module_1
import httpie.output.processing as module_2

def test_case_0():
    try:
        str_0 = '#$(chI9);?=gW!o$r~'
        h_t_t_p_message_0 = module_0.HTTPMessage(str_0)
        int_0 = -1361
        base_stream_0 = module_1.BaseStream(h_t_t_p_message_0, int_0)
        iterable_0 = base_stream_0.iter_body()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'i,^Yos8B_pUX;'
        set_0 = {str_0, str_0, str_0, str_0}
        h_t_t_p_message_0 = module_0.HTTPMessage(set_0)
        dict_0 = {}
        base_stream_0 = module_1.BaseStream(h_t_t_p_message_0, dict_0)
        bytes_0 = base_stream_0.get_headers()
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        formatting_0 = module_2.Formatting(list_0)
        raw_stream_0 = module_1.RawStream(formatting_0)
    except BaseException:
        pass

def test_case_3():
    try:
        encoded_stream_0 = module_1.EncodedStream()
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        h_t_t_p_message_0 = module_0.HTTPMessage(list_0)
        float_0 = -2032.427643
        base_stream_0 = module_1.BaseStream(h_t_t_p_message_0, float_0)
        h_t_t_p_message_1 = module_0.HTTPMessage(base_stream_0)
        conversion_0 = module_2.Conversion()
        list_1 = []
        formatting_0 = module_2.Formatting(list_1)
        buffered_pretty_stream_0 = module_1.BufferedPrettyStream(conversion_0, formatting_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'i,^Yos8B_pUX;'
        set_0 = {str_0, str_0, str_0}
        h_t_t_p_message_0 = module_0.HTTPMessage(set_0)
        dict_0 = {}
        base_stream_0 = module_1.BaseStream(h_t_t_p_message_0, set_0)
        iterable_0 = base_stream_0.__iter__()
        h_t_t_p_message_1 = None
        dict_1 = None
        base_stream_1 = module_1.BaseStream(h_t_t_p_message_1, dict_0, dict_1)
    except BaseException:
        pass