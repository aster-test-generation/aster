# Automatically generated by Pynguin.
import tornado.auth as module_0

def test_case_0():
    try:
        str_0 = '\x0c'
        open_id_mixin_0 = module_0.OpenIdMixin()
        open_id_mixin_0.authenticate_redirect(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '[S:dFR @r)~AyibF'
        dict_0 = {}
        str_1 = ''
        facebook_graph_mixin_0 = module_0.FacebookGraphMixin(**dict_0)
        any_0 = facebook_graph_mixin_0.facebook_request(str_1)
        dict_1 = None
        twitter_mixin_0 = module_0.TwitterMixin(**dict_0)
        any_1 = twitter_mixin_0.twitter_request(str_0, dict_1, **dict_0)
        list_0 = []
        open_id_mixin_0 = module_0.OpenIdMixin(*list_0)
        async_h_t_t_p_client_0 = open_id_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_2():
    try:
        o_auth_mixin_0 = module_0.OAuthMixin()
        dict_0 = o_auth_mixin_0.get_authenticated_user()
        async_h_t_t_p_client_0 = o_auth_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\tigv!k'
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        o_auth2_mixin_0.authorize_redirect(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        async_h_t_t_p_client_0 = o_auth2_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_5():
    try:
        open_id_mixin_0 = module_0.OpenIdMixin()
        open_id_mixin_0.authenticate_redirect()
    except BaseException:
        pass

def test_case_6():
    try:
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        o_auth2_mixin_1 = module_0.OAuth2Mixin()
        none_type_0 = None
        o_auth2_mixin_0.authorize_redirect(none_type_0)
    except BaseException:
        pass

def test_case_7():
    try:
        open_id_mixin_0 = module_0.OpenIdMixin()
        str_0 = '\ti!k'
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        o_auth2_mixin_0.authorize_redirect(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "_hP[Y~P`.j*rlS0Uo'"
        dict_0 = None
        str_1 = 'G *'
        str_2 = "H&rJ+Q~Xo'"
        list_0 = []
        facebook_graph_mixin_0 = module_0.FacebookGraphMixin(*list_0)
        optional_0 = facebook_graph_mixin_0.get_authenticated_user(str_0, str_0, str_1, str_2, dict_0)
        dict_1 = {}
        facebook_graph_mixin_1 = module_0.FacebookGraphMixin(**dict_1)
        any_0 = facebook_graph_mixin_1.facebook_request(str_0, **dict_1)
        str_3 = 'N==$i9W^Gv'
        str_4 = '9/\n'
        any_1 = facebook_graph_mixin_1.facebook_request(str_4, str_2, **dict_1)
        o_auth2_mixin_0 = module_0.OAuth2Mixin(**dict_1)
        open_id_mixin_0 = module_0.OpenIdMixin()
        str_5 = '[b8Yfg]d&9O?<za?'
        o_auth2_mixin_0.authorize_redirect(str_3, str_4, dict_0, open_id_mixin_0, str_5)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "_hP[Y~P`.j*rlS0Uo'"
        dict_0 = None
        str_1 = 'G *'
        str_2 = "H&rJ+Q~Xo'"
        list_0 = []
        facebook_graph_mixin_0 = module_0.FacebookGraphMixin(*list_0)
        optional_0 = facebook_graph_mixin_0.get_authenticated_user(str_0, str_0, str_1, str_2, dict_0)
        facebook_graph_mixin_1 = module_0.FacebookGraphMixin()
        any_0 = facebook_graph_mixin_1.facebook_request(str_0, dict_0)
        str_3 = "}$'l"
        any_1 = facebook_graph_mixin_1.facebook_request(str_3, str_1)
        str_4 = '=y.\\J(JD'
        str_5 = "j'xIx=4y$h"
        str_6 = 'zJGDDN<$`zTi.G'
        dict_1 = {str_4: list_0, str_5: str_4, str_6: any_0, str_6: str_3}
        o_auth_mixin_0 = module_0.OAuthMixin()
        list_1 = None
        str_7 = 'Constructs a router from an ordered list of rules::\n\n            RuleRouter([\n                Rule(PathMatches("/handler"), Target),\n                # ... more rules\n            ])\n\n        You can also omit explicit `Rule` constructor and use tuples of arguments::\n\n            RuleRouter([\n                (PathMatches("/handler"), Target),\n            ])\n\n        `PathMatches` is a default matcher, so the example above can be simplified::\n\n            RuleRouter([\n                ("/handler", Target),\n            ])\n\n        In the examples above, ``Target`` can be a nested `Router` instance, an instance of\n        `~.httputil.HTTPServerConnectionDelegate` or an old-style callable,\n        accepting a request argument.\n\n        :arg rules: a list of `Rule` instances or tuples of `Rule`\n            constructor arguments.\n        '
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        o_auth2_mixin_0.authorize_redirect(str_2, str_3, dict_1, list_1, str_7)
    except BaseException:
        pass