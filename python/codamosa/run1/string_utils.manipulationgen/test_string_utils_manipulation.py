# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = "t'YXrS+hwhAF0gL/+|k,"
    str_1 = module_0.prettify(str_0)

def test_case_2():
    str_0 = "\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    "
    str_1 = module_0.prettify(str_0)

def test_case_3():
    str_0 = '7,zfI"`)XDlcrt\r\x0c%aY'
    str_1 = module_0.reverse(str_0)

def test_case_4():
    str_0 = 'ThisIsACamelStringTest'
    var_0 = module_0.camel_case_to_snake(str_0)

def test_case_5():
    str_0 = "\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    "
    roman_numbers_0 = module_0.__RomanNumbers()
    bool_0 = False
    str_1 = module_0.prettify(str_0)
    str_2 = module_0.snake_case_to_camel(str_0, bool_0)

def test_case_6():
    str_0 = '-*a1_t l^3Z6lohac}mM'
    str_1 = module_0.shuffle(str_0)

def test_case_7():
    str_0 = '#J08'
    str_1 = module_0.strip_html(str_0)

def test_case_8():
    str_0 = 'DINERS_CLUB'
    str_1 = module_0.asciify(str_0)

def test_case_9():
    str_0 = '+h/{nI-Z-lWNG(3m1hf>'
    str_1 = module_0.slugify(str_0, str_0)
    str_2 = module_0.strip_margin(str_0)

def test_case_10():
    str_0 = '0'
    bool_0 = module_0.booleanize(str_0)

def test_case_11():
    str_0 = "\n    Return a new string containing same chars of the given one but in a randomized order.\n\n    *Example:*\n\n    >>> shuffle('hello world') # possible output: 'l wodheorll'\n\n    :param input_string: String to shuffle\n    :type input_string: str\n    :return: Shuffled string\n    "
    str_1 = module_0.strip_margin(str_0)

def test_case_12():
    str_0 = "\n    Check if a string is a valid email.\n\n    Reference: https://tools.ietf.org/html/rfc3696#section-3\n\n    *Examples:*\n\n    >>> is_email('my.email@the-provider.com') # returns true\n    >>> is_email('@gmail.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if email, false otherwise.\n    "
    str_1 = module_0.prettify(str_0)

def test_case_13():
    roman_numbers_0 = module_0.__RomanNumbers()
    str_0 = 'Y:?_.Sj"'
    var_0 = module_0.camel_case_to_snake(str_0)

def test_case_14():
    str_0 = 'hello_world'
    str_1 = module_0.snake_case_to_camel(str_0)
    bool_0 = False
    str_2 = module_0.snake_case_to_camel(str_0, bool_0)
    str_3 = 'hello_worLD'
    str_4 = module_0.snake_case_to_camel(str_3)
    str_5 = 'Hello_World'
    str_6 = module_0.snake_case_to_camel(str_5)
    str_7 = 'hello__world'
    str_8 = module_0.snake_case_to_camel(str_7)
    str_9 = '_hello__world_'
    str_10 = module_0.snake_case_to_camel(str_9)
    str_11 = 'hello_world_'
    bool_1 = True
    str_12 = '_'
    str_13 = module_0.snake_case_to_camel(str_11, bool_1, str_12)
    str_14 = module_0.snake_case_to_camel(str_0, bool_0, str_12)

def test_case_15():
    str_0 = 'hello_world'
    str_1 = module_0.snake_case_to_camel(str_0)
    str_2 = 'hello_worLD'
    str_3 = module_0.snake_case_to_camel(str_2)
    str_4 = 'Hello_World'
    str_5 = module_0.snake_case_to_camel(str_4)
    str_6 = module_0.snake_case_to_camel(str_3)
    str_7 = '_hello__world_'
    str_8 = module_0.snake_case_to_camel(str_7)
    str_9 = 'hello_world_'
    bool_0 = True
    str_10 = '_'
    str_11 = module_0.snake_case_to_camel(str_9, bool_0, str_10)
    str_12 = module_0.snake_case_to_camel(str_0, bool_0, str_10)

def test_case_16():
    str_0 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
    str_1 = module_0.prettify(str_0)