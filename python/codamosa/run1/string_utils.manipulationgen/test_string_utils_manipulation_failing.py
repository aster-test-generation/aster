# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        int_0 = 1034
        str_0 = "|4*eOiyW&<'qcGF`"
        str_1 = module_0.slugify(str_0)
        str_2 = module_0.strip_margin(str_0)
        str_3 = module_0.roman_encode(int_0)
        str_4 = "\n    Similarly to native Python's `range()`, returns a Generator object which generates a new roman number\n    on each iteration instead of an integer.\n\n    *Example:*\n\n    >>> for n in roman_range(7): print(n)\n    >>> # prints: I, II, III, IV, V, VI, VII\n    >>> for n in roman_range(start=7, stop=1, step=-1): print(n)\n    >>> # prints: VII, VI, V, IV, III, II, I\n\n    :param stop: Number at which the generation must stop (must be <= 3999).\n    :param start: Number at which the generation must start (must be >= 1).\n    :param step: Increment of each generation step (default to 1).\n    :return: Generator of roman numbers.\n    "
        bool_0 = False
        str_5 = module_0.snake_case_to_camel(str_4, bool_0)
        str_6 = module_0.compress(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -559
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '{DO$A|f`jU\x0bcHB,w2%'
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        str_0 = 'B>QkK]lz<XAE '
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1034
        str_0 = 'roman_encode'
        str_1 = 'AX%'
        str_2 = module_0.snake_case_to_camel(str_1, str_1)
        str_3 = '+\x0cwctJ\r\\eWgn#'
        str_4 = module_0.prettify(str_3)
        str_5 = 'DISCOVER'
        str_6 = module_0.reverse(str_5)
        str_7 = module_0.prettify(str_0)
        str_8 = module_0.roman_encode(int_0)
        str_9 = module_0.compress(str_4)
        str_10 = '-`,L@::'
        int_1 = module_0.roman_decode(str_8)
        bool_0 = False
        str_11 = module_0.strip_html(str_10, bool_0)
        str_12 = module_0.compress(str_8, str_10)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'is_isbn_13'
        str_1 = module_0.compress(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 255
        str_0 = ''
        bool_0 = False
        str_1 = module_0.snake_case_to_camel(str_0, bool_0)
        str_2 = module_0.prettify(str_0)
        str_3 = module_0.prettify(str_0)
        str_4 = module_0.roman_encode(int_0)
        str_5 = '-`,L@::'
        bool_1 = True
        str_6 = module_0.strip_html(str_5, bool_1)
        str_7 = None
        str_8 = module_0.compress(str_7)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1034
        str_0 = 'roman_encode'
        bool_0 = True
        str_1 = module_0.snake_case_to_camel(str_0, bool_0)
        str_2 = '+\x0cwctJ\r\\eWgn#'
        str_3 = module_0.prettify(str_2)
        str_4 = module_0.roman_encode(int_0)
        int_1 = -577
        str_5 = module_0.compress(str_1, int_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'iLoveYou'
        str_1 = module_0.compress(str_0)
        var_0 = module_0.camel_case_to_snake(str_0)
        var_1 = module_0.camel_case_to_snake(str_0)
        str_2 = 'H1aM@gB(~Z{U'
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = string_formatter_0.format()
        bytes_0 = b'\xcbz*\x97'
        string_formatter_1 = module_0.__StringFormatter(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        str_0 = 'K6*b1OEt@Nky\x0cI\n&'
        str_1 = module_0.strip_html(str_0)
        str_2 = '225c4RxX'
        str_3 = module_0.decompress(str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'q\x00\xd4\xee4\x8a\x14\xedg\xf4\xdf\xa5\xee\xb3\xe4\xe8'
        string_formatter_0 = module_0.__StringFormatter(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = None
        set_0 = {bytes_0}
        var_0 = module_0.camel_case_to_snake(set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = module_0.snake_case_to_camel(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "o',2"
        str_1 = module_0.prettify(str_0)
        str_2 = None
        str_3 = module_0.shuffle(str_2)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        str_1 = module_0.strip_margin(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        str_0 = 'Y:?_.Sj"'
        var_0 = module_0.camel_case_to_snake(str_0)
        str_1 = None
        int_0 = module_0.roman_decode(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '+\x0c/{nI-Z-l$NG(3mhf'
        str_1 = module_0.strip_margin(str_0)
        str_2 = '8g7tQ'
        bool_0 = module_0.booleanize(str_1)
        str_3 = module_0.slugify(str_2)
        str_4 = None
        str_5 = module_0.strip_html(str_4)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'roman_encode'
        bool_0 = True
        str_1 = module_0.snake_case_to_camel(str_0, bool_0)
        str_2 = module_0.compress(str_1, str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = ''
        bool_0 = False
        str_1 = module_0.snake_case_to_camel(str_0, bool_0, str_0)
        str_2 = ''
        str_3 = module_0.decompress(str_2)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 255
        str_0 = ''
        bool_0 = False
        str_1 = module_0.snake_case_to_camel(str_0, bool_0)
        str_2 = module_0.prettify(str_0)
        str_3 = module_0.roman_encode(int_0)
        str_4 = '-`,L@::'
        str_5 = module_0.strip_html(str_4, bool_0)
        str_6 = module_0.compress(str_3, str_3)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 2785
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = None
        bool_0 = module_0.booleanize(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 255
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.prettify(str_0)
        str_3 = module_0.roman_encode(int_0)
        str_4 = '-`,L@::'
        bool_0 = True
        str_5 = module_0.strip_html(str_4, bool_0)
        str_6 = '"\x0by\x0c2>\r.3\'"u:i9Lc\t'
        str_7 = module_0.compress(str_6, str_6)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '>miY\t1;Aiv'
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.asciify(str_0)
        str_3 = None
        str_4 = module_0.reverse(str_3)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'ThisIsACamelStringTest'
        int_0 = -3767
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1034
        str_0 = 'roman_encode'
        bool_0 = False
        str_1 = module_0.snake_case_to_camel(str_0, bool_0)
        str_2 = '+\x0cwctJ\r\\eWgn#'
        str_3 = module_0.prettify(str_2)
        str_4 = 'DISCOVER'
        str_5 = module_0.reverse(str_4)
        str_6 = module_0.prettify(str_0)
        str_7 = module_0.roman_encode(int_0)
        str_8 = module_0.compress(str_3)
        str_9 = 'zS\x0bo"\'~'
        str_10 = '-`,L@::'
        bool_1 = True
        str_11 = module_0.strip_html(str_10, bool_1)
        int_1 = 110
        str_12 = module_0.compress(str_8, str_9, int_1)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 3829
        str_0 = 'romn_encode'
        str_1 = 'DISCOVER'
        str_2 = module_0.prettify(str_0)
        str_3 = module_0.roman_encode(int_0)
        str_4 = module_0.shuffle(str_1)
        str_5 = '1\t8YUQcK7;``/4,0G'
        int_1 = module_0.roman_decode(str_5)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '^3[47]\\d{13}$'
        str_1 = module_0.asciify(str_0)
        str_2 = "fZM'/AjR7B\x0cZPF"
        bool_0 = module_0.booleanize(str_2)
        str_3 = module_0.prettify(str_1)
        str_4 = None
        str_5 = module_0.slugify(str_4)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'b]_I'
        int_0 = None
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'p<km,Wr'
        str_1 = module_0.prettify(str_0)
        str_2 = '69pL\x0cde2 \x0bK\t~i+,0yk'
        str_3 = module_0.compress(str_2)
        str_4 = module_0.shuffle(str_0)
        str_5 = module_0.decompress(str_3)
        str_6 = None
        var_0 = module_0.camel_case_to_snake(str_6)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 4730
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass