# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        bytes_0 = b' ,\xc2\x89\x0b"\xfb\xd76\xb9\xf27\x00\x05'
        schema_definitions_0 = module_0.SchemaDefinitions()
        any_0 = schema_definitions_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        list_0 = [int_0]
        schema_0 = module_0.Schema(*list_0)
        schema_definitions_0.__delitem__(schema_0)
    except BaseException:
        pass

def test_case_2():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        list_0 = [int_0]
        schema_0 = module_0.Schema(*list_0)
        str_0 = '>@"3'
        str_1 = 'enum'
        dict_0 = {str_0: schema_0, str_1: int_0}
        schema_1 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 1761.6
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = None
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        bool_0 = schema_0.__eq__(tuple_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        reference_0 = module_0.Reference(iterator_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        str_0 = 'X\nD<*y+M]\x0cumN/L4au\\'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        str_0 = 'X\nD<*y+M]\x0cumN/L4au\\'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = {}
        var_1 = {}
        list_0 = [var_1, var_1, var_1, var_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0)
        int_0 = schema_definitions_0.__len__()
        field_0 = module_1.Field()
        schema_definitions_1 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_1.__iter__()
        set_0 = {field_0, field_0, field_0, field_0}
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Must be a valid {format}.'
        dict_0 = {str_0: str_0}
        reference_0 = module_0.Reference(str_0, dict_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        str_0 = schema_0.__repr__()
        dict_0 = {str_0: iterator_0, str_0: iterator_0}
        list_0 = [dict_0]
        schema_1 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        dict_0 = {}
        bool_0 = schema_0.__eq__(schema_0)
        bool_1 = schema_0.__eq__(dict_0)
        int_0 = schema_0.__len__()
        schema_1 = module_0.Schema()
        reference_0 = module_0.Reference(str_0)
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        optional_0 = None
        reference_1 = module_0.Reference(str_0, optional_0)
        any_0 = reference_0.validate(optional_0)
    except BaseException:
        pass

def test_case_12():
    try:
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        str_0 = schema_0.__repr__()
        dict_0 = {}
        list_0 = [dict_0]
        schema_1 = module_0.Schema(*list_0, **dict_0)
        bool_0 = schema_1.__eq__(dict_0)
        bool_1 = schema_0.__eq__(schema_0)
        bool_2 = schema_0.__eq__(dict_0)
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0)
        iterator_1 = schema_definitions_0.__iter__()
        int_0 = schema_0.__len__()
        schema_definitions_0.__setitem__(int_0, iterator_0)
        schema_definitions_0.__setitem__(bool_0, bool_2)
    except BaseException:
        pass