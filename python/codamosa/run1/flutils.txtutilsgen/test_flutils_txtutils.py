# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = "q'zA_q-}JO^>Li8_K"
    int_0 = module_0.len_without_ansi(str_0)

def test_case_2():
    bool_0 = True
    str_0 = 'q['
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_0)

def test_case_3():
    bool_0 = True
    str_0 = 'q)'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_4():
    str_0 = 'ng'
    int_0 = 2747
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, max_lines=int_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_5():
    str_0 = ','
    str_1 = 'QFku--Cb@H\x0b'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    list_0 = ansi_text_wrapper_0.wrap(str_1)
    int_0 = module_0.len_without_ansi(str_0)

def test_case_6():
    str_0 = '\x1b[38;5;209mfoobar'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_7():
    str_0 = '>zLN\x0bUhJ\\S'
    int_0 = module_0.len_without_ansi(str_0)
    str_1 = '_MQ)H'
    str_2 = ''
    str_3 = 'Change ownership of a path.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    If the given ``path`` does NOT exist, nothing will be done.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path of the file or directory that will have it\'s ownership\n            changed.  This value can be a :term:`glob pattern`.\n        user (:obj:`str` or :obj:`int`, optional): The "login name" used to set\n            the owner of ``path``.  A value of ``\'-1\'`` will leave the\n            owner unchanged.  Defaults to the "login name" of the current user.\n        group (:obj:`str` or :obj:`int`, optional): The group name used to set\n            the group of ``path``.  A value of ``\'-1\'`` will leave the\n            group unchanged.  Defaults to the current user\'s group.\n        include_parent (:obj:`bool`, optional): A value of :obj:`True` will\n            chown the parent directory of the given ``path`` that contains\n            a :term:`glob pattern`.  Defaults to :obj:`False`.\n\n    Raises:\n        OSError: If the given :obj:`user` does not exist as a "login\n            name" for this operating system.\n        OSError: If the given :obj:`group` does not exist as a "group\n            name" for this operating system.\n\n    :rtype: :obj:`None`\n\n    Examples:\n        >>> from flutils.pathutils import chown\n        >>> chown(\'~/tmp/flutils.tests.osutils.txt\')\n\n        Supports a :term:`glob pattern`.  So to recursively change the\n        ownership of a directory just do:\n\n        >>> chown(\'~/tmp/**\')\n\n\n        To change ownership of all the directory\'s immediate contents:\n\n        >>> chown(\'~/tmp/*\', user=\'foo\', group=\'bar\')\n\n    '
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0, placeholder=str_1)
    str_4 = ansi_text_wrapper_0.fill(str_3)
    str_5 = ansi_text_wrapper_0.fill(str_2)

def test_case_8():
    str_0 = 'l{SJ]AP1<hsyM4z\r'
    int_0 = module_0.len_without_ansi(str_0)
    int_1 = 3685
    str_1 = 'RW{\x0b3\x0b+0n|.\\\\q%\r`'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_1, str_1, str_1, bool_0, bool_0, max_lines=int_1, placeholder=str_0)
    str_2 = 'k%ll5'
    str_3 = ansi_text_wrapper_1.fill(str_0)
    str_4 = '=q([MohhZ19.0+!'
    list_0 = ansi_text_wrapper_1.wrap(str_4)
    bool_1 = False
    str_5 = '![)D'
    list_1 = ansi_text_wrapper_1.wrap(str_5)
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_2, str_1, bool_1, int_1, max_lines=int_0, placeholder=str_2)
    str_6 = ansi_text_wrapper_0.fill(str_5)
    list_2 = ansi_text_wrapper_0.wrap(str_1)
    str_7 = "bIB?'4<(2y6C]m}Mb9"
    list_3 = ansi_text_wrapper_0.wrap(str_7)
    str_8 = ansi_text_wrapper_0.fill(str_1)
    str_9 = '\tH":]1JV^jJc,%YaDK*'
    str_10 = ansi_text_wrapper_0.fill(str_9)
    str_11 = ''
    str_12 = 'Change ownership of a path.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    If the given ``path`` does NOT exist, nothing will be done.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path of the file or directory that will have it\'s ownership\n            changed.  This value can be a :term:`glob pattern`.\n        user (:obj:`str` or :obj:`int`, optional): The "login name" used to set\n            the owner of ``path``.  A value of ``\'-1\'`` will leave the\n            owner unchanged.  Defaults to the "login name" of the current user.\n        group (:obj:`str` or :obj:`int`, optional): The group name used to set\n            the group of ``path``.  A value of ``\'-1\'`` will leave the\n            group unchanged.  Defaults to the current user\'s group.\n        include_parent (:obj:`bool`, optional): A value of :obj:`True` will\n            chown the parent directory of the given ``path`` that contains\n            a :term:`glob pattern`.  Defaults to :obj:`False`.\n\n    Raises:\n        OSError: If the given :obj:`user` does not exist as a "login\n            name" for this operating system.\n        OSError: If the given :obj:`group` does not exist as a "group\n            name" for this operating system.\n\n    :rtype: :obj:`None`\n\n    Examples:\n        >>> from flutils.pathutils import chown\n        >>> chown(\'~/tmp/flutils.tests.osutils.txt\')\n\n        Supports a :term:`glob pattern`.  So to recursively change the\n        ownership of a directory just do:\n\n        >>> chown(\'~/tmp/**\')\n\n\n        To change ownership of all the directory\'s immediate contents:\n\n        >>> chown(\'~/tmp/*\', user=\'foo\', group=\'bar\')\n\n    '
    str_13 = ''
    ansi_text_wrapper_3 = module_0.AnsiTextWrapper(max_lines=int_0, placeholder=str_13)
    str_14 = ansi_text_wrapper_3.fill(str_12)
    str_15 = '=4;"dEnOaO'
    int_2 = 2131
    bool_2 = False
    ansi_text_wrapper_4 = module_0.AnsiTextWrapper(int_2, str_15, bool_2, bool_1, bool_0, max_lines=int_1)
    str_16 = ansi_text_wrapper_3.fill(str_11)

def test_case_9():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)
    str_1 = '\x1b[38;5:209mfoobar\x1b[0m'
    int_1 = module_0.len_without_ansi(str_1)
    str_2 = '\x1b[38;5;209'
    str_3 = 'mfoobar'
    str_4 = '\x1b[0m'
    str_5 = [str_2, str_3, str_4]
    int_2 = module_0.len_without_ansi(str_5)
    str_6 = '\x1b[0m\x00'
    str_7 = [str_2, str_3, str_6]
    int_3 = module_0.len_without_ansi(str_7)
    str_8 = '\x00'
    str_9 = [str_2, str_3, str_4, str_8]
    int_4 = module_0.len_without_ansi(str_9)