# Automatically generated by Pynguin.
import ansible.module_utils.common.json as module_0
import ansible.plugins.filter.core as module_1
import ansible.errors as module_2
import ansible.template as module_3

def test_case_0():
    try:
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder()
        var_0 = module_1.to_yaml(ansible_j_s_o_n_encoder_0)
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder()
        var_0 = module_1.to_nice_yaml(ansible_j_s_o_n_encoder_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -4183.0
        list_0 = [float_0, float_0, float_0, float_0]
        bytes_0 = b'\x0e\xc5\x10ug'
        var_0 = module_1.rand(float_0, bytes_0)
        bool_0 = False
        var_1 = module_1.to_datetime(list_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '190.168.1.10'
        var_0 = module_1.regex_search(str_0, str_0)
        list_0 = [str_0]
        var_1 = module_1.strftime(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '2020-10-05(2'
        var_0 = module_1.strftime(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        set_0 = {str_0}
        int_0 = -1355
        var_0 = module_1.regex_findall(str_0, set_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n'
        list_0 = [str_0, str_0, str_0, str_0]
        dict_0 = None
        float_0 = -1184.625
        var_0 = module_1.regex_search(dict_0, float_0, *list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'a.b^c$d*e\\f'
        var_0 = module_1.regex_escape(str_0)
        str_1 = 'posix_basic'
        var_1 = module_1.regex_escape(str_0, str_1)
        str_2 = 'a.b^c$d*e\\f'
        str_3 = 'posix_extended'
        var_2 = module_1.regex_escape(str_2, str_3)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '"'
        var_0 = module_1.to_bool(str_0)
        ansible_j_s_o_n_encoder_0 = None
        str_1 = 'B@sgl\\c'
        tuple_0 = (str_1, ansible_j_s_o_n_encoder_0)
        str_2 = '%h%ZQ;FUeri?o!'
        var_1 = module_1.regex_search(tuple_0, str_2)
        bool_0 = True
        list_0 = [ansible_j_s_o_n_encoder_0, var_1]
        var_2 = module_1.mandatory(list_0)
        var_3 = module_1.regex_escape(bool_0, ansible_j_s_o_n_encoder_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'~\x17\xaax\xcd;\xab~\x02)\xef\xc5\xc1\xb0\x0c\xbc'
        set_0 = {bytes_0, bytes_0, bytes_0}
        var_0 = module_1.regex_escape(set_0)
        list_0 = [bytes_0, bytes_0]
        var_1 = module_1.get_hash(bytes_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -2538
        list_0 = None
        var_0 = module_1.rand(list_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = None
        var_0 = module_1.from_yaml_all(list_0)
        int_0 = -1913
        set_0 = set()
        var_1 = module_1.rand(int_0, set_0, list_0, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'~\x17\xaax\xcd;\xab~\x02)\xef\xc5\xc1\xb0\x0c\xbc'
        list_0 = [bytes_0, bytes_0]
        var_0 = module_1.get_hash(bytes_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'~\x17\xaax\xcd;\xab~\x02)\xef\xc5\xc1\xb0\x0c\xbc'
        var_0 = module_1.get_hash(bytes_0)
        list_0 = [bytes_0, bytes_0]
        var_1 = module_1.get_hash(bytes_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = module_1.regex_replace()
        int_0 = 254
        bool_0 = True
        var_1 = module_1.get_encrypted_password(int_0, bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '7?T%A9c\n*@\n&^.\x0b'
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.to_uuid(str_0, filter_module_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\n'
        var_0 = module_1.comment(str_0)
        str_1 = '2K~R?9Ud!DLf!'
        dict_0 = {str_1: var_0}
        var_1 = module_1.combine(**dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = None
        var_0 = module_1.comment(float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 1156.6958
        list_0 = [float_0, float_0, float_0, float_0, float_0, float_0]
        str_0 = 'r%[*MYOzhaI"XF(i<O'
        complex_0 = None
        bytes_0 = b'\xd8\x11\xf5\\|'
        float_1 = 1.5
        dict_0 = {}
        var_0 = module_1.ternary(bytes_0, float_1, dict_0)
        dict_1 = {str_0: var_0, var_0: bytes_0}
        var_1 = module_1.b64encode(dict_1)
        var_2 = module_1.randomize_list(complex_0)
        var_3 = module_1.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        filter_module_0 = module_1.FilterModule()
        var_0 = filter_module_0.filters()
        list_0 = [var_0, filter_module_0, var_0, var_0]
        var_1 = module_1.randomize_list(list_0)
        float_0 = -5692.5
        var_2 = module_1.b64decode(float_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '-'
        list_0 = [str_0]
        var_0 = module_1.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = "VT3Nsq&,>o'K:6c+"
        list_0 = [str_0]
        var_0 = module_1.combine(*list_0)
        bool_0 = False
        float_0 = 2121.0
        var_1 = module_1.subelements(bool_0, float_0)
    except BaseException:
        pass

def test_case_22():
    try:
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.dict_to_list_of_dict_key_value_elements(filter_module_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 762
        var_0 = module_1.list_of_dict_key_value_elements_to_dict(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '190.16|m8.B.10'
        var_0 = module_1.mandatory(str_0)
        bool_0 = False
        list_0 = [str_0, bool_0, str_0]
        bytes_0 = b'M*\xa4gu\xdd'
        var_1 = module_1.flatten(list_0, bytes_0)
        var_2 = module_1.regex_search(str_0, str_0)
        int_0 = 3415
        var_3 = module_1.path_join(int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        var_0 = module_1.combine()
        int_0 = -1616
        list_0 = []
        str_0 = 'Rx'
        dict_0 = {str_0: var_0, str_0: list_0, str_0: var_0, str_0: var_0}
        bytes_0 = b'5e'
        var_1 = module_1.rand(int_0, list_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_26():
    try:
        dict_0 = None
        bytes_0 = b'V\xd4\xf6:i\xc2\xf1\x045\xa7L\xc9\xe3\xd4\x0f\x82\xcfy\xfb'
        var_0 = module_1.to_uuid(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_27():
    try:
        filter_module_0 = module_1.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = filter_module_0.filters()
        var_2 = filter_module_0.filters()
        var_3 = filter_module_0.filters()
        float_0 = 323.152
        var_4 = module_1.to_bool(float_0)
        dict_0 = None
        dict_1 = {}
        str_0 = '_8~$w,kKf^4kp]V40'
        var_5 = module_1.do_groupby(dict_1, dict_0, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = True
        list_0 = []
        dict_0 = {bool_0: bool_0}
        var_0 = module_1.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_29():
    try:
        float_0 = -2158.29
        filter_module_0 = module_1.FilterModule()
        bool_0 = False
        str_0 = 'n!PfX!Yk<Zs;YC'
        var_0 = module_1.from_yaml(str_0)
        var_1 = module_1.randomize_list(filter_module_0, bool_0)
        list_0 = [float_0, float_0, float_0, float_0, float_0, float_0]
        var_2 = module_1.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = "VT3Nsq&,>o'K:6c+"
        list_0 = [str_0]
        var_0 = module_1.combine(*list_0)
        dict_0 = {}
        bytes_0 = b'.\x8f\xc3\xdfZ\xfc'
        var_1 = module_1.subelements(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'c8Nu\n|}wu$R6T2:1'
        var_0 = module_1.regex_replace()
        list_0 = [var_0, var_0, str_0]
        var_1 = module_1.path_join(list_0)
        var_2 = module_1.regex_search(str_0, str_0)
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(list_0)
        ansible_j_s_o_n_encoder_1 = module_0.AnsibleJSONEncoder()
        ansible_filter_error_0 = module_2.AnsibleFilterError(ansible_j_s_o_n_encoder_1, ansible_j_s_o_n_encoder_0)
        str_1 = ']JFOXA'
        var_3 = module_1.strftime(ansible_filter_error_0, str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = "VT3Nsq&,>o'K:c+"
        list_0 = [str_0, str_0, str_0]
        var_0 = module_1.combine(*list_0)
    except BaseException:
        pass

def test_case_33():
    try:
        dict_0 = {}
        str_0 = 'i%xOVp5,(#\t5\x0bz{\x0bT8('
        int_0 = -636
        var_0 = module_1.extract(dict_0, str_0, int_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = True
        str_0 = 'kpE-VT2QV)rlD_JnW'
        set_0 = set()
        var_0 = module_1.extract(bool_0, str_0, set_0, str_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 254
        list_0 = []
        dict_0 = {int_0: int_0}
        list_1 = [list_0, list_0]
        list_2 = [dict_0, list_1]
        dict_1 = {}
        var_0 = module_1.flatten(list_2, dict_1)
    except BaseException:
        pass

def test_case_36():
    try:
        bytes_0 = b'Fo'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        list_1 = [bytes_0, bytes_0, bytes_0, list_0]
        var_0 = module_1.mandatory(list_1)
        filter_module_0 = module_1.FilterModule()
        var_1 = module_1.combine(*list_1)
    except BaseException:
        pass

def test_case_37():
    try:
        float_0 = -2991.007
        str_0 = 'Kj'
        var_0 = module_1.path_join(str_0)
        var_1 = module_1.get_encrypted_password(float_0)
    except BaseException:
        pass

def test_case_38():
    try:
        float_0 = None
        var_0 = module_1.randomize_list(float_0)
        var_1 = module_1.to_bool(float_0)
        int_0 = 25
        str_0 = '\rn8!z'
        float_1 = -384.538911
        list_0 = [str_0, float_1, float_0]
        var_2 = module_1.regex_search(float_1, int_0, *list_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'c8Nu\n|}wu$R6T2:1'
        var_0 = module_1.regex_replace()
        var_1 = module_1.regex_search(str_0, str_0)
        bool_0 = True
        var_2 = module_1.randomize_list(bool_0)
        var_3 = module_1.fileglob(str_0)
        bool_1 = True
        var_4 = module_1.to_bool(bool_1)
        list_0 = [var_1, str_0, str_0]
        var_5 = module_1.combine(*list_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'c8Nu\n|}wu$R6T2:1'
        var_0 = module_1.regex_replace()
        var_1 = module_1.regex_search(str_0, str_0)
        var_2 = module_1.fileglob(str_0)
        list_0 = [var_1, str_0, str_0, str_0]
        ansible_j_s_o_n_encoder_0 = None
        str_1 = "_.m,l\x0cP),d=>\nFr\ry'"
        var_3 = module_1.from_yaml_all(str_1)
        bool_0 = False
        dict_0 = {}
        var_4 = module_1.regex_search(ansible_j_s_o_n_encoder_0, bool_0, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_41():
    try:
        filter_module_0 = module_1.FilterModule()
        set_0 = {filter_module_0, filter_module_0, filter_module_0}
        var_0 = module_1.quote(set_0)
        str_0 = "VT3Nsq&,>o'K:6c+"
        list_0 = [var_0, filter_module_0, filter_module_0, str_0]
        set_1 = {str_0}
        dict_0 = {}
        list_1 = [str_0, var_0, filter_module_0, str_0]
        list_2 = [list_0, filter_module_0, list_1, filter_module_0]
        var_1 = module_1.extract(set_1, dict_0, list_0, list_2)
    except BaseException:
        pass

def test_case_42():
    try:
        bool_0 = False
        int_0 = -3671
        bool_1 = False
        bytes_0 = b'\x9d\xfaV\xbd[\xd1\x11\x1aW\xa8},\x8e}\xf2'
        bytes_1 = b'\x04\xfaZ\xf6XI'
        float_0 = -636.933
        tuple_0 = (bytes_0, bytes_1, float_0)
        list_0 = [bool_0, bool_0, tuple_0]
        var_0 = module_1.rand(int_0, bool_1, tuple_0, bytes_1, list_0)
    except BaseException:
        pass

def test_case_43():
    try:
        bool_0 = True
        bytes_0 = b'\xe6\xcb^\xf1\xecN\xa6|^\x1e\x1d\xe3\xde'
        var_0 = module_1.regex_escape(bytes_0)
        dict_0 = {var_0: bool_0, bytes_0: var_0, bool_0: bytes_0}
        set_0 = set()
        var_1 = module_1.dict_to_list_of_dict_key_value_elements(dict_0, set_0)
    except BaseException:
        pass

def test_case_44():
    try:
        bool_0 = False
        dict_0 = None
        list_0 = None
        var_0 = module_1.rand(dict_0, list_0, bool_0)
    except BaseException:
        pass

def test_case_45():
    try:
        var_0 = module_1.combine()
        complex_0 = None
        int_0 = 1572
        int_1 = -6
        var_1 = module_1.rand(complex_0, int_0, int_1)
        bool_0 = False
        str_0 = '\x0b)Oo~)K'
        var_2 = module_1.get_hash(str_0, bool_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'a'
        str_1 = 'c'
        var_0 = module_1.comment(str_0, str_1)
        str_2 = 'erlang'
        var_1 = module_1.comment(str_0, str_2)
        str_3 = 'xml'
        var_2 = module_1.comment(str_0, str_3)
        str_4 = 'cblock'
        var_3 = module_1.comment(str_0, str_4)
        tuple_0 = None
        var_4 = module_1.fileglob(tuple_0)
    except BaseException:
        pass

def test_case_47():
    try:
        bool_0 = True
        int_0 = -1913
        list_0 = [int_0]
        dict_0 = {bool_0: list_0}
        var_0 = module_1.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = 'd>@D}l5/l Jq8k~\\'
        dict_0 = None
        tuple_0 = None
        bool_0 = True
        var_0 = module_1.ternary(dict_0, tuple_0, bool_0)
        int_0 = 2959
        set_0 = {bool_0, str_0, int_0, tuple_0}
        var_1 = module_1.comment(int_0, set_0)
    except BaseException:
        pass

def test_case_49():
    try:
        dict_0 = {}
        filter_module_0 = module_1.FilterModule(**dict_0)
        str_0 = 'd"B,@'
        var_0 = module_1.rand(filter_module_0, str_0)
        str_1 = 'X;T&LebQa7$q|\rFw1X5g'
        str_2 = "55N\rT<kI<lY923C\n<M'Y"
        dict_1 = {str_1: str_2, str_2: str_2, str_1: str_1}
        str_3 = 'p~six_basic'
        var_1 = module_1.regex_search(str_1, str_3)
        dict_2 = {}
        list_0 = [dict_2]
        var_2 = module_1.regex_escape(list_0)
        float_0 = -937.261
        int_0 = 90
        float_1 = 2594.68157
        list_1 = [float_1, str_1, int_0]
        var_3 = module_1.regex_findall(dict_1, float_0, int_0, list_1)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = ',fo8!A3>-)w*y1'
        filter_module_0 = module_1.FilterModule()
        set_0 = {str_0, filter_module_0, str_0}
        list_0 = [set_0]
        dict_0 = {}
        tuple_0 = (list_0, dict_0)
        list_1 = [tuple_0, tuple_0, tuple_0]
        var_0 = module_1.combine(*list_1)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = '*.py'
        var_0 = module_1.fileglob(str_0)
        var_1 = module_1.combine()
        dict_0 = {}
        str_1 = 'q~YdgF /?(u'
        var_2 = module_1.to_bool(str_1)
        str_2 = 'V7E{:+'
        filter_module_0 = None
        bool_0 = False
        var_3 = module_1.flatten(str_2, filter_module_0, bool_0)
        var_4 = module_1.mandatory(dict_0)
        var_5 = module_1.regex_search(filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'l0@<=gm32!7JG`%B'
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder()
        var_0 = ansible_j_s_o_n_encoder_0.encode(str_0)
        bool_0 = False
        float_0 = 558.7
        var_1 = module_1.rand(ansible_j_s_o_n_encoder_0, bool_0, float_0, str_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = '3D.n9C9#k1nUY-[T}Ux'
        str_1 = 'A'
        dict_0 = {str_0: str_0, str_1: str_1}
        var_0 = module_1.comment(str_0, **dict_0)
        str_2 = '*y'
        var_1 = module_1.fileglob(str_2)
        var_2 = module_1.combine()
        dict_1 = {}
        list_0 = []
        var_3 = module_1.from_yaml(list_0)
        str_3 = '#@\x0b\x0cKDjpn#\nh)2T&q'
        var_4 = module_1.to_bool(str_3)
        str_4 = 'V7E{:+'
        filter_module_0 = None
        bool_0 = False
        var_5 = module_1.flatten(str_4, filter_module_0, bool_0)
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder()
        list_1 = []
        int_0 = -2725
        tuple_0 = (list_1, int_0)
        list_2 = [ansible_j_s_o_n_encoder_0, str_0, var_4, tuple_0]
        var_6 = module_1.extract(ansible_j_s_o_n_encoder_0, bool_0, dict_1, list_2)
    except BaseException:
        pass

def test_case_54():
    try:
        ansible_undefined_0 = module_3.AnsibleUndefined()
        int_0 = 12
        var_0 = module_1.mandatory(ansible_undefined_0, int_0)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = 'Content-length'
        var_0 = module_1.mandatory(str_0)
        ansible_undefined_0 = module_3.AnsibleUndefined()
        var_1 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass