# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    distribution_0 = module_0.Distribution(bool_0)
    var_0 = distribution_0.get_distribution_facts()

def test_case_2():
    set_0 = None
    set_1 = None
    list_0 = [set_0, set_1]
    int_0 = 310
    set_2 = set()
    tuple_0 = (set_2,)
    distribution_files_0 = module_0.DistributionFiles(tuple_0)
    var_0 = distribution_files_0.parse_distribution_file_Slackware(set_0, list_0, list_0, int_0)

def test_case_3():
    str_0 = '\n    Test case for the method get_distribution_HPUX\n\n    :return: no of pssed and failed testcases\n    '
    str_1 = 'SunOS'
    str_2 = 'Description'
    tuple_0 = (str_2,)
    distribution_files_0 = module_0.DistributionFiles(tuple_0)
    distribution_fact_collector_0 = module_0.DistributionFactCollector(distribution_files_0)
    list_0 = [str_1, str_2, str_0, str_1]
    dict_0 = {}
    str_3 = 'qE= F-u@+&'
    var_0 = distribution_files_0.parse_distribution_file_OpenWrt(distribution_fact_collector_0, list_0, dict_0, str_3)

def test_case_4():
    dict_0 = None
    set_0 = {dict_0}
    distribution_0 = module_0.Distribution(set_0)
    var_0 = distribution_0.get_distribution_FreeBSD()
    bool_0 = True
    distribution_fact_collector_0 = module_0.DistributionFactCollector(bool_0)
    float_0 = 492.64
    bool_1 = True
    distribution_files_0 = module_0.DistributionFiles(bool_1)
    var_1 = distribution_files_0.parse_distribution_file_Alpine(distribution_fact_collector_0, float_0, distribution_0, distribution_0)

def test_case_5():
    str_0 = 'redhat'
    str_1 = '[\x0cI9!dUz&JKj|r7{_iOh'
    str_2 = 'redhat'
    distribution_fact_collector_0 = module_0.DistributionFactCollector(str_2)
    distribution_0 = module_0.Distribution(str_2)
    bool_0 = True
    distribution_files_0 = module_0.DistributionFiles(bool_0)
    var_0 = distribution_files_0.parse_distribution_file_SUSE(str_0, str_1, distribution_fact_collector_0, distribution_0)

def test_case_6():
    str_0 = 'SunOS'
    tuple_0 = (str_0,)
    str_1 = ''
    distribution_files_0 = module_0.DistributionFiles(str_1)
    bytes_0 = None
    float_0 = 1324.423
    var_0 = distribution_files_0.parse_distribution_file_Debian(bytes_0, tuple_0, str_1, float_0)

def test_case_7():
    bool_0 = True
    set_0 = {bool_0}
    str_0 = 'redhat'
    int_0 = 2025
    distribution_files_0 = module_0.DistributionFiles(int_0)
    var_0 = distribution_files_0.parse_distribution_file_Mandriva(distribution_files_0, str_0, set_0, set_0)

def test_case_8():
    tuple_0 = ()
    distribution_fact_collector_0 = None
    str_0 = 'c0-'
    set_0 = set()
    distribution_files_0 = module_0.DistributionFiles(str_0)
    distribution_0 = module_0.Distribution(distribution_files_0)
    var_0 = distribution_files_0.parse_distribution_file_Coreos(tuple_0, distribution_fact_collector_0, str_0, set_0)

def test_case_9():
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    tuple_0 = None
    int_0 = 78
    bool_0 = True
    distribution_files_0 = module_0.DistributionFiles(bool_0)
    var_0 = distribution_files_0.parse_distribution_file_Flatcar(distribution_fact_collector_0, distribution_fact_collector_0, tuple_0, int_0)

def test_case_10():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    int_0 = 2794
    list_0 = [dict_0]
    tuple_0 = (int_0, dict_0, bool_0, list_0)
    int_1 = -319
    set_0 = set()
    str_0 = '@3ANbhu_hWR6MB@)Mk"Z'
    distribution_files_0 = module_0.DistributionFiles(str_0)
    var_0 = distribution_files_0.parse_distribution_file_CentOS(dict_0, tuple_0, int_1, set_0)

def test_case_11():
    float_0 = 1176.002
    distribution_0 = module_0.Distribution(float_0)
    var_0 = distribution_0.get_distribution_FreeBSD()

def test_case_12():
    str_0 = 'RVSJ_@6#319h?'
    distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0)
    list_0 = None
    set_0 = {distribution_fact_collector_0}
    tuple_0 = (list_0, set_0)
    var_0 = distribution_fact_collector_0.collect(tuple_0)
    distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_fact_collector_0)
    var_1 = distribution_fact_collector_1.collect()
    var_2 = distribution_fact_collector_0.collect()

def test_case_13():
    str_0 = '6F\rX>[[hu'
    set_0 = {str_0}
    dict_0 = {str_0: str_0, str_0: set_0}
    distribution_fact_collector_0 = module_0.DistributionFactCollector(dict_0)
    int_0 = 44
    distribution_files_0 = module_0.DistributionFiles(set_0)
    var_0 = distribution_files_0.parse_distribution_file_NA(set_0, str_0, str_0, int_0)

def test_case_14():
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    list_0 = None
    bytes_0 = b'\xdcN\xf8\x17/\xd7\xb4\xedu'
    str_0 = '3.\tOsEM~xSx5s,zHcc'
    complex_0 = None
    distribution_files_0 = module_0.DistributionFiles(list_0)
    var_0 = distribution_files_0.parse_distribution_file_Amazon(bytes_0, str_0, distribution_fact_collector_0, complex_0)

def test_case_15():
    str_0 = '\n    (?:\n        [01]?[0-9]{{1,2}}|              # 0..199\n        2[0-4][0-9]|                    # 200..249\n        25[0-5]|                        # 250..255\n        {range}                         # or a numeric range\n    )\n'
    int_0 = 932
    bytes_0 = b'\x9f\xbc\x99\x97\xf6t'
    set_0 = None
    float_0 = 1088.52957
    distribution_fact_collector_0 = None
    distribution_0 = module_0.Distribution(distribution_fact_collector_0)
    distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_0)
    tuple_0 = (distribution_fact_collector_1,)
    str_1 = '?'
    tuple_1 = (float_0, tuple_0, str_1)
    distribution_files_0 = module_0.DistributionFiles(tuple_1)
    tuple_2 = (bytes_0, set_0, distribution_files_0)
    dict_0 = {tuple_2: tuple_0, str_0: tuple_2}
    tuple_3 = (tuple_2, dict_0, distribution_files_0)
    str_2 = '$ak,kjg=\t-oc[K\n'
    distribution_files_1 = module_0.DistributionFiles(str_2)
    var_0 = distribution_files_1.parse_distribution_file_ClearLinux(str_0, int_0, tuple_3, int_0)