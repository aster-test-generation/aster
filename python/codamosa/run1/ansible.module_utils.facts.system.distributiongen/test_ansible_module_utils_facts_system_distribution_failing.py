# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        list_0 = None
        var_0 = module_0.get_uname(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        complex_0 = None
        bool_0 = False
        float_0 = 0.2
        distribution_0 = module_0.Distribution(float_0)
        set_0 = {bool_0, distribution_0, distribution_0}
        int_0 = 177
        distribution_files_0 = module_0.DistributionFiles(int_0)
        var_0 = distribution_files_0.parse_distribution_file_Amazon(complex_0, bool_0, distribution_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        var_0 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1745
        list_0 = [int_0, int_0, int_0, int_0]
        distribution_0 = module_0.Distribution(list_0)
        dict_0 = {distribution_0: distribution_0, distribution_0: int_0}
        bool_0 = None
        tuple_0 = ()
        bytes_0 = b'\xc9\x85\xb5\xbdV\x9c'
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        var_0 = distribution_files_0.parse_distribution_file_Flatcar(dict_0, distribution_0, bool_0, tuple_0)
        var_1 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'e5F+vTg'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -3411.2331
        distribution_0 = module_0.Distribution(float_0)
        str_0 = 'FD;Fd34y\\}6 Kh=e'
        set_0 = {float_0, distribution_0, str_0, str_0}
        distribution_files_0 = module_0.DistributionFiles(str_0)
        dict_0 = {str_0: str_0, float_0: float_0, distribution_0: set_0, distribution_0: distribution_0}
        distribution_1 = module_0.Distribution(dict_0)
        bytes_0 = b'b\xa2\xe8\xf3\xd3\xadM\xc0O\x9c\x14\x19\x04\x1e\x1f\xfc^\x98'
        int_0 = -1384
        set_1 = {distribution_1}
        var_0 = distribution_files_0.parse_distribution_file_Mandriva(int_0, set_1, str_0, dict_0)
        distribution_2 = module_0.Distribution(bytes_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        var_1 = distribution_2.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'SunOS'
        tuple_0 = (str_0,)
        str_1 = ''
        distribution_files_0 = module_0.DistributionFiles(str_1)
        bytes_0 = None
        float_0 = 1324.423
        var_0 = distribution_files_0.parse_distribution_file_Debian(bytes_0, tuple_0, str_1, float_0)
        distribution_0 = module_0.Distribution(float_0)
        var_1 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b"\x00\x16\xe0^\xf6\xe7_\r\xc1r\xaf\x8e\x1f\x16'A\x96\x9fB\xa7"
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        distribution_0 = module_0.Distribution(tuple_0)
        var_0 = distribution_0.get_distribution_SMGL()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '6d#RJk{G[};l'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bool_0 = False
        distribution_files_0 = module_0.DistributionFiles(bool_0)
        var_0 = distribution_files_0.process_dist_files()
        str_1 = "Z w~y'TeQ2t'%(.\rz"
        set_0 = {distribution_fact_collector_0}
        bool_1 = True
        distribution_files_1 = module_0.DistributionFiles(bool_0)
        var_1 = distribution_files_1.parse_distribution_file_Mandriva(distribution_fact_collector_0, str_1, set_0, bool_1)
        distribution_0 = module_0.Distribution(str_0)
        var_2 = distribution_0.get_distribution_facts()
        var_3 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '6d#RJk{G[};l'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bool_0 = False
        bytes_0 = b'\x16\xb9B\x9ab\x17X\x9f\x9e\x94\x81\xe2\xc5\x8b\x02\xc9\xd5'
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        tuple_0 = (distribution_files_0, distribution_files_0, distribution_files_0)
        var_0 = distribution_fact_collector_0.collect(tuple_0, distribution_fact_collector_0)
        distribution_files_1 = module_0.DistributionFiles(bool_0)
        var_1 = distribution_files_1.process_dist_files()
        str_1 = "Z w~y'TeQ2t'%(.\rz"
        set_0 = set()
        bytes_1 = b'\x08\x14\xc4s\xc5\xfcR'
        str_2 = '|1|%s|%s'
        distribution_0 = module_0.Distribution(bytes_1)
        tuple_1 = (bool_0, distribution_0)
        tuple_2 = (bytes_1, distribution_files_1, str_2, tuple_1)
        var_2 = distribution_files_1.parse_distribution_file_Alpine(set_0, tuple_2, str_2, bytes_1)
        set_1 = {distribution_fact_collector_0}
        bool_1 = True
        bool_2 = True
        distribution_files_2 = module_0.DistributionFiles(bool_2)
        var_3 = distribution_files_2.parse_distribution_file_Mandriva(distribution_fact_collector_0, str_1, set_1, bool_1)
        distribution_1 = module_0.Distribution(str_0)
        var_4 = distribution_1.get_distribution_facts()
        var_5 = distribution_1.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -4987.0506
        distribution_0 = module_0.Distribution(float_0)
        set_0 = {distribution_0, distribution_0, float_0, float_0}
        list_0 = [distribution_0]
        bytes_0 = b'\xfc\xad\xe8O]@\xfe9'
        set_1 = set()
        distribution_files_0 = module_0.DistributionFiles(set_1)
        var_0 = distribution_0.get_distribution_FreeBSD()
        var_1 = distribution_files_0.parse_distribution_file_ClearLinux(set_0, set_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        distribution_0 = module_0.Distribution(str_0)
        distribution_files_0 = module_0.DistributionFiles(distribution_0)
        distribution_1 = module_0.Distribution(distribution_files_0)
        distribution_2 = module_0.Distribution(distribution_1)
        list_0 = [distribution_1, distribution_files_0]
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        float_0 = -2008.2618237937434
        distribution_fact_collector_1 = module_0.DistributionFactCollector()
        float_1 = 2277.8
        list_1 = [distribution_fact_collector_1, float_1, float_1, float_1]
        distribution_files_1 = module_0.DistributionFiles(list_1)
        var_0 = distribution_files_1.parse_distribution_file_Amazon(distribution_2, list_0, distribution_fact_collector_0, float_0)
        distribution_fact_collector_2 = module_0.DistributionFactCollector()
        distribution_files_2 = module_0.DistributionFiles(distribution_fact_collector_2)
        distribution_files_3 = module_0.DistributionFiles(distribution_files_2)
        distribution_3 = module_0.Distribution(distribution_files_3)
        distribution_files_4 = module_0.DistributionFiles(distribution_3)
        float_2 = -640.6244
        distribution_fact_collector_3 = module_0.DistributionFactCollector()
        var_1 = distribution_3.get_distribution_FreeBSD()
        bool_0 = True
        int_0 = 100
        set_0 = {float_2, distribution_fact_collector_3, bool_0}
        list_2 = [float_2, distribution_fact_collector_3]
        var_2 = distribution_files_2.parse_distribution_file_Flatcar(int_0, set_0, list_2, float_2)
        var_3 = distribution_fact_collector_2.collect()
        str_1 = 'w;!s}I {k'
        var_4 = module_0.get_uname(str_1, distribution_fact_collector_1)
    except BaseException:
        pass