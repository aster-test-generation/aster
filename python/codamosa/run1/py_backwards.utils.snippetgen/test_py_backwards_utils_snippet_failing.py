# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import typed_ast._ast3 as module_1
import py_backwards.utils.snippet as module_2

def test_case_0():
    try:
        str_0 = '\nif True:\n    extend(vars)\n    print(c)\n    extend(another_var)\n    print(d)\nelse:\n    extend(vars)\n    print(e)\n    extend(another_var)\n    print(f)\n    '
        var_0 = module_0.parse(str_0)
        var_1 = {var_0: str_0, str_0: var_0}
        int_0 = 1
        str_1 = 'y'
        arg_0 = module_1.arg()
        str_2 = 'legKt'
        str_3 = None
        dict_0 = {str_0: str_0, str_2: str_0, str_1: str_1, str_3: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        module_2.extend(int_0)
        module_2.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_1():
    try:
        name_0 = None
        dict_0 = {}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'prt'
        str_1 = 'xmlrpc.server'
        dict_0 = {str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        function_def_0 = module_1.FunctionDef()
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
        str_2 = '\nif True:\n    extend(vars)\n    print(c)\n    extend(another_var)\n    print(d)\nelse:\n    extend(vars)\n    print(e)\n    extend(another_var)\n    print(f)\n    '
        var_0 = module_0.parse(str_2)
        int_0 = 1
        a_s_t_0 = module_1.AST()
        iterable_0 = module_2.find_variables(a_s_t_0)
        module_2.extend_tree(var_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\nif True:\n    extend(vars)\n    print(c)\n    extend(another_var)\n    print(d)\nelse:\n    extend(vars)\n    print(e)\n    extend(another_var)\n    print(f)\n    '
        var_0 = module_0.parse(str_0)
        var_1 = {str_0: str_0, str_0: var_0, str_0: str_0, str_0: str_0}
        str_1 = 'x'
        keyword_0 = module_1.keyword()
        dict_0 = {str_1: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
        a_s_t_0 = module_1.AST()
        iterable_0 = module_2.find_variables(a_s_t_0)
        module_2.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\nif True:\n    extend(vars)\n    print(c)\n    extend(another_var)\n    print(d)\nelse:\n    extend(vars)\n    print(e)\n    extend(another_var)\n    print(f)\n    '
        var_0 = module_0.parse(str_0)
        str_1 = 'x'
        class_def_0 = module_1.ClassDef()
        str_2 = '9?\nKj"$})\nofL-"6#^L'
        dict_0 = {str_1: str_1, str_1: str_1, str_0: str_1, str_2: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
        int_0 = 1
        a_s_t_0 = module_1.AST()
        iterable_0 = module_2.find_variables(a_s_t_0)
        module_2.extend_tree(var_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'A/6-+}M=_'
        list_0 = [str_0, str_0]
        list_1 = [list_0, list_0]
        import_from_0 = module_1.ImportFrom(*list_1)
        str_1 = 'Y;|9I`"'
        str_2 = "o;'&pS>B"
        dict_0 = {str_1: str_1, str_2: str_2, str_2: str_1}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_6():
    try:
        alias_0 = None
        str_0 = 'Gww4go&E'
        str_1 = '`,\x0cS'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        str_2 = 'M2&b)\r>\x0bnEoSxLW><!'
        dict_1 = {str_2: str_2}
        name_0 = module_1.Name()
        variables_replacer_1 = module_2.VariablesReplacer(dict_0)
        name_1 = variables_replacer_1.visit_Name(name_0)
        snippet_0 = module_2.snippet(name_1)
        variables_replacer_2 = module_2.VariablesReplacer(dict_1)
        alias_1 = variables_replacer_2.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\nif True:\n    extend(vars)\n    print(c)\n    extend(another_var)\n    print(d)\nelse:\n    extend(vars)\n    print(e)\n    extend(another_var)\n    print(f)\n    '
        var_0 = module_0.parse(str_0)
        var_1 = {}
        str_1 = 'x'
        except_handler_0 = module_1.ExceptHandler()
        dict_0 = {str_1: str_1, str_0: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        a_s_t_0 = module_1.AST()
        iterable_0 = module_2.find_variables(a_s_t_0)
        module_2.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\nif True:\n    extend(vars)\n    print(c)\n    extend(another_var)\n    print(d)\nelse:\n    extend(vars)\n    print(e)\n    extend(another_var)\n    print(f)\n    '
        var_0 = module_0.parse(str_0)
        int_0 = 1
        module_2.extend_tree(var_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        snippet_0 = module_2.snippet(list_0)
        list_1 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\nif True:\n    extend(vars)\n    print(c)\n    extend(another_var)\n    print(d)\nelse:\n    extend(vars)\n    print(e)\n    extend(another_var)\n    print(f)\n    '
        var_0 = module_0.parse(str_0)
        var_1 = {}
        int_0 = 1
        module_2.let(int_0)
        module_2.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '(6PomFs\nv1f='
        str_1 = '-?H3sPf2;SMD(\\2c4S'
        keyword_0 = module_1.keyword()
        str_2 = '\x0c*2Z\n_'
        dict_0 = {str_2: str_2}
        str_3 = None
        str_4 = '_\x0b6-$6z5z!;(]G,`T;t;'
        dict_1 = {str_1: str_0, str_3: str_3, str_4: str_0, str_0: str_1, str_1: str_1}
        a_s_t_0 = module_1.AST()
        module_2.extend_tree(a_s_t_0, dict_0)
        variables_replacer_0 = module_2.VariablesReplacer(dict_1)
        arg_0 = None
        arg_1 = variables_replacer_0.visit_arg(arg_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -2710.644537
        str_0 = '|\\k5uKx)V}fjTt}('
        str_1 = '\rmx6)'
        str_2 = 'Wyx,vCpM'
        str_3 = 'Assignment outside of body'
        str_4 = 'Extends code, so code like:\n    \n        extend(vars)\n        print(x, y)\n        \n    When vars contains AST of assignments will end up:\n    \n        x = 1\n        x = 2\n        print(x, y)\n    '
        dict_0 = {str_0: str_0, str_1: str_2, str_3: float_0, str_4: float_0}
        a_s_t_0 = module_1.AST(**dict_0)
        iterable_0 = module_2.find_variables(a_s_t_0)
        str_5 = '&Ii7:g&[g~"h\\#P57zr'
        str_6 = None
        dict_1 = {str_5: str_5, str_5: str_5, str_6: str_6}
        module_2.extend_tree(a_s_t_0, dict_1)
        variables_replacer_0 = module_2.VariablesReplacer(dict_1)
        list_0 = [str_4, str_2, dict_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        variables_replacer_1 = module_2.VariablesReplacer(dict_1)
        a_s_t_1 = module_1.AST()
        iterable_1 = module_2.find_variables(a_s_t_1)
        name_0 = module_1.Name()
        variables_replacer_2 = module_2.VariablesReplacer(dict_1)
        name_1 = variables_replacer_2.visit_Name(name_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\nif True:\n    etend(vars)\n    print(c)\n    extend(nother_var)\n    print(d)\nelse:\n    extend(vars)\n    print(e)\n    extend(another_var)\n    print(f)\n    '
        var_0 = module_0.parse(str_0)
        var_1 = {}
        a_s_t_0 = module_1.AST()
        iterable_0 = module_2.find_variables(a_s_t_0)
        module_2.extend_tree(var_0, var_1)
    except BaseException:
        pass