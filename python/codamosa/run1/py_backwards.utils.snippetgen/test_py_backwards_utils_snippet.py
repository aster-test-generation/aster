# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = "\nlet(x)\nx += 1\ny = 1\nlet(z)\nprint(x, z)\ns = 'string'\nlet(y)\ny += 1\n    "
    var_0 = module_0.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_2():
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)

def test_case_3():
    arg_0 = module_2.arg()
    list_0 = [arg_0]
    str_0 = 'H^&F\x0bo9l\n#(1ze\n$'
    dict_0 = {str_0: list_0}
    class_def_0 = module_2.ClassDef(*list_0, **dict_0)
    str_1 = '$7;i@hmEnIFf'
    str_2 = '{y!8QN[c@l".{@chH'
    dict_1 = {str_1: str_1, str_2: str_2}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    str_3 = None
    dict_2 = {str_3: str_3}
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)
    arg_1 = variables_replacer_1.visit_arg(arg_0)

def test_case_4():
    attribute_0 = module_2.Attribute()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)

def test_case_5():
    int_0 = -2973
    list_0 = [int_0]
    arg_0 = module_2.arg(*list_0)
    str_0 = 'urlencode'
    str_1 = 'p>-)VRe<V+kSLzqp7!>x'
    str_2 = None
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    arg_1 = variables_replacer_0.visit_arg(arg_0)

def test_case_6():
    a_s_t_0 = module_2.AST()
    str_0 = '^Nk<9yytJ(;}]+@L{N5'
    str_1 = 'R<iY'
    dict_0 = {str_0: str_0, str_1: a_s_t_0, str_1: a_s_t_0}
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_7():
    str_0 = "\nlet(x)\nx += 1\ny = 1\nlet(z)\nprint(x, z)\ns = 'string'\nlet(y)\ny += 1\n    "
    dict_0 = {}
    a_s_t_0 = module_2.AST(**dict_0)
    str_1 = '{`\x0cL+Nv\\Hk{qh>'
    dict_1 = {str_1: str_0, str_0: str_1}
    module_1.extend_tree(a_s_t_0, dict_1)
    var_0 = module_0.parse(str_0)
    module_1.extend(dict_1)
    iterable_0 = module_1.find_variables(var_0)

def test_case_8():
    str_0 = '|\\k5uKx)V}fjTt}('
    str_1 = 'Assignent outside oM body'
    str_2 = 'Extends code, so code like:\n    \n        extend(vars)\n        print(x, y)\n        \n    When vars contains AST of assignments will end up:\n    \n        x = 1\n        x = 2\n        print(x, y)\n    '
    str_3 = 'RZcp;? '
    module_1.extend(str_2)
    str_4 = 'D<X'
    str_5 = None
    dict_0 = {str_0: str_4, str_1: str_1, str_3: str_3, str_4: str_4, str_5: str_5}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    list_0 = [str_1]
    import_from_0 = module_2.ImportFrom(*list_0)
    import_from_1 = module_2.ImportFrom(*list_0)
    import_from_2 = variables_replacer_0.visit_ImportFrom(import_from_1)

def test_case_9():
    class_def_0 = None
    module_1.let(class_def_0)
    str_0 = 'parse_qsl'
    str_1 = '|)\'<T o}#OD\x0c"YWyl!'
    dict_0 = {str_0: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    str_2 = ',q/M=)^Cv'
    str_3 = 'IhgqG;G<WikOZ?d-D8'
    str_4 = 'U5!=;#*=Pm}O/'
    list_0 = [str_0]
    alias_0 = module_2.alias(*list_0)
    alias_1 = variables_replacer_0.visit_alias(alias_0)
    str_5 = 'SY\x0cl7mkoc\r7%Ga'
    dict_1 = {str_2: str_4, str_4: str_4, str_5: str_5}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    dict_2 = {str_2: str_2, str_3: str_3, str_2: str_3, str_2: str_4}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    dict_3 = {}
    variables_replacer_3 = module_1.VariablesReplacer(dict_3)
    a_s_t_0 = module_2.AST()
    function_def_0 = module_2.FunctionDef()
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    iterable_0 = module_1.find_variables(a_s_t_0)
    iterable_1 = module_1.find_variables(a_s_t_0)

def test_case_10():
    str_0 = '|\\k5uKx)V}fjTt}('
    str_1 = 'Wyx,vCpM'
    str_2 = 'Extends code, so code like:\n    \n        extend(vars)\n        print(x, y)\n        \n    When vars contains AST of assignments will end up:\n    \n        x = 1\n        x = 2\n        print(x, y)\n    '
    str_3 = 'RZcp;? '
    module_1.extend(str_2)
    str_4 = 'D<X'
    str_5 = '&Ii7:g&[g~"h#P57zr'
    str_6 = None
    dict_0 = {str_0: str_4, str_4: str_4, str_3: str_3, str_5: str_5, str_6: str_6}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    list_0 = [str_1]
    import_from_0 = module_2.ImportFrom(*list_0)
    import_from_1 = module_2.ImportFrom(*list_0)
    import_from_2 = variables_replacer_0.visit_ImportFrom(import_from_1)

def test_case_11():
    str_0 = "\nlet(x)\nx += 1\ny = 1\nlet(z)\nprint(x, z)\ns = 'string'\nlet(y)\ny += 1\n    "
    dict_0 = {}
    function_def_0 = module_2.FunctionDef()
    str_1 = '_"XNClkr~8L.<e'
    list_0 = [str_0, str_1]
    alias_0 = module_2.alias(*list_0)
    dict_1 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    alias_1 = variables_replacer_0.visit_alias(alias_0)
    str_2 = '$azB'
    snippet_0 = module_1.snippet(str_2)
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    a_s_t_0 = None
    str_3 = 'e'
    str_4 = None
    list_1 = [a_s_t_0, a_s_t_0]
    dict_2 = {str_1: a_s_t_0, str_3: str_3, str_4: str_4, str_0: list_1}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    alias_2 = variables_replacer_2.visit_alias(alias_0)
    dict_3 = {str_0: str_1, str_0: str_1, str_0: str_1, str_1: str_0}
    variables_replacer_3 = module_1.VariablesReplacer(dict_3)
    str_5 = None
    dict_4 = {str_1: str_1, str_1: str_1, str_0: str_0, str_5: str_5}
    variables_replacer_4 = module_1.VariablesReplacer(dict_4)
    a_s_t_1 = module_2.AST(**dict_0)
    dict_5 = {str_4: str_0, str_0: str_4}
    var_0 = module_0.parse(str_0)
    module_1.extend(dict_5)
    module_1.extend_tree(a_s_t_1, dict_5)
    iterable_0 = module_1.find_variables(var_0)