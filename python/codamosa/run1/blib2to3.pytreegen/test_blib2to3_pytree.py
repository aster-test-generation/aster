# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 1258
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    int_0 = 134
    str_0 = '\x0b~M\x0cXU|(E\x0cA86!9tnd-'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_3():
    str_0 = '|Opoh\nF\r ]rA`c'
    int_0 = 227
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    leaf_0 = module_0.Leaf(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_4():
    str_0 = '~t~<%5C:'
    int_0 = 41
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_5():
    str_0 = 'R'
    dict_0 = None
    leaf_pattern_0 = module_0.LeafPattern(dict_0, str_0)

def test_case_6():
    str_0 = 'R'
    dict_0 = None
    leaf_pattern_0 = module_0.LeafPattern(dict_0, str_0)
    node_0 = None
    var_0 = leaf_pattern_0.match(node_0)

def test_case_7():
    str_0 = 'R'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_8():
    str_0 = '9{E11>lt'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_9():
    str_0 = 'w'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_10():
    str_0 = 'R'
    dict_0 = None
    leaf_pattern_0 = module_0.LeafPattern(dict_0, str_0)
    negated_pattern_0 = module_0.NegatedPattern(leaf_pattern_0)

def test_case_11():
    int_0 = 6
    str_0 = 'fM~5_,\x0ci5'
    int_1 = -162
    tuple_0 = (int_1, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    str_1 = leaf_0.__repr__()

def test_case_12():
    str_0 = '+'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    int_0 = 59
    str_1 = 'x'
    leaf_0 = module_0.Leaf(int_0, str_1)
    str_2 = leaf_0.__str__()

def test_case_13():
    int_0 = 1218
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_14():
    str_0 = 'NgC;>Xy7'
    int_0 = 3940
    list_0 = []
    node_0 = module_0.Node(int_0, list_0, str_0, str_0)
    optional_0 = node_0.get_lineno()

def test_case_15():
    grammar_0 = module_1.Grammar()
    int_0 = -2955
    list_0 = []
    negated_pattern_0 = module_0.NegatedPattern()
    tuple_0 = (grammar_0,)
    tuple_1 = (int_0, list_0, negated_pattern_0, tuple_0)
    var_0 = module_0.convert(grammar_0, tuple_1)

def test_case_16():
    int_0 = 2701
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    node_0.append_child(node_2)
    iterator_0 = node_0.post_order()
    iterator_1 = node_1.pre_order()
    node_3 = node_0.clone()
    iterator_2 = node_2.post_order()
    str_0 = node_2.get_suffix()

def test_case_17():
    int_0 = 2701
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    node_0.append_child(node_2)
    iterator_0 = node_2.pre_order()
    node_0.insert_child(int_0, node_2)
    iterator_1 = node_1.pre_order()
    node_1.append_child(node_0)
    int_1 = 6
    str_0 = 'F:w3!zJ!3q'
    int_2 = -147
    str_1 = node_2.get_suffix()
    optional_0 = node_0.get_lineno()
    tuple_0 = (int_2, int_1)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_1, str_0, tuple_1)
    str_2 = leaf_0.__repr__()

def test_case_18():
    int_0 = 36
    int_1 = 264
    str_0 = 'q'
    int_2 = (int_0, int_1)
    var_0 = (str_0, int_2)
    leaf_0 = module_0.Leaf(int_0, str_0, var_0)
    optional_0 = leaf_0.get_lineno()
    leaf_1 = [leaf_0]
    node_0 = module_0.Node(int_1, leaf_1)
    optional_1 = node_0.get_lineno()

def test_case_19():
    int_0 = 2701
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    str_0 = node_0.get_suffix()

def test_case_20():
    list_0 = []
    int_0 = 1415
    str_0 = None
    leaf_pattern_0 = module_0.LeafPattern(str_0)
    node_pattern_0 = module_0.NodePattern(int_0, list_0)

def test_case_21():
    str_0 = "C9{'1>lw"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bytes_0 = b''
    bool_0 = wildcard_pattern_0.match_seq(bytes_0)

def test_case_22():
    var_0 = []
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = [int_0, int_1, int_2]
    iterator_0 = module_0.generate_matches(var_0, int_3)
    var_1 = [result for result in iterator_0]

def test_case_23():
    str_0 = ','
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    list_0 = []
    set_0 = set()
    bool_0 = wildcard_pattern_0.match_seq(list_0, set_0)

def test_case_24():
    str_0 = '|\\h\n, `:'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    int_0 = 219
    any_0 = wildcard_pattern_0.optimize()
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    grammar_0 = module_1.Grammar()
    list_0 = []
    str_1 = 'g>GQ'
    str_2 = leaf_0.__repr__()
    var_0 = leaf_pattern_0.match(leaf_0, grammar_0)
    list_1 = [leaf_0, leaf_1]
    int_1 = 1038
    node_0 = module_0.Node(int_1, list_1, str_1)
    int_2 = -1649
    node_1 = node_0.clone()
    node_1.insert_child(int_2, leaf_1)
    node_0.invalidate_sibling_maps()
    bool_0 = wildcard_pattern_0.match_seq(list_0)
    str_3 = leaf_1.get_suffix()