# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 5
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'NgC;>Xy7'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 3940
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, any_0, str_0)
        list_1 = [node_0, node_0, node_0]
        list_2 = [any_0]
        node_1 = module_0.Node(int_0, list_1, list_2)
    except BaseException:
        pass

def test_case_3():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1419
        list_0 = [int_0]
        node_pattern_0 = module_0.NodePattern(int_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 827
        wildcard_pattern_0 = module_0.WildcardPattern(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 500.3704204994486
        str_0 = None
        str_1 = '8 ocM9tSexk\n`6'
        dict_0 = {str_0: str_0, str_0: float_0, str_1: str_1, str_1: str_0}
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match_seq(dict_0)
        int_0 = 157
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_0, int_0)
        bool_1 = wildcard_pattern_0.match_seq(float_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -1229
        str_0 = 's4j#6x'
        int_1 = -4137
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        str_1 = 'bare_name'
        tuple_2 = (int_0, str_0, tuple_1, str_1)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 1241
        str_0 = 'GG'
        tuple_0 = None
        tuple_1 = ()
        tuple_2 = (int_0, str_0, tuple_0, tuple_1)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -1610
        str_0 = ''
        leaf_0 = module_0.Leaf(int_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 877
        list_0 = []
        int_1 = 2797
        node_0 = module_0.Node(int_1, list_0)
        str_0 = node_0.__str__()
        any_0 = None
        node_1 = module_0.Node(int_0, list_0, any_0)
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_11():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 59
        str_0 = '^u [1-6L`KvmWh'
        leaf_0 = module_0.Leaf(int_0, str_0)
        var_0 = leaf_pattern_0.match(leaf_0, int_0)
        var_1 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -387
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        base_pattern_0 = leaf_pattern_0.optimize()
        str_0 = base_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'B'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = True
        int_1 = -1806
        wildcard_pattern_1 = module_0.WildcardPattern(int_0, int_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '9{E11>lt'
        int_0 = 256
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        float_0 = -115.32073
        bool_0 = wildcard_pattern_0.match(float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '.8Cig;i@'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = wildcard_pattern_0.match(negated_pattern_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 3493
        negated_pattern_0 = module_0.NegatedPattern()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        negated_pattern_1 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        bool_0 = negated_pattern_1.match(leaf_pattern_0)
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 1435
        grammar_0 = module_1.Grammar()
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(grammar_0, int_0)
        list_0 = [int_0, int_0]
        node_pattern_0 = module_0.NodePattern(int_0, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = "C9{'11i>lCw"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '~t~<%5C:'
        int_0 = 70
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 1258
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        str_0 = node_1.__str__()
        node_0.set_child(int_0, node_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '~t~<%5C:'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_23():
    try:
        leaf_0 = None
        int_0 = 3505
        str_0 = '\t'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, str_0)
        node_1 = node_0.clone()
        node_2 = node_0.clone()
        node_3 = node_2.clone()
        node_4 = node_2.clone()
        iterator_0 = node_4.pre_order()
        negated_pattern_0 = module_0.NegatedPattern(leaf_0)
        negated_pattern_1 = module_0.NegatedPattern(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'R'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = -2955
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 3493
        str_0 = '\t'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        node_0 = None
        int_0 = 1258
        list_0 = []
        node_1 = module_0.Node(int_0, list_0)
        node_1.insert_child(int_0, node_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = "C9{'11i>lCw"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bytes_0 = b''
        bool_0 = wildcard_pattern_0.match_seq(bytes_0)
        int_0 = 1748
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ','
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        negated_pattern_0 = module_0.NegatedPattern()
        list_0 = []
        any_0 = wildcard_pattern_0.optimize()
        set_0 = set()
        bool_0 = wildcard_pattern_0.match_seq(list_0, set_0)
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 2293
        list_1 = []
        node_0 = module_0.Node(int_0, list_1, str_0)
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '3`r1|f0N/lq=h.V#>B'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        base_pattern_0 = None
        int_0 = 1565
        int_1 = 2438
        list_0 = []
        node_0 = module_0.Node(int_1, list_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        list_1 = [node_2, node_0, node_1]
        node_3 = module_0.Node(int_0, list_1, any_0)
        node_4 = node_3.clone()
        node_5 = node_4.clone()
        bool_0 = wildcard_pattern_0.match_seq(base_pattern_0, node_5)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 3493
        list_0 = []
        str_0 = '\t'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        node_0 = module_0.Node(int_0, list_0, any_0, var_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_1.clone()
        node_3.insert_child(int_0, node_0)
        int_1 = -776
        var_1 = module_0.type_repr(int_1)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 936
        int_1 = 1541
        int_2 = 31
        str_0 = 'bNf]\x0c'
        dict_0 = None
        leaf_0 = module_0.Leaf(int_2, str_0, dict_0)
        list_0 = [leaf_0]
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        str_1 = 'T\\rY\x0cM{MOI'
        node_0 = module_0.Node(int_1, list_0, any_0, str_1)
        list_1 = [node_0, node_0, leaf_0]
        list_2 = [list_0]
        node_1 = module_0.Node(int_0, list_1, list_2)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 783
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = '~t~<%5C:'
        int_0 = 71
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        str_1 = None
        str_2 = 'IJ'
        leaf_0 = module_0.Leaf(int_0, str_2, str_1)
        leaf_1 = leaf_0.clone()
        var_0 = leaf_pattern_0.match(leaf_1)
        int_1 = 3264
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_1, int_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = None
        negated_pattern_0 = module_0.NegatedPattern()
        str_1 = '[4~Cl&'
        int_0 = 90
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_0, int_0)
        grammar_0 = module_1.Grammar()
        list_0 = [str_1]
        leaf_0 = module_0.Leaf(int_0, str_0, str_0, list_0)
        bool_0 = wildcard_pattern_0.match(leaf_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 1
        str_0 = 'a'
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.leaves()
        var_0 = list(iterator_0)
        int_1 = 2
        leaf_1 = [leaf_0]
        node_0 = module_0.Node(int_1, leaf_1)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '~t~<%5C:'
        int_0 = 41
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        base_pattern_0 = leaf_pattern_0.optimize()
        base_pattern_1 = base_pattern_0.optimize()
        str_1 = base_pattern_1.__repr__()
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 2701
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        str_0 = None
        leaf_pattern_0 = module_0.LeafPattern(str_0)
        str_1 = node_0.get_suffix()
        grammar_0 = module_1.Grammar()
        int_1 = 3160
        none_type_0 = None
        tuple_0 = (int_1, str_1, none_type_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 56
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        base_pattern_0 = leaf_pattern_0.optimize()
        int_1 = 9
        str_0 = 'Z^>>'
        list_0 = None
        leaf_0 = module_0.Leaf(int_1, str_0, list_0)
        var_0 = leaf_pattern_0.match(leaf_0)
        base_pattern_1 = leaf_pattern_0.optimize()
        str_1 = base_pattern_1.__repr__()
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = None
        list_0 = []
        leaf_pattern_0 = module_0.LeafPattern()
        base_pattern_0 = leaf_pattern_0.optimize()
        bool_0 = base_pattern_0.match_seq(list_0)
        str_0 = 'mlGMNf$lm`fyD^{FR`\x0bb'
        leaf_0 = module_0.Leaf(int_0, str_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = None
        str_0 = None
        int_1 = 576
        tuple_0 = (int_1, int_1)
        list_0 = []
        node_0 = module_0.Node(int_1, list_0, str_0)
        list_1 = [node_0]
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
        base_pattern_0 = leaf_pattern_0.optimize()
        bool_0 = base_pattern_0.match_seq(list_1)
        list_2 = [str_0, int_0, tuple_0]
        base_0 = module_0.Base(*list_2)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 18
        str_0 = 'd'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_0.replace(leaf_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '|poh\nF\r `c'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 219
        any_0 = wildcard_pattern_0.optimize()
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        leaf_0 = module_0.Leaf(int_0, str_0)
        base_pattern_0 = leaf_pattern_0.optimize()
        grammar_0 = module_1.Grammar()
        str_1 = leaf_0.__repr__()
        var_0 = leaf_pattern_0.match(leaf_0, grammar_0)
        bool_0 = wildcard_pattern_0.match(str_1)
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = 1
        str_0 = 'a'
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.post_order()
        var_0 = list(iterator_0)
        int_1 = 2
        leaf_1 = [leaf_0]
        node_0 = module_0.Node(int_1, leaf_1)
    except BaseException:
        pass

def test_case_44():
    try:
        int_0 = 1
        str_0 = 'a'
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.pre_order()
        var_0 = list(iterator_0)
        int_1 = -21
        leaf_1 = [leaf_0]
        node_0 = module_0.Node(int_1, leaf_1)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '~t~<%5C:'
        int_0 = 71
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        str_1 = None
        str_2 = 'IJ'
        leaf_0 = module_0.Leaf(int_0, str_2, str_1)
        leaf_1 = leaf_0.clone()
        var_0 = leaf_pattern_0.match(leaf_1)
        bytes_0 = b'Dh\x8d\xff\xaai&\xa0\x915\x01'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        bool_0 = wildcard_pattern_0.match(bytes_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = '|Opoh\nF\r ]gA`c'
        int_0 = 3247
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, str_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_2.invalidate_sibling_maps()
        leaf_pattern_0 = module_0.LeafPattern()
        base_pattern_0 = leaf_pattern_0.optimize()
        int_1 = node_2.depth()
        int_2 = node_1.depth()
        grammar_0 = module_1.Grammar()
        int_3 = 4073
        optional_0 = None
        tuple_0 = (int_3, str_0, optional_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass