# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        bool_0 = True
        var_0 = module_0.no_map_instance(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xe9"Q\xfc]\x9e@P\xb2'
        str_0 = '|B7|679\x0cE VI"F`}j-t'
        var_0 = module_0.no_map_instance(str_0)
        int_0 = 32768
        var_1 = module_0.no_map_instance(int_0)
        bytes_1 = b'\xea'
        var_2 = module_0.no_map_instance(bytes_1)
        dict_0 = {int_0: int_0}
        list_0 = module_0.reverse_map(dict_0)
        dict_1 = {}
        var_3 = module_0.no_map_instance(dict_1)
        str_1 = '}%-Tm\x0b'
        tuple_0 = (str_1,)
        var_4 = module_0.map_structure(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 's*#Uq'
        tuple_0 = (str_0,)
        var_0 = module_0.map_structure(tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        int_0 = -3807
        var_0 = None
        int_1 = 4
        dict_0 = {var_0: int_1}
        bool_1 = None
        module_0.register_no_map_class(bool_1)
        list_0 = module_0.reverse_map(dict_0)
        list_1 = module_0.reverse_map(dict_0)
        bytes_0 = b'y\xb8\xa1\x94\xa4A\xf7\xf9]\x19~^'
        var_1 = module_0.no_map_instance(bytes_0)
        dict_1 = {var_0: int_0, int_0: int_0, int_1: bool_0}
        var_2 = module_0.map_structure(bytes_0, dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Range'
        set_0 = {str_0, str_0}
        str_1 = 'wb'
        var_0 = module_0.no_map_instance(str_1)
        int_0 = -3476
        list_0 = [set_0]
        var_1 = module_0.map_structure(int_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        var_0 = module_0.map_structure(bool_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'@\x94\xfd6'
        list_0 = [bytes_0, bytes_0, bytes_0]
        var_0 = module_0.map_structure_zip(bytes_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 8192
        bool_0 = True
        tuple_0 = (int_0,)
        bytes_0 = b'\xcd\xfc\x9a\xbd\x83S(\xff\xb2\x02m:sc'
        str_0 = 'Convenience function to log an exception using the logging interface.\n\n    :param e: The exception instance.\n    :param user_msg: An optional user message to print.\n    :param kwargs: Additional arguments for :func:`~flutes.log.log`.\n    '
        tuple_1 = (tuple_0, tuple_0, bytes_0, str_0)
        var_0 = module_0.map_structure_zip(bool_0, tuple_1)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        str_0 = 'w,'
        var_0 = module_0.no_map_instance(str_0)
        set_0 = None
        var_1 = module_0.map_structure(set_0, dict_0)
        bytes_0 = b'\xc8\x02\xe4O"\x0c\xd3i.\x9c'
        tuple_0 = (list_0, bytes_0, bytes_0)
        var_2 = module_0.map_structure_zip(bytes_0, tuple_0)
        type_0 = None
        module_0.register_no_map_class(type_0)
        float_0 = 2703.85
        var_3 = module_0.map_structure(float_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        str_0 = 'ange'
        set_0 = {str_0, str_0}
        str_1 = '>\x0b'
        var_0 = module_0.no_map_instance(str_1)
        int_0 = -3476
        list_1 = []
        var_1 = module_0.map_structure(int_0, list_1)
        list_2 = [set_0, str_0, str_0]
        var_2 = module_0.map_structure_zip(set_0, list_2)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = set()
        list_0 = [set_0]
        list_1 = []
        var_0 = module_0.no_map_instance(list_1)
        var_1 = module_0.map_structure(list_0, set_0)
        dict_0 = {}
        list_2 = module_0.reverse_map(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xd2\xce@\xda\xfd\xa0\xc7\xa8*'
        dict_0 = {bytes_0: bytes_0}
        bytes_1 = b'+oB\x0b\x10\xdd\x08\xba\xba\x16\xba\x05\x07\x7f\x82\x8a`{\xe7p'
        list_0 = [dict_0, bytes_1, bytes_0]
        var_0 = module_0.map_structure_zip(dict_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = [int_0, int_1, int_2]
        int_4 = 5
        int_5 = [int_1, int_2, int_4]
        int_6 = [int_2, int_2, int_4]
        int_7 = 6
        int_8 = [int_3, int_4, int_7]
        int_9 = [int_5, int_6, int_8]
        int_10 = [int_2, int_4, int_4]
        int_11 = [int_0, int_4, int_7]
        int_12 = 7
        int_13 = [int_4, int_7, int_12]
        int_14 = [int_10, int_11, int_13]
        var_0 = print(int_3)
        var_1 = lambda x, y, z: x + y + z
        int_15 = (int_5, int_9, int_14)
        var_2 = module_0.map_structure_zip(var_1, int_15)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        list_1 = [dict_0, list_0, list_0, list_0]
        var_0 = module_0.map_structure_zip(list_0, list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'LY;vK\x05O\x02\xd9\xfb3\xca?\x19\xf4\x8d\xf9\x99'
        var_0 = module_0.no_map_instance(bytes_0)
        float_0 = -112.85084
        bytes_1 = b'\xacH\r+g|\xcb'
        int_0 = -939
        list_0 = [var_0, bytes_1, float_0, int_0]
        var_1 = module_0.map_structure_zip(int_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        str_0 = 'w,'
        var_0 = module_0.no_map_instance(str_0)
        set_0 = None
        var_1 = module_0.map_structure(set_0, var_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 8192
        bool_0 = True
        tuple_0 = (int_0,)
        int_1 = 5
        dict_0 = {bool_0: int_1, bool_0: tuple_0}
        list_0 = [dict_0]
        var_0 = module_0.map_structure_zip(int_1, list_0)
    except BaseException:
        pass