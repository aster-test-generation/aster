# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        str_0 = '\t+q\x0ct\n$[arl:5`'
        tuple_0 = module_0.encode(str_0)
        tuple_1 = module_0.encode(str_0, str_0)
        str_1 = None
        tuple_2 = module_0.encode(str_1, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'{Bs9y\xf2\x9e\x99l\x07k\xd9\xdb\xa6\x8b\x08\xdd\xceb'
        user_string_0 = module_1.UserString(bytes_0)
        tuple_0 = module_0.encode(user_string_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '!A:5!3L#3\\]c8%|/$V\x0cA'
        tuple_0 = module_0.encode(str_0, str_0)
        bytes_0 = b'"^\\8j\xca.9'
        tuple_1 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1701
        tuple_0 = module_0.decode(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        byte_string_0 = None
        tuple_0 = module_0.decode(byte_string_0)
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.register()
        byte_string_0 = None
        dict_0 = {}
        user_string_0 = module_1.UserString(dict_0)
        tuple_0 = module_0.decode(byte_string_0, user_string_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        tuple_0 = module_0.encode(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'B\xedG\x834\x83}4\x13\x97}"\xd9\xd5\xad'
        int_0 = 2
        user_string_0 = module_1.UserString(int_0)
        tuple_0 = module_0.decode(bytes_0, user_string_0)
    except BaseException:
        pass

def test_case_8():
    try:
        module_0.register()
        dict_0 = None
        str_0 = "A property decorator that is only computed once per instance and then\n    replaces itself with an ordinary attribute.\n\n    Deleting the attribute resets the property.\n\n    Note:\n        In Python 3.8 the :obj:`functools.cached_property` decorator was\n        added. It is recommended to use the built-in\n        :obj:`functools.cached_property`; provided you're using\n        Python >= 3.8.  :obj:`~flutils.decorators.cached_property` remains\n        for use with Python 3.6 and 3.7.\n\n    Example:\n\n        Code::\n\n            from flutils.decorators import cached_property\n\n            class MyClass:\n\n                def __init__(self):\n                    self.x = 5\n\n                @cached_property\n                def y(self):\n                    return self.x + 1\n\n        Usage:\n\n            >>> obj = MyClass()\n            >>> obj.y\n            6\n\n    *New in version 0.2.0*\n\n    This decorator is a derivative work of\n    `cached_property <https://bit.ly/2R9U3Qa>`__ and is:\n\n    `Copyright © 2015 Daniel Greenfeld; All Rights Reserved\n    <https://bit.ly/2CwtJM1>`__\n\n    Also this decorator is a derivative work of\n    `cached_property  <https://bit.ly/2JbYB5L>`__ and is:\n\n    `Copyright © 2011 Marcel Hellkamp <https://bit.ly/2ECEO0M>`__\n\n    "
        tuple_0 = module_0.encode(str_0)
        str_1 = 'C8Fa}cb\x0co]}c'
        tuple_1 = module_0.encode(str_1)
        byte_string_0 = None
        set_0 = {dict_0, dict_0, dict_0, byte_string_0}
        user_string_0 = module_1.UserString(set_0)
        tuple_2 = module_0.encode(user_string_0)
        str_2 = '))X9lTg3 +$j*Mc@_t$R'
        tuple_3 = module_0.encode(str_2)
        tuple_4 = module_0.encode(str_2)
        tuple_5 = module_0.decode(byte_string_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = None
        str_0 = 'C8Fa}cb\x0co]}c'
        tuple_0 = module_0.encode(str_0)
        byte_string_0 = None
        set_0 = {dict_0, dict_0, dict_0, byte_string_0}
        user_string_0 = module_1.UserString(set_0)
        tuple_1 = module_0.encode(user_string_0)
        str_1 = '))X9lTg3 +$j*Mc@_t$R'
        bytes_0 = b'\x08\xfa\xad\xc5"\x86\xea\x8f'
        user_string_1 = module_1.UserString(bytes_0)
        tuple_2 = module_0.encode(user_string_1, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        module_0.register()
        str_0 = 'eutf8h'
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass