# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        str_0 = 'p'
        bool_0 = False
        str_1 = '\n:,<+'
        tuple_0 = (str_1,)
        int_0 = 1844
        int_1 = -1866
        list_0 = [str_0, str_0, int_1]
        dict_0 = {}
        bytes_0 = b'\x13\xa3\xf6<'
        str_2 = 'The path to the directory containing your collections.'
        bool_1 = None
        int_2 = -1897
        prepend_list_action_0 = module_0.PrependListAction(str_2, bool_1, int_2)
        tuple_1 = (prepend_list_action_0,)
        float_0 = 2069.0
        ansible_version_0 = module_0.AnsibleVersion(tuple_1, tuple_1, float_0, list_0, dict_0, str_2, dict_0)
        float_1 = -1646.332
        unrecognized_argument_0 = module_0.UnrecognizedArgument(str_1, ansible_version_0, float_1)
        ansible_version_1 = module_0.AnsibleVersion(dict_0, bytes_0, unrecognized_argument_0, prepend_list_action_0, int_2)
        ansible_version_2 = module_0.AnsibleVersion(int_1, list_0, ansible_version_1, unrecognized_argument_0)
        var_0 = ansible_version_2.__call__(bool_0, tuple_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        bool_0 = False
        complex_0 = None
        bool_1 = False
        prepend_list_action_0 = module_0.PrependListAction(dict_0, bool_0, complex_0, bool_1, dict_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 2173
        str_0 = 'B0E5;ix3T7R$'
        str_1 = "\x0b7}xbx0-o^4<}r'$"
        prepend_list_action_0 = module_0.PrependListAction(int_0, str_0, str_1)
        bytes_0 = b'\x9eJ+F\x1f"f\x7f\xdf\xc3m\x03\xc6\xb4\xbe\xff\xaa\xd6\xc8'
        dict_0 = None
        set_0 = {bytes_0, prepend_list_action_0, int_0, int_0}
        var_0 = prepend_list_action_0.__call__(bytes_0, dict_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1394
        list_0 = None
        str_0 = '\t\\e6O\x0b;Pw&4t,(a'
        ansible_version_0 = module_0.AnsibleVersion(list_0, int_0, str_0)
        dict_0 = {int_0: list_0, list_0: ansible_version_0, ansible_version_0: list_0, str_0: ansible_version_0}
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, list_0, dict_0)
        bytes_0 = b'\xc6\xd3\t\xfe\x0e\x1f'
        dict_1 = {int_0: int_0, int_0: int_0, int_0: ansible_version_0, list_0: ansible_version_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(dict_1)
        str_1 = "}'"
        var_0 = module_0.ensure_value(sorting_help_formatter_0, str_1, bytes_0)
        var_1 = module_0.add_check_options(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 486
        bytes_0 = b'>'
        list_0 = []
        dict_0 = {int_0: bytes_0}
        float_0 = -2193.0
        bytes_1 = b'\x93'
        tuple_0 = (float_0,)
        sorting_help_formatter_0 = None
        complex_0 = None
        tuple_1 = (bytes_1, tuple_0, sorting_help_formatter_0, complex_0)
        var_0 = module_0.version(tuple_1)
        ansible_version_0 = module_0.AnsibleVersion(bytes_0, list_0, dict_0, float_0, bytes_0)
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, bytes_0, list_0)
        set_0 = set()
        bool_0 = False
        ansible_version_1 = module_0.AnsibleVersion(dict_0, set_0, bool_0, ansible_version_0)
        int_1 = 32600
        bool_1 = True
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(int_1, bool_1)
        var_1 = module_0.add_basedir_options(sorting_help_formatter_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1394
        var_0 = module_0.add_check_options(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = None
        var_0 = module_0.add_connect_options(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        bytes_0 = b'\x17\x07N'
        set_0 = None
        bytes_1 = b'\xd3=\xa4\x91\xb2\xe8!\xbf\x9d\x1cq\x9f&'
        ansible_version_0 = module_0.AnsibleVersion(bool_0, bytes_0, set_0, bytes_1)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(ansible_version_0)
        var_0 = module_0.add_inventory_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        var_0 = module_0.add_meta_options(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -667.207
        var_0 = module_0.add_module_options(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_version_0 = None
        var_0 = module_0.add_output_options(ansible_version_0)
    except BaseException:
        pass

def test_case_11():
    try:
        argument_parser_0 = module_1.ArgumentParser()
        var_0 = module_0.add_runas_prompt_options(argument_parser_0)
        var_1 = module_0.add_runas_prompt_options(argument_parser_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 264
        var_0 = module_0.add_runas_prompt_options(int_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        str_0 = "E'-hDI\\&si"
        argument_parser_0 = module_1.ArgumentParser(list_0, str_0, str_0)
        str_1 = 'fullclone'
        bool_1 = False
        list_1 = []
        str_2 = '<m;'
        dict_0 = {str_1: bool_1, str_0: list_0, str_2: bool_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(dict_0)
        var_0 = sorting_help_formatter_0.add_arguments(list_1)
        var_1 = module_0.add_runas_options(bool_1)
    except BaseException:
        pass

def test_case_14():
    try:
        argument_parser_0 = module_1.ArgumentParser()
        var_0 = module_0.add_runtask_options(argument_parser_0)
        float_0 = 1.0
        str_0 = 'pub'
        str_1 = 'lBLxsQ\r@/]H]}p\n?l;FW'
        dict_0 = {str_0: str_0, str_0: var_0, str_1: str_1}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_1)
        list_0 = [float_0, float_0]
        float_1 = None
        unrecognized_argument_0 = module_0.UnrecognizedArgument(float_0, dict_0, sorting_help_formatter_0, list_0, float_1, dict_0)
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(unrecognized_argument_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'V\n\x04\x9e(\x8a\xc9\xf6\xd7\x01'
        var_0 = module_0.add_async_options(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'The path to the directory containing your collections.'
        bool_0 = None
        int_0 = -1897
        prepend_list_action_0 = module_0.PrependListAction(str_0, bool_0, int_0)
        set_0 = set()
        var_0 = module_0.create_base_parser(set_0)
        var_1 = module_0.add_runas_options(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -2419
        str_0 = 'single_branch'
        str_1 = 'UKO'
        dict_0 = {str_0: str_0, str_0: int_0, str_1: int_0}
        dict_1 = {}
        set_0 = {str_0}
        str_2 = "\tJQP' 2\\d"
        list_0 = []
        str_3 = '\tq\x0c~sE 0H0{m'
        str_4 = 'action_plugins'
        dict_2 = {str_3: str_4}
        ansible_version_0 = None
        prepend_list_action_0 = module_0.PrependListAction(str_3, str_4, dict_2, ansible_version_0)
        tuple_0 = (list_0, prepend_list_action_0, prepend_list_action_0)
        int_1 = -2640
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(int_1)
        unrecognized_argument_0 = module_0.UnrecognizedArgument(str_2, tuple_0, sorting_help_formatter_0, ansible_version_0)
        var_0 = unrecognized_argument_0.__call__(int_0, dict_0, dict_1, set_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\xa0\x82\xee\xc2\t\t\xd6^#<\x88\xd4\xa7\x9d'
        var_1 = module_0.add_tasknoplay_options(bytes_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 486
        bytes_0 = b'>'
        dict_0 = {int_0: bytes_0}
        sorting_help_formatter_0 = None
        float_0 = -2993.49
        str_0 = '~PZJjA;K'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(sorting_help_formatter_0, float_0, str_0)
        bool_0 = False
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 486
        bytes_0 = b'>'
        list_0 = []
        dict_0 = {int_0: bytes_0}
        float_0 = -2193.0
        bytes_1 = b''
        float_1 = -1543.382950458087
        tuple_0 = (float_1,)
        sorting_help_formatter_0 = None
        complex_0 = None
        tuple_1 = (bytes_1, tuple_0, sorting_help_formatter_0, complex_0)
        var_0 = module_0.version(tuple_1)
        int_1 = None
        bytes_2 = b'%\xc7FU\x14P\xc60\x10xv\xd5Q\x8c'
        unrecognized_argument_0 = None
        float_2 = -770.9
        int_2 = 703
        var_1 = module_0.version()
        str_0 = "Manager for on-disk collection artifacts.\n\n    It is responsible for:\n        * downloading remote collections from Galaxy-compatible servers and\n          direct links to tarballs or SCM repositories\n        * keeping track of local ones\n        * keeping track of Galaxy API tokens for downloads from Galaxy'ish\n          as well as the artifact hashes\n        * caching all of above\n        * retrieving the metadata out of the downloaded artifacts\n    "
        argument_parser_0 = module_1.ArgumentParser(list_0, str_0, str_0, sorting_help_formatter_0)
        var_2 = module_0.add_module_options(argument_parser_0)
        ansible_version_0 = module_0.AnsibleVersion(float_2, list_0, sorting_help_formatter_0, unrecognized_argument_0, int_2, bytes_0, tuple_0)
        prepend_list_action_0 = module_0.PrependListAction(int_1, sorting_help_formatter_0, bytes_2, unrecognized_argument_0, ansible_version_0)
        ansible_version_1 = module_0.AnsibleVersion(bytes_0, list_0, dict_0, float_0, bytes_0)
        str_1 = "P?'R"
        float_3 = None
        unrecognized_argument_1 = None
        ansible_version_2 = module_0.AnsibleVersion(unrecognized_argument_1, tuple_1, str_1, tuple_1)
        unrecognized_argument_2 = module_0.UnrecognizedArgument(ansible_version_1, float_3, dict_0)
        var_3 = module_0.add_check_options(ansible_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 486
        bytes_0 = b'>'
        list_0 = []
        dict_0 = {int_0: bytes_0}
        float_0 = -2193.0
        bytes_1 = b''
        float_1 = -1544.710448181001
        tuple_0 = (float_1,)
        sorting_help_formatter_0 = None
        complex_0 = None
        tuple_1 = (bytes_1, tuple_0, sorting_help_formatter_0, complex_0)
        var_0 = module_0.version(tuple_1)
        ansible_version_0 = module_0.AnsibleVersion(bytes_0, list_0, dict_0, float_0, bytes_0)
        bytes_2 = b'\xc9-I\xbd\xc1hc\xba\xc5a0#\xc8\xd7\xc0\xcc\xa8V'
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, bytes_2, list_0)
        str_0 = "P?'R"
        float_2 = None
        str_1 = '\\4]0K])'
        var_1 = module_0.create_base_parser(str_1, sorting_help_formatter_0)
        unrecognized_argument_0 = None
        ansible_version_1 = module_0.AnsibleVersion(unrecognized_argument_0, tuple_1, str_0, tuple_1)
        unrecognized_argument_1 = module_0.UnrecognizedArgument(ansible_version_0, float_2, dict_0)
        bool_0 = False
        int_1 = 65001
        tuple_2 = (bool_0, bool_0, int_1)
        set_0 = {float_0, bytes_0, tuple_2}
        bytes_3 = b'-c\xf0b;Y\xe9I\xc9\xa0\xd2\xdf('
        ansible_version_2 = module_0.AnsibleVersion(str_0, bytes_3, float_0)
        str_2 = "DwF][2'm!\r3<I4cT"
        dict_1 = {str_2: prepend_list_action_0}
        str_3 = '/dev/dm-'
        argument_parser_0 = module_1.ArgumentParser(int_1, str_3, list_0)
        list_1 = [dict_1, argument_parser_0, tuple_0, argument_parser_0]
        argument_parser_1 = module_1.ArgumentParser(list_1, dict_1, complex_0, list_0)
        var_2 = module_0.add_runas_options(argument_parser_1)
        unrecognized_argument_2 = module_0.UnrecognizedArgument(set_0, ansible_version_2, set_0, sorting_help_formatter_0)
        bytes_4 = b'\xdc#\x9d'
        str_4 = ''
        prepend_list_action_1 = module_0.PrependListAction(set_0, bytes_4, str_4, ansible_version_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 80
        bytes_0 = b'>'
        list_0 = []
        dict_0 = {int_0: bytes_0}
        float_0 = -1543.382950458087
        tuple_0 = (float_0,)
        sorting_help_formatter_0 = None
        complex_0 = None
        tuple_1 = (bytes_0, tuple_0, sorting_help_formatter_0, complex_0)
        var_0 = module_0.version(tuple_1)
        unrecognized_argument_0 = None
        float_1 = -770.9
        ansible_version_0 = module_0.AnsibleVersion(float_1, list_0, sorting_help_formatter_0, unrecognized_argument_0, int_0, bytes_0, tuple_0)
        var_1 = module_0.unfrack_path()
        prepend_list_action_0 = module_0.PrependListAction(int_0, sorting_help_formatter_0, bytes_0, unrecognized_argument_0, ansible_version_0)
        unrecognized_argument_1 = module_0.UnrecognizedArgument(ansible_version_0, float_1, dict_0)
        str_0 = 'W!SkuF2hx`pe~'
        var_2 = module_0.ensure_value(ansible_version_0, str_0, str_0)
        str_1 = 'TTjw&q# _Hz)'
        int_1 = None
        dict_1 = {str_1: prepend_list_action_0, str_0: int_1}
        prepend_list_action_1 = module_0.PrependListAction(dict_1, tuple_0, str_0, sorting_help_formatter_0, prepend_list_action_0)
        argument_parser_0 = module_1.ArgumentParser(bytes_0, sorting_help_formatter_0, dict_0)
        var_3 = module_0.add_check_options(argument_parser_0)
        var_4 = ansible_version_0.__call__(complex_0, prepend_list_action_1, float_1)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 485
        bytes_0 = b'>'
        list_0 = []
        dict_0 = {int_0: bytes_0}
        float_0 = -1543.382950458087
        tuple_0 = (float_0,)
        sorting_help_formatter_0 = None
        complex_0 = None
        tuple_1 = (bytes_0, tuple_0, sorting_help_formatter_0, complex_0)
        var_0 = module_0.version(tuple_1)
        unrecognized_argument_0 = None
        float_1 = -770.9
        ansible_version_0 = module_0.AnsibleVersion(float_1, list_0, sorting_help_formatter_0, unrecognized_argument_0, int_0, bytes_0, tuple_0)
        prepend_list_action_0 = module_0.PrependListAction(int_0, sorting_help_formatter_0, bytes_0, unrecognized_argument_0, ansible_version_0)
        unrecognized_argument_1 = module_0.UnrecognizedArgument(ansible_version_0, float_1, dict_0)
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(list_0)
        str_0 = 'W!SkuF2hx`pe~'
        var_1 = module_0.ensure_value(ansible_version_0, str_0, str_0)
        var_2 = module_0.add_tasknoplay_options(sorting_help_formatter_1)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 2173
        str_0 = 'B0E5;ix3T7R$'
        str_1 = "\x0b7}xbx0-o^4<}r'$"
        prepend_list_action_0 = module_0.PrependListAction(int_0, str_0, str_1)
        bytes_0 = b'\x9eJ+F\x1f"f\x7f\xdf\xc3m\x03\xc6\xb4\xbe\xff\xaa\xd6\xc8'
        dict_0 = None
        str_2 = 'i'
        float_0 = -1722.1313
        list_0 = []
        bytes_1 = None
        str_3 = '\x0bWG7H<cc=^]xs*\x0b\t5'
        str_4 = 'U8OjsXm\nx Av\x0c\n4o+'
        str_5 = None
        dict_1 = {str_3: str_4, str_3: list_0, str_2: str_4, str_5: str_4}
        argument_parser_0 = module_1.ArgumentParser(list_0, bytes_1, bytes_1, dict_1)
        unrecognized_argument_0 = module_0.UnrecognizedArgument(float_0, argument_parser_0, bytes_1, bytes_1)
        set_0 = {str_3, prepend_list_action_0}
        var_0 = prepend_list_action_0.__call__(str_2, unrecognized_argument_0, set_0)
        set_1 = {bytes_0, prepend_list_action_0, int_0, int_0}
        var_1 = prepend_list_action_0.__call__(bytes_0, dict_0, set_1)
    except BaseException:
        pass