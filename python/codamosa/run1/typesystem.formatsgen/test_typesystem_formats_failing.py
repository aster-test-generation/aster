# Automatically generated by Pynguin.
import typesystem.formats as module_0
import uuid as module_1

def test_case_0():
    try:
        str_0 = '8nR=S'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_format_0 = module_0.BaseFormat()
        str_0 = '3w.$gC8uIvQy^e'
        bool_0 = base_format_0.is_native_type(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '().'
        base_format_0 = module_0.BaseFormat()
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(str_0)
        var_0 = base_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(list_0)
        bool_0 = False
        base_format_0 = module_0.BaseFormat()
        optional_1 = base_format_0.serialize(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-08-34'
        bool_0 = date_format_0.is_native_type(str_0)
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(date_format_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '%3\tLXnJ@'
        dict_0 = {str_0: str_0}
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(time_format_0)
        str_0 = '09:12:70'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        time_format_0 = module_0.TimeFormat()
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_9():
    try:
        time_format_0 = module_0.TimeFormat()
        var_0 = None
        optional_0 = time_format_0.serialize(var_0)
        str_0 = '12:12:12'
        optional_1 = time_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '2021-05-38T10:05:00-0800'
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Must nT<ot match.'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_1 = u_u_i_d_format_0.serialize(str_0)
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '9\x0bd3R}e#F-T'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Must not match.'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '28@020-08-34'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-08-34'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = 'ddd4ccdd-bf4c-4dd7-8e5c-0004f3d3c0aa'
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
        u_u_i_d_1 = module_1.UUID(str_0)
        str_1 = '55555555555555555555555555555555555'
        u_u_i_d_2 = u_u_i_d_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '09:12:70'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2021-06-08T12:00:00.0000000'
        date_format_0 = module_0.DateFormat()
        datetime_0 = date_time_format_0.validate(str_0)
        int_0 = 12
        optional_0 = date_format_0.serialize(datetime_0)
        optional_1 = date_time_format_0.serialize(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2021-05-38T10:05:00-0800'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-07-16T19:20:30Z'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2019-07-16T19:20:61Z'
        datetime_1 = date_time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_22():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2021-05-38T10:05:00-00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass