# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        dict_0 = {}
        list_0 = []
        rough_parser_0 = module_0.RoughParser(dict_0, list_0)
        var_0 = rough_parser_0.set_str(dict_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'UL@~cBEGS&~d5|SpO'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = 'W0706'
        rough_parser_0 = module_0.RoughParser(dict_0, str_1)
        var_0 = rough_parser_0.get_continuation_type()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        set_0 = set()
        rough_parser_0 = module_0.RoughParser(bool_0, set_0)
        var_0 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xb2\xaeZ\x1d\xd0\x9f*y%\xa9\xd5\xf1\xbe\x1d\x9ah\xb3\x85'
        int_0 = 1
        rough_parser_0 = module_0.RoughParser(bytes_0, int_0)
        var_0 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "_VzCEf'/<)\\c"
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        set_0 = set()
        var_0 = rough_parser_0.set_str(set_0)
        var_1 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'qJM\x0bkyi1A7QP7'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        dict_0 = {}
        var_0 = rough_parser_0.set_str(dict_0)
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 0.0
        int_0 = -6811
        dict_0 = {float_0: float_0, float_0: float_0, float_0: int_0}
        int_1 = 968
        hyper_parser_0 = module_0.HyperParser(dict_0, int_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        set_0 = set()
        rough_parser_0 = module_0.RoughParser(bool_0, set_0)
        str_0 = '|=>r^4YowDS'
        rough_parser_1 = module_0.RoughParser(rough_parser_0, str_0)
        complex_0 = None
        var_0 = rough_parser_1.set_lo(complex_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '$vIi&l}COiRJj'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        set_0 = set()
        var_0 = rough_parser_0.set_str(set_0)
        bool_0 = False
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.set_lo(bool_0)
        var_4 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "_VzCEf'/<)\\c"
        dict_0 = {str_0: str_0}
        list_0 = []
        rough_parser_0 = module_0.RoughParser(dict_0, list_0)
        str_1 = 'M- {*!$1k:t*1'
        var_0 = rough_parser_0.set_str(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        bool_0 = True
        list_1 = [bool_0, bool_0, list_0]
        rough_parser_0 = module_0.RoughParser(bool_0, list_1)
        var_0 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0}
        str_0 = ''
        bytes_0 = b''
        set_1 = {bool_0}
        rough_parser_0 = module_0.RoughParser(bytes_0, set_1)
        rough_parser_1 = module_0.RoughParser(str_0, rough_parser_0)
        hyper_parser_0 = module_0.HyperParser(rough_parser_1, set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'qJM\x0bkyi1A7QP7'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        dict_0 = {}
        var_0 = rough_parser_0.set_str(dict_0)
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'qJM\x0bkyi1A7QP7'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        dict_0 = {}
        var_0 = rough_parser_0.set_str(dict_0)
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.get_base_indent_string()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'qJM\x0bk;iy\\1A7QP7'
        dict_0 = {}
        dict_1 = {str_0: str_0, str_0: str_0}
        list_0 = [str_0]
        rough_parser_0 = module_0.RoughParser(dict_1, list_0)
        var_0 = rough_parser_0.set_str(dict_0)
        int_0 = -2855
        var_1 = rough_parser_0.find_good_parse_start(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'qJM\x0bky\\1A7QP7'
        float_0 = 0.6
        dict_0 = {str_0: str_0}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_0 = string_translate_pseudo_mapping_0.get(float_0)
        dict_1 = {}
        dict_2 = {str_0: str_0, str_0: str_0}
        list_0 = []
        rough_parser_0 = module_0.RoughParser(dict_2, list_0)
        var_1 = rough_parser_0.set_str(dict_1)
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '=#9{U/A\\*Q\n(?~Fr]JM'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        dict_0 = {}
        str_1 = 'Could not query builtin modules. Code completion may not work properly.'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_1)
        var_0 = rough_parser_0.set_str(string_translate_pseudo_mapping_0)
        var_1 = rough_parser_0.find_good_parse_start()
        int_0 = 2083
        var_2 = rough_parser_0.set_lo(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'qJM\x0bky\\1A7QP7'
        float_0 = 0.6
        dict_0 = {str_0: str_0}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_0 = string_translate_pseudo_mapping_0.get(float_0)
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        dict_1 = {}
        var_1 = string_translate_pseudo_mapping_0.__iter__()
        var_2 = rough_parser_0.set_str(dict_1)
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = {}
        list_0 = []
        rough_parser_0 = module_0.RoughParser(dict_0, list_0)
        str_0 = 'BS-Z4d\n'
        var_0 = rough_parser_0.set_str(str_0)
        str_1 = '0Spq(Mcdr&s]T@,0'
        float_0 = -944.12
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(str_1, float_0)
    except BaseException:
        pass