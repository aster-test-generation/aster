# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    try:
        register_0 = module_0.Register()
        str_0 = '2'
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        str_0 = '23#'
        list_0 = [str_0]
        style_0 = module_0.Style()
        list_1 = [style_0, list_0]
        style_1 = module_0.Style(*list_1)
        register_1 = module_0.Register()
        var_0 = register_1.__setattr__(str_0, style_1)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        register_0 = module_0.Register()
        str_0 = register_0.__call__()
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        register_0.set_eightbit_call(register_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        dict_0 = {}
        str_0 = register_0.__call__()
        str_1 = register_0.__call__()
        register_1 = register_0.copy()
        list_0 = None
        type_0 = None
        register_2 = register_1.copy()
        int_0 = 675
        register_0.set_renderfunc(type_0, int_0)
        str_2 = ', |KO7$W\tN!gf'
        str_3 = register_0.__call__()
        str_4 = '6F,mdH\x0b$`'
        register_0.mute()
        dict_1 = {str_2: register_0, str_4: dict_0}
        register_0.set_eightbit_call(type_0)
        style_0 = module_0.Style(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        var_0 = register_0.as_namedtuple()
        str_0 = register_0.__call__()
        type_0 = None
        register_0.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_0.unmute()
        str_0 = register_1.__call__()
        str_1 = ' CYK_Jp+l0"/u7M"*Qz!'
        list_0 = []
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_1, style_0)
        register_2 = module_0.Register()
        var_1 = register_0.as_namedtuple()
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_0.mute()
        dict_0 = register_0.as_dict()
        var_0 = register_0.as_namedtuple()
        str_0 = register_0.__call__()
        type_0 = None
        register_0.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Q7I'
        list_0 = [str_0]
        register_0 = module_0.Register()
        str_1 = register_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        str_0 = 'o4RI,;H7'
        list_0 = [register_0, register_0, register_0, str_0, str_0]
        dict_0 = {}
        style_0 = module_0.Style(*list_0, **dict_0)
        list_1 = [style_0, list_0, register_0]
        style_1 = module_0.Style(*list_1)
        var_0 = register_0.__setattr__(str_0, style_1)
    except BaseException:
        pass

def test_case_10():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        list_0 = []
        render_type_0 = module_1.RenderType(*list_0)
        list_1 = [render_type_0]
        style_0 = module_0.Style(*list_1)
        style_1 = module_0.Style()
        str_0 = 'T'
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass