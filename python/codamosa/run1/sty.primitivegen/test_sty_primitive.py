# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    pass

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    register_0 = module_0.Register()

def test_case_3():
    dict_0 = {}
    register_0 = module_0.Register()
    str_0 = register_0.__call__(**dict_0)

def test_case_4():
    register_0 = module_0.Register()
    register_0.mute()
    style_0 = module_0.Style()
    type_0 = None
    list_0 = [style_0, style_0]
    register_0.set_renderfunc(type_0, register_0)
    str_0 = 'Y(D>r\x0cB_IM'
    var_0 = register_0.__setattr__(str_0, style_0)
    register_0.set_rgb_call(type_0)
    register_0.set_renderfunc(type_0, list_0)
    register_0.unmute()

def test_case_5():
    register_0 = module_0.Register()
    register_0.unmute()
    dict_0 = register_0.as_dict()
    str_0 = 'SyFah13g:>O_"haXu'
    list_0 = [str_0, str_0]
    style_0 = module_0.Style(*list_0)
    register_1 = module_0.Register()
    register_0.mute()
    register_2 = register_0.copy()
    var_0 = register_0.__setattr__(str_0, style_0)

def test_case_6():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_1.unmute()

def test_case_7():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    var_0 = register_1.as_namedtuple()

def test_case_8():
    register_0 = module_0.Register()
    register_0.unmute()
    str_0 = "'}J|M?ktF;szo]\\x:yu'"
    list_0 = [str_0, str_0, str_0]
    str_1 = register_0.__call__(*list_0)
    var_0 = register_0.as_namedtuple()
    dict_0 = register_0.as_dict()

def test_case_9():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_1.unmute()
    str_0 = register_1.__call__()
    register_2 = module_0.Register()
    str_1 = '>b_ '
    style_0 = module_0.Style()
    var_0 = register_2.__setattr__(str_1, style_0)
    var_1 = register_1.as_namedtuple()
    register_2.unmute()
    register_2.mute()

def test_case_10():
    int_0 = 287
    list_0 = [int_0]
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    str_0 = register_2.__call__(*list_0)