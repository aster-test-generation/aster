# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xb3oZ\xd5\x05\x18\xaa\xb3\xd3\xf8'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1162
        float_0 = 512.0
        tuple_0 = (int_0, float_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        str_0 = 'AwHk1OE:0jvH<_3m'
        str_1 = "{'swap_allocatZed_mb': 'swap_allocatZed_mb'}"
        str_2 = '/9/<,XdYxCN+i\rO((7'
        dict_0 = {str_0: tuple_0, str_1: ansible_vault_encrypted_unicode_1, str_2: ansible_vault_encrypted_unicode_0, str_1: str_0}
        var_0 = ansible_vault_encrypted_unicode_1.__lt__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 420
        str_0 = ''
        str_1 = 'Amzn'
        str_2 = 'T\\Z\\}+V&]VI'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ty_-[G&\tT1>^|_ij\t1~U'
        dict_0 = {str_0: str_0}
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.format(**dict_0)
        dict_1 = {ansible_vault_encrypted_unicode_0: str_0}
        var_1 = ansible_vault_encrypted_unicode_0.__contains__(dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
        tuple_0 = (dict_0, dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        int_0 = 57
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_1.isalpha()
        var_1 = ansible_vault_encrypted_unicode_1.split()
        list_0 = [tuple_0, var_0]
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_2 = ansible_vault_encrypted_unicode_2.swapcase()
        var_3 = ansible_vault_encrypted_unicode_0.isupper()
        var_4 = ansible_vault_encrypted_unicode_0.isalpha()
        int_1 = -3345
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(int_1)
        var_5 = ansible_vault_encrypted_unicode_0.swapcase()
        var_6 = ansible_vault_encrypted_unicode_3.isnumeric()
        var_7 = ansible_vault_encrypted_unicode_3.__contains__(ansible_vault_encrypted_unicode_0)
        var_8 = ansible_vault_encrypted_unicode_0.isidentifier()
        ansible_unicode_0 = None
        var_9 = ansible_vault_encrypted_unicode_0.encode(ansible_unicode_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_mapping_0 = module_0.AnsibleMapping()
        list_0 = [ansible_mapping_0]
        str_0 = 'ansible_ssh_extra_args'
        str_1 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        ansible_mapping_1 = module_0.AnsibleMapping(*list_0, **dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_1)
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(ansible_unicode_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '-vM\x0c\n6([yDvA\x0cbi'
        str_1 = '/Kpq{['
        float_0 = -2196.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        var_1 = ansible_vault_encrypted_unicode_0.isspace()
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_2 = ansible_vault_encrypted_unicode_0.center(ansible_unicode_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'G\r4\n#;H,'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bytes_0 = b'\x86\xd2P\xf3\xd0'
        set_0 = {bytes_0, ansible_vault_encrypted_unicode_0}
        var_0 = ansible_vault_encrypted_unicode_0.count(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.format()
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = ()
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
        str_0 = 'x'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.index(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_mapping_0 = None
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.strip(ansible_mapping_0)
        list_0 = [ansible_vault_encrypted_unicode_0, bool_0, bool_0, ansible_vault_encrypted_unicode_0]
        str_0 = '[*-IN\ncPsk{}e0)b!/|*'
        str_1 = ' }QKY4hZ'
        str_2 = 'revert'
        dict_0 = {str_0: bool_0, str_1: var_0, str_2: str_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_1 = ansible_vault_encrypted_unicode_1.ljust(list_0, *list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'P\xdeG\xe3\xb4\xa6\x0c'
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.partition(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        ansible_sequence_0 = None
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.rjust(ansible_sequence_0)
    except BaseException:
        pass

def test_case_14():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = False
        list_0 = [ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 4385.2
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'ty_-[G&\tT1>^|_ij\t1~U'
        dict_0 = {str_0: str_0}
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.format(**dict_0)
        var_1 = ansible_vault_encrypted_unicode_0.splitlines()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_2 = ansible_vault_encrypted_unicode_0.__hash__()
        var_3 = ansible_vault_encrypted_unicode_1.islower()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_4 = ansible_vault_encrypted_unicode_2.zfill(ansible_unicode_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'JL5=\tGR/'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.startswith(ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_18():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        int_0 = -285
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_1 = ansible_vault_encrypted_unicode_1.format()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_2 = ansible_vault_encrypted_unicode_0.strip()
        var_3 = ansible_vault_encrypted_unicode_2.rindex(dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = '6IJC3%>p{\nd\\4,\x0b'
        str_1 = 'p<B=d@#R(N^'
        dict_0 = {str_0: ansible_base_y_a_m_l_object_0, str_0: ansible_base_y_a_m_l_object_0, str_1: ansible_base_y_a_m_l_object_0}
        str_2 = 'du8@\x0c,'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(dict_0)
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_1.title()
        var_2 = ansible_vault_encrypted_unicode_1.is_encrypted()
        list_0 = [ansible_base_y_a_m_l_object_0]
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
        var_3 = ansible_vault_encrypted_unicode_0.rfind(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        list_0 = [ansible_base_y_a_m_l_object_0]
        float_0 = -1574.229
        list_1 = [list_0, float_0]
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.__radd__(list_1)
        int_0 = -2265
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_2 = ansible_vault_encrypted_unicode_2.title()
        var_3 = ansible_vault_encrypted_unicode_1.isspace()
        var_4 = ansible_vault_encrypted_unicode_2.rfind(ansible_vault_encrypted_unicode_1)
    except BaseException:
        pass

def test_case_22():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = 'p<B=d@#R(N^'
        dict_0 = {str_0: ansible_base_y_a_m_l_object_0, str_0: ansible_base_y_a_m_l_object_0, str_0: ansible_base_y_a_m_l_object_0}
        str_1 = 'du8@\x0c,\r'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(dict_0)
        dict_1 = {ansible_vault_encrypted_unicode_0: dict_0, str_0: str_1}
        var_1 = ansible_vault_encrypted_unicode_0.format_map(dict_1)
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_2 = ansible_vault_encrypted_unicode_1.title()
        var_3 = ansible_vault_encrypted_unicode_1.is_encrypted()
        list_0 = [ansible_base_y_a_m_l_object_0]
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
        var_4 = ansible_vault_encrypted_unicode_1.upper()
        var_5 = ansible_vault_encrypted_unicode_1.upper()
        str_2 = '#pera05t'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_6 = ansible_vault_encrypted_unicode_3.replace(ansible_mapping_0, list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = '6IJC3%>p{\nd\\4,\x0b'
        str_1 = 'p<B=d@#R(N^'
        dict_0 = {str_0: ansible_base_y_a_m_l_object_0, str_0: ansible_base_y_a_m_l_object_0, str_1: ansible_base_y_a_m_l_object_0}
        str_2 = 'du8@\x0c,'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(dict_0)
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_1.title()
        var_2 = ansible_vault_encrypted_unicode_1.is_encrypted()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_3 = ansible_vault_encrypted_unicode_0.upper()
        var_4 = ansible_vault_encrypted_unicode_1.__add__(ansible_vault_encrypted_unicode_0)
        var_5 = ansible_vault_encrypted_unicode_0.__contains__(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '}&'
        bytes_0 = b'k\\!\x07\x80\x01\x81\xbf\xac\xfc-\xbd'
        list_0 = [str_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.join(bytes_0)
    except BaseException:
        pass

def test_case_25():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = '6IJC3%>p{\nd\\4,\x0b'
        str_1 = 'p<B=d@#R(N^'
        dict_0 = {str_0: ansible_base_y_a_m_l_object_0, str_0: ansible_base_y_a_m_l_object_0, str_1: ansible_base_y_a_m_l_object_0}
        str_2 = 'du8@\x0c,'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(dict_0)
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_1.title()
        var_2 = ansible_vault_encrypted_unicode_1.__gt__(ansible_vault_encrypted_unicode_1)
        var_3 = ansible_vault_encrypted_unicode_1.is_encrypted()
        str_3 = 'No host found'
        int_0 = -2991
        var_4 = ansible_vault_encrypted_unicode_1.upper()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        set_0 = {var_3, str_3, ansible_vault_encrypted_unicode_2, int_0}
        var_5 = ansible_vault_encrypted_unicode_1.__add__(set_0)
        list_0 = [str_0]
        var_6 = ansible_vault_encrypted_unicode_0.__contains__(list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        tuple_0 = ()
        list_1 = [tuple_0]
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_1)
        set_0 = {ansible_unicode_0, tuple_0, ansible_unicode_0, tuple_0}
        list_2 = [ansible_unicode_0, set_0, set_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, list_1]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_2)
        var_0 = ansible_vault_encrypted_unicode_0.find(list_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '1qOA_,L~/*'
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_mapping_1 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_1)
        var_0 = ansible_vault_encrypted_unicode_0.replace(str_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '6IHJC3%>p{\nd\\4,\x0b'
        str_1 = 'p<B=d@#R(N^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [str_1]
        tuple_0 = (list_0,)
        var_0 = ansible_vault_encrypted_unicode_0.replace(ansible_vault_encrypted_unicode_0, tuple_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = "U16''4T$t~"
        str_1 = '1P\\)4tu/je>tPGFy'
        str_2 = '}},s``l\\G'
        list_0 = [str_1, str_1, str_0, str_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__radd__(str_2)
        float_0 = 6347.0736
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_1.lstrip()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: ansible_vault_encrypted_unicode_1}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_2 = ansible_vault_encrypted_unicode_2.islower()
        ansible_mapping_0 = module_0.AnsibleMapping()
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = -493
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        str_0 = 'qH3y'
        dict_0 = {str_0: ansible_vault_encrypted_unicode_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(ansible_vault_encrypted_unicode_1)
        float_0 = -3098.56
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(float_0)
        var_2 = ansible_vault_encrypted_unicode_0.swapcase()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_3 = ansible_vault_encrypted_unicode_0.__str__()
        var_4 = ansible_vault_encrypted_unicode_0.__str__()
        int_1 = -767
        list_0 = [var_2, int_1, var_1]
        list_1 = [ansible_vault_encrypted_unicode_0, var_2, int_0, float_0]
        var_5 = ansible_vault_encrypted_unicode_0.replace(list_0, list_1)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'p<B=d@#R(N^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_1.title()
        var_1 = ansible_vault_encrypted_unicode_1.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_1.__le__(ansible_vault_encrypted_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_1.upper()
        var_4 = ansible_vault_encrypted_unicode_1.upper()
        str_1 = '#pera05t'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        bool_1 = False
        var_5 = ansible_vault_encrypted_unicode_2.count(bool_1)
    except BaseException:
        pass

def test_case_32():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bytes_0 = b'\x17 \xb4g+KG!\xff\xf5\x0b\xda\x8d\x0cC\xd8w\xb5'
        list_0 = [bytes_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = 'm?'
        str_1 = '=&*X~#y'
        int_0 = -1133
        dict_0 = {str_0: str_0, str_1: int_0}
        int_1 = -131
        set_0 = {int_1, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0}
        tuple_0 = (int_1, set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_1.replace(bytes_0, ansible_vault_encrypted_unicode_0, dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = 'p<B=d@#R(N^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [str_0]
        var_0 = ansible_vault_encrypted_unicode_0.find(ansible_vault_encrypted_unicode_0, list_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bytes_0 = b'$encrypted$'
        float_0 = -2890.75223954023
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(ansible_vault_encrypted_unicode_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        set_0 = {ansible_vault_encrypted_unicode_1, bytes_0, ansible_vault_encrypted_unicode_1}
        var_1 = ansible_vault_encrypted_unicode_0.__lt__(set_0)
    except BaseException:
        pass