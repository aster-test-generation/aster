# Automatically generated by Pynguin.
import isort.exceptions as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = 'W4vyOm@?=J`D02SX['
        unsupported_encoding_0 = module_0.UnsupportedEncoding(str_0)
        file_skipped_0 = module_0.FileSkipped(str_0, str_0)
        str_1 = 'BIg|B\x0ca!YRy$k9[\r'
        str_2 = None
        file_skip_setting_0 = module_0.FileSkipSetting(str_2)
        invalid_settings_path_0 = module_0.InvalidSettingsPath(str_1)
        list_0 = []
        type_0 = module_1.type(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'm*wC[PF~wX'
        file_skip_comment_0 = module_0.FileSkipComment(str_0)
        str_1 = 'TpOG:w&l6j6.F(>D'
        existing_syntax_errors_0 = module_0.ExistingSyntaxErrors(str_1)
        type_0 = module_1.type()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '_type_'
        file_skip_comment_0 = module_0.FileSkipComment(str_0)
        str_1 = 'Use the old deprecated finder logic that relies on environment introspection magic.'
        profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_1)
        invalid_settings_path_0 = module_0.InvalidSettingsPath(str_1)
        str_2 = "P(;'lL"
        dict_0 = {str_1: file_skip_comment_0, str_0: str_1, str_2: invalid_settings_path_0}
        str_3 = "'`h\t?f/G\rKLI9GK)"
        file_skipped_0 = module_0.FileSkipped(str_3, str_0)
        exception_0 = module_1.Exception(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'V(UJ}MS){?&X,9~\x0bsFt'
        list_0 = [str_0, str_0]
        dict_0 = {str_0: str_0, str_0: list_0}
        str_1 = '#qm0&v1`'
        file_skip_comment_0 = module_0.FileSkipComment(str_1)
        str_2 = '_[-\x0bqUjya\n'
        file_skipped_0 = module_0.FileSkipped(str_0, str_2)
        exception_0 = module_1.Exception()
        literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_0, exception_0)
        exception_1 = module_1.Exception(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ':OdyZ_~r\tQ_=?KyhKM@'
        str_1 = '-ac'
        str_2 = '&XTZ.'
        dict_0 = {str_0: str_1, str_1: str_2}
        dict_1 = {str_0: dict_0}
        unsupported_settings_0 = module_0.UnsupportedSettings(dict_1)
    except BaseException:
        pass