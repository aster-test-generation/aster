# Automatically generated by Pynguin.
import ansible.vars.manager as module_0
import ansible.inventory.host as module_1

def test_case_0():
    try:
        str_0 = 'C$b'
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.copy()
        var_1 = module_0.preprocess_vars(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        variable_manager_0 = module_0.VariableManager()
        list_0 = []
        var_0 = module_0.preprocess_vars(list_0)
        float_0 = 0.0
        var_1 = variable_manager_0.set_inventory(float_0)
        list_1 = []
        vars_with_sources_0 = module_0.VarsWithSources(*list_1)
        bytes_0 = b'mc\xe6,'
        str_0 = '7\n$gfINC5PQf1DV)"\\'
        dict_0 = {bytes_0: str_0, bytes_0: bytes_0, str_0: bytes_0}
        var_2 = variable_manager_0.set_host_facts(str_0, dict_0)
        var_3 = vars_with_sources_0.get_source(str_0)
        str_1 = None
        var_4 = variable_manager_0.set_host_facts(vars_with_sources_0, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        variable_manager_0 = module_0.VariableManager()
        tuple_0 = ()
        dict_0 = {tuple_0: variable_manager_0, variable_manager_0: tuple_0, tuple_0: tuple_0}
        float_0 = -3683.0
        var_0 = variable_manager_0.get_vars(dict_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{JIJC+e(Ys|-5&HdRc'
        list_0 = [str_0, str_0, str_0]
        bool_0 = False
        int_0 = 2179
        tuple_0 = (list_0, bool_0, int_0)
        bytes_0 = b''
        str_1 = '\n    author: Ansible Core Team\n    name: winrm\n    short_description: Run tasks over Microsoft\'s WinRM\n    description:\n        - Run commands or put/fetch on a target via WinRM\n        - This plugin allows extra arguments to be passed that are supported by the protocol but not explicitly defined here.\n          They should take the form of variables declared with the following pattern `ansible_winrm_<option>`.\n    version_added: "2.0"\n    extends_documentation_fragment:\n        - connection_pipelining\n    requirements:\n        - pywinrm (python library)\n    options:\n      # figure out more elegant \'delegation\'\n      remote_addr:\n        description:\n            - Address of the windows machine\n        default: inventory_hostname\n        vars:\n            - name: ansible_host\n            - name: ansible_winrm_host\n        type: str\n      remote_user:\n        description:\n            - The user to log in as to the Windows machine\n        vars:\n            - name: ansible_user\n            - name: ansible_winrm_user\n        type: str\n      remote_password:\n        description: Authentication password for the C(remote_user). Can be supplied as CLI option.\n        vars:\n            - name: ansible_password\n            - name: ansible_winrm_pass\n            - name: ansible_winrm_password\n        type: str\n        aliases:\n        - password  # Needed for --ask-pass to come through on delegation\n      port:\n        description:\n            - port for winrm to connect on remote target\n            - The default is the https (5986) port, if using http it should be 5985\n        vars:\n          - name: ansible_port\n          - name: ansible_winrm_port\n        default: 5986\n        type: integer\n      scheme:\n        description:\n            - URI scheme to use\n            - If not set, then will default to C(https) or C(http) if I(port) is\n              C(5985).\n        choices: [http, https]\n        vars:\n          - name: ansible_winrm_scheme\n        type: str\n      path:\n        description: URI path to connect to\n        default: \'/wsman\'\n        vars:\n          - name: ansible_winrm_path\n        type: str\n      transport:\n        description:\n           - List of winrm transports to attempt to use (ssl, plaintext, kerberos, etc)\n           - If None (the default) the plugin will try to automatically guess the correct list\n           - The choices available depend on your version of pywinrm\n        type: list\n        vars:\n          - name: ansible_winrm_transport\n      kerberos_command:\n        description: kerberos command to use to request a authentication ticket\n        default: kinit\n        vars:\n          - name: ansible_winrm_kinit_cmd\n        type: str\n      kinit_args:\n        description:\n        - Extra arguments to pass to C(kinit) when getting the Kerberos authentication ticket.\n        - By default no extra arguments are passed into C(kinit) unless I(ansible_winrm_kerberos_delegation) is also\n          set. In that case C(-f) is added to the C(kinit) args so a forwardable ticket is retrieved.\n        - If set, the args will overwrite any existing defaults for C(kinit), including C(-f) for a delegated ticket.\n        type: str\n        vars:\n          - name: ansible_winrm_kinit_args\n        version_added: \'2.11\'\n      kinit_env_vars:\n        description:\n        - A list of environment variables to pass through to C(kinit) when getting the Kerberos authentication ticket.\n        - By default no environment variables are passed through and C(kinit) is run with a blank slate.\n        - The environment variable C(KRB5CCNAME) cannot be specified here as it\'s used to store the temp Kerberos\n          ticket used by WinRM.\n        type: list\n        elements: str\n        default: []\n        ini:\n        - section: winrm\n          key: kinit_env_vars\n        vars:\n          - name: ansible_winrm_kinit_env_vars\n        version_added: \'2.12\'\n      kerberos_mode:\n        description:\n            - kerberos usage mode.\n            - The managed option means Ansible will obtain kerberos ticket.\n            - While the manual one means a ticket must already have been obtained by the user.\n            - If having issues with Ansible freezing when trying to obtain the\n              Kerberos ticket, you can either set this to C(manual) and obtain\n              it outside Ansible or install C(pexpect) through pip and try\n              again.\n        choices: [managed, manual]\n        vars:\n          - name: ansible_winrm_kinit_mode\n        type: str\n      connection_timeout:\n        description:\n            - Sets the operation and read timeout settings for the WinRM\n              connection.\n            - Corresponds to the C(operation_timeout_sec) and\n              C(read_timeout_sec) args in pywinrm so avoid setting these vars\n              with this one.\n            - The default value is whatever is set in the installed version of\n              pywinrm.\n        vars:\n          - name: ansible_winrm_connection_timeout\n        type: int\n'
        float_0 = 60.0
        variable_manager_0 = module_0.VariableManager(bytes_0, str_1, float_0)
        var_0 = variable_manager_0.clear_facts(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = ''
        bytes_0 = b'mc\xe6,'
        var_0 = variable_manager_0.set_host_variable(str_0, bytes_0, variable_manager_0)
        dict_0 = {bytes_0: str_0, bytes_0: bytes_0, str_0: bytes_0}
        var_1 = variable_manager_0.set_host_facts(str_0, dict_0)
        set_0 = {variable_manager_0}
        var_2 = variable_manager_0.set_nonpersistent_facts(set_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        set_0 = None
        int_0 = 1120
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.set_host_facts(set_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        variable_manager_0 = module_0.VariableManager()
        list_0 = []
        var_0 = module_0.preprocess_vars(list_0)
        list_1 = [list_0]
        vars_with_sources_0 = module_0.VarsWithSources(*list_1)
        str_0 = ''
        bytes_0 = b'mc\xe6,'
        str_1 = '7\n$gfINC5PQf1DV)"\\'
        dict_0 = {bytes_0: str_1, bytes_0: bytes_0, str_0: bytes_0}
        var_1 = variable_manager_0.__setstate__(vars_with_sources_0)
        var_2 = variable_manager_0.set_host_facts(str_1, dict_0)
        var_3 = variable_manager_0.set_nonpersistent_facts(list_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        variable_manager_0 = module_0.VariableManager()
        host_0 = module_1.Host()
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = variable_manager_0.set_nonpersistent_facts(vars_with_sources_0, vars_with_sources_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        str_0 = '7@)R5l=3'
        variable_manager_0 = module_0.VariableManager()
        str_1 = 'E~SfAc'
        str_2 = '#>mZt'
        str_3 = 'B=;lBp06UUCq~E]f`s'
        dict_0 = {str_0: variable_manager_0, str_1: bool_0, str_2: str_0, str_3: str_3}
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__setitem__(list_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__iter__()
        var_1 = vars_with_sources_0.__delitem__(vars_with_sources_0)
    except BaseException:
        pass

def test_case_11():
    try:
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__iter__()
        list_0 = []
        set_0 = set()
        variable_manager_0 = module_0.VariableManager(set_0)
        str_0 = '>AMMU:2'
        var_1 = variable_manager_0.set_host_facts(list_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.__getstate__()
        vars_with_sources_0 = module_0.VarsWithSources()
        var_1 = vars_with_sources_0.__len__()
        str_0 = '{'
        bytes_0 = b'mc\xe6,'
        var_2 = variable_manager_0.__getstate__()
        var_3 = variable_manager_0.set_host_variable(str_0, bytes_0, variable_manager_0)
        str_1 = 'Depsolve Error occurred for package {0}.'
        dict_0 = {bytes_0: str_1, bytes_0: bytes_0, str_0: bytes_0}
        var_4 = variable_manager_0.set_host_facts(str_1, dict_0)
        list_0 = [bytes_0, vars_with_sources_0, bytes_0]
        var_5 = vars_with_sources_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        str_0 = '*\rKyx[\nWc\\I'
        variable_manager_0 = None
        str_1 = 'X=BZc/"'
        str_2 = 'Could not find the requested service %s: %s'
        str_3 = "Ansible's max filter does not support any keyword arguments. You need Jinja2 2.10 or later that provides their version of the filter."
        str_4 = '8e+k)m78'
        bool_0 = False
        str_5 = '}<joZW2'
        int_0 = 33
        dict_1 = {str_1: str_2, str_3: str_1, str_4: bool_0, str_5: int_0}
        dict_2 = {str_0: variable_manager_0, str_0: dict_0, str_1: dict_0, str_2: dict_1}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_2)
        str_6 = ' [=e*Rfi'
        variable_manager_1 = module_0.VariableManager(str_6)
        var_0 = variable_manager_1.set_host_facts(dict_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        variable_manager_0 = module_0.VariableManager()
        list_0 = []
        var_0 = module_0.preprocess_vars(list_0)
        str_0 = ''
        bytes_0 = b'mc\xe6,'
        var_1 = variable_manager_0.set_host_variable(str_0, bytes_0, variable_manager_0)
        dict_0 = {bytes_0: str_0, bytes_0: bytes_0, str_0: bytes_0}
        set_0 = {variable_manager_0}
        var_2 = variable_manager_0.set_nonpersistent_facts(set_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = []
        bool_0 = True
        str_0 = 'i'
        dict_0 = {str_0: list_0}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_0)
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.set_nonpersistent_facts(str_0, vars_with_sources_0)
        vars_with_sources_1 = module_0.VarsWithSources()
        var_1 = vars_with_sources_1.get_source(bool_0)
        variable_manager_1 = module_0.VariableManager()
        var_2 = variable_manager_1.__getstate__()
        str_1 = '\x0c?,;]ks\x0b%z}'
        tuple_0 = (str_1,)
        var_3 = module_0.preprocess_vars(tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        variable_manager_0 = module_0.VariableManager()
        list_0 = []
        var_0 = module_0.preprocess_vars(list_0)
        list_1 = []
        vars_with_sources_0 = module_0.VarsWithSources(*list_1)
        str_0 = ''
        bytes_0 = b'mc\xe6,'
        var_1 = variable_manager_0.set_host_variable(str_0, bytes_0, variable_manager_0)
        str_1 = '7\n$gfINC5PQ1f1DV)"\\'
        dict_0 = {str_0: bytes_0}
        var_2 = module_0.preprocess_vars(dict_0)
        var_3 = variable_manager_0.set_host_facts(str_1, dict_0)
        set_0 = {variable_manager_0}
        vars_with_sources_1 = module_0.VarsWithSources()
        var_4 = vars_with_sources_1.copy()
        var_5 = variable_manager_0.set_nonpersistent_facts(set_0, dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = None
        var_0 = module_0.preprocess_vars(float_0)
        variable_manager_0 = module_0.VariableManager()
        var_1 = variable_manager_0.__getstate__()
        vars_with_sources_0 = module_0.VarsWithSources()
        bytes_0 = b''
        bytes_1 = None
        str_0 = 'Invalid repository string: %s'
        tuple_0 = (bytes_0, bytes_1, str_0, vars_with_sources_0)
        int_0 = -434
        float_1 = -1198.2
        dict_0 = {float_0: int_0, float_0: bytes_1}
        tuple_1 = (tuple_0, int_0, float_1, dict_0)
        str_1 = ''
        dict_1 = {str_0: tuple_0, str_1: float_0}
        var_2 = variable_manager_0.set_nonpersistent_facts(tuple_1, dict_1)
    except BaseException:
        pass

def test_case_18():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = ''
        bytes_0 = b'mc\xe6,'
        var_0 = variable_manager_0.set_host_variable(str_0, bytes_0, variable_manager_0)
        str_1 = 'isfifo'
        dict_0 = {bytes_0: str_1, bytes_0: bytes_0, str_0: bytes_0}
        var_1 = variable_manager_0.set_host_facts(str_1, dict_0)
        bool_0 = False
        var_2 = variable_manager_0.set_host_variable(str_0, bool_0, variable_manager_0)
        list_0 = None
        vars_with_sources_0 = module_0.VarsWithSources()
        dict_1 = None
        var_3 = variable_manager_0.set_nonpersistent_facts(list_0, dict_1)
    except BaseException:
        pass