# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        float_0 = -536.0509
        var_0 = module_0.check_mutually_exclusive(float_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xef\xb8\xb3>\x04u\x1d\x0e\x8f\xd3lo9T\xaf\x8f\x90\x93'
        set_0 = {bytes_0, bytes_0}
        var_0 = module_0.check_required_one_of(bytes_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = '.5CKxDz=kv7uq%&!'
        str_1 = 'O)/@98+0\t.H\ngV\x0bnlKu/'
        var_0 = module_0.check_required_arguments(bool_0, str_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '=sM"8U;ENz}M'
        var_0 = module_0.check_type_dict(str_0)
        str_1 = 'metadata_expire'
        int_0 = 366
        var_1 = module_0.check_required_if(str_1, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = None
        str_0 = '9'
        var_0 = module_0.check_required_if(bool_0, str_0)
        str_1 = '{~\x0bQ[}U3-?@7'
        var_1 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ' verify_commit=yes'
        tuple_0 = (str_0,)
        list_0 = [tuple_0]
        var_0 = module_0.check_missing_parameters(tuple_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        var_0 = module_0.check_type_list(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '9Me0|\t\\P\x0ck"E'
        int_0 = 776
        bytes_0 = b'\xb4\xbc\xd8\xb9b2'
        tuple_0 = (str_0, int_0, int_0, bytes_0)
        var_0 = module_0.check_type_dict(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '"%s.ps1"'
        var_0 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = None
        var_0 = module_0.check_type_bool(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        complex_0 = None
        var_0 = module_0.check_type_int(complex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '_@Yc3*0\x0cJqn\n'
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 1
        var_0 = module_0.check_type_int(int_0)
        str_0 = '1'
        var_1 = module_0.check_type_int(str_0)
        set_0 = {int_0, int_0, int_0, var_0}
        var_2 = module_0.check_type_bits(set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'tnt\r'
        var_0 = module_0.check_type_float(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        float_0 = -1308.662629
        var_0 = module_0.check_type_float(float_0)
        var_1 = module_0.check_type_bits(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 0.0
        var_0 = module_0.check_type_path(float_0)
        str_0 = '{O/P7arpOb7}'
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        var_0 = module_0.check_type_bytes(bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'Z7A6rc?OOqIpyCH'
        var_0 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 187.8
        int_0 = 2046
        set_0 = {float_0, float_0, float_0, int_0}
        var_0 = module_0.check_type_jsonarg(set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 782
        float_0 = -2866.881776
        var_0 = module_0.check_type_list(float_0)
        var_1 = module_0.check_type_bytes(int_0)
        tuple_0 = None
        var_2 = module_0.check_type_path(tuple_0)
        float_1 = -648.0
        var_3 = module_0.check_type_raw(float_1)
        var_4 = module_0.check_type_bool(float_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'a=b b=c'
        var_0 = module_0.check_type_dict(str_0)
        tuple_0 = ()
        var_1 = module_0.check_type_float(tuple_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'\xef\xb8\xb3>\x04u\x1d\x0e\x8f\xd3lo9T\xaf\x8f\x90\x93'
        set_0 = {bytes_0, bytes_0}
        float_0 = 1875.0
        str_0 = 'task_timeout'
        var_0 = module_0.check_type_path(str_0)
        var_1 = module_0.count_terms(float_0, bytes_0)
        var_2 = module_0.check_required_one_of(bytes_0, set_0)
    except BaseException:
        pass

def test_case_22():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0]
        var_0 = module_0.check_type_jsonarg(list_0)
        str_0 = '{O/P}arpOb7}'
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = True
        int_0 = 897
        tuple_0 = (bool_0, int_0)
        dict_0 = {int_0: tuple_0}
        var_0 = module_0.check_required_one_of(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        int_0 = None
        var_0 = module_0.safe_eval(list_0, int_0)
        str_0 = '{O/P}arpOb7}'
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = None
        int_0 = 12
        var_0 = module_0.check_required_one_of(str_0, int_0)
        str_1 = '{|*}U3O@7'
        var_1 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '"%s.ps1"'
        set_0 = {str_0}
        str_1 = ';[3Mi35Kd>'
        float_0 = None
        list_0 = [str_1, float_0]
        var_0 = module_0.check_required_one_of(set_0, list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        float_0 = None
        str_0 = 'ZJ%9mw'
        bool_0 = False
        var_0 = module_0.check_required_arguments(float_0, str_0, bool_0)
        str_1 = '{O/P}arpOb7}'
        var_1 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = True
        dict_0 = {}
        dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: dict_0, bool_0: bool_0}
        tuple_0 = ()
        var_0 = module_0.check_type_str(dict_1, tuple_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '">\tb<r'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '{O/arpOb"}'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        list_0 = None
        tuple_0 = None
        var_0 = module_0.check_required_by(list_0, tuple_0)
        bytes_0 = None
        bool_0 = None
        var_1 = module_0.check_required_if(bytes_0, bool_0)
        str_0 = 'z~^.5-Oydz)L6d_9y]\x0cU'
        var_2 = module_0.check_type_float(str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        bool_0 = False
        list_0 = [bool_0]
        var_0 = module_0.check_type_jsonarg(list_0)
        int_0 = None
        list_1 = [int_0, int_0, int_0, int_0]
        var_1 = module_0.check_type_list(list_1)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = None
        bool_0 = False
        var_0 = module_0.check_type_list(bool_0)
        int_0 = 12
        var_1 = module_0.check_required_one_of(str_0, int_0)
        str_1 = '{|*}U3O@7'
        var_2 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'key1'
        str_1 = 'key2'
        str_2 = 'value1'
        str_3 = 'value2'
        str_4 = {str_0: str_2, str_1: str_3}
        var_0 = module_0.check_required_by(str_4, str_4)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'Unit test for function check_required_by'
        str_1 = 'key1'
        str_2 = 'keyM3'
        str_3 = [str_0, str_2]
        str_4 = {str_1: str_3}
        var_0 = module_0.check_required_by(str_4, str_2)
        str_5 = [str_0, str_2]
        str_6 = {str_1: str_5}
        str_7 = {str_1: str_6, str_2: str_0}
        var_1 = module_0.check_required_by(str_6, str_7)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = None
        var_0 = module_0.check_required_together(int_0, int_0)
        str_0 = '{O/P}arpOb7'
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '$lC/gc&r\rvs;J'
        list_0 = [str_0, str_0, str_0]
        str_1 = 'B2 $0(dqgdHU*4'
        bool_0 = True
        var_0 = module_0.check_required_together(list_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_38():
    try:
        bytes_0 = None
        bool_0 = None
        str_0 = 'AoO="\x0c\x0b\x0beQw'
        dict_0 = {bool_0: str_0, bool_0: bool_0, bool_0: str_0, bool_0: bytes_0}
        var_0 = module_0.check_missing_parameters(dict_0)
        var_1 = module_0.check_required_if(bytes_0, bool_0)
        str_1 = 'Test check_required_by function'
        str_2 = ''
        str_3 = '%'
        var_2 = module_0.check_required_one_of(bool_0, bytes_0)
        int_0 = 1
        var_3 = module_0.check_mutually_exclusive(bytes_0, str_2, int_0)
        bool_1 = False
        var_4 = module_0.check_type_bool(bool_1)
        str_4 = 'key'
        list_0 = [dict_0, str_3, str_1, str_4]
        str_5 = 'i'
        str_6 = ''
        var_5 = module_0.check_required_together(list_0, str_5, str_6)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'host'
        str_1 = 'ansible_user'
        str_2 = 'required'
        bool_0 = {}
        bool_1 = {str_2: bool_0}
        bool_2 = {str_0: bool_1, str_1: bool_0, str_1: bool_1}
        str_3 = '127.0.0.1'
        str_4 = {str_0: str_3, str_1: str_2}
        var_0 = module_0.check_required_arguments(bool_2, str_4, str_2)
        bool_3 = {str_2: bool_1}
        bool_4 = {str_2: bool_3}
        bool_5 = {str_0: bool_3, str_1: bool_4, str_2: bool_2}
        str_5 = {str_0: str_3}
        var_1 = module_0.check_required_arguments(bool_5, str_5, str_2)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 840
        dict_0 = {int_0: int_0}
        var_0 = module_0.check_type_dict(dict_0)
        tuple_0 = (dict_0, int_0)
        var_1 = module_0.check_type_raw(tuple_0)
        str_0 = 'G.l#?FQ35c?\\T]Lq2O'
        str_1 = "q%QOovR+M\r2QE'Ht"
        var_2 = module_0.check_required_together(str_0, str_1)
        var_3 = module_0.check_type_bool(dict_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = '=Z4e'
        str_1 = ''
        tuple_0 = None
        var_0 = module_0.check_required_if(str_1, tuple_0)
        list_0 = [str_0, str_1]
        var_1 = module_0.check_required_if(list_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'value1'
        str_1 = {str_0: str_0}
        var_0 = module_0.check_missing_parameters(str_1, str_1)
        bytes_0 = b'\xf3\x8f\xbbp\xe4\xec\xfc)S\xda\xefR9\xfc'
        var_1 = module_0.check_type_dict(bytes_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = '\\0HW]0>A~F=jBc*F(*P0'
        var_0 = module_0.check_type_dict(str_0)
        float_0 = 10.083789632742999
        var_1 = module_0.check_type_float(float_0)
        var_2 = module_0.check_required_arguments(str_0, str_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'state'
        bool_0 = True
        var_0 = [str_0, str_0, str_0, bool_0]
        int_0 = 99
        var_1 = [str_0, int_0, str_0]
        var_2 = [var_0, var_1]
        var_3 = {str_0: str_0, str_0: int_0, str_0: bool_0, str_0: str_0}
        var_4 = module_0.check_required_if(var_2, var_3)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'key1'
        str_1 = 'value1'
        str_2 = {str_0: str_1}
        str_3 = 'key2'
        str_4 = [str_3]
        var_0 = module_0.check_missing_parameters(str_2, str_4)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'state'
        bool_0 = True
        var_0 = [str_0, str_0, str_0, bool_0]
        int_0 = 99
        var_1 = [int_0, var_0, str_0]
        var_2 = [var_0, var_1]
        var_3 = {str_0: str_0, str_0: int_0, str_0: bool_0, str_0: str_0}
        var_4 = module_0.check_required_if(var_2, var_3)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'key1'
        str_1 = 'key2'
        str_2 = 'keyM3'
        str_3 = [str_1, str_2]
        str_4 = {str_0: str_3}
        str_5 = 'value1'
        str_6 = 'value2'
        str_7 = {str_0: str_5, str_1: str_6, str_2: str_1}
        var_0 = module_0.check_required_by(str_4, str_7)
        str_8 = [str_1, str_2]
        str_9 = {str_0: str_8}
        str_10 = {str_0: str_5, str_1: str_6}
        var_1 = module_0.check_required_by(str_9, str_10)
    except BaseException:
        pass

def test_case_48():
    try:
        bytes_0 = b'\xf6n\xf9\x99\xb6\x9b\xaf\r\xc9\x8f*\x84"D'
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '9Uk29\x0c|kXVKo(Zme8U'
        var_0 = module_0.check_required_together(list_0, str_0)
        str_1 = 'h,ns2s$ALB`/a'
        str_2 = '8]'
        int_0 = -1914
        var_1 = module_0.check_required_one_of(str_1, str_2, int_0)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = 'a'
        str_1 = {str_0: str_0}
        var_0 = module_0.safe_eval(str_0)
        str_2 = '37'
        list_0 = [var_0, str_1, var_0]
        var_1 = module_0.safe_eval(str_2, list_0)
        bytes_0 = b'l\xff\x85\x87\x1c\xea=aGG\xe2Ly'
        var_2 = module_0.check_type_dict(bytes_0)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = '{"a:Ob"}'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = '$lC/gc&r\rvs;J'
        list_0 = [str_0, str_0, str_0]
        str_1 = 'B2 $0(dqgdHU*4'
        bool_0 = False
        var_0 = module_0.check_required_together(list_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_52():
    try:
        var_0 = list()
        str_0 = 'key1'
        str_1 = 'key3'
        int_0 = 1
        int_1 = {str_0: int_0, str_1: int_0}
        str_2 = '=+0;Y'
        list_0 = [str_2, int_1]
        float_0 = -232.217986
        var_1 = module_0.check_mutually_exclusive(list_0, int_1, float_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = [str_0, str_1]
        str_3 = 'c'
        str_4 = 'd'
        str_5 = [str_2, str_2]
        int_0 = 1
        int_1 = 2
        int_2 = 4
        int_3 = {str_0: int_0, str_3: int_1, str_1: int_0, str_4: int_2}
        str_6 = 'foo'
        str_7 = 'bar'
        str_8 = 'baz'
        str_9 = [str_6, str_7, str_8]
        var_0 = module_0.check_mutually_exclusive(str_5, int_3, str_9)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = 'host'
        str_1 = 'ansible_user'
        str_2 = 'required'
        bool_0 = {}
        bool_1 = {str_2: bool_0}
        bool_2 = {str_0: bool_1, str_1: bool_0, str_1: bool_1}
        str_3 = '127.0.0.1'
        str_4 = {str_0: str_3, str_1: str_2}
        var_0 = module_0.check_required_arguments(bool_2, str_4, str_2)
        bool_3 = {str_2: bool_1}
        bool_4 = {str_2: bool_3}
        bool_5 = {str_0: bool_3, str_1: bool_4, str_2: bool_2}
        str_5 = {str_0: str_3}
        var_1 = None
        var_2 = module_0.check_required_arguments(bool_5, str_5, var_1)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = 'foo'
        str_1 = 'bar'
        str_2 = 'baz'
        str_3 = [str_0, str_1, str_2]
        int_0 = 1
        int_1 = 2
        int_2 = {str_0: int_0, str_1: int_1, str_2: int_1}
        str_4 = [str_3]
        var_0 = module_0.check_mutually_exclusive(str_4, int_2)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = 'extraneous'
        str_1 = 'foo'
        str_2 = 'bar'
        str_3 = [str_1, str_2]
        str_4 = {str_0: str_3}
        str_5 = {str_0: str_2}
        str_6 = [str_0]
        var_0 = module_0.check_required_by(str_4, str_5, str_6)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = 'x = 1'
        var_0 = module_0.safe_eval(str_0)
        str_1 = 'NotAFunction()'
        bool_0 = False
        var_1 = module_0.safe_eval(str_1, bool_0)
        str_2 = 'import mymodule'
        bool_1 = True
        var_2 = module_0.safe_eval(str_2, str_1, bool_1)
        bool_2 = True
        set_0 = set()
        bool_3 = False
        var_3 = module_0.check_required_together(set_0, bool_3)
        var_4 = module_0.safe_eval(str_2, bool_2)
        bytes_0 = b'<\xbeb\xfdc\x96wd\x13'
        var_5 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = 'd'
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = 4
        int_4 = {str_0: int_0, str_1: int_1, str_2: int_2, str_3: int_3}
        str_4 = [str_1, str_2, str_3]
        str_5 = [str_2, str_3]
        str_6 = [str_3]
        str_7 = {str_0: str_4, str_1: str_5, str_2: str_6}
        var_0 = None
        var_1 = {str_0: int_0, str_1: var_0}
        str_8 = [str_1]
        str_9 = [str_0]
        str_10 = {str_0: str_8, str_1: str_9}
        var_2 = module_0.check_required_by(str_7, int_4)
        var_3 = module_0.check_required_by(str_10, var_1)
    except BaseException:
        pass