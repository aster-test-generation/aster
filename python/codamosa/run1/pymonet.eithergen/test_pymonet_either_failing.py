# Automatically generated by Pynguin.
import builtins as module_0
import pymonet.either as module_1

def test_case_0():
    try:
        object_0 = module_0.object()
        bytes_0 = b'\x88$B \xc2\xc5\xfa'
        str_0 = '_QBO4 (gW)\n0$Q+S'
        either_0 = module_1.Either(str_0)
        var_0 = either_0.case(object_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        list_0 = [bool_0]
        either_0 = module_1.Either(bool_0)
        var_0 = either_0.ap(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        bytes_0 = b'\x8e\x8a\xee\xaf\xce\xaf>\xe1\xf0\xc7\xf6\xa4e'
        right_0 = module_1.Right(bytes_0)
        var_0 = right_0.map(callable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -508.6622
        list_0 = [float_0, float_0, float_0]
        str_0 = 'o( <FEYgT<ND}nc71'
        str_1 = '\n        :returns: Copy of self\n        :rtype: Left[A]\n        '
        str_2 = '\n    First is a Monoid that will always return the first, value when 2 First instances are combined.\n    '
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_1: str_2}
        right_0 = module_1.Right(dict_0)
        var_0 = right_0.bind(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = None
        either_0 = module_1.Either(float_0)
        var_0 = None
        right_0 = module_1.Right(var_0)
        callable_0 = None
        var_1 = right_0.case(callable_0, callable_0)
    except BaseException:
        pass