# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    set_0 = None
    left_0 = module_0.Left(set_0)

def test_case_2():
    object_0 = module_1.object()
    bool_0 = False
    bytes_0 = b'\xae~\x1f\x91\xcerH\n\\\x10\ra\xd2\xad\x15n\x89\x1b\x10\xc8'
    list_0 = [bool_0, bytes_0, bool_0, bytes_0]
    either_0 = module_0.Either(list_0)
    either_1 = module_0.Either(either_0)
    bool_1 = either_1.__eq__(object_0)

def test_case_3():
    complex_0 = None
    bytes_0 = None
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    left_0 = module_0.Left(dict_0)
    var_0 = left_0.bind(complex_0)
    either_0 = module_0.Either(var_0)
    object_0 = module_1.object()
    int_0 = None
    tuple_0 = (either_0, object_0, int_0)
    either_1 = module_0.Either(tuple_0)
    var_1 = either_1.to_box()

def test_case_4():
    str_0 = None
    str_1 = '\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        '
    str_2 = ''
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_2: str_0}
    object_0 = module_1.object()
    bytes_0 = b'\xbc\x8d;q\x14I\xcc\xf3\x1a\xd1\x92!H\x942\x8f'
    str_3 = '[=pOQA2_54&r`\n |'
    left_0 = module_0.Left(str_3)
    var_0 = left_0.map(bytes_0)
    either_0 = module_0.Either(var_0)
    var_1 = either_0.to_try()
    float_0 = -1993.245647
    either_1 = module_0.Either(float_0)
    bool_0 = either_1.__eq__(object_0)
    str_4 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: Min[B]\n        :returns: new Min with smallest value\n        :rtype: Min[A | B]\n        '
    either_2 = module_0.Either(str_4)
    bool_1 = either_2.__eq__(object_0)
    right_0 = module_0.Right(dict_0)
    bool_2 = right_0.is_right()
    bool_3 = True
    bool_4 = True
    set_0 = {bool_4}
    list_0 = []
    tuple_0 = (bool_3, bool_4, set_0, list_0)
    left_1 = module_0.Left(tuple_0)
    bool_5 = left_1.is_left()

def test_case_5():
    str_0 = '2cd7r6Ojv%W2uA}_==W<'
    either_0 = module_0.Either(str_0)
    object_0 = None
    var_0 = either_0.to_lazy()
    float_0 = -2340.458722
    left_0 = module_0.Left(float_0)
    var_1 = left_0.to_validation()
    bytes_0 = b'\xb1\x18D\xbd\x80w\x96!I\xb8\xbe\x0c\x0cfj'
    str_1 = '\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        '
    bool_0 = either_0.__eq__(object_0)
    left_1 = module_0.Left(str_1)
    var_2 = left_1.ap(bytes_0)

def test_case_6():
    bytes_0 = b'\xe3\xcc\x81t'
    float_0 = -670.0
    left_0 = module_0.Left(float_0)
    var_0 = left_0.map(bytes_0)

def test_case_7():
    bytes_0 = b'\xff\x1ci%\xe7\xe9_\x05\x8c\xbc\xbc\x08\xeb'
    left_0 = module_0.Left(bytes_0)
    left_1 = module_0.Left(left_0)
    int_0 = 1454
    either_0 = module_0.Either(int_0)
    var_0 = either_0.is_right()
    list_0 = [left_0, left_0]
    var_1 = left_1.bind(list_0)

def test_case_8():
    str_0 = 'p'
    either_0 = None
    dict_0 = {str_0: str_0, str_0: str_0, either_0: str_0}
    left_0 = None
    tuple_0 = (left_0,)
    left_1 = module_0.Left(tuple_0)
    var_0 = left_1.ap(dict_0)

def test_case_9():
    list_0 = []
    left_0 = module_0.Left(list_0)
    var_0 = None
    either_0 = module_0.Either(var_0)
    var_1 = left_0.to_validation()
    callable_0 = None
    var_2 = left_0.map(callable_0)
    var_3 = left_0.map(callable_0)
    bool_0 = left_0.is_left()

def test_case_10():
    str_0 = None
    str_1 = "j=DU0'xz0[\x0c"
    dict_0 = {str_0: str_0, str_1: str_1}
    right_0 = module_0.Right(dict_0)
    right_1 = module_0.Right(right_0)
    var_0 = right_1.to_validation()
    str_2 = 'RarR!ex,$9[UZr-'
    right_2 = module_0.Right(str_2)
    float_0 = -3661.822
    left_0 = module_0.Left(float_0)
    left_1 = module_0.Left(left_0)
    bool_0 = left_1.is_right()
    var_1 = right_2.to_validation()
    bool_1 = right_2.is_left()

def test_case_11():
    int_0 = -1148
    left_0 = module_0.Left(int_0)
    bool_0 = left_0.is_left()
    bool_1 = left_0.is_left()
    bool_2 = left_0.is_right()
    var_0 = left_0.to_maybe()
    right_0 = module_0.Right(left_0)
    bytes_0 = b"\xe8)'"
    dict_0 = None
    var_1 = left_0.map(dict_0)
    var_2 = left_0.bind(bytes_0)
    right_1 = module_0.Right(left_0)
    bool_3 = right_0.is_left()
    var_3 = right_0.to_maybe()
    bool_4 = right_0.is_left()

def test_case_12():
    set_0 = set()
    left_0 = module_0.Left(set_0)
    var_0 = left_0.to_validation()

def test_case_13():
    bool_0 = False
    float_0 = 1101.397075
    list_0 = [float_0]
    either_0 = module_0.Either(list_0)
    right_0 = module_0.Right(either_0)
    left_0 = module_0.Left(right_0)
    var_0 = left_0.ap(bool_0)
    str_0 = '\n        Returns successful Validation with value and empty errors list.\n\n        :params value: value to store in Validation\n        :type value: A\n        :returns: Successful Validation\n        :rtype: Validation[A, []]\n        '
    right_1 = module_0.Right(str_0)
    var_1 = right_1.to_maybe()
    bool_1 = right_1.is_right()

def test_case_14():
    int_0 = 1
    either_0 = module_0.Either(int_0)
    either_1 = module_0.Either(int_0)
    int_1 = 2
    either_2 = module_0.Either(int_1)
    var_0 = None
    either_3 = module_0.Either(var_0)
    right_0 = module_0.Right(int_0)
    right_1 = module_0.Right(int_0)
    right_2 = module_0.Right(int_1)
    right_3 = module_0.Right(var_0)
    either_4 = module_0.Either(int_0)
    either_5 = module_0.Either(int_0)
    either_6 = module_0.Either(int_1)
    either_7 = module_0.Either(var_0)
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    left_2 = module_0.Left(int_1)
    left_3 = module_0.Left(var_0)
    var_1 = either_0 == either_2
    var_2 = either_0 == either_3
    var_3 = left_0 == right_0
    var_4 = right_0 == right_1