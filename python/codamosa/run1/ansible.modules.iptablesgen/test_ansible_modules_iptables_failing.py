# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        bytes_0 = None
        str_0 = 'a9==fTtQS'
        set_0 = set()
        dict_0 = {str_0: str_0, bytes_0: set_0}
        bool_0 = True
        str_1 = '7$Kp>4\t,\n^G\t\\<ClcB\x0c'
        tuple_0 = (str_1,)
        float_0 = None
        tuple_1 = (tuple_0, set_0, float_0, tuple_0)
        var_0 = module_0.append_param(str_0, dict_0, bool_0, tuple_1)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -1612
        complex_0 = None
        bytes_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0]
        var_0 = module_0.append_tcp_flags(int_0, complex_0, list_0)
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0}
        var_1 = module_0.construct_rule(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'n9~V95'
        bytes_0 = b'\xc8_$\xf2AE]o\x1amdG\xd5'
        set_0 = {bytes_0, bytes_0}
        bool_0 = None
        dict_0 = {bytes_0: set_0, str_0: bool_0}
        var_0 = module_0.append_csv(set_0, bool_0, dict_0)
        var_1 = module_0.construct_rule(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1238
        tuple_0 = None
        bool_0 = False
        bytes_0 = b'`\x9c\xaa\xa9\xe6\xaek\xa4B\xa5\xf0o#\xf67\xabJ\xf2\xaf'
        var_0 = module_0.append_wait(tuple_0, bool_0, bytes_0)
        tuple_1 = (int_0,)
        float_0 = -379.098248
        str_0 = 'T;U=q-[l"3'
        dict_0 = {tuple_1: int_0, int_0: float_0, int_0: str_0}
        list_0 = [str_0, tuple_1]
        float_1 = -506.5
        var_1 = module_0.append_csv(dict_0, list_0, float_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 408.8
        int_0 = None
        set_0 = {int_0}
        complex_0 = None
        tuple_0 = (int_0, set_0, complex_0)
        var_0 = module_0.append_match(float_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1238
        bool_0 = False
        tuple_0 = (int_0,)
        float_0 = -379.098248
        str_0 = 'T;U=q-[l"3'
        dict_0 = {tuple_0: int_0, int_0: float_0, int_0: str_0}
        bool_1 = None
        str_1 = 'JJfZk%bt8s")*'
        tuple_1 = (bool_0, bool_1, str_1, str_1)
        var_0 = module_0.append_jump(dict_0, tuple_1, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '6pzl+w'
        str_1 = 'u`y`xhJqr}G\n`'
        int_0 = 127
        var_0 = module_0.append_wait(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0}
        var_0 = module_0.construct_rule(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        float_0 = 3195.061297
        var_0 = module_0.get_chain_policy(str_0, str_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        bytes_0 = b''
        tuple_0 = ()
        var_0 = module_0.check_present(set_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        float_0 = -3455.95
        str_1 = '"b:q'
        var_0 = module_0.append_rule(str_0, float_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = None
        bool_0 = True
        bytes_0 = b'/\xe68\x97'
        set_0 = {bool_0, float_0, float_0}
        list_0 = [bytes_0, set_0, float_0]
        var_0 = module_0.insert_rule(bool_0, bytes_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -527
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        str_0 = 'k\x0ca{B\x0c_KJ&3\n ";9{'
        str_1 = '\x0b('
        var_0 = module_0.remove_rule(dict_0, str_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 1447.329
        bytes_0 = b'\x8d\xab\x01#\xd0\xa3\x00='
        str_0 = 'Unsupported repo module %s, choices are %s'
        str_1 = 'group %s already in inventory'
        var_0 = module_0.append_match_flag(bytes_0, str_0, str_1, float_0)
        complex_0 = None
        str_2 = 'A.gUG'
        int_0 = -4997
        list_0 = []
        tuple_0 = (str_2, int_0, list_0, complex_0)
        var_1 = module_0.flush_table(complex_0, tuple_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'F:'
        float_0 = -3962.28
        set_0 = {float_0, float_0}
        var_0 = module_0.set_chain_policy(str_0, float_0, set_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 1.5
        bytes_0 = b'k\xe6\x1f\x1b\xcf\xca'
        var_0 = module_0.get_iptables_version(float_0, bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = "CaEx\tq'7.v"
        dict_0 = None
        list_0 = []
        var_0 = module_0.append_param(str_0, dict_0, list_0, dict_0)
        float_0 = 1447.329
        bytes_0 = b'\x8d\xab\x01#\xd0\xa3\x00='
        str_1 = 'Unsupported repo module %s, choices are %s'
        str_2 = 'group %s already in inventory'
        var_1 = module_0.append_match_flag(bytes_0, str_1, str_2, float_0)
        bool_0 = False
        bytes_1 = b'S\xfe\x1e\xc7\xd7\xf2s\xd0\xf6\n\xd4\xe1'
        float_1 = -541.7346
        tuple_0 = (bool_0, float_0, bytes_1, float_1)
        var_2 = module_0.append_match(tuple_0, list_0, tuple_0)
        set_0 = {float_0, float_0}
        bytes_2 = b'n>4\xfb\x9a\x1e\x13\x1b\xcd\x87'
        list_1 = [bytes_2, set_0, float_0]
        set_1 = {float_0}
        var_3 = module_0.set_chain_policy(set_0, list_1, set_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'iptables'
        str_1 = '-I'
        str_2 = 'table'
        str_3 = 'chain'
        str_4 = 'ctstate'
        str_5 = 'protocol'
        str_6 = 'filter'
        bool_0 = True
        bool_1 = True
        var_0 = module_0.append_tcp_flags(bool_0, str_6, bool_1)
        str_7 = 'tcp'
        str_8 = {str_2: str_6, str_3: str_1, str_4: str_7, str_5: str_7}
        var_1 = module_0.push_arguments(str_0, str_1, str_8)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 66
        tuple_0 = ()
        str_0 = 'm$\x0cA$Dho\n\x0c\x0c*@0'
        set_0 = {tuple_0}
        var_0 = module_0.append_param(int_0, tuple_0, str_0, set_0)
        str_1 = 'WARNING: The below traceback may *not* be related to the actual failure.\n'
        str_2 = '+dDiXZ715]'
        dict_0 = {str_2: str_1, str_1: str_1}
        bytes_0 = b'$\xffX'
        var_1 = module_0.append_match_flag(str_1, str_2, dict_0, bytes_0)
        list_0 = [str_1]
        int_1 = 2309
        tuple_1 = (str_1, dict_0, list_0, int_1)
        set_1 = set()
        str_3 = None
        var_2 = module_0.set_chain_policy(tuple_1, set_1, str_3)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = []
        str_0 = '!ICMP'
        str_1 = '-p'
        bool_0 = True
        var_1 = module_0.append_param(var_0, str_0, str_1, bool_0)
        var_2 = []
        str_2 = 'ICMP'
        var_3 = module_0.append_param(var_2, str_2, str_1, bool_0)
        var_4 = []
        var_5 = None
        str_3 = '-m'
        var_6 = module_0.append_param(var_4, var_5, str_3, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = []
        str_0 = 'match'
        str_1 = '--match'
        bool_0 = False
        var_1 = module_0.append_match_flag(var_0, str_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '-I'
        str_1 = 'table'
        str_2 = 'chain'
        str_3 = 'protocol'
        str_4 = 'C\\\nxSGR[Pw$IDg,/s)uq'
        str_5 = {str_1: str_2, str_2: str_4, str_4: str_2, str_3: str_3}
        var_0 = module_0.push_arguments(str_0, str_0, str_5)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'H\x0c)\x0b+L9 /}*rC&'
        var_0 = dict(table=str_0, chain=str_0, policy=str_0)
        str_1 = '-P'
        bool_0 = True
        var_1 = module_0.push_arguments(str_0, str_1, var_0, bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'table'
        str_1 = 'chain'
        str_2 = 'INPUT'
        str_3 = {str_0: str_1, str_1: str_2}
        str_4 = 'iptables'
        var_0 = None
        var_1 = module_0.get_chain_policy(str_4, var_0, str_3)
    except BaseException:
        pass