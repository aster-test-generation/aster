# Automatically generated by Pynguin.
import ansible.plugins.shell.powershell as module_0

def test_case_0():
    try:
        shell_module_0 = module_0.ShellModule()
        list_0 = []
        var_0 = shell_module_0.join_path(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '%Y'
        dict_0 = {str_0: str_0}
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.get_remote_filename(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x8a\xce\xc1W\xa7l\x98\x11\xfa@\xd6\x94\xe6&~'
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.wrap_for_exec(shell_module_0)
        shell_module_2 = module_0.ShellModule()
        var_1 = shell_module_2.path_has_trailing_slash(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        shell_module_0 = module_0.ShellModule()
        float_0 = -681.710222
        str_0 = None
        var_0 = shell_module_0.chmod(float_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        shell_module_0 = None
        list_0 = [shell_module_0, shell_module_0]
        dict_0 = {}
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.chown(list_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'QUA[3oA [\nX\tj'
        str_1 = ')botP:InrBm'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        bytes_0 = b'j'
        list_0 = [dict_0, bytes_0]
        float_0 = 614.4
        bool_0 = True
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.set_user_facl(float_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b''
        shell_module_0 = module_0.ShellModule()
        complex_0 = None
        str_0 = '${B=&t[4)'
        dict_0 = {str_0: str_0, str_0: bytes_0, str_0: complex_0, str_0: str_0}
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.remove(complex_0, dict_0)
        var_1 = shell_module_0.path_has_trailing_slash(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        shell_module_0 = module_0.ShellModule()
        tuple_0 = None
        tuple_1 = (shell_module_0, tuple_0)
        list_0 = [shell_module_0, tuple_0]
        var_0 = shell_module_0.checksum(tuple_1, *list_0)
        dict_0 = None
        var_1 = shell_module_0.mkdtemp(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'HS~-/G:I*5F'
        set_0 = {str_0, str_0, str_0}
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_0.exists(set_0)
        shell_module_2 = module_0.ShellModule()
        str_1 = ''
        float_0 = -1882.3227
        var_1 = shell_module_2.chown(str_1, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0]
        shell_module_0 = module_0.ShellModule()
        bool_0 = True
        dict_0 = {bool_0: set_0, bool_0: list_0}
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.build_module_command(list_0, shell_module_0, bool_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'j^H'
        str_1 = 'Av~nD2}Vg<'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_1: str_0}
        int_0 = 2426
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.build_module_command(dict_0, int_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        str_0 = 'b\\h;&g+:?7IFV9+L'
        var_0 = shell_module_0.mkdtemp(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '/$16Uh9xB JUj'
        dict_0 = {}
        list_0 = []
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.wrap_for_exec(list_0)
        shell_module_1 = module_0.ShellModule()
        var_1 = shell_module_1.build_module_command(str_0, dict_0, str_0)
    except BaseException:
        pass