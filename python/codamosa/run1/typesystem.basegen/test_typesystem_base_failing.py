# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        base_error_0 = module_0.BaseError()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 3
        list_0 = [int_0, int_0, int_0, int_0]
        parse_error_0 = module_0.ParseError(messages=list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '|\x0cc{m_s0%\rt6'
        str_1 = 'ss,\x0bO)oxyw\\[1]5\n'
        float_0 = None
        int_0 = 1879
        int_1 = -1681
        position_0 = module_0.Position(int_0, int_1, int_0)
        message_0 = module_0.Message(text=str_1, key=str_0, index=float_0, end_position=position_0)
        base_error_0 = module_0.BaseError(text=str_0, key=str_0)
        str_2 = base_error_0.__repr__()
        str_3 = base_error_0.__str__()
        str_4 = base_error_0.__str__()
        parse_error_0 = module_0.ParseError()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'example eode'
        message_0 = module_0.Message(text=str_0, code=str_0, key=str_0)
        int_0 = -322
        int_1 = 88
        position_0 = module_0.Position(int_0, int_1, int_1)
        message_1 = module_0.Message(text=str_0, end_position=position_0)
        list_0 = [message_0, message_0, message_0]
        base_error_0 = module_0.BaseError(messages=list_0)
        bool_0 = base_error_0.__eq__(message_1)
        int_2 = base_error_0.__len__()
        str_1 = base_error_0.__repr__()
        bool_1 = message_1.__eq__(message_0)
        str_2 = base_error_0.__repr__()
        base_error_1 = module_0.BaseError(position=position_0, messages=list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '+'
        int_0 = 0
        base_error_0 = module_0.BaseError(text=str_0)
        str_1 = base_error_0.__str__()
        int_1 = -301
        int_2 = -602
        position_0 = module_0.Position(int_0, int_1, int_2)
        bytes_0 = b''
        bool_0 = position_0.__eq__(str_1)
        validation_result_0 = module_0.ValidationResult(value=bytes_0)
        iterator_0 = validation_result_0.__iter__()
        str_2 = position_0.__repr__()
        parse_error_0 = module_0.ParseError(code=str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -2023
        position_0 = module_0.Position(int_0, int_0, int_0)
        validation_result_0 = module_0.ValidationResult(value=position_0)
        bool_0 = validation_result_0.__bool__()
        int_1 = 1622
        position_1 = module_0.Position(int_0, int_1, int_1)
        base_error_0 = module_0.BaseError(position=position_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'H6=jrT>\x0ch/Q?PSy'
        int_0 = -1502
        int_1 = -1954
        position_0 = module_0.Position(int_0, int_0, int_1)
        bool_0 = position_0.__eq__(str_0)
        int_2 = 1102
        validation_result_0 = module_0.ValidationResult(error=str_0)
        str_1 = validation_result_0.__repr__()
        int_3 = 549
        int_4 = 274
        position_1 = module_0.Position(int_2, int_3, int_4)
        message_0 = module_0.Message(text=str_0, key=str_0, position=position_1, start_position=position_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'r'
        int_0 = 0
        base_error_0 = module_0.BaseError(text=str_0)
        str_1 = base_error_0.__str__()
        int_1 = -301
        position_0 = module_0.Position(int_0, int_1, int_0)
        bytes_0 = b''
        bool_0 = position_0.__eq__(str_1)
        validation_result_0 = module_0.ValidationResult(value=bytes_0)
        iterator_0 = validation_result_0.__iter__()
        int_2 = -2854
        list_0 = [int_2, int_0, str_0]
        message_0 = module_0.Message(text=str_0, code=str_0, key=int_0, index=list_0, position=position_0, start_position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ';Qa~'
        optional_0 = None
        int_0 = -722
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        int_2 = 1296
        int_3 = 4
        position_1 = module_0.Position(int_2, int_3, int_3)
        message_0 = module_0.Message(text=str_0, code=str_0, position=optional_0, start_position=position_0)
        str_1 = 'Items must be unique.'
        bool_0 = message_0.__eq__(int_2)
        message_1 = module_0.Message(text=str_1, code=str_1, key=int_0, end_position=position_0)
        list_0 = [message_0, message_0, message_1, message_1]
        base_error_0 = module_0.BaseError(messages=list_0)
        str_2 = base_error_0.__repr__()
        bool_1 = message_1.__eq__(list_0)
        str_3 = '%5n&<%48&ET|yt'
        str_4 = '\n        Given an index, lookup a child token within this structure.\n        '
        message_2 = module_0.Message(text=str_3, code=str_4, position=position_0, start_position=position_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '9'
        int_0 = 61
        int_1 = 3
        int_2 = None
        position_0 = module_0.Position(int_0, int_1, int_2)
        message_0 = module_0.Message(text=str_0, code=str_0)
        list_0 = [message_0, message_0, message_0, message_0]
        validation_error_0 = module_0.ValidationError(code=str_0, key=str_0, position=position_0, messages=list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'U\xc8\x12'
        str_0 = 'Fwb&i\r<bk'
        int_0 = 1
        int_1 = -2223
        position_0 = module_0.Position(int_0, int_1, int_1)
        message_0 = module_0.Message(text=str_0, start_position=position_0, end_position=position_0)
        list_0 = [message_0, message_0]
        base_error_0 = module_0.BaseError(key=bytes_0, position=message_0, messages=list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '"LUt5X#n.c+K0'
        bytes_0 = b'\x85\xa1 \x19f\x86.\x95Q\xd4'
        base_error_0 = module_0.BaseError(text=str_0, key=str_0, messages=bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ';Qa~'
        validation_result_0 = module_0.ValidationResult()
        optional_0 = None
        int_0 = -722
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        int_2 = 1296
        int_3 = 4
        position_1 = module_0.Position(int_2, int_3, int_3)
        message_0 = module_0.Message(text=str_0, code=str_0, position=optional_0, start_position=position_0)
        bool_0 = message_0.__eq__(message_0)
        message_1 = module_0.Message(text=str_0, code=str_0, key=int_0, end_position=position_0)
        list_0 = [message_0, message_0, message_1, message_1]
        base_error_0 = module_0.BaseError(messages=list_0)
        validation_result_1 = module_0.ValidationResult()
        str_1 = position_0.__repr__()
        validation_result_2 = module_0.ValidationResult()
        str_2 = message_0.__repr__()
        str_3 = base_error_0.__str__()
        str_4 = base_error_0.__str__()
        bool_1 = base_error_0.__eq__(list_0)
        int_4 = base_error_0.__len__()
        str_5 = base_error_0.__repr__()
        str_6 = base_error_0.__repr__()
        str_7 = base_error_0.__str__()
        validation_error_0 = module_0.ValidationError(text=str_6, code=str_1, key=int_4)
        validation_result_3 = module_0.ValidationResult(value=str_2, error=validation_error_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '4$Kzdsx(~J'
        list_0 = [str_0, str_0, str_0, str_0]
        float_0 = -127.56
        validation_result_0 = module_0.ValidationResult(error=float_0)
        message_0 = module_0.Message(text=str_0, index=list_0, position=validation_result_0, end_position=str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ';Qa~'
        validation_result_0 = module_0.ValidationResult()
        optional_0 = None
        int_0 = -722
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        int_2 = 4
        position_1 = module_0.Position(int_0, int_2, int_2)
        message_0 = module_0.Message(text=str_0, code=str_0, position=optional_0, start_position=position_0)
        bool_0 = message_0.__eq__(message_0)
        message_1 = module_0.Message(text=str_0, code=str_0, key=int_0, end_position=position_0)
        list_0 = [message_0, message_0, message_1, message_1]
        base_error_0 = module_0.BaseError(messages=list_0)
        validation_result_1 = module_0.ValidationResult()
        str_1 = position_0.__repr__()
        validation_result_2 = module_0.ValidationResult()
        str_2 = message_0.__repr__()
        str_3 = base_error_0.__str__()
        bool_1 = base_error_0.__eq__(int_1)
        int_3 = base_error_0.__len__()
        str_4 = base_error_0.__repr__()
        bool_2 = message_0.__eq__(message_1)
        str_5 = '%5n&<%48&ET|yt'
        base_error_1 = module_0.BaseError(text=str_5)
        base_error_2 = module_0.BaseError(key=int_1, position=position_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ';Qa~'
        validation_result_0 = module_0.ValidationResult()
        optional_0 = None
        int_0 = -722
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        int_2 = 1289
        int_3 = 4
        position_1 = module_0.Position(int_2, int_3, int_3)
        message_0 = module_0.Message(text=str_0, code=str_0, position=optional_0, start_position=position_0)
        str_1 = 'Items must be unique.'
        bool_0 = message_0.__eq__(message_0)
        message_1 = module_0.Message(text=str_1, code=str_1, key=int_0, end_position=position_0)
        list_0 = [message_0, message_0, message_1, message_1]
        base_error_0 = module_0.BaseError(messages=list_0)
        validation_result_1 = module_0.ValidationResult()
        str_2 = position_0.__repr__()
        list_1 = []
        validation_error_0 = module_0.ValidationError(messages=list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        validation_result_0 = module_0.ValidationResult()
        var_0 = list(validation_result_0)
        str_0 = 'value'
        validation_result_1 = module_0.ValidationResult(value=str_0)
        validation_error_0 = module_0.ValidationError()
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        int_0 = 2457
        list_0 = [int_0, str_0, int_0]
        list_1 = []
        message_0 = module_0.Message(text=str_0, index=list_0, start_position=list_1)
        list_2 = [message_0, message_0, message_0]
        base_error_0 = module_0.BaseError(messages=list_2)
        base_error_1 = module_0.BaseError(code=base_error_0, key=int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ';Qa~'
        validation_result_0 = module_0.ValidationResult()
        optional_0 = None
        int_0 = -722
        int_1 = -1828
        position_0 = module_0.Position(int_0, int_1, int_0)
        message_0 = module_0.Message(text=str_0, code=str_0, end_position=position_0)
        bool_0 = message_0.__eq__(int_0)
        int_2 = None
        position_1 = module_0.Position(int_0, int_2, int_2)
        int_3 = 1296
        int_4 = 4
        position_2 = module_0.Position(int_3, int_4, int_4)
        message_1 = module_0.Message(text=str_0, code=str_0, position=optional_0, start_position=position_1)
        bool_1 = message_1.__eq__(message_1)
        message_2 = module_0.Message(text=str_0, code=str_0, key=int_0, end_position=position_1)
        list_0 = [message_1, message_1, message_2, message_2]
        base_error_0 = module_0.BaseError(messages=list_0)
        validation_result_1 = module_0.ValidationResult()
        str_1 = position_1.__repr__()
        validation_result_2 = module_0.ValidationResult()
        bool_2 = base_error_0.__eq__(int_4)
        int_5 = base_error_0.__len__()
        bool_3 = message_0.__eq__(message_1)
        str_2 = base_error_0.__repr__()
        str_3 = base_error_0.__repr__()
        str_4 = base_error_0.__str__()
        float_0 = -2128.7945
        validation_result_3 = module_0.ValidationResult(value=float_0)
        bool_4 = validation_result_0.__bool__()
        base_error_1 = module_0.BaseError(code=str_4)
    except BaseException:
        pass