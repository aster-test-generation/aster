# Automatically generated by Pynguin.
import flutils.namedtupleutils as module_0
import types as module_1

def test_case_0():
    int_0 = 1782
    bytes_0 = b'\x1b\xd1\x96\xfe\x01\xa8)\xf2\xcd\xa8\xf2'
    tuple_0 = (int_0, bytes_0)
    var_0 = module_0.to_namedtuple(tuple_0)

def test_case_1():
    str_0 = 'Convert a bytes type of escaped utf8 hexadecimal to a string.\n\n    Args:\n        data (bytes or bytearray or memoryview): The escaped utf8\n            hexadecimal bytes.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        str: The given ``data`` (of escaped utf8 hexadecimal bytes)\n            converted into a :obj:`str`.\n        int: The number of the given ``data`` bytes consumed.\n\n    Raises:\n         UnicodeDecodeError: if the given ``data`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.\n\n\n    '
    str_1 = None
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_1: str_1}
    var_0 = module_0.to_namedtuple(dict_0)

def test_case_2():
    simple_namespace_0 = module_1.SimpleNamespace()
    var_0 = module_0.to_namedtuple(simple_namespace_0)

def test_case_3():
    str_0 = '!%5'
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    simple_namespace_0 = module_1.SimpleNamespace(**dict_0)
    var_1 = module_0.to_namedtuple(simple_namespace_0)

def test_case_4():
    int_0 = True
    str_0 = 'B.K\r4q3iR:\\S'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (bool_0, str_0, set_0, bool_0)
    dict_1 = {}
    tuple_1 = (tuple_0, dict_1, bool_0, dict_1)
    tuple_2 = (int_0, dict_0, tuple_1)
    var_0 = module_0.to_namedtuple(tuple_2)
    var_1 = module_0.to_namedtuple(tuple_2)
    list_0 = [var_1, int_0]
    var_2 = module_0.to_namedtuple(list_0)

def test_case_5():
    int_0 = True
    str_0 = 'i_1D'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (bool_0, str_0, set_0, bool_0)
    tuple_1 = (int_0, dict_0, tuple_0)
    var_0 = module_0.to_namedtuple(tuple_1)
    list_0 = [var_0, dict_0, tuple_1]
    var_1 = module_0.to_namedtuple(list_0)
    var_2 = module_0.to_namedtuple(tuple_1)