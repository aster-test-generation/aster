# Automatically generated by Pynguin.
import collections.abc as module_0
import flutils.namedtupleutils as module_1
import collections as module_2

def test_case_0():
    try:
        mapping_0 = module_0.Mapping()
    except BaseException:
        pass

def test_case_1():
    try:
        mapping_0 = None
        var_0 = module_1.to_namedtuple(mapping_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'VS\nJZb~xwEegh"'
        str_1 = ", cannot start with an underscore '_'"
        list_0 = [str_0, str_0, str_0]
        var_0 = module_1.to_namedtuple(list_0)
        var_1 = module_1.to_namedtuple(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = True
        str_0 = 'B.K\r4q3iR:\\S'
        dict_0 = {str_0: str_0, int_0: str_0}
        var_0 = module_1.to_namedtuple(dict_0)
        str_1 = 'kkjNR '
        dict_1 = {str_0: str_0, str_0: str_0, str_1: str_1}
        bool_0 = True
        set_0 = {bool_0}
        bool_1 = True
        tuple_0 = (bool_0, str_1, set_0, bool_1)
        dict_2 = {}
        var_1 = module_1.to_namedtuple(dict_1)
        tuple_1 = (tuple_0, dict_2, bool_1, dict_2)
        tuple_2 = (int_0, dict_1, tuple_1)
        var_2 = module_1.to_namedtuple(tuple_2)
        var_3 = module_1.to_namedtuple(tuple_2)
        var_4 = module_1.to_namedtuple(tuple_2)
        tuple_3 = ()
        list_0 = [var_2]
        var_5 = module_1.to_namedtuple(list_0)
        var_6 = module_1.to_namedtuple(tuple_3)
        tuple_4 = None
        var_7 = module_1.to_namedtuple(tuple_4)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        str_0 = '[EI!'
        set_0 = {str_0, str_0}
        ordered_dict_0 = module_2.OrderedDict(*list_0)
        int_0 = 1730
        tuple_0 = (int_0,)
        tuple_1 = (set_0, list_0, ordered_dict_0, tuple_0)
        var_0 = module_1.to_namedtuple(tuple_1)
        list_1 = [list_0, str_0, list_0, list_0]
        var_1 = module_1.to_namedtuple(list_1)
        str_1 = 'jZ$WX6['
        tuple_2 = ()
        var_2 = module_1.to_namedtuple(list_1)
        var_3 = module_1.to_namedtuple(tuple_2)
        dict_0 = {str_0: list_0, str_0: list_0, str_0: list_0, str_1: list_0}
        mapping_0 = module_0.Mapping(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'P[\xdd\x90u8LJ&bu'
        int_0 = 384
        bytes_1 = b'\xff\xa0$Ao\x98\xdb\x9a\x12C\xc3\x16ymiM\x1f6'
        int_1 = -2962
        tuple_0 = (bytes_1, int_1)
        var_0 = module_1.to_namedtuple(tuple_0)
        dict_0 = {bytes_0: int_0, int_0: bytes_0}
        tuple_1 = (bytes_0, int_0, dict_0)
        var_1 = module_1.to_namedtuple(tuple_1)
    except BaseException:
        pass