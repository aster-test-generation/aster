# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_2():
    float_0 = -3920.20234
    float_1 = 2367.5894
    list_0 = [float_1]
    bool_0 = False
    try_0 = module_0.Try(list_0, bool_0)
    var_0 = try_0.on_success(list_0)
    var_1 = try_0.filter(float_0)
    dict_0 = {}
    bool_1 = try_0.__eq__(dict_0)

def test_case_3():
    str_0 = 'glUbRM1CUAoeFh*'
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    str_1 = try_0.__str__()

def test_case_4():
    float_0 = 1040.0
    str_0 = '+<bK"1UB$z4'
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.map(float_0)

def test_case_5():
    int_0 = 643
    set_0 = set()
    bool_0 = False
    try_0 = module_0.Try(set_0, bool_0)
    set_1 = {int_0}
    bool_1 = True
    bool_2 = False
    try_1 = module_0.Try(bool_1, bool_2)
    bytes_0 = b'Y\xf5\x91\xb4\x08U\xaf\xa0'
    bool_3 = False
    try_2 = module_0.Try(bytes_0, bool_3)
    var_0 = try_2.bind(bool_2)
    var_1 = try_1.get_or_else(bytes_0)
    var_2 = try_1.get()
    var_3 = try_1.get()
    var_4 = try_1.filter(set_1)

def test_case_6():
    float_0 = -3920.20234
    float_1 = 2367.5894
    list_0 = [float_1]
    bool_0 = False
    try_0 = module_0.Try(list_0, bool_0)
    var_0 = try_0.on_success(list_0)
    var_1 = try_0.filter(float_0)

def test_case_7():
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)
    var_0 = try_0.get()

def test_case_8():
    str_0 = None
    bytes_0 = b'\xc5\xd3Gy\x1dU\x95\xce?\xa43d\x16\xe4Wh\xc1'
    set_0 = {bytes_0, bytes_0, bytes_0}
    float_0 = -981.5819
    tuple_0 = (set_0, float_0)
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    bool_1 = try_0.__eq__(tuple_0)
    bool_2 = False
    try_1 = module_0.Try(bytes_0, bool_2)
    var_0 = try_1.get_or_else(str_0)

def test_case_9():
    float_0 = 2367.5894
    list_0 = [float_0]
    bool_0 = False
    try_0 = module_0.Try(list_0, bool_0)
    var_0 = try_0.get()
    try_1 = module_0.Try(try_0, bool_0)
    str_0 = try_0.__str__()
    bool_1 = try_1.__eq__(try_1)
    dict_0 = {}
    try_2 = module_0.Try(dict_0, bool_1)