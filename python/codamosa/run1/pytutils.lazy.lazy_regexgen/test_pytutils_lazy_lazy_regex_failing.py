# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        tuple_0 = ()
        invalid_pattern_0 = module_0.InvalidPattern(tuple_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -1701.4
        invalid_pattern_0 = module_0.InvalidPattern(float_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 995
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_0 = invalid_pattern_0.__eq__(int_0)
        var_1 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_3():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(lazy_regex_0)
    except BaseException:
        pass

def test_case_4():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        bool_0 = False
        var_0 = lazy_regex_0.__getstate__()
        var_1 = module_0.finditer_public(lazy_regex_0, bool_0, lazy_regex_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1019.0073
        bool_0 = True
        var_0 = module_0.finditer_public(float_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        bool_0 = True
        var_0 = module_0.finditer_public(lazy_regex_0, bool_0, lazy_regex_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'BwbF'
        dict_0 = {str_0: str_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_0.__getattr__(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'K_"\\u(#~:m-'
        dict_0 = {str_0: str_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_0.__getattr__(dict_0)
    except BaseException:
        pass