# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = '\rHL:'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)

def test_case_2():
    int_0 = 804
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()

def test_case_3():
    object_0 = module_1.object()
    bool_0 = False
    maybe_0 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)

def test_case_4():
    callable_0 = None
    bool_0 = True
    list_0 = [bool_0, bool_0]
    float_0 = -3238.964871
    tuple_0 = (list_0, float_0)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.map(callable_0)

def test_case_5():
    var_0 = None
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    var_1 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(var_1, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(set_0, bool_1)
    var_2 = maybe_1.get_or_else(var_0)

def test_case_6():
    set_0 = None
    var_0 = None
    str_0 = '\n        Transform Maybe to Either.\n\n        :returns: Right monad with previous value when Maybe is not empty, in other case Left with None\n        :rtype: Either[A | None]\n        '
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_0.get_or_else(var_0)
    list_0 = [set_0, set_0, set_0, var_1]
    float_0 = 1997.695
    set_1 = {float_0, float_0, float_0, float_0}
    bool_1 = False
    maybe_1 = module_0.Maybe(set_1, bool_1)
    bool_2 = True
    maybe_2 = module_0.Maybe(maybe_1, bool_2)
    var_2 = maybe_2.map(list_0)

def test_case_7():
    list_0 = []
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_either()

def test_case_8():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.to_either()

def test_case_9():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_box()

def test_case_10():
    str_0 = '\rHL:'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()

def test_case_11():
    tuple_0 = None
    set_0 = {tuple_0, tuple_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.to_lazy()

def test_case_12():
    object_0 = module_1.object()
    var_0 = None
    list_0 = [var_0, var_0]
    str_0 = '#y8(vR'
    tuple_0 = (str_0,)
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_1 = maybe_0.to_validation()
    bool_1 = True
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_2, bool_1)
    var_2 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(list_0, bool_1)
    bool_3 = maybe_2.__eq__(object_0)

def test_case_13():
    set_0 = set()
    bool_0 = False
    object_0 = module_1.object()
    str_0 = None
    dict_0 = {str_0: object_0}
    bool_1 = False
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.to_box()
    bool_2 = False
    maybe_1 = module_0.Maybe(object_0, bool_2)
    var_1 = maybe_1.to_lazy()
    maybe_2 = module_0.Maybe(set_0, bool_0)
    var_2 = maybe_2.to_validation()
    var_3 = maybe_2.to_lazy()

def test_case_14():
    str_0 = '\n        Take function (A) -> B and applied this function on current Validation value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new Validation with mapped value and previous errors\n        :rtype: Validation[B, List[E]]\n        '
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_lazy()
    var_1 = maybe_0.to_validation()
    var_2 = maybe_0.to_either()
    var_3 = maybe_0.to_box()
    var_4 = maybe_0.to_validation()

def test_case_15():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    str_0 = 'A'
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    maybe_3 = module_0.Maybe(int_0, bool_0)
    bool_2 = maybe_2.__eq__(maybe_3)
    var_0 = None
    bool_3 = True
    maybe_4 = module_0.Maybe(var_0, bool_3)
    float_0 = -497.7125
    maybe_5 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_5.filter(float_0)

def test_case_16():
    bool_0 = False
    str_0 = 'A'
    maybe_0 = module_0.Maybe(str_0, bool_0)
    maybe_1 = module_0.Maybe(str_0, bool_0)
    bool_1 = maybe_0.__eq__(maybe_1)
    int_0 = 2
    maybe_2 = module_0.Maybe(int_0, bool_0)
    bool_2 = True
    maybe_3 = module_0.Maybe(int_0, bool_2)
    bool_3 = maybe_2.__eq__(maybe_3)
    maybe_4 = module_0.Maybe(int_0, bool_0)
    maybe_5 = module_0.Maybe(int_0, bool_0)
    var_0 = None
    maybe_6 = module_0.Maybe(var_0, bool_0)
    bool_4 = True
    maybe_7 = module_0.Maybe(var_0, bool_4)
    bool_5 = maybe_6.__eq__(maybe_7)
    maybe_8 = module_0.Maybe(var_0, bool_0)
    maybe_9 = module_0.Maybe(var_0, bool_0)
    bool_6 = maybe_8.__eq__(maybe_9)