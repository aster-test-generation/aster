# Automatically generated by Pynguin.
import builtins as module_0
import pymonet.maybe as module_1

def test_case_0():
    try:
        object_0 = module_0.object()
        int_0 = 802
        bool_0 = False
        bool_1 = True
        maybe_0 = module_1.Maybe(bool_0, bool_1)
        var_0 = maybe_0.ap(int_0)
        callable_0 = None
        str_0 = '&G/-feR:XysoCmTQ'
        bool_2 = False
        maybe_1 = module_1.Maybe(str_0, bool_2)
        var_1 = maybe_0.to_either()
        var_2 = maybe_1.map(callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        maybe_0 = module_1.Maybe(bool_0, bool_0)
        var_0 = maybe_0.to_either()
        object_0 = module_0.object()
        var_1 = maybe_0.to_either()
        float_0 = 2296.9604
        var_2 = maybe_0.bind(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        str_1 = 'r/v\\i6\t-^oTcX`*hpyf'
        str_2 = None
        var_0 = None
        int_0 = -3416
        bool_0 = True
        maybe_0 = module_1.Maybe(int_0, bool_0)
        var_1 = maybe_0.bind(var_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: var_1}
        bool_1 = False
        list_0 = [bool_1, bool_1, bool_1, bool_1]
        object_0 = module_0.object()
        tuple_0 = (bool_1, list_0, object_0)
        maybe_1 = module_1.Maybe(tuple_0, bool_1)
        var_2 = maybe_1.ap(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        maybe_0 = module_1.Maybe(bool_0, bool_0)
        var_0 = None
        var_1 = maybe_0.get_or_else(var_0)
        float_0 = 1764.0
        str_0 = '\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        '
        var_2 = maybe_0.map(str_0)
        var_3 = maybe_0.ap(float_0)
        var_4 = maybe_0.to_box()
        var_5 = None
        list_0 = [var_5, maybe_0]
        var_6 = maybe_0.filter(list_0)
        var_7 = maybe_0.get_or_else(var_5)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        str_0 = 'R{~q>Rzcl8'
        bool_0 = True
        maybe_0 = module_1.Maybe(str_0, bool_0)
        var_0 = maybe_0.filter(callable_0)
        list_0 = [var_0, var_0, var_0]
        bool_1 = False
        maybe_1 = module_1.Maybe(list_0, bool_1)
        var_1 = maybe_1.filter(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xe8\xea\x03\xdc'
        bool_0 = False
        maybe_0 = module_1.Maybe(bytes_0, bool_0)
        int_0 = 231
        var_0 = maybe_0.filter(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        bool_0 = True
        bool_1 = True
        maybe_0 = module_1.Maybe(bool_0, bool_1)
        maybe_1 = module_1.Maybe(list_0, bool_0)
        var_0 = maybe_0.to_validation()
        var_1 = maybe_0.to_lazy()
        var_2 = None
        var_3 = maybe_0.get_or_else(var_2)
        int_0 = 602
        bool_2 = True
        maybe_2 = module_1.Maybe(int_0, bool_2)
        object_0 = None
        bool_3 = maybe_2.__eq__(object_0)
        str_0 = 'inf'
        maybe_3 = module_1.Maybe(str_0, bool_3)
        var_4 = maybe_2.filter(maybe_2)
        var_5 = maybe_0.to_try()
        var_6 = None
        bool_4 = False
        maybe_4 = module_1.Maybe(var_6, bool_4)
        var_7 = maybe_3.to_try()
        callable_0 = None
        var_8 = maybe_4.filter(callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1
        bool_0 = False
        maybe_0 = module_1.Maybe(int_0, bool_0)
        bool_1 = maybe_0.__eq__(maybe_0)
        maybe_1 = module_1.Maybe(int_0, bool_0)
        bool_2 = True
        maybe_2 = module_1.Maybe(int_0, bool_2)
        int_1 = 2
        maybe_3 = module_1.Maybe(int_1, bool_0)
        maybe_4 = module_1.Maybe(int_1, bool_0)
        maybe_5 = module_1.Maybe(int_1, bool_0)
        bool_3 = maybe_4.__eq__(maybe_5)
        list_0 = None
        var_0 = maybe_2.filter(list_0)
        callable_0 = None
        var_1 = maybe_5.filter(callable_0)
    except BaseException:
        pass