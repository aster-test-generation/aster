# Automatically generated by Pynguin.
import ansible.plugins.action.wait_for_connection as module_0

def test_case_0():
    try:
        list_0 = None
        timed_out_exception_0 = module_0.TimedOutException(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        set_0 = {str_0}
        float_0 = -504.458
        list_0 = [str_0, set_0, float_0]
        str_1 = '\n        Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\n        You can pass in a list (roles or collections) or use the file\n        option listed below (these are mutually exclusive). If you pass in a list, it\n        can be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.\n\n        :param artifacts_manager: Artifacts manager.\n        '
        float_1 = 1661.4
        bool_0 = True
        timed_out_exception_0 = module_0.TimedOutException()
        float_2 = None
        int_0 = -340
        tuple_0 = (int_0, str_1)
        bool_1 = True
        str_2 = 'package_path'
        bool_2 = False
        action_module_0 = module_0.ActionModule(bool_1, str_0, timed_out_exception_0, str_2, float_2, bool_2)
        str_3 = 'I8_{v_Q6;bT6"K\\Vss4D'
        action_module_1 = module_0.ActionModule(float_1, str_3, bool_0, str_3, tuple_0, float_2)
        var_0 = action_module_1.do_until_success_or_timeout(tuple_0, float_0, list_0, set_0, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -562.24857
        tuple_0 = ()
        dict_0 = {tuple_0: float_0, float_0: float_0, float_0: tuple_0}
        str_0 = 'B=Yzyf}u '
        int_0 = 2791
        timed_out_exception_0 = module_0.TimedOutException()
        tuple_1 = None
        set_0 = {tuple_1}
        str_1 = 'h.))uwniSn\x0c\\Pz\x0bEL'
        list_0 = [tuple_0, tuple_0, dict_0]
        action_module_0 = module_0.ActionModule(int_0, timed_out_exception_0, set_0, str_1, list_0, set_0)
        str_2 = 'b'
        float_1 = 0.001
        bool_0 = False
        bool_1 = True
        bytes_0 = b'G\xec\xaf\xfb\xf1\xb8HQ{.\xe3;\x00\x9bd'
        str_3 = '=za\n-0a%6euVyx-=IFZ;'
        action_module_1 = module_0.ActionModule(str_2, float_1, bool_0, bool_1, bytes_0, str_3)
        var_0 = action_module_1.do_until_success_or_timeout(float_0, tuple_0, dict_0, str_0, action_module_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -1832.7189
        list_0 = [float_0, float_0, float_0]
        timed_out_exception_0 = module_0.TimedOutException()
        bool_0 = True
        int_0 = 300
        tuple_0 = (float_0, bool_0, int_0)
        action_module_0 = module_0.ActionModule(float_0, list_0, timed_out_exception_0, timed_out_exception_0, bool_0, tuple_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        set_0 = {str_0}
        str_1 = '\n        Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\n        You can pass in a list (roles or collections) or use the file\n        option listed below (these are mutually exclusive). If you pass in a list, it\n        can be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.\n\n        :param artifacts_manager: Artifacts manager.\n        '
        float_0 = 1661.4
        str_2 = 'r\x0c9wR*w~9#wze'
        bool_0 = True
        timed_out_exception_0 = module_0.TimedOutException()
        str_3 = 'ud'
        float_1 = None
        int_0 = -340
        tuple_0 = (int_0, str_3)
        bool_1 = True
        str_4 = 'package_path'
        action_module_0 = module_0.ActionModule(bool_1, str_3, timed_out_exception_0, str_4, float_1, bool_0)
        dict_0 = {int_0: bool_0, action_module_0: str_4, tuple_0: tuple_0, action_module_0: bool_0}
        bool_2 = False
        timed_out_exception_1 = module_0.TimedOutException()
        dict_1 = {str_0: str_3}
        action_module_1 = module_0.ActionModule(str_1, dict_0, str_2, timed_out_exception_0, bool_2, dict_1)
        list_0 = [tuple_0, float_0, action_module_1]
        tuple_1 = (timed_out_exception_0, str_3, float_1, list_0)
        list_1 = [bool_2, str_2, dict_0]
        int_1 = -505
        complex_0 = None
        action_module_2 = module_0.ActionModule(list_1, tuple_1, int_1, list_1, complex_0, list_1)
        int_2 = 1732
        int_3 = 1328
        action_module_3 = module_0.ActionModule(int_2, int_3, set_0, float_0, dict_1, action_module_1)
        bool_3 = True
        var_0 = action_module_3.do_until_success_or_timeout(action_module_2, bool_3, set_0, action_module_2, bool_2)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        str_0 = ']4/c\x0cA'
        set_0 = {tuple_0, str_0, tuple_0, tuple_0}
        int_0 = 250
        dict_0 = {str_0: str_0}
        bytes_0 = b';\xa0g3\x88Q\xd8\xd2fg\x01\xe92+\xae\xe9\xb0I}\x07'
        float_0 = -769.58
        bytes_1 = b'\x87\xd6\xa5\x8c9\x81Oj)4I{'
        str_1 = '9m_Jnw8pyIy#m06&L<'
        list_0 = [bytes_0, str_0, bytes_0]
        timed_out_exception_0 = module_0.TimedOutException()
        timed_out_exception_1 = module_0.TimedOutException(*list_0)
        action_module_0 = module_0.ActionModule(set_0, bytes_0, float_0, bytes_1, str_1, timed_out_exception_1)
        var_0 = action_module_0.run(int_0, dict_0)
    except BaseException:
        pass