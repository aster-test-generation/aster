# Automatically generated by Pynguin.
import ansible.vars.hostvars as module_0
import ansible.template as module_1

def test_case_0():
    try:
        int_0 = 439
        dict_0 = {}
        host_vars_0 = module_0.HostVars(int_0, int_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        list_1 = []
        tuple_0 = (list_1,)
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, tuple_0)
        bytes_0 = b'!Y"\xfa\x8ay'
        host_vars_0 = module_0.HostVars(tuple_0, host_vars_vars_0, bytes_0)
        var_0 = host_vars_0.set_variable_manager(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 322.291812
        ansible_undefined_0 = module_1.AnsibleUndefined()
        set_0 = {float_0, float_0, float_0, float_0}
        bool_0 = True
        list_0 = [set_0]
        list_1 = [list_0, float_0, list_0, list_0]
        host_vars_0 = module_0.HostVars(bool_0, ansible_undefined_0, list_1)
        str_0 = None
        int_0 = -424
        str_1 = '>'
        dict_0 = {str_0: float_0, str_0: int_0, str_1: list_1, str_1: list_0}
        float_1 = 99.6996332004311
        host_vars_vars_0 = module_0.HostVarsVars(set_0, float_1)
        host_vars_vars_1 = module_0.HostVarsVars(dict_0, host_vars_vars_0)
        bool_1 = False
        host_vars_vars_2 = module_0.HostVarsVars(host_vars_vars_1, bool_1)
        var_0 = host_vars_0.__setstate__(host_vars_vars_2)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 570.4938
        int_0 = -2469
        set_0 = None
        host_vars_vars_0 = module_0.HostVarsVars(int_0, set_0)
        tuple_0 = (host_vars_vars_0,)
        host_vars_vars_1 = module_0.HostVarsVars(float_0, tuple_0)
        var_0 = host_vars_vars_1.__len__()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        host_vars_vars_0 = module_0.HostVarsVars(bool_0, list_0)
        var_0 = host_vars_vars_0.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        str_0 = 'Tv`!\td2NM'
        float_0 = -2110.0
        bytes_0 = b'\xb9\xc8\x96\xd4\x9a\x02'
        int_0 = 1848
        tuple_0 = (str_0, float_0, bytes_0, int_0)
        tuple_1 = (dict_0,)
        str_1 = ')OCy'
        host_vars_vars_0 = module_0.HostVarsVars(tuple_1, str_1)
        var_0 = host_vars_vars_0.__contains__(tuple_0)
        str_2 = '.sE ~'
        bytes_1 = b'\xc2'
        str_3 = 'v;A*jp#1L ]%ze'
        host_vars_0 = module_0.HostVars(str_2, bytes_1, str_3)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = None
        int_0 = 401
        list_0 = []
        str_0 = 'eKE'
        set_0 = {int_0, str_0}
        host_vars_vars_0 = module_0.HostVarsVars(int_0, set_0)
        host_vars_0 = module_0.HostVars(str_0, host_vars_vars_0, float_0)
        var_0 = host_vars_0.set_nonpersistent_facts(list_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'm`{B2*W?3:*8G_ >~'
        str_1 = '\tb:\x0cS\rQr$'
        int_0 = 1003
        str_2 = 'd97'
        host_vars_vars_0 = module_0.HostVarsVars(int_0, str_2)
        bool_0 = False
        host_vars_0 = module_0.HostVars(str_1, host_vars_vars_0, bool_0)
        var_0 = host_vars_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        str_0 = 'SbNj4Q5rbGN67m7>'
        host_vars_vars_0 = module_0.HostVarsVars(str_0, bool_0)
        var_0 = host_vars_vars_0.__repr__()
        var_1 = host_vars_vars_0.__contains__(host_vars_vars_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '!lk.F1IN=Ui_K'
        int_0 = 404
        set_0 = set()
        host_vars_vars_0 = module_0.HostVarsVars(int_0, set_0)
        float_0 = -1942.5
        host_vars_0 = module_0.HostVars(str_0, host_vars_vars_0, float_0)
        list_0 = [float_0, float_0]
        str_1 = '%UtZ\x0cu=;h'
        var_0 = host_vars_0.set_host_variable(list_0, str_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1003
        str_0 = 'd97'
        host_vars_vars_0 = module_0.HostVarsVars(int_0, str_0)
        bytes_0 = b'\x08]\xdd'
        host_vars_0 = module_0.HostVars(bytes_0, host_vars_vars_0, host_vars_vars_0)
        var_0 = host_vars_0.__len__()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '!lk.F1IN=Ui_K'
        int_0 = 404
        set_0 = set()
        host_vars_vars_0 = module_0.HostVarsVars(int_0, set_0)
        float_0 = -1942.5
        host_vars_0 = module_0.HostVars(str_0, host_vars_vars_0, float_0)
        var_0 = host_vars_0.__repr__()
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        int_0 = 2234
        list_0 = []
        host_vars_vars_0 = module_0.HostVarsVars(list_0, list_0)
        tuple_0 = ()
        tuple_1 = (host_vars_vars_0, tuple_0)
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, tuple_1)
        var_0 = host_vars_0.set_inventory(bool_0)
        var_1 = host_vars_0.__setstate__(tuple_0)
        bytes_0 = b'\xd08\xf9\x13u\xf5\xe6\x8b\x0b\xad\xab'
        var_2 = host_vars_0.__contains__(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '!lk.F1IN=Ui_K'
        int_0 = 404
        set_0 = set()
        host_vars_vars_0 = module_0.HostVarsVars(int_0, set_0)
        float_0 = -1942.5
        host_vars_0 = module_0.HostVars(str_0, host_vars_vars_0, float_0)
        int_1 = 2324
        var_0 = host_vars_0.set_host_facts(int_1, float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "(g~EyR5F>eJ#AbTbN*q'"
        int_0 = 493
        list_0 = [str_0, str_0, int_0]
        str_1 = ''
        bytes_0 = b' '
        str_2 = 'wCa$?}'
        tuple_0 = (bytes_0, str_2)
        bool_0 = True
        str_3 = 'OK9/ZF@Q%\\`V4. 2q'
        dict_0 = {}
        host_vars_vars_0 = module_0.HostVarsVars(str_3, dict_0)
        host_vars_vars_1 = module_0.HostVarsVars(bool_0, host_vars_vars_0)
        host_vars_0 = module_0.HostVars(tuple_0, host_vars_vars_1, host_vars_vars_1)
        var_0 = host_vars_0.__deepcopy__(list_0)
        str_4 = '|'
        host_vars_1 = module_0.HostVars(str_0, str_1, str_4)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        set_0 = set()
        host_vars_vars_0 = module_0.HostVarsVars(bool_0, set_0)
        str_0 = 'U$<UV\t=7q`<Y/43)^rG@'
        float_0 = -217.5
        dict_0 = {str_0: float_0, float_0: str_0}
        host_vars_vars_1 = module_0.HostVarsVars(dict_0, dict_0)
        int_0 = 7
        host_vars_vars_2 = module_0.HostVarsVars(host_vars_vars_1, int_0)
        str_1 = 'nvp'
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_2, str_1)
        var_0 = host_vars_0.__setstate__(host_vars_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        str_0 = '\n    name: advanced_host_list\n    version_added: "2.4"\n    short_description: Parses a \'host list\' with ranges\n    description:\n        - Parses a host list string as a comma separated values of hosts and supports host ranges.\n        - This plugin only applies to inventory sources that are not paths and contain at least one comma.\n'
        dict_0 = {}
        host_vars_vars_0 = module_0.HostVarsVars(str_0, dict_0)
        var_0 = host_vars_vars_0.__getitem__(bool_0)
        str_1 = '-%s'
        set_0 = {str_1, str_1, str_1}
        host_vars_vars_1 = module_0.HostVarsVars(str_1, set_0)
        host_vars_0 = None
        int_0 = -1047
        str_2 = "%lZcgvP[C o+^EVMGf'b"
        tuple_0 = (host_vars_0, str_2)
        host_vars_1 = module_0.HostVars(host_vars_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        int_0 = 2234
        list_0 = []
        list_1 = None
        host_vars_vars_0 = module_0.HostVarsVars(list_0, list_1)
        tuple_0 = ()
        tuple_1 = (host_vars_vars_0, tuple_0)
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, tuple_1)
        var_0 = host_vars_vars_0.__repr__()
        var_1 = host_vars_0.set_inventory(bool_0)
        var_2 = host_vars_0.__iter__()
        var_3 = host_vars_0.__setstate__(tuple_0)
        bytes_0 = b'\xd08\xf9\x13u\xf5\xe6\x8b\x0bM\xad\xab'
        bool_1 = True
        host_vars_1 = module_0.HostVars(list_0, host_vars_0, bool_1)
        var_4 = host_vars_1.__contains__(bytes_0)
    except BaseException:
        pass