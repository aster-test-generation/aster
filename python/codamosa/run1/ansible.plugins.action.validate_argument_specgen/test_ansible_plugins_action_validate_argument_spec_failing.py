# Automatically generated by Pynguin.
import ansible.plugins.action.validate_argument_spec as module_0

def test_case_0():
    try:
        bytes_0 = b'\xc2\xd8'
        set_0 = set()
        int_0 = -223
        str_0 = '/sys/devices/virtual/dmi/id/bios_date'
        bytes_1 = b'\xb9'
        action_module_0 = module_0.ActionModule(bytes_0, set_0, int_0, str_0, bytes_0, bytes_1)
        tuple_0 = ()
        action_module_1 = module_0.ActionModule(action_module_0, tuple_0, set_0, action_module_0, int_0, action_module_0)
        dict_0 = {bytes_1: int_0}
        var_0 = action_module_1.get_args_from_task_vars(dict_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xc2\xd8'
        set_0 = set()
        int_0 = -223
        str_0 = '/sys/devices/virtual/dmi/id/bios_date'
        bytes_1 = b'\xb9'
        action_module_0 = module_0.ActionModule(bytes_0, set_0, int_0, str_0, bytes_0, bytes_1)
        tuple_0 = ()
        action_module_1 = module_0.ActionModule(action_module_0, tuple_0, set_0, action_module_0, int_0, action_module_0)
        var_0 = action_module_1.run()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = None
        float_0 = 0.2
        bytes_1 = b'\t4\xbd'
        set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
        str_0 = 'Galaxy'
        str_1 = 'owner'
        bool_0 = True
        dict_0 = {}
        action_module_0 = module_0.ActionModule(set_0, str_0, str_1, bool_0, dict_0, str_0)
        var_0 = action_module_0.run(bytes_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 545
        list_0 = None
        int_1 = 4294967306
        set_0 = {int_0, int_1}
        bytes_0 = b'2\x8f{S#\x7f\x8b\x11s1@'
        bytes_1 = b'wr?k\x1e\xfc?eW\xf8\x9b>\x8f\x16\n\xd7\xaf]\xc4\xa8'
        dict_0 = {bytes_0: int_1, bytes_1: bytes_0, int_0: list_0, bytes_1: bytes_0}
        str_0 = '*,7'
        str_1 = "'%s' skipped because role has already run"
        str_2 = ''
        str_3 = '[c'
        bool_0 = False
        bytes_2 = b'\x1c\x8a\x89G\x84\xd7\xdbiZu\x16 >\x84\x17hO\xb0'
        tuple_0 = (bool_0, bytes_2, set_0, list_0)
        action_module_0 = module_0.ActionModule(str_0, str_1, int_0, str_2, str_3, tuple_0)
        var_0 = action_module_0.get_args_from_task_vars(dict_0, set_0)
    except BaseException:
        pass