# Automatically generated by Pynguin.
import ansible.module_utils.common.network as module_0

def test_case_0():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0}
        tuple_0 = (set_0,)
        var_0 = module_0.to_subnet(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\t'
        var_0 = module_0.to_ipv6_subnet(str_0)
        str_1 = '\\zkiP8u>IUS>`u'
        var_1 = module_0.to_netmask(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        var_0 = module_0.to_netmask(bool_0)
        int_0 = 3313
        var_1 = module_0.to_masklen(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '"`'
        var_0 = module_0.to_masklen(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '192.168.1.1'
        int_0 = 24
        var_0 = module_0.to_subnet(str_0, int_0)
        var_1 = module_0.to_bits(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        var_0 = module_0.to_bits(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -3987
        var_0 = module_0.is_masklen(int_0)
        dict_0 = {}
        var_1 = module_0.is_mac(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '> %s    (%s)\n'
        var_0 = module_0.is_netmask(str_0)
        tuple_0 = ()
        str_1 = "Return a dict describing the listing of all roles with arg specs.\n\n        :param role_paths: A tuple of one or more role paths.\n\n        :returns: A dict indexed by role name, with 'collection' and 'entry_points' keys per role.\n\n        Example return:\n\n            results = {\n               'roleA': {\n                  'collection': '',\n                  'entry_points': {\n                     'main': 'Short description for main'\n                  }\n               },\n               'a.b.c.roleB': {\n                  'collection': 'a.b.c',\n                  'entry_points': {\n                     'main': 'Short description for main',\n                     'alternate': 'Short description for alternate entry point'\n                  }\n               'x.y.z.roleB': {\n                  'collection': 'x.y.z',\n                  'entry_points': {\n                     'main': 'Short description for main',\n                  }\n               },\n            }\n        "
        var_1 = module_0.to_ipv6_network(str_1)
        float_0 = 187.1234
        str_2 = ';;".C<F|h"\x0b5_)my[!'
        var_2 = module_0.to_subnet(float_0, str_2, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '55.255.255.12'
        var_0 = module_0.is_netmask(str_0)
        str_1 = ' Attempt to get the peer certificate of the response from urlopen. '
        var_1 = module_0.to_bits(str_1)
    except BaseException:
        pass