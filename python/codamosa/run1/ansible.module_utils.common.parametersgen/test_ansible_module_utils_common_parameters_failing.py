# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0
import builtins as module_1

def test_case_0():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0, bool_0, bool_0}
        str_0 = '0N@r\x0bm\t\n|pjy>W'
        var_0 = module_0.remove_values(set_0, str_0)
        list_0 = [bool_0, bool_0, bool_0]
        var_1 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        str_0 = 'J+yAa-AF]\tN'
        var_0 = module_0.remove_values(set_0, str_0)
        bool_1 = False
        list_0 = [bool_1, bool_0, bool_1]
        var_1 = module_0.remove_values(bool_1, list_0)
        list_1 = [bool_1, bool_1, bool_1, bool_1]
        var_2 = module_0.env_fallback(*list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '}2[tLm\x0bOb)pH$V'
        dict_0 = {str_0: str_0}
        var_0 = module_0.env_fallback(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        int_0 = 2715
        var_0 = module_0.set_fallbacks(bool_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 16
        bytes_0 = None
        var_0 = module_0.sanitize_keys(int_0, int_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        float_0 = -3531.95961
        var_0 = module_0.remove_values(str_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'UG"ae'
        list_0 = [str_0]
        str_1 = 'M8SC,LTf /#?h!$+Y'
        dict_0 = {str_1: str_0}
        var_0 = module_0.env_fallback(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        str_0 = '.%s-'
        var_0 = module_0.sanitize_keys(dict_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'notes'
        str_1 = 'uZy1[(>%_rp5B\trp'
        str_2 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_2}
        bytes_0 = b'\xbf\xff'
        var_0 = module_0.set_fallbacks(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        str_1 = "}<:}5M=aB9S;Y'V_\\!If"
        str_2 = 'e\n"Cu'
        dict_0 = {str_1: str_1, str_2: str_0}
        dict_1 = {str_0: dict_0}
        str_3 = 'f_\rF+6<Q[Q\x0b|MJZGa'
        tuple_0 = (str_3,)
        var_0 = module_0.set_fallbacks(dict_1, tuple_0)
        var_1 = module_0.set_fallbacks(str_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        str_1 = "}<:}5M=aB9S;Y'V_\\!If"
        int_0 = 2603
        str_2 = 'G~).+C>^'
        str_3 = 'djo\'}"rpm6a-'
        str_4 = 'ppciseries'
        str_5 = None
        dict_0 = {str_2: str_3, str_3: str_0, str_4: str_0, str_5: str_2}
        float_0 = -1727.93
        bool_0 = True
        tuple_0 = (int_0, dict_0, float_0, bool_0)
        bytes_0 = b'\x85\x1a\xe2\xcfq\x17d5'
        var_0 = module_0.remove_values(tuple_0, bytes_0)
        str_6 = 'e\n"Cu'
        dict_1 = {str_1: str_1, str_6: str_0}
        dict_2 = {str_0: dict_1}
        str_7 = 'f_\rF+6<Q[Q\x0b|MJZGa'
        tuple_1 = (str_7,)
        var_1 = module_0.set_fallbacks(dict_2, tuple_1)
        var_2 = module_0.set_fallbacks(str_0, dict_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0, str_0]
        float_0 = -1472.33
        list_1 = [str_0, list_0, list_0]
        set_0 = {float_0, float_0, float_0}
        var_0 = module_0.remove_values(set_0, set_0)
        str_1 = ')uVn%8m<hYjU?'
        dict_0 = {}
        var_1 = module_0.sanitize_keys(set_0, set_0)
        var_2 = module_0.sanitize_keys(str_1, list_0, dict_0)
        str_2 = 'p9\tVmS'
        dict_1 = {str_0: var_0}
        list_2 = [str_1, float_0, dict_1, var_2, dict_1, list_1, list_1, dict_1]
        var_3 = module_0.sanitize_keys(list_2, list_2)
        tuple_0 = ()
        dict_2 = module_1.dict()
        var_4 = module_0.sanitize_keys(tuple_0, dict_2)
        var_5 = module_0.set_fallbacks(dict_0, float_0)
        var_6 = module_0.remove_values(dict_0, tuple_0)
        bytes_0 = b'u\n\x13\xad_\xd3hg\x80\xa3'
        bytes_1 = b''
        var_7 = module_0.remove_values(bytes_0, bytes_1)
        var_8 = module_0.sanitize_keys(dict_0, list_1)
        var_9 = module_0.sanitize_keys(dict_1, str_2, list_1)
        var_10 = module_0.set_fallbacks(dict_2, dict_0)
        var_11 = module_0.env_fallback(*list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 123
        var_0 = lambda : int_0
        str_0 = 'nope'
        str_1 = 'nope2'
        var_1 = (var_0,)
        var_2 = {str_0: var_1}
        var_3 = {}
        var_4 = {str_0: var_2, str_1: var_3}
        var_5 = {}
        var_6 = module_0.set_fallbacks(var_4, var_5)
        str_2 = 'nope'
        str_3 = 'nope2'
        str_4 = 'fallback'
        var_7 = (var_0,)
        var_8 = {str_4: var_7}
        var_9 = {}
        var_10 = {str_2: var_8, str_3: var_9}
        str_5 = {str_3: str_0}
        var_11 = module_0.set_fallbacks(var_10, str_5)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'default'
        str_1 = 'foo'
        str_2 = {str_0: str_1}
        dict_0 = {str_0: str_2, str_1: str_0}
        var_0 = module_0.sanitize_keys(dict_0, str_0)
        str_3 = {str_0: str_2}
        var_1 = {}
        var_2 = module_0.set_fallbacks(str_3, var_1)
        var_3 = set()
        str_4 = {str_0: str_1}
        str_5 = {str_0: str_4}
        str_6 = 'bar'
        str_7 = {str_0: str_6}
        var_4 = module_0.set_fallbacks(str_5, str_7)
        var_5 = set()
        var_6 = set()
        str_8 = '4}Q'
        list_0 = [str_8]
        var_7 = module_0.env_fallback(*list_0)
    except BaseException:
        pass