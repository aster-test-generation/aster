# Automatically generated by Pynguin.
import builtins as module_0
import tornado.concurrent as module_1
import concurrent.futures._base as module_2

def test_case_0():
    try:
        base_exception_0 = module_0.BaseException()
        list_0 = [base_exception_0, base_exception_0, base_exception_0]
        callable_0 = module_1.run_on_executor(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        future_0 = None
        module_1.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        bool_0 = module_1.is_future(list_0)
        future_0 = module_2.Future()
        base_exception_0 = None
        optional_0 = None
        tuple_0 = (bool_0, base_exception_0, optional_0)
        module_1.future_set_exc_info(future_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        callable_0 = module_1.run_on_executor(**dict_0)
        dummy_executor_0 = module_1.DummyExecutor()
        dummy_executor_0.shutdown()
        future_0 = module_2.Future()
        float_0 = 3756.2
        module_1.future_add_done_callback(future_0, float_0)
        list_0 = [callable_0, callable_0, dict_0]
        callable_1 = module_1.run_on_executor(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        future_0 = module_2.Future()
        bool_0 = module_1.is_future(future_0)
        base_exception_0 = module_0.BaseException()
        module_1.future_set_exception_unless_cancelled(future_0, base_exception_0)
        set_0 = {future_0}
        module_1.future_add_done_callback(future_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x17&'
        list_0 = [bytes_0, bytes_0]
        str_0 = 'MY{TWrp%`F!l9.0xR'
        str_1 = "EufHjJ]P/R6'"
        str_2 = "Kw;YE)_kp:}q'BO;k"
        dict_0 = {str_0: bytes_0, str_1: list_0, str_2: str_2}
        callable_0 = module_1.run_on_executor(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        future_0 = module_2.Future()
        bool_0 = True
        module_1.future_set_result_unless_cancelled(future_0, bool_0)
        list_0 = [bool_0]
        callable_0 = module_1.run_on_executor(*list_0)
        module_1.future_add_done_callback(future_0, callable_0)
    except BaseException:
        pass