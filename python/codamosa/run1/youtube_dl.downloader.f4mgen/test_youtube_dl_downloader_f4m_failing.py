# Automatically generated by Pynguin.
import youtube_dl.downloader.f4m as module_0
import youtube_dl.compat as module_1

def test_case_0():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_string()
    except BaseException:
        pass

def test_case_1():
    try:
        data_truncated_error_0 = module_0.DataTruncatedError()
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_long_long()
    except BaseException:
        pass

def test_case_2():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_bootstrap_info()
    except BaseException:
        pass

def test_case_3():
    try:
        flv_reader_0 = module_0.FlvReader()
        list_0 = [flv_reader_0, flv_reader_0]
        set_0 = set()
        var_0 = module_0.write_metadata_tag(list_0, set_0)
        var_1 = flv_reader_0.read_unsigned_char()
    except BaseException:
        pass

def test_case_4():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_6():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_7():
    try:
        flv_reader_0 = module_0.FlvReader()
        str_0 = 'uUq\r0(u|'
        var_0 = module_0.write_unsigned_int(flv_reader_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        data_truncated_error_0 = module_0.DataTruncatedError(**dict_0)
        str_0 = '(F4#\r/XhWW"tyA'
        var_0 = module_0.write_unsigned_int_24(data_truncated_error_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        data_truncated_error_0 = module_0.DataTruncatedError()
        flv_reader_0 = module_0.FlvReader()
        var_0 = module_0.write_flv_header(flv_reader_0)
        var_1 = flv_reader_0.read_unsigned_int()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\x06+V\xdaJ\xf8\xf9X\x94Cl\xd9'
        float_0 = 2497.7776
        var_0 = module_0.write_metadata_tag(bytes_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        tuple_0 = (dict_0,)
        var_0 = module_0.remove_encrypted_media(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 853.386
        str_0 = 'lN\nE*_4\x0ca'
        data_truncated_error_0 = module_0.DataTruncatedError()
        set_0 = {data_truncated_error_0, data_truncated_error_0, data_truncated_error_0}
        f4m_f_d_0 = module_0.F4mFD(data_truncated_error_0, set_0)
        var_0 = f4m_f_d_0.real_download(float_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'fragments'
        str_1 = 'segments'
        str_2 = 'first'
        int_0 = 7
        int_1 = {str_2: int_0, str_1: int_0, str_2: int_0, str_1: int_0}
        int_2 = [int_1, int_0, int_1]
        int_3 = {str_0: int_2}
        int_4 = [int_3]
        str_3 = 'segment_run'
        int_5 = 2
        int_6 = (int_0, int_5)
        int_7 = [int_6]
        int_8 = {str_3: int_7}
        int_9 = [int_8]
        bool_0 = False
        var_0 = {str_0: int_4, str_1: int_9, str_2: bool_0}
        var_1 = module_0.build_fragments_list(var_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xe6\xddAlT8?\x80)\x84'
        var_0 = module_0.read_bootstrap_info(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        flv_reader_0 = module_0.FlvReader()
        str_0 = '*7GjX'
        var_0 = module_0.write_metadata_tag(flv_reader_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '<media drmAdditionalHeaderId="123"/>'
        var_0 = module_1.compat_etree_fromstring(str_0)
        var_1 = module_1.compat_etree_fromstring(str_0)
        str_1 = '<media/>'
        var_2 = module_1.compat_etree_fromstring(str_1)
        var_3 = [var_0, var_1, var_2]
        var_4 = module_0.remove_encrypted_media(var_3)
        var_5 = len(var_4)
        int_0 = 0
        var_6 = [var_0, var_3, var_1, var_2, var_2]
        var_7 = remove_encrypted_media(var_6)[int_0]
    except BaseException:
        pass