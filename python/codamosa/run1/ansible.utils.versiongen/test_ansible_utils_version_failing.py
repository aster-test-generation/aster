# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        list_0 = []
        bool_0 = True
        alpha_0 = module_0._Alpha(bool_0)
        var_0 = alpha_0.__le__(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -2097
        alpha_0 = module_0._Alpha(int_0)
        str_0 = ';13"6y%'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_0 = alpha_0.__ne__(loose_version_0)
        var_1 = alpha_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        bytes_0 = b'\xd8l?L\xac\n4~\x18\xf4'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        alpha_0 = module_0._Alpha(dict_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_0 = alpha_1.__gt__(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\\Vq\t2MzRz05hc5'
        tuple_0 = (str_0,)
        int_0 = 1435
        tuple_1 = (tuple_0, int_0, int_0)
        int_1 = 1347
        alpha_0 = module_0._Alpha(int_1)
        var_0 = alpha_0.__ge__(tuple_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x91\xb2\x13N\x94'
        numeric_0 = module_0._Numeric(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__repr__()
        list_0 = None
        var_1 = numeric_0.__ge__(numeric_0)
        set_0 = {list_0, list_0}
        semantic_version_0 = module_0.SemanticVersion(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "\x0bh.g|4U`NO881'@=4L"
        float_0 = 1000.0
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__gt__(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '#c]cKqr)\x0cYa7AIa}nt\n\x0b'
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '/etc/rc.conf.local'
        set_0 = set()
        semantic_version_0 = module_0.SemanticVersion(set_0)
        var_0 = semantic_version_0.__le__(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -892.279064
        alpha_0 = module_0._Alpha(float_0)
        var_0 = alpha_0.__lt__(alpha_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__gt__(semantic_version_0)
        semantic_version_1 = module_0.SemanticVersion()
        bool_0 = True
        semantic_version_2 = module_0.SemanticVersion()
        var_2 = semantic_version_2.__ne__(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'x(!\t`[49"^BxQ}-0s'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__lt__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -2094
        alpha_0 = module_0._Alpha(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        dict_0 = {}
        var_0 = alpha_0.__ne__(dict_0)
        set_0 = set()
        loose_version_0 = module_1.LooseVersion(set_0)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -830
        int_1 = 4441
        alpha_0 = module_0._Alpha(int_1)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(semantic_version_0)
        str_0 = 'CCv1-o4rS_@BL\rM<9'
        loose_version_0 = module_1.LooseVersion(str_0)
        alpha_1 = module_0._Alpha(int_0)
        var_1 = alpha_0.__lt__(alpha_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -2097
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__gt__(int_0)
        alpha_0 = module_0._Alpha(int_0)
        dict_0 = {}
        var_1 = alpha_0.__ne__(dict_0)
        semantic_version_0 = module_0.SemanticVersion()
        set_0 = set()
        loose_version_0 = module_1.LooseVersion(set_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(semantic_version_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_1 = semantic_version_1.__repr__()
        semantic_version_2 = None
        int_0 = 681
        numeric_0 = module_0._Numeric(int_0)
        str_0 = ' Return the key associated to a given file descriptor\n         Return None if it is not found. '
        tuple_0 = (str_0,)
        var_2 = numeric_0.__ne__(tuple_0)
        var_3 = semantic_version_2.__repr__()
        set_0 = {tuple_0}
        var_4 = semantic_version_2.__eq__(set_0)
        semantic_version_3 = module_0.SemanticVersion()
        int_1 = -4665
        var_5 = semantic_version_2.from_loose_version(int_1)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        int_0 = 4441
        alpha_0 = module_0._Alpha(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '1.2.3-4'
        var_0 = semantic_version_0.parse(str_0)
        var_1 = semantic_version_0.__gt__(semantic_version_0)
        var_2 = numeric_0.__ne__(bool_0)
        loose_version_0 = module_1.LooseVersion(str_0)
        bool_1 = True
        var_3 = numeric_0.__le__(bool_1)
        alpha_1 = module_0._Alpha(int_0)
        dict_0 = {}
        var_4 = alpha_0.__ne__(dict_0)
        var_5 = semantic_version_0.from_loose_version(loose_version_0)
        var_6 = semantic_version_0.from_loose_version(numeric_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = None
        float_0 = -4036.10872
        semantic_version_0 = None
        str_0 = '#c]cKqr)\x0cYa7AIa}nt\n\x0b'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__ne__(semantic_version_0)
        var_1 = alpha_0.__gt__(str_0)
        alpha_1 = module_0._Alpha(float_0)
        var_2 = alpha_1.__eq__(bool_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_3 = alpha_1.__gt__(semantic_version_1)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -830
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__gt__(int_0)
        var_1 = numeric_0.__eq__(int_0)
        int_1 = 4441
        alpha_0 = module_0._Alpha(int_1)
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '1.2.3-4'
        var_2 = semantic_version_0.parse(str_0)
        var_3 = semantic_version_0.__gt__(semantic_version_0)
        str_1 = 'CCv1-o4rS_@BL\rM<9'
        loose_version_0 = module_1.LooseVersion(str_1)
        bool_1 = True
        var_4 = numeric_0.__le__(bool_1)
        alpha_1 = module_0._Alpha(int_0)
        dict_0 = {}
        var_5 = alpha_0.__ne__(dict_0)
        var_6 = alpha_0.__lt__(alpha_0)
        float_0 = -892.279064
        var_7 = semantic_version_0.__ge__(float_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 37
        alpha_0 = module_0._Alpha(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = alpha_0.__gt__(alpha_0)
        var_1 = semantic_version_0.__gt__(semantic_version_0)
        var_2 = semantic_version_0.__repr__()
        var_3 = alpha_0.__repr__()
        semantic_version_1 = module_0.SemanticVersion()
        str_0 = '<i@'
        var_4 = semantic_version_0.__ne__(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'e'
        str_1 = "GWm@%~lN1;-e8p'1"
        alpha_0 = module_0._Alpha(str_1)
        var_0 = alpha_0.__gt__(str_0)
        float_0 = 189.76733
        var_1 = alpha_0.__ge__(float_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = True
        bool_1 = False
        numeric_0 = module_0._Numeric(bool_1)
        var_0 = numeric_0.__lt__(bool_0)
        bool_2 = None
        alpha_0 = module_0._Alpha(bool_2)
        int_0 = 4458
        float_0 = -3372.42081
        tuple_0 = (alpha_0, int_0, float_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__le__(tuple_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = -845
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__eq__(int_0)
        int_1 = 4441
        alpha_0 = module_0._Alpha(int_1)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__gt__(semantic_version_0)
        str_0 = 'mCCv1-o4rSL_@BL\rM<9'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = numeric_0.__le__(numeric_0)
        var_3 = alpha_0.__ne__(loose_version_0)
        dict_0 = {}
        var_4 = alpha_0.__ne__(dict_0)
        var_5 = alpha_0.__lt__(alpha_0)
        var_6 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        int_0 = 4441
        alpha_0 = module_0._Alpha(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '1.2.3-4'
        var_0 = semantic_version_0.parse(str_0)
        var_1 = semantic_version_0.__gt__(semantic_version_0)
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = numeric_0.__le__(bool_0)
        dict_0 = {}
        var_3 = alpha_0.__le__(numeric_0)
        var_4 = alpha_0.__ne__(dict_0)
        var_5 = numeric_0.__repr__()
        var_6 = semantic_version_0.from_loose_version(loose_version_0)
        loose_version_1 = module_1.LooseVersion(dict_0)
        var_7 = semantic_version_0.from_loose_version(loose_version_1)
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        int_0 = 4441
        alpha_0 = module_0._Alpha(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '1.2.3-4'
        var_0 = semantic_version_0.parse(str_0)
        var_1 = semantic_version_0.__gt__(semantic_version_0)
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = numeric_0.__le__(bool_0)
        dict_0 = None
        var_3 = numeric_0.__gt__(alpha_0)
        var_4 = semantic_version_0.from_loose_version(loose_version_0)
        loose_version_1 = module_1.LooseVersion(dict_0)
        var_5 = semantic_version_0.from_loose_version(loose_version_1)
    except BaseException:
        pass

def test_case_25():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = None
        loose_version_0 = module_1.LooseVersion(str_0)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(semantic_version_0)
        str_0 = ';X13"6y%'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = -845
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__gt__(int_0)
        var_1 = numeric_0.__eq__(int_0)
        int_1 = 4441
        alpha_0 = module_0._Alpha(int_1)
        semantic_version_0 = module_0.SemanticVersion()
        var_2 = semantic_version_0.__gt__(semantic_version_0)
        str_0 = 'CC1-o4rS_@BL\rM<9'
        loose_version_0 = module_1.LooseVersion(str_0)
        bool_1 = True
        var_3 = numeric_0.__le__(bool_1)
        alpha_1 = module_0._Alpha(int_0)
        dict_0 = {}
        var_4 = alpha_0.__ne__(dict_0)
        var_5 = alpha_0.__lt__(alpha_0)
        var_6 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_28():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '1.2.3-4'
        var_0 = semantic_version_0.parse(str_0)
        var_1 = semantic_version_0.__gt__(semantic_version_0)
        dict_0 = None
        loose_version_0 = module_1.LooseVersion(dict_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 4441
        alpha_0 = module_0._Alpha(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '1.2.3-4'
        var_0 = semantic_version_0.parse(str_0)
        var_1 = semantic_version_0.__gt__(semantic_version_0)
        dict_0 = {}
        var_2 = alpha_0.__ne__(dict_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_3 = semantic_version_1.__gt__(semantic_version_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        int_0 = -1926
        alpha_0 = module_0._Alpha(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '1.2.3-'
        var_0 = semantic_version_0.__gt__(semantic_version_0)
        loose_version_0 = module_1.LooseVersion(str_0)
        bool_1 = True
        var_1 = numeric_0.__le__(bool_1)
        alpha_1 = module_0._Alpha(int_0)
        dict_0 = {}
        var_2 = alpha_0.__ne__(dict_0)
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
        var_4 = semantic_version_0.from_loose_version(semantic_version_0)
    except BaseException:
        pass