# Automatically generated by Pynguin.
import tornado.escape as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '~u5g";U7'
    str_1 = module_0.xhtml_escape(str_0)

def test_case_2():
    str_0 = 'hello example.com'
    str_1 = module_0.linkify(str_0)
    str_2 = 'http://www.reallyreallyreallyreallylongurl.com'
    bool_0 = True
    str_3 = module_0.xhtml_unescape(str_0)
    str_4 = module_0.linkify(str_2, bool_0)

def test_case_3():
    str_0 = '#4\n9'
    optional_0 = module_0.to_unicode(str_0)
    str_1 = module_0.json_encode(str_0)
    bool_0 = True
    dict_0 = module_0.parse_qs_bytes(str_0, bool_0)
    str_2 = module_0.url_escape(str_1)

def test_case_4():
    str_0 = ''
    str_1 = module_0.squeeze(str_0)

def test_case_5():
    str_0 = '#'
    bool_0 = None
    var_0 = module_0.url_unescape(str_0, bool_0)

def test_case_6():
    bytes_0 = None
    optional_0 = module_0.utf8(bytes_0)

def test_case_7():
    bool_0 = True
    any_0 = module_0.recursive_unicode(bool_0)

def test_case_8():
    str_0 = 'Hello http://tornadoweb.org!'
    str_1 = module_0.linkify(str_0)

def test_case_9():
    tuple_0 = None
    str_0 = module_0.json_encode(tuple_0)
    str_1 = ')qHo6?kcwz['
    bool_0 = False
    dict_0 = module_0.parse_qs_bytes(str_0, bool_0)
    str_2 = module_0.json_encode(str_1)
    str_3 = 'Returns a suitable Content-Range header:\n\n    >>> print(_get_content_range(None, 1, 4))\n    bytes 0-0/4\n    >>> print(_get_content_range(1, 3, 4))\n    bytes 1-2/4\n    >>> print(_get_content_range(None, None, 4))\n    bytes 0-3/4\n    '
    str_4 = 'm;q'
    str_5 = module_0.squeeze(str_4)
    any_0 = module_0.json_decode(str_0)
    str_6 = module_0.xhtml_escape(str_5)
    optional_0 = module_0.to_unicode(str_3)
    var_0 = module_0.url_unescape(str_1)
    str_7 = module_0.url_escape(str_3, bool_0)
    str_8 = module_0.json_encode(str_7)

def test_case_10():
    int_0 = None
    any_0 = module_0.recursive_unicode(int_0)
    int_1 = 238
    any_1 = module_0.recursive_unicode(int_1)
    str_0 = 'qEalwnW\\'
    optional_0 = module_0.utf8(str_0)
    str_1 = 'openid.ax.type.firstname'
    str_2 = module_0.xhtml_unescape(str_1)
    bool_0 = False
    var_0 = module_0.url_unescape(str_2, str_1)
    bool_1 = None
    var_1 = module_0.url_unescape(str_1, str_1, bool_1)
    optional_1 = module_0.utf8(str_2)
    str_3 = module_0.url_escape(str_1, bool_0)
    str_4 = module_0.xhtml_unescape(str_1)
    optional_2 = module_0.to_unicode(str_1)
    bool_2 = False
    dict_0 = module_0.parse_qs_bytes(str_3, bool_2)
    str_5 = module_0.json_encode(dict_0)
    optional_3 = module_0.to_unicode(str_3)
    str_6 = ')F'
    str_7 = module_0.squeeze(str_6)
    any_2 = module_0.recursive_unicode(str_2)

def test_case_11():
    str_0 = 'ello <a href="http://w`rld.com/foo">http://world.com/foo</a>'
    bool_0 = False
    bool_1 = None
    str_1 = 'BJm`/\\@IUb_vw^'
    list_0 = [str_0, str_1]
    str_2 = module_0.linkify(str_0, bool_0, bool_1, list_0)
    str_3 = 'Â¡Hola http://tornadoweb.org! è®¿é\x97® http://www.example.com'
    optional_0 = module_0.to_unicode(str_0)
    any_0 = module_0.recursive_unicode(bool_1)
    str_4 = module_0.xhtml_escape(str_1)
    str_5 = module_0.xhtml_unescape(str_2)
    any_1 = module_0.recursive_unicode(list_0)
    str_6 = module_0.json_encode(str_3)

def test_case_12():
    str_0 = ':s/:]>6Le_R9 X'
    list_0 = [str_0, str_0, str_0]
    str_1 = module_0.xhtml_unescape(str_0)
    str_2 = module_0.linkify(str_0, list_0)
    str_3 = module_0.xhtml_escape(str_0)
    str_4 = module_0.xhtml_unescape(str_2)

def test_case_13():
    str_0 = '\x0ck'
    str_1 = module_0.xhtml_unescape(str_0)
    str_2 = module_0.xhtml_unescape(str_0)
    str_3 = 'Twitter OAuth authentication.\n\n    To authenticate with Twitter, register your application with\n    Twitter at http://twitter.com/apps. Then copy your Consumer Key\n    and Consumer Secret to the application\n    `~tornado.web.Application.settings` ``twitter_consumer_key`` and\n    ``twitter_consumer_secret``. Use this mixin on the handler for the\n    URL you registered as your application\'s callback URL.\n\n    When your application is set up, you can use this mixin like this\n    to authenticate the user with Twitter and get access to their stream:\n\n    .. testcode::\n\n        class TwitterLoginHandler(tornado.web.RequestHandler,\n                                  tornado.auth.TwitterMixin):\n            async def get(self):\n                if self.get_argument("oauth_token", None):\n                    user = await self.get_authenticated_user()\n                    # Save the user using e.g. set_secure_cookie()\n                else:\n                    await self.authorize_redirect()\n\n    .. testoutput::\n       :hide:\n\n    The user object returned by `~OAuthMixin.get_authenticated_user`\n    includes the attributes ``username``, ``name``, ``access_token``,\n    and all of the custom Twitter user attributes described at\n    https://dev.twitter.com/docs/api/1.1/get/users/show\n    '
    bool_0 = False
    any_0 = module_0.recursive_unicode(str_3)
    tuple_0 = (str_0, str_3, bool_0, str_3)
    str_4 = module_0.squeeze(str_0)
    any_1 = module_0.recursive_unicode(str_1)
    optional_0 = module_0.utf8(str_0)
    str_5 = module_0.linkify(str_3)
    list_0 = [str_2, str_1, str_2]
    str_6 = module_0.linkify(str_5, list_0)
    str_7 = module_0.json_encode(bool_0)
    any_2 = module_0.recursive_unicode(tuple_0)

def test_case_14():
    str_0 = 'http://www.reallyreallyreallyreallylongurl.com'
    bool_0 = True
    str_1 = module_0.linkify(str_0, bool_0)

def test_case_15():
    str_0 = 'This is a test for linkify. Please click the link - https://tornado.readthedocs.org'
    str_1 = module_0.linkify(str_0, str_0)

def test_case_16():
    str_0 = 'Visit us at http://www.example.com, "click here":http://www.example.com/?a=b&c=d or at www.foo.org/?q=blah. Or at example.com/?q=blah'
    str_1 = module_0.linkify(str_0)

def test_case_17():
    str_0 = 'hello http://friendfeed.com/e/9f4cf44d-cc66-a271-4563-3cfbed94b2f4'
    bool_0 = True
    str_1 = module_0.linkify(str_0, bool_0)

def test_case_18():
    str_0 = 'hello <a href="http://world.com/foo">http://world.com/foo</a>'
    str_1 = module_0.linkify(str_0, str_0)
    str_2 = 's9BO"XofR_y"S_9\r'
    bool_0 = True
    str_3 = module_0.linkify(str_2, bool_0)

def test_case_19():
    str_0 = 'Hello http://tornadoweb.org!'
    str_1 = 'Hello <a href="http://tornadoweb.org">http://tornadoweb.org</a>!'
    str_2 = module_0.linkify(str_0)
    bool_0 = True
    str_3 = ''
    list_0 = [str_1, str_3, str_0]
    str_4 = module_0.linkify(str_2, bool_0, str_0, bool_0, list_0)

def test_case_20():
    str_0 = '<a href="http://example.com">http://example.com</a> is a URL and so is <a href="https://example.com/">https://example.com/</a> and you can email <a href="mailto:me@foo.com">me@foo.com</a> or visit <a href="ftp://ftp.example.com/">ftp://ftp.example.com/</a>'
    str_1 = module_0.linkify(str_0)

def test_case_21():
    str_0 = 'I found a link: www.example.com.'
    str_1 = module_0.linkify(str_0)
    str_2 = 'Â¡Hola http://tornadoweb.org! è®¿é\x97® http://www.example.com'
    bool_0 = True
    var_0 = module_0.url_unescape(str_2, bool_0)
    str_3 = module_0.linkify(str_1, bool_0)
    bool_1 = False
    str_4 = 'F>.exh<rEvv'
    str_5 = 'Lb'
    str_6 = 'hF.<rV~`NF1hc '
    list_0 = [str_5, str_6, str_6, str_1]
    str_7 = module_0.linkify(str_0, bool_1, str_4, bool_1, list_0)
    str_8 = '#'
    optional_0 = module_0.to_unicode(str_7)
    str_9 = module_0.json_encode(var_0)
    any_0 = module_0.recursive_unicode(list_0)
    str_10 = ''
    str_11 = module_0.json_encode(str_5)
    str_12 = module_0.xhtml_unescape(str_3)
    none_type_0 = None
    bool_2 = False
    var_1 = module_0.url_unescape(str_8, none_type_0, bool_2)
    str_13 = module_0.linkify(str_11, str_10)

def test_case_22():
    str_0 = '<a href="http://www.foxnews.com/">Hello www.foxnews.com</a>'
    str_1 = module_0.linkify(str_0)
    str_2 = 'www.google.com/search?q=hello&world&ie=utf-8&oe=utf-8'
    bool_0 = True
    str_3 = module_0.linkify(str_2, bool_0)