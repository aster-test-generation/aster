# Automatically generated by Pynguin.
import ansible.vars.fact_cache as module_0

def test_case_0():
    pass

def test_case_1():
    fact_cache_0 = module_0.FactCache()

def test_case_2():
    str_0 = '-$w3B'
    int_0 = None
    fact_cache_0 = module_0.FactCache()
    var_0 = fact_cache_0.first_order_merge(str_0, int_0)

def test_case_3():
    fact_cache_0 = module_0.FactCache()
    var_0 = fact_cache_0.__iter__()

def test_case_4():
    fact_cache_0 = module_0.FactCache()
    var_0 = fact_cache_0.__len__()

def test_case_5():
    bool_0 = False
    str_0 = '\ndest:\n  description: Path to the destination directory.\n  returned: always\n  type: str\n  sample: /opt/software\nfiles:\n  description: List of all the files in the archive.\n  returned: When I(list_files) is True\n  type: list\n  sample: \'["file1", "file2"]\'\ngid:\n  description: Numerical ID of the group that owns the destination directory.\n  returned: always\n  type: int\n  sample: 1000\ngroup:\n  description: Name of the group that owns the destination directory.\n  returned: always\n  type: str\n  sample: "librarians"\nhandler:\n  description: Archive software handler used to extract and decompress the archive.\n  returned: always\n  type: str\n  sample: "TgzArchive"\nmode:\n  description: String that represents the octal permissions of the destination directory.\n  returned: always\n  type: str\n  sample: "0755"\nowner:\n  description: Name of the user that owns the destination directory.\n  returned: always\n  type: str\n  sample: "paul"\nsize:\n  description: The size of destination directory in bytes. Does not include the size of files or subdirectories contained within.\n  returned: always\n  type: int\n  sample: 36\nsrc:\n  description:\n    - The source archive\'s path.\n    - If I(src) was a remote web URL, or from the local ansible controller, this shows the temporary location where the download was stored.\n  returned: always\n  type: str\n  sample: "/home/paul/test.tar.gz"\nstate:\n  description: State of the destination. Effectively always "directory".\n  returned: always\n  type: str\n  sample: "directory"\nuid:\n  description: Numerical ID of the user that owns the destination directory.\n  returned: always\n  type: int\n  sample: 1000\n'
    fact_cache_0 = module_0.FactCache()
    var_0 = fact_cache_0.__contains__(str_0)
    var_1 = fact_cache_0.__iter__()
    tuple_0 = ()
    str_1 = '&q\x0cgG`Fv9kwHSAdq'
    set_0 = {tuple_0, tuple_0, bool_0}
    var_2 = fact_cache_0.first_order_merge(str_1, set_0)
    var_3 = fact_cache_0.copy()

def test_case_6():
    fact_cache_0 = module_0.FactCache()
    var_0 = fact_cache_0.keys()

def test_case_7():
    fact_cache_0 = module_0.FactCache()
    var_0 = fact_cache_0.flush()