# Automatically generated by Pynguin.
import ansible.module_utils.api as module_0

def test_case_0():
    try:
        bytes_0 = b'[D\xc6\x8b\xe90:K\x949\x17\x07\x02\x9c'
        var_0 = module_0.retry()
        set_0 = {bytes_0, bytes_0, bytes_0}
        var_1 = module_0.retry(set_0)
        float_0 = 597.929102
        var_2 = module_0.rate_limit_argument_spec(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -244
        var_0 = module_0.retry_argument_spec(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        var_0 = module_0.rate_limit(list_0)
        int_0 = 27
        bool_0 = True
        var_1 = module_0.generate_jittered_backoff(int_0, bool_0, int_0)
        var_2 = module_0.rate_limit_argument_spec()
        str_0 = '8}jJX6ja'
        var_3 = module_0.basic_auth_argument_spec(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.retry()
        var_1 = module_0.retry_argument_spec()
        int_0 = -974
        var_2 = module_0.generate_jittered_backoff(int_0)
        str_0 = '\r3cf2cxU\x0c'
        var_3 = module_0.rate_limit(str_0)
        var_4 = module_0.retry()
        var_5 = module_0.basic_auth_argument_spec()
        bytes_0 = b'\xa5\x19\xd9\xc7\xb3\x94\x96\xaf\xa3\xb0\x13\x02\xf9NS'
        var_6 = module_0.retry_with_delays_and_condition(bytes_0)
        set_0 = {var_2, int_0, var_3, int_0}
        var_7 = module_0.basic_auth_argument_spec(var_2)
        var_8 = module_0.retry_argument_spec()
        var_9 = module_0.retry_never(int_0)
        list_0 = [var_1, int_0, var_5]
        var_10 = module_0.rate_limit(list_0)
        set_1 = set()
        var_11 = module_0.retry_never(set_1)
        var_12 = module_0.rate_limit(int_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -372.206
        var_0 = module_0.retry()
        var_1 = module_0.retry_argument_spec()
        int_0 = -974
        var_2 = module_0.generate_jittered_backoff(int_0)
        str_0 = '\r3cf2cxU\x0c'
        var_3 = module_0.rate_limit(str_0)
        var_4 = module_0.retry()
        var_5 = module_0.basic_auth_argument_spec()
        bytes_0 = b'\xa5\x19\xd9\xc7\xb3\x94\x96\xaf\xa3\xb0\x13\x02\xf9NS'
        var_6 = module_0.retry_with_delays_and_condition(bytes_0)
        var_7 = module_0.generate_jittered_backoff()
        var_8 = module_0.basic_auth_argument_spec(var_2)
        var_9 = module_0.retry_argument_spec()
        var_10 = module_0.retry_never(int_0)
        set_0 = set()
        var_11 = module_0.retry_never(set_0)
        var_12 = module_0.retry_never(str_0)
        var_13 = module_0.generate_jittered_backoff()
        var_14 = module_0.retry_argument_spec(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.retry()
        var_1 = module_0.retry_argument_spec()
        int_0 = 69
        var_2 = module_0.generate_jittered_backoff(int_0)
        str_0 = '\r3cf2cxU\x0c'
        var_3 = module_0.rate_limit(str_0)
        var_4 = module_0.retry()
        var_5 = module_0.basic_auth_argument_spec()
        bytes_0 = b'\xa5\x19\xd9\xc7\xb3\x94\x96\xaf\xa3\xb0\x13\x02\xf9NS'
        var_6 = module_0.retry_with_delays_and_condition(bytes_0)
        var_7 = module_0.generate_jittered_backoff()
        var_8 = module_0.basic_auth_argument_spec(var_2)
    except BaseException:
        pass