# Automatically generated by Pynguin.
import pysnooper.tracer as module_0
import inspect as module_1

def test_case_0():
    try:
        dict_0 = {}
        float_0 = 422.4
        list_0 = [dict_0, dict_0, float_0]
        bool_0 = True
        var_0 = module_0.get_write_function(list_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\x0c;d:j{eA:\n\x0b'
        set_0 = {str_0, str_0, str_0, str_0}
        tracer_0 = module_0.Tracer(str_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1260.411076
        int_0 = None
        var_0 = module_0.get_write_function(float_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0}
        file_writer_0 = module_0.FileWriter(bool_0, set_0)
        var_0 = file_writer_0.write(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ZAeam6;5<gK322\rq2crV'
        tracer_0 = module_0.Tracer(str_0)
        var_0 = tracer_0.__enter__()
        tracer_1 = None
        var_1 = module_0.get_path_and_source_from_frame(tracer_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'CaL1-M@H+Fk&)X?hR'
        float_0 = -339.547
        str_1 = 'F7\t$ \t_'
        dict_0 = {float_0: float_0, str_1: str_0}
        dict_1 = None
        bool_0 = True
        set_0 = set()
        tuple_0 = (bool_0, set_0)
        int_0 = 1
        tracer_0 = module_0.Tracer(str_0, str_1, dict_0, dict_1, tuple_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'CaL1-M@H+Fky)X?.v'
        float_0 = -338.2007647526244
        list_0 = [str_0, float_0, float_0, float_0]
        file_writer_0 = module_0.FileWriter(str_0, list_0)
        str_1 = '({}).x'
        tracer_0 = module_0.Tracer(file_writer_0, str_1, str_1)
        complex_0 = None
        str_2 = '!B'
        int_0 = 442
        var_0 = tracer_0.__enter__()
        dict_0 = {float_0: complex_0, str_0: complex_0}
        tracer_1 = module_0.Tracer(str_2, int_0, complex_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tracer_0 = module_0.Tracer()
        bytes_0 = b'\xba\x08\xe2\xdf\xaa\xd1\xa8\x12#]\xaa\xb8\xe4'
        var_0 = tracer_0.__call__(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tracer_0 = module_0.Tracer()
        str_0 = '>'
        var_0 = tracer_0.__exit__(tracer_0, str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'return'
        float_0 = -338.20076
        list_0 = [str_0, float_0, float_0, float_0]
        file_writer_0 = module_0.FileWriter(str_0, list_0)
        str_1 = '({}).x'
        tracer_0 = module_0.Tracer(file_writer_0, str_1, str_1)
        var_0 = tracer_0.__enter__()
        bytes_0 = b'\xaf\x92\xd3('
        dict_0 = None
        set_0 = {str_0, dict_0, float_0}
        str_2 = '5SyH: i?'
        var_1 = tracer_0.__exit__(bytes_0, set_0, str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = module_1.currentframe()
        str_0 = '^.0}rNG2,R\x0b'
        str_1 = 'return'
        set_0 = None
        file_writer_0 = module_0.FileWriter(str_1, set_0)
        bool_0 = False
        set_1 = {tracer_0}
        file_writer_1 = module_0.FileWriter(str_0, set_1)
        int_0 = 3705
        tracer_1 = module_0.Tracer(tracer_0, bool_0, file_writer_1, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'C\nL1-M@H+Fky)X)?.v'
        float_0 = -338.20076
        list_0 = [str_0, float_0, float_0, float_0]
        file_writer_0 = module_0.FileWriter(str_0, list_0)
        str_1 = '({}).x'
        tracer_0 = module_0.Tracer(file_writer_0, str_1, str_1, float_0)
    except BaseException:
        pass