# Automatically generated by Pynguin.
import pysnooper.utils as module_0

def test_case_0():
    try:
        str_0 = 'rb'
        var_0 = module_0.ensure_tuple(str_0)
        bool_0 = True
        var_1 = module_0.normalize_repr(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\x0bD'
        var_0 = module_0.shitcode(str_0)
        bytes_0 = b'\xb7\xe6\xef{\xd7'
        var_1 = module_0.ensure_tuple(bytes_0)
        bool_0 = False
        var_2 = module_0.truncate(str_0, bool_0)
        var_3 = module_0.get_shortish_repr(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        var_0 = module_0.get_shortish_repr(dict_0)
        list_0 = [var_0, str_0, str_0]
        var_1 = module_0.get_repr_function(dict_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        dict_0 = {set_0: set_0}
        var_0 = module_0.truncate(set_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'E_PV)#{<ll'
        var_0 = module_0.shitcode(str_0)
        int_0 = -1199
        var_1 = module_0.ensure_tuple(int_0)
        writable_stream_0 = None
        var_2 = module_0.shitcode(writable_stream_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        var_0 = module_0.get_shortish_repr(bool_0)
        list_0 = []
        bool_1 = False
        var_1 = module_0.truncate(list_0, bool_1)
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        dict_0 = {}
        var_0 = module_0.get_shortish_repr(dict_0)
        list_0 = [var_0, str_0, str_0]
        var_1 = module_0.get_repr_function(dict_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'bla'
        var_0 = module_0.shitcode(str_0)
        str_1 = '\x00'
        var_1 = module_0.shitcode(str_1)
        str_2 = '\x00\x00\x00'
        var_2 = module_0.shitcode(str_2)
        str_3 = '\x01\x02\x03'
        var_3 = module_0.shitcode(str_3)
        str_4 = '\x00\x01\x02\x03'
        var_4 = module_0.shitcode(str_4)
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '{}.x'
        str_1 = 'get_source'
        str_2 = '"766F)=LS&V'
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
        dict_1 = {}
        bool_0 = True
        var_0 = module_0.get_shortish_repr(dict_0, dict_1, bool_0)
        str_3 = '63e`aIOM@7~H$'
        list_0 = [str_3, str_3, str_3, str_3]
        dict_2 = {}
        writable_stream_0 = module_0.WritableStream(*list_0, **dict_2)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -16
        list_0 = [int_0, int_0]
        dict_0 = {}
        bytes_0 = b'\xa0p\xcfu'
        str_0 = '[{}]'
        var_0 = module_0.get_shortish_repr(list_0, dict_0, bytes_0, str_0)
    except BaseException:
        pass