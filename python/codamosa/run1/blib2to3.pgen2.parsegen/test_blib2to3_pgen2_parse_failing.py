# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        int_0 = 774
        str_0 = '2jH_!BoBM@/'
        int_1 = -2382
        grammar_0 = module_0.Grammar()
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = []
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
        tuple_3 = (int_1, int_0)
        grammar_1 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_1)
        grammar_2 = module_0.Grammar()
        parser_1 = module_1.Parser(grammar_2)
        str_1 = '~1gf'
        tuple_4 = (str_1, tuple_3)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_4)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 852
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        optional_0 = None
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, optional_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 4956
        str_0 = 'Ne/D2'
        int_1 = None
        int_2 = 1220
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.shift(int_0, str_0, int_1, tuple_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1300
        list_0 = None
        list_1 = [list_0, list_0, list_0, list_0]
        dict_0 = {}
        tuple_0 = (list_1, dict_0)
        str_0 = 'C*C+1'
        int_1 = 218
        tuple_1 = (int_1, int_1)
        tuple_2 = (str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_0, int_0, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        str_0 = '|'
        list_0 = [grammar_0, str_0]
        parser_0 = module_1.Parser(grammar_0, list_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'a|@,X\n'
        grammar_0 = module_0.Grammar()
        int_0 = -1766
        str_1 = '\\s+{(\\d+), (\\d+)},$'
        str_2 = 'xF.9T[./JVPG~]W'
        int_1 = None
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_2, tuple_0)
        parse_error_0 = module_1.ParseError(str_1, int_0, str_1, tuple_1)
        optional_0 = None
        tuple_2 = (int_0, str_0, parse_error_0, optional_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2
        str_0 = '{Q4:vuZG)F,'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        dict_0 = {str_0: grammar_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        parser_0 = module_1.Parser(grammar_0, dict_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        grammar_0 = module_0.Grammar()
        str_0 = 'xsP/4\x0b\t|'
        int_0 = 11
        tuple_0 = (int_0, int_0)
        int_1 = 1
        tuple_1 = (str_0, tuple_0)
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_1, str_0, tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        str_0 = 'l'
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        var_0 = None
        int_1 = parser_0.classify(int_0, var_0, str_0)
    except BaseException:
        pass