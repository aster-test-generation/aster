# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        int_0 = None
        list_0 = [int_0]
        bytes_0 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(list_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xf2\xc3\x1c\x1f\xe7\x93 \xca{:\x15\xa9K\x91%\xa0^\x11\x98\xad'
        str_0 = '?{'
        str_1 = "#jfZP,'p"
        dict_0 = {str_0: bytes_0, str_1: bytes_0, str_1: str_0}
        float_0 = -504.234571
        list_0 = [dict_0, dict_0, str_0]
        list_1 = [list_0, str_0]
        plugin_path_context_0 = module_0.PluginPathContext(list_0, list_1)
        plugin_load_context_0 = module_0.PluginLoadContext()
        tuple_0 = (plugin_load_context_0,)
        str_2 = 'Add vars to graph display, ignored unless used with --graph'
        plugin_loader_0 = module_0.PluginLoader(float_0, bytes_0, plugin_path_context_0, tuple_0, str_2, float_0)
        var_0 = plugin_load_context_0.record_deprecation(bytes_0, dict_0, plugin_loader_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '__init__'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'jn"6D\'^!-|4lKER'
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.redirect(str_0)
        str_1 = 'C'
        var_1 = module_0.get_shell_plugin(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '__ini_'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'w/g5\\4tC'
        float_0 = 2466.0
        list_0 = []
        bytes_0 = b'\x13\x85\xda{\xb1\x0b\xb2f\x057\xd6Q\xcc2\xe9\t\xc4\x17'
        str_1 = 'Gf*tSyWgp1+sx#'
        plugin_loader_0 = module_0.PluginLoader(str_0, float_0, list_0, bytes_0, str_1)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1213.847883
        list_0 = [float_0]
        bytes_0 = b'\xf3\xfe;'
        set_0 = {bytes_0, bytes_0}
        plugin_loader_0 = module_0.PluginLoader(float_0, list_0, bytes_0, set_0)
        var_0 = plugin_loader_0.__getstate__()
        str_0 = '6ME/9s}V&6[\nvHpZ'
        list_1 = []
        str_1 = 'kM$s;pH&$I2fI'
        dict_0 = {str_0: set_0, str_0: float_0, str_0: list_1, str_1: plugin_loader_0}
        var_1 = plugin_loader_0.__setstate__(dict_0)
        var_2 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\x0b'
        plugin_path_context_0 = None
        list_0 = [plugin_path_context_0, str_0]
        bytes_0 = b'm\xdb\xfd4p/P#'
        bytes_1 = b'\xce\xd8\xd4Y\x92\x0c\xc0o\xe6\xb4_'
        bytes_2 = b"\xebX]\x9a\xf3q'\xa0\xa2\xbb\x95\x7f\xd3\xbf\x95\xb0\x91&\xf7W"
        float_0 = 1.5
        plugin_loader_0 = module_0.PluginLoader(bytes_1, plugin_path_context_0, bytes_2, float_0, list_0)
        var_0 = plugin_loader_0.has_plugin(bytes_0)
        var_1 = module_0.get_shell_plugin(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        plugin_path_context_0 = None
        float_0 = 4514.35086
        int_0 = -46
        list_0 = [int_0, plugin_path_context_0, plugin_path_context_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_loader_0 = module_0.PluginLoader(float_0, int_0, list_0, plugin_path_context_0, plugin_load_context_0)
        var_0 = plugin_loader_0.has_plugin(plugin_path_context_0)
        var_1 = module_0.get_shell_plugin(plugin_path_context_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -2299
        str_0 = "F\tE'P\\Z^4"
        bytes_0 = b'&'
        list_0 = None
        dict_0 = {str_0: bytes_0, str_0: list_0, str_0: str_0, str_0: str_0}
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, list_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = True
        plugin_loader_0 = module_0.PluginLoader(int_0, plugin_load_context_0, bool_0, plugin_load_context_0, dict_0)
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_0 = plugin_loader_0.find_plugin_with_context(plugin_load_context_0, plugin_load_context_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = []
        str_0 = "1k'r62D"
        bytes_0 = b'\xb0+\xac*\x03B=Hp\x93\xe2\xe4]\xd5\x80\t\xfa\xbf)\x0f'
        set_0 = {bytes_0}
        dict_0 = {str_0: bytes_0}
        plugin_path_context_0 = module_0.PluginPathContext(set_0, dict_0)
        bool_0 = True
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, bytes_0, list_0, plugin_path_context_0, bool_0)
        str_1 = 'LrM&NUGV7F=ZIe]k'
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(list_0, jinja2_loader_0, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x1d\x98^y\xcc\x1d\xd7Bp\xcbm\xfb(K^\xd6-\r'
        float_0 = -2762.0
        str_0 = 'ppc64'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, float_0, str_0, dict_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        float_0 = 60.0
        dict_0 = None
        str_0 = '1;32'
        str_1 = None
        dict_1 = {str_0: str_0, str_1: tuple_0}
        list_0 = [dict_0, float_0, float_0, dict_1]
        plugin_loader_0 = module_0.PluginLoader(tuple_0, float_0, str_0, list_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1701
        str_0 = '[(% ?1"_'
        str_1 = "F\tE'P\\Z^4"
        bytes_0 = b'&'
        list_0 = None
        dict_0 = {str_1: list_0}
        list_1 = None
        str_2 = 'unsafe_writes'
        dict_1 = {str_2: bytes_0}
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_0, dict_1)
        set_0 = {int_0, int_0, plugin_path_context_0}
        plugin_loader_0 = module_0.PluginLoader(list_0, dict_1, set_0, plugin_load_context_0)
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_0 = plugin_loader_0.has_plugin(dict_0, list_1)
        str_3 = 'H(gpiCA9 '
        dict_2 = {str_1: bytes_0, str_1: list_0, str_1: str_1, str_3: str_3}
        plugin_path_context_1 = module_0.PluginPathContext(dict_2, list_0)
        plugin_load_context_2 = module_0.PluginLoadContext()
        tuple_0 = (plugin_load_context_2,)
        var_1 = module_0.get_all_plugin_loaders()
        list_2 = [tuple_0, plugin_path_context_1]
        int_1 = -81
        plugin_loader_1 = module_0.PluginLoader(tuple_0, list_2, int_1, plugin_path_context_1, list_0)
        plugin_loader_2 = module_0.PluginLoader(int_0, str_0, plugin_path_context_1, plugin_loader_1)
        float_0 = 143.2107
        bool_0 = True
        bool_1 = True
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, plugin_loader_2, dict_0, bool_1)
        set_1 = set()
        plugin_loader_3 = module_0.PluginLoader(plugin_path_context_1, plugin_path_context_0, dict_1, jinja2_loader_0, set_1)
        plugin_load_context_3 = module_0.PluginLoadContext()
        get_with_context_result_0 = module_0.get_with_context_result(*list_2)
        float_1 = None
        var_2 = plugin_loader_3.find_plugin_with_context(set_1, float_0, float_1, get_with_context_result_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '__inGit__'
        plugin_path_context_0 = None
        var_0 = module_0.get_shell_plugin(plugin_path_context_0, str_0)
        tuple_0 = ()
        bytes_0 = b"F'"
        bytes_1 = b'\xa3\xa3\t\x04\xa1\xbf\x11Y\x1aMLI\x9f\xbc'
        dict_0 = {bytes_0: plugin_path_context_0}
        plugin_loader_0 = module_0.PluginLoader(tuple_0, bytes_0, bytes_1, dict_0, plugin_path_context_0)
        var_1 = plugin_loader_0.get(var_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        str_1 = 'jlVbP Iiq>$V'
        str_2 = 'xo/m\x0c;8bCf&MQ3c=^\\&4'
        str_3 = 'F@=v'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_0}
        list_0 = [dict_0, str_0, str_3, dict_0]
        int_0 = -793
        bytes_0 = b'\x15\xedb\xd7\x88E\x16\xd7\xe0\x90O/'
        list_1 = [str_0, dict_0]
        tuple_0 = (list_0, int_0, bytes_0, list_1)
        dict_1 = {str_0: tuple_0}
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, dict_1)
        list_2 = [plugin_path_context_0, list_0, dict_0, tuple_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(list_2, dict_1, int_0)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'U]#;j@$k!\\two'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 't_init__'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '{'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '/home/myeongsoo/.ansible/plugins/doc_fragments/windows'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = None
        set_0 = {str_0, str_0, str_0}
        str_1 = '"/l(5UuVTyc|}q@q]='
        str_2 = 'GyO/GfIK\x0ctx7bzO<Ou='
        dict_0 = {str_1: set_0, str_2: set_0, str_1: str_2}
        str_3 = '7*bG\rs;s|'
        float_0 = -1883.1668
        set_1 = {str_0, str_3}
        int_0 = 246
        plugin_path_context_0 = module_0.PluginPathContext(set_1, int_0)
        int_1 = 302
        plugin_loader_0 = module_0.PluginLoader(str_3, float_0, plugin_path_context_0, int_1, set_1)
        var_0 = plugin_loader_0.get(set_0, **dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '__init__'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '\rW'
        int_0 = 254
        int_1 = -2033
        list_0 = [int_0, int_1, str_0, int_1]
        float_0 = -854.7
        str_1 = '/tmp/tmpfd_p5z19/aster-py-cli/test-apps/ansible/lib/ansible/plugins/shell/windows'
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_1 = [plugin_load_context_0, str_1]
        int_2 = 433
        jinja2_loader_0 = module_0.Jinja2Loader(str_1, plugin_load_context_0, list_1, int_2)
        list_2 = [str_0]
        plugin_loader_0 = module_0.PluginLoader(float_0, jinja2_loader_0, list_2, jinja2_loader_0)
        var_0 = plugin_loader_0.has_plugin(int_0, list_0)
        get_with_context_result_0 = module_0.get_with_context_result()
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'b'
        bytes_0 = b'\xfdVv8\xafX\x9c\xe3\xb3cp\x15\xdd'
        list_0 = [str_0, bytes_0]
        str_1 = 'cmd'
        dict_0 = {str_1: bytes_0, str_0: bytes_0}
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, dict_0)
        set_0 = {str_0}
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, list_0, plugin_path_context_0, set_0)
        var_0 = jinja2_loader_0.find_plugin(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '__nitU_'
        plugin_path_context_0 = None
        list_0 = []
        int_0 = 3587
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_1 = []
        str_1 = '^#G6>'
        str_2 = '|5_\t%^k81f{\t]N'
        str_3 = None
        dict_0 = {str_1: str_0, str_2: str_0, str_2: plugin_path_context_0, str_3: str_2}
        plugin_loader_0 = module_0.PluginLoader(int_0, plugin_load_context_0, list_1, list_1, dict_0)
        var_0 = plugin_loader_0.get(plugin_path_context_0, *list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        plugin_path_context_0 = None
        str_0 = "cY'iu@8m."
        float_0 = -640.781855
        bool_0 = False
        float_1 = 1000.0
        tuple_0 = (float_0, bool_0, float_1)
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\x96}\xbb\xf7\x94\xe05\xb0\xe5\\v\x032\xf4'
        bool_1 = True
        list_0 = [plugin_load_context_0, bool_0]
        plugin_loader_0 = module_0.PluginLoader(bool_1, plugin_path_context_0, str_0, list_0, bytes_0)
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, tuple_0, plugin_load_context_0, bytes_0, plugin_loader_0)
        bool_2 = True
        float_2 = 60.0
        int_0 = 1089
        set_0 = set()
        jinja2_loader_1 = module_0.Jinja2Loader(bool_2, float_2, int_0, set_0, plugin_path_context_0)
        var_0 = jinja2_loader_1.get(jinja2_loader_0)
    except BaseException:
        pass