# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0
import docstring_parser.common as module_1

def test_case_0():
    try:
        str_0 = '*h1NjEu6$S#"\n84'
        str_1 = 'VZ^<q5C"c!g@5XY8\x0b*'
        str_2 = 'hYfmfL(L1}kX9v\\W"W2['
        deprecation_section_0 = module_0.DeprecationSection(str_0, str_2)
        returns_section_0 = module_0.ReturnsSection(str_0, str_1)
        deprecation_section_1 = module_0.DeprecationSection(str_2, str_1)
        numpydoc_parser_0 = module_0.NumpydocParser()
        docstring_0 = module_0.parse(str_0)
        iterable_0 = deprecation_section_1.parse(str_0)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ')'
        str_1 = 'VZ^<q5C"c!g@5Y8\x0b*'
        returns_section_0 = module_0.ReturnsSection(str_0, str_1)
        str_2 = 'tH\x0cfCMis*'
        deprecation_section_0 = module_0.DeprecationSection(str_2, str_1)
        iterable_0 = deprecation_section_0.parse(str_2)
        section_0 = module_0.Section(str_1, str_2)
        numpydoc_parser_0 = module_0.NumpydocParser()
        var_0 = numpydoc_parser_0.add_section(section_0)
        docstring_0 = module_0.parse(str_2)
        iterable_1 = deprecation_section_0.parse(str_0)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        returns_section_0 = module_0.ReturnsSection(str_0, str_0)
        numpydoc_parser_0 = module_0.NumpydocParser()
        str_1 = 'deprecated'
        str_2 = 'v;+E*@'
        section_0 = module_0.Section(str_2, str_0)
        str_3 = '%U\t='
        str_4 = "M&XtwSp'R32Sy}*Bo_W"
        k_v_section_0 = module_0._KVSection(str_3, str_4)
        docstring_0 = numpydoc_parser_0.parse(str_0)
        iterable_0 = k_v_section_0.parse(str_1)
        docstring_1 = numpydoc_parser_0.parse(str_0)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n    \n    Compute the area of a rectangle.\n    \n    Parameters\n    ----------\n    length : float\n        Length of the rectangle\n    width : float\n        Width of the rectangle\n    \n    Returns\n    -------\n    area : float\n        Area of the rectangle'
        str_1 = '\nfoo'
        numpydoc_parser_0 = module_0.NumpydocParser()
        docstring_0 = numpydoc_parser_0.parse(str_1)
        docstring_1 = module_1.Docstring()
        str_2 = '%,'
        k_v_section_0 = module_0._KVSection(str_0, str_2)
        iterable_0 = k_v_section_0.parse(str_0)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_0)
        str_3 = 'Arguments'
        docstring_2 = numpydoc_parser_0.parse(str_3)
        str_4 = 'bar'
        docstring_3 = module_1.Docstring()
        docstring_4 = numpydoc_parser_1.parse(str_4)
    except BaseException:
        pass