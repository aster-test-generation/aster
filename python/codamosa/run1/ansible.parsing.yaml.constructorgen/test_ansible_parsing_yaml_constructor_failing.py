# Automatically generated by Pynguin.
import ansible.parsing.yaml.constructor as module_0
import ansible.parsing.yaml.objects as module_1
import yaml.nodes as module_2

def test_case_0():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_0.construct_mapping(ansible_constructor_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        bool_1 = True
        tuple_0 = (bool_0, bool_1)
        ansible_constructor_0 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_0.construct_yaml_str(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        ansible_constructor_0 = module_0.AnsibleConstructor(bool_0)
        ansible_constructor_1 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_1.construct_vault_encrypted_unicode(ansible_constructor_0)
    except BaseException:
        pass

def test_case_3():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        bytes_0 = b'.\xa9\xeb\xc3'
        var_0 = ansible_constructor_0.construct_yaml_unsafe(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ' re-encrypt a vaulted file with a new secret, the previous secret is required '
        ansible_vault_encrypted_unicode_0 = module_1.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [ansible_vault_encrypted_unicode_0]
        str_1 = "4egH'ph?)6"
        list_1 = [str_1, str_1]
        ansible_constructor_0 = module_0.AnsibleConstructor(str_1, list_1)
        var_0 = ansible_constructor_0.construct_mapping(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        int_0 = 19
        ansible_mapping_0 = module_1.AnsibleMapping()
        mapping_node_0 = module_2.MappingNode(int_0, ansible_mapping_0, ansible_mapping_0)
        var_0 = ansible_constructor_0.construct_mapping(mapping_node_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'i:'
        ansible_constructor_0 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_0.construct_yaml_map(str_0)
        list_0 = [var_0]
        ansible_mapping_0 = module_1.AnsibleMapping(*list_0)
    except BaseException:
        pass