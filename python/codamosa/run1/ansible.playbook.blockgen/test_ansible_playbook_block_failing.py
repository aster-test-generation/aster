# Automatically generated by Pynguin.
import ansible.playbook.role as module_0
import ansible.playbook.block as module_1

def test_case_0():
    try:
        int_0 = 0
        str_0 = '06135b5f-f788-1561-1344-000000002ecf'
        role_0 = module_0.Role(str_0)
        bool_0 = True
        block_0 = module_1.Block(int_0, int_0, role_0, bool_0)
        var_0 = block_0.serialize()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'failed to transfer file to %s'
        block_0 = module_1.Block(str_0, str_0)
        var_0 = block_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = None
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
        str_0 = '{.\t<'
        bool_0 = None
        bool_1 = False
        block_0 = module_1.Block(bool_0, bool_1)
        block_1 = module_1.Block(str_0, str_0, block_0)
        block_2 = module_1.Block(bool_0)
        block_3 = module_1.Block(block_2, bool_1)
        var_0 = block_3.copy(dict_0, block_1)
        var_1 = block_2.__repr__()
        int_0 = 1420
        var_2 = block_1.__eq__(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        str_0 = 'enpCk\x0bGYG\n4W8+pYIf'
        dict_0 = {bool_0: bool_0, bool_0: str_0, str_0: bool_0, str_0: bool_0}
        block_0 = module_1.Block(bool_0)
        bool_1 = True
        bytes_0 = b'\xd4\xda\x0b\x0f'
        tuple_0 = (bool_1, bytes_0)
        block_1 = module_1.Block(dict_0, block_0, tuple_0)
        tuple_1 = (block_1, block_1)
        block_2 = module_1.Block(bool_0, str_0, tuple_1)
        var_0 = block_2.get_vars()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        int_0 = -2078
        str_0 = ''
        float_0 = -1745.5
        block_0 = module_1.Block(int_0, float_0)
        dict_0 = {str_0: block_0, int_0: float_0}
        block_1 = module_1.Block(bool_0)
        var_0 = block_1.preprocess_data(dict_0)
        bytes_0 = b''
        block_2 = module_1.Block(int_0, bytes_0)
        var_1 = block_1.serialize()
        var_2 = block_1.get_first_parent_include()
        var_3 = block_0.get_vars()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '"F+;|2jb-1K\x0cy\'CG?'
        bool_0 = False
        tuple_0 = ()
        block_0 = module_1.Block(tuple_0)
        var_0 = block_0.all_parents_static()
        block_1 = None
        list_0 = None
        block_2 = module_1.Block()
        var_1 = block_2.load(str_0, bool_0, str_0, block_1, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '06135b5f-f788-1561-1344-0000000041a1'
        set_0 = {str_0, str_0}
        block_0 = module_1.Block(str_0, set_0)
        var_0 = block_0.serialize()
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -2230.936
        bool_0 = False
        bytes_0 = b'3$\x854\x19\x12\xbbb\x86'
        block_0 = module_1.Block(bool_0, bytes_0)
        var_0 = block_0.set_loader(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 1005.3
        bytes_0 = b'W\xa8\x80i$\x12A\x89=\xa6H+\xdfD\x12Bo}\xf3'
        block_0 = module_1.Block(bytes_0)
        var_0 = block_0.get_include_params()
        bytes_1 = b''
        list_0 = [float_0, float_0, bytes_1, float_0]
        block_1 = module_1.Block(float_0, list_0)
        var_1 = block_1.get_include_params()
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0}
        float_0 = None
        list_0 = [dict_0, float_0]
        str_0 = ')SN;u53d*}5\r_h!yh:'
        block_0 = module_1.Block(list_0, str_0)
        var_0 = block_0.get_include_params()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xa7\x91\xc4\xd5\xa1\x8bg!\xb1\xa6BN_\x01\x01\x9d\xbf'
        role_0 = module_0.Role()
        block_0 = module_1.Block(bytes_0, role_0)
        var_0 = block_0.all_parents_static()
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        bytes_0 = b'ER\xa6\xed\xab\x9a64\x06\x0e\x96\x91\xbb\n\x8f\xdc\xee\xc3jr'
        block_0 = module_1.Block(bytes_0)
        var_0 = block_0.serialize()
        block_1 = module_1.Block(bool_0)
        str_0 = '06135b5f-f788-1561-1344-000000001b98'
        float_0 = -2420.773647
        role_0 = module_0.Role(float_0)
        var_1 = block_1.is_block(role_0)
        role_1 = module_0.Role()
        var_2 = block_1.__ne__(role_1)
        block_2 = module_1.Block(block_1, block_1, str_0)
        var_3 = block_0.preprocess_data(bool_0)
        var_4 = block_2.copy()
        var_5 = block_2.__repr__()
        var_6 = block_2.all_parents_static()
        var_7 = block_2.serialize()
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'?\xc4\xeaN\xaf\xea\xa7\xe1I\xc3\xce\xa9\xb0\xf0?\xfc\xe6\x1a\x1a'
        block_0 = module_1.Block(bytes_0)
        var_0 = block_0.__repr__()
        float_0 = -995.30747
        dict_0 = {}
        var_1 = block_0.filter_tagged_tasks(dict_0)
        var_2 = block_0.copy()
        var_3 = block_0.set_loader(float_0)
        var_4 = block_0.get_first_parent_include()
        dict_1 = {}
        block_1 = module_1.Block(dict_1, dict_1)
        var_5 = block_1.serialize()
        var_6 = block_1.copy()
        var_7 = block_1.preprocess_data(float_0)
        var_8 = block_0.copy(dict_1)
        block_2 = module_1.Block()
        set_0 = set()
        str_0 = 'Aan@9"*A,$0{P4'
        float_1 = 1325.1
        var_9 = block_2.load(dict_0, set_0, str_0, float_1)
    except BaseException:
        pass

def test_case_13():
    try:
        block_0 = module_1.Block()
        block_1 = module_1.Block()
        var_0 = block_1.all_parents_static()
        block_2 = module_1.Block()
        tuple_0 = ()
        var_1 = block_0.preprocess_data(tuple_0)
        var_2 = block_0.deserialize(var_1)
        bytes_0 = None
        var_3 = block_0.filter_tagged_tasks(bytes_0)
        var_4 = block_1.copy()
        block_3 = None
        role_0 = module_0.Role(block_3)
        complex_0 = None
        var_5 = block_3.deserialize(complex_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x10\x15:-\x12\xd8\xfe\xb7\xd0\xd2wIm\x17\xb9\xb6Y\xeee'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        bool_0 = True
        tuple_0 = ()
        role_0 = module_0.Role()
        block_0 = module_1.Block(bool_0, tuple_0, role_0)
        var_0 = block_0.set_loader(dict_0)
        block_1 = module_1.Block()
        var_1 = block_1.preprocess_data(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'uollction'
        float_0 = -3363.9
        int_0 = 0
        list_0 = [int_0, int_0, str_0]
        bool_0 = True
        block_0 = module_1.Block(bool_0)
        var_0 = block_0.get_vars()
        list_1 = [str_0]
        bool_1 = True
        tuple_0 = (float_0, list_0, list_1, bool_1)
        block_1 = module_1.Block(tuple_0)
        var_1 = block_1.has_tasks()
        var_2 = block_1.preprocess_data(block_1)
        bool_2 = False
        tuple_1 = (float_0, int_0, int_0, bool_2)
        bool_3 = True
        block_2 = module_1.Block(str_0, block_1, bool_3)
        var_3 = block_2.all_parents_static()
        int_1 = -1524
        str_1 = 'ML:'
        set_0 = set()
        role_0 = module_0.Role()
        block_3 = module_1.Block(str_1, set_0, role_0)
        var_4 = block_3.filter_tagged_tasks(int_1)
        var_5 = block_2.get_first_parent_include()
        var_6 = block_3.__repr__()
        var_7 = block_1.set_loader(tuple_1)
        bool_4 = True
        var_8 = block_1.preprocess_data(bool_4)
        bytes_0 = b'\x11\xa9w\x02\x1fM\x91x\x19V0c\xed\xe3\x9c'
        block_4 = module_1.Block(bytes_0, block_2)
        var_9 = block_1.serialize()
        var_10 = block_2.deserialize(var_9)
        var_11 = block_1.copy()
        var_12 = block_1.filter_tagged_tasks(list_1)
        var_13 = block_2.serialize()
    except BaseException:
        pass