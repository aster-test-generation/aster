# Automatically generated by Pynguin.
import builtins as module_0
import pymonet.immutable_list as module_1

def test_case_0():
    try:
        object_0 = module_0.object()
        immutable_list_0 = module_1.ImmutableList()
        bool_0 = immutable_list_0.__eq__(object_0)
        var_0 = immutable_list_0.filter(object_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        immutable_list_0 = module_1.ImmutableList(bool_0)
        var_0 = immutable_list_0.append(bool_0)
        optional_0 = immutable_list_0.find(immutable_list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        object_0 = module_0.object()
        str_0 = '1,TPUZ={~'
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(str_0, bool_0)
        float_0 = 578.741
        var_0 = immutable_list_0.unshift(float_0)
        var_1 = immutable_list_0.__add__(var_0)
        optional_0 = immutable_list_0.find(object_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xbff$.'
        bool_0 = False
        list_0 = [bool_0, bool_0]
        immutable_list_0 = module_1.ImmutableList(list_0)
        var_0 = immutable_list_0.append(bytes_0)
        var_1 = None
        bool_1 = False
        immutable_list_1 = module_1.ImmutableList(bool_1)
        immutable_list_2 = module_1.ImmutableList()
        var_2 = immutable_list_1.__add__(var_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        immutable_list_0 = module_1.ImmutableList(bool_0)
        var_0 = immutable_list_0.__len__()
        optional_0 = immutable_list_0.find(immutable_list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        immutable_list_0 = module_1.ImmutableList()
        var_0 = immutable_list_0.__len__()
        bool_0 = False
        immutable_list_1 = module_1.ImmutableList(bool_0)
        optional_0 = immutable_list_1.find(immutable_list_1)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        str_0 = 'pU=>zX@l'
        object_0 = module_0.object()
        immutable_list_0 = module_1.ImmutableList()
        var_0 = immutable_list_0.unshift(object_0)
        immutable_list_1 = module_1.ImmutableList()
        var_1 = immutable_list_1.__add__(var_0)
        immutable_list_2 = module_1.ImmutableList(var_1)
        bool_0 = None
        immutable_list_3 = module_1.ImmutableList(bool_0)
        float_0 = -2595.0
        tuple_0 = (immutable_list_3, float_0)
        tuple_1 = (list_0, str_0, tuple_0, list_0)
        str_1 = '\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    '
        str_2 = 'mV1de'
        str_3 = 'jm|9~'
        immutable_list_4 = module_1.ImmutableList()
        var_2 = immutable_list_4.unshift(str_3)
        dict_0 = {str_0: str_0, str_1: immutable_list_3, str_2: str_2}
        immutable_list_5 = module_1.ImmutableList(tuple_1, dict_0)
        var_3 = immutable_list_5.to_list()
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(bool_0)
        str_0 = 'e&aH,ki{,'
        var_0 = immutable_list_0.unshift(str_0)
        optional_0 = immutable_list_0.find(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        callable_0 = None
        immutable_list_0 = module_1.ImmutableList()
        var_0 = immutable_list_0.map(callable_0)
    except BaseException:
        pass

def test_case_9():
    try:
        object_0 = module_0.object()
        str_0 = '\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        '
        set_0 = {object_0}
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(set_0, bool_0)
        var_0 = immutable_list_0.filter(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        object_0 = module_0.object()
        immutable_list_0 = module_1.ImmutableList()
        var_0 = immutable_list_0.filter(object_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        immutable_list_0 = module_1.ImmutableList(bool_0)
        optional_0 = immutable_list_0.find(immutable_list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        callable_0 = None
        var_0 = None
        immutable_list_0 = module_1.ImmutableList()
        var_1 = immutable_list_0.reduce(callable_0, var_0)
        bool_0 = False
        immutable_list_1 = module_1.ImmutableList(bool_0)
        callable_1 = None
        optional_0 = immutable_list_1.find(callable_1)
    except BaseException:
        pass

def test_case_13():
    try:
        object_0 = module_0.object()
        bool_0 = False
        immutable_list_0 = module_1.ImmutableList(bool_0, bool_0)
        callable_0 = None
        var_0 = immutable_list_0.map(callable_0)
    except BaseException:
        pass

def test_case_14():
    try:
        object_0 = module_0.object()
        dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0, object_0: object_0}
        immutable_list_0 = module_1.ImmutableList()
        var_0 = immutable_list_0.append(object_0)
        bool_0 = False
        immutable_list_1 = module_1.ImmutableList(dict_0, var_0, bool_0)
        var_1 = immutable_list_1.__len__()
        immutable_list_2 = module_1.ImmutableList(dict_0)
        bool_1 = immutable_list_2.__eq__(object_0)
        list_0 = []
        optional_0 = immutable_list_2.find(list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 5
        int_1 = 10
        var_0 = lambda x: x > int_0 and x < int_1
        bytes_0 = b'0>v\xe6\xbeK\x88>\t>\x8c\nM\x1a\xbb\xac\xb1'
        var_1 = None
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(bool_0)
        var_2 = immutable_list_0.reduce(bytes_0, var_1)
    except BaseException:
        pass

def test_case_16():
    try:
        object_0 = module_0.object()
        str_0 = '1,TPUZ={~'
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(str_0, bool_0)
        optional_0 = immutable_list_0.find(object_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 1
        int_1 = 2
        immutable_list_0 = module_1.ImmutableList(int_1)
        immutable_list_1 = module_1.ImmutableList(int_0, immutable_list_0)
        immutable_list_2 = module_1.ImmutableList(int_1)
        immutable_list_3 = module_1.ImmutableList(int_0, immutable_list_2)
        immutable_list_4 = module_1.ImmutableList(int_0)
        immutable_list_5 = module_1.ImmutableList(int_0)
        immutable_list_6 = module_1.ImmutableList(int_1)
        str_0 = 'fzL$z'
        str_1 = '"(vz4U\x0cCtQH{\x0bL`[N'
        dict_0 = {str_1: str_0, str_1: str_1}
        var_0 = None
        var_1 = immutable_list_1.reduce(dict_0, var_0)
    except BaseException:
        pass