# Automatically generated by Pynguin.
import datetime as module_0
import ansible.plugins.filter.core as module_1
import ansible.template as module_2

def test_case_0():
    try:
        time_0 = module_0.time()
        list_0 = [time_0, time_0, time_0]
        var_0 = module_1.to_yaml(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'posix_basic'
        tuple_0 = ()
        var_0 = module_1.to_yaml(tuple_0)
        tuple_1 = ()
        float_0 = 1333.034
        dict_0 = {tuple_1: str_0, float_0: tuple_1}
        var_1 = module_1.regex_findall(str_0, tuple_1, float_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 45.08
        list_0 = [float_0]
        var_0 = module_1.to_nice_yaml(float_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2490
        bool_0 = False
        var_0 = module_1.to_bool(bool_0)
        tuple_0 = (int_0,)
        dict_0 = {}
        list_0 = [tuple_0, int_0]
        list_1 = [dict_0, int_0, int_0, tuple_0, dict_0]
        var_1 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        var_0 = module_1.b64decode(list_0)
        list_1 = [dict_0, dict_0]
        bytes_0 = b'\xa3\xc2\x11\x06\xb0'
        var_1 = module_1.to_datetime(list_1, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1413.035
        var_0 = module_1.fileglob(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        int_0 = -1711
        list_1 = []
        var_0 = module_1.rand(list_0, int_0, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -2392
        tuple_0 = (int_0,)
        dict_0 = {}
        list_0 = [dict_0, tuple_0, int_0, dict_0, tuple_0]
        str_0 = 'WcyARl+=yCy{eY'
        dict_1 = {}
        var_0 = module_1.rand(dict_0, str_0, dict_1, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = module_1.combine()
        bytes_0 = b'\x9ae\xf1\x86\x10\xfa\xb9'
        str_0 = None
        var_1 = module_1.rand(bytes_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 787.26
        list_0 = [float_0]
        bytes_0 = b'Vn&\xf7\x18\xef\x11\xa11\xad\x14Yw"\xc1L\xc6\x90'
        str_0 = '3+e-mgo'
        tuple_0 = (bytes_0, str_0, str_0, bytes_0)
        set_0 = {float_0, tuple_0, bytes_0}
        int_0 = None
        var_0 = module_1.get_encrypted_password(list_0, tuple_0, set_0, set_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = ()
        float_0 = -344.36
        var_0 = module_1.to_uuid(tuple_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'example'
        int_0 = None
        bool_0 = False
        float_0 = -3031.0489
        var_0 = module_1.extract(int_0, bool_0, str_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'posix_extended'
        set_0 = None
        var_0 = module_1.extract(set_0, str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'cde'
        var_0 = module_1.regex_search(str_0, str_0)
        str_1 = '(\\S+?)cde'
        str_2 = 'ab(cde)fg'
        var_1 = module_1.regex_search(str_2, str_2)
        str_3 = 'a(cde)fg'
        var_2 = module_1.regex_search(str_3, str_3)
        str_4 = 'ab(\\S+?)fg'
        var_3 = module_1.regex_search(str_0, str_4)
        bytes_0 = b'P\x94n>\xc5'
        var_4 = module_1.fileglob(bytes_0)
        bool_0 = True
        var_5 = module_1.regex_search(str_1, str_4)
        str_5 = 'aBcDeFg'
        var_6 = module_1.regex_search(str_0, str_5)
        str_6 = ''
        dict_0 = {str_1: str_6}
        bytes_1 = b'\xfb:s\xcbc\xf2;\r|\x86\xd1'
        float_0 = -1948.10497441864
        var_7 = module_1.do_groupby(dict_0, bytes_1, float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '-EUZn$.5eyCh'
        var_0 = module_1.b64encode(str_0)
        list_0 = [str_0, str_0, str_0]
        list_1 = [list_0, list_0, list_0, str_0, list_0]
        var_1 = module_1.subelements(list_0, list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = None
        var_0 = module_1.b64decode(int_0)
        str_0 = '{PV:\x0b^~Xy'
        set_0 = set()
        float_0 = 2792.9815263222417
        list_0 = [str_0, set_0, str_0, set_0]
        var_1 = module_1.regex_search(set_0, float_0, *list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -2414
        tuple_0 = (int_0,)
        dict_0 = {}
        var_0 = module_1.subelements(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        tuple_0 = ()
        float_0 = -3651.7
        var_0 = module_1.subelements(tuple_0, float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = module_1.regex_replace()
        list_0 = [var_0, var_0, var_0]
        var_1 = module_1.subelements(list_0, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'y'
        var_0 = module_1.quote(str_0)
        str_1 = '\n    A derivative of RoleDefinition, used by playbook code when a role\n    is included for execution in a play.\n    '
        int_0 = -5259
        var_1 = module_1.regex_replace(int_0)
        set_0 = None
        var_2 = module_1.quote(set_0)
        var_3 = module_1.regex_escape(str_0)
        var_4 = module_1.list_of_dict_key_value_elements_to_dict(str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = -1190
        var_0 = module_1.path_join(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        tuple_0 = ()
        list_0 = [tuple_0]
        var_0 = module_1.combine(*list_0)
        var_1 = module_1.path_join(tuple_0)
    except BaseException:
        pass

def test_case_22():
    try:
        dict_0 = None
        var_0 = module_1.to_bool(dict_0)
        float_0 = 3384.79024
        list_0 = [dict_0, var_0, float_0]
        var_1 = module_1.path_join(list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '/etc/ssh/ssh_config.*'
        var_0 = module_1.fileglob(str_0)
        list_0 = [var_0]
        dict_0 = {str_0: list_0}
        str_1 = 'wXCBQ!9/gi+'
        dict_1 = {}
        var_1 = module_1.rand(list_0, dict_0, str_1, dict_1)
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        float_0 = -2529.0
        str_0 = 'ia>A.a\x0chd~?!i\x0bE\rn '
        str_1 = '5w\tq73K'
        var_0 = module_1.ternary(float_0, str_0, str_1)
        var_1 = module_1.from_yaml(dict_0)
        var_2 = module_1.strftime(dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '\n'
        var_0 = module_1.dict_to_list_of_dict_key_value_elements(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = True
        list_0 = [bool_0]
        int_0 = -1711
        list_1 = [int_0]
        var_0 = module_1.rand(list_0, int_0, list_1)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'tet'
        time_0 = None
        var_0 = module_1.strftime(time_0, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '.WV+\rk%~tl183~:'
        var_0 = module_1.fileglob(str_0)
        str_1 = 'T7:Yww;C_Zg#W\x0ch~6f '
        var_1 = module_1.from_yaml(str_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = ''
        var_0 = module_1.to_uuid(str_0)
        dict_0 = {}
        bool_0 = True
        bytes_0 = b'\xa2D\xfe\xb9\xb5[\xf6\xca\xb0'
        var_1 = module_1.extract(dict_0, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_30():
    try:
        dict_0 = {}
        var_0 = module_1.regex_replace(dict_0)
        str_0 = 'hjhi}KL9X'
        var_1 = module_1.path_join(str_0)
        str_1 = 'apple'
        str_2 = 'BJMa1Ui\t\tVfpJx2EqiwW'
        str_3 = 'scope'
        str_4 = 'p'
        str_5 = None
        dict_1 = {str_2: str_1, str_3: str_2, str_4: str_4, str_5: str_1}
        var_2 = module_1.to_uuid(dict_1)
        ansible_undefined_0 = module_2.AnsibleUndefined(str_1)
        var_3 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = ''
        set_0 = {str_0}
        float_0 = 2792.8
        list_0 = [str_0, set_0, str_0, set_0]
        var_0 = module_1.regex_search(set_0, float_0, *list_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '+B'
        var_0 = module_1.get_hash(str_0, str_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = ''
        int_0 = 259
        var_0 = module_1.regex_search(int_0, str_0)
        var_1 = module_1.combine()
        str_1 = 'otN4..'
        str_2 = '\n!1XlUhnu("m'
        list_0 = [var_0, int_0, str_1, str_0]
        bool_0 = None
        str_3 = ';\\'
        var_2 = module_1.to_bool(str_3)
        var_3 = module_1.extract(str_2, list_0, bool_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = '^[0-9]+$'
        var_0 = module_1.regex_escape(str_0)
        str_1 = 'posix_basic'
        var_1 = module_1.regex_escape(str_0, str_1)
        str_2 = 'posix_extended'
        var_2 = module_1.regex_escape(str_0, str_2)
    except BaseException:
        pass

def test_case_35():
    try:
        dict_0 = {}
        set_0 = set()
        var_0 = module_1.regex_escape(dict_0, set_0)
    except BaseException:
        pass

def test_case_36():
    try:
        bytes_0 = b'\x11\x81\x9f\x8aQ\xc7\r\x85M\xee<\xb6\x87\xc8\xd5,\xd6m\xc5'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        str_0 = 'zBA9~FbGn5'
        var_0 = module_1.to_bool(str_0)
        list_1 = []
        var_1 = module_1.list_of_dict_key_value_elements_to_dict(list_0, list_1)
    except BaseException:
        pass

def test_case_37():
    try:
        dict_0 = {}
        float_0 = -720.21106
        var_0 = module_1.flatten(dict_0, float_0)
        list_0 = [var_0]
        var_1 = module_1.b64decode(list_0)
        list_1 = [dict_0, dict_0, float_0, float_0]
        float_1 = 1.0
        var_2 = module_1.to_bool(float_1)
        int_0 = -2563
        bytes_0 = b'+\xc5\xd7'
        var_3 = module_1.extract(list_1, int_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_38():
    try:
        ansible_undefined_0 = None
        list_0 = [ansible_undefined_0, ansible_undefined_0, ansible_undefined_0]
        str_0 = 'all_plugins_inventory'
        var_0 = module_1.randomize_list(list_0, str_0)
        str_1 = ''
        set_0 = {str_1, str_1, str_1}
        float_0 = 2792.8
        list_1 = [str_1, set_0, str_1, set_0]
        var_1 = module_1.regex_search(set_0, float_0, *list_1)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = '%Ck1:;j=iNr|fz'
        set_0 = set()
        var_0 = module_1.mandatory(set_0)
        list_0 = [str_0, set_0]
        bytes_0 = b'C\x12'
        int_0 = 1235
        var_1 = module_1.flatten(bytes_0, int_0, set_0)
        var_2 = module_1.to_yaml(list_0)
        float_0 = None
        var_3 = module_1.to_datetime(float_0)
    except BaseException:
        pass

def test_case_40():
    try:
        tuple_0 = ()
        list_0 = [tuple_0]
        var_0 = module_1.combine(*list_0)
        float_0 = -2171.0
        str_0 = 'QT%8p.St+'
        var_1 = module_1.get_encrypted_password(float_0, str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bytes_0 = b'\xebyR\xea\xb8u\xd2t\xbf4V\x85'
        bytes_1 = b'\x8c\x1d\x14{~*N\t\x8a'
        tuple_0 = (bytes_0, bytes_1)
        str_0 = ''
        str_1 = 'posix_extended'
        dict_0 = {str_0: bytes_0, str_0: tuple_0, str_1: bytes_0}
        str_2 = 'd3O\'u(d\n@b?b\\9n-j"'
        list_0 = [dict_0, str_2, tuple_0, bytes_1]
        bool_0 = False
        list_1 = [bytes_0, list_0, bytes_1]
        var_0 = module_1.extract(tuple_0, list_0, bool_0, list_1)
    except BaseException:
        pass

def test_case_42():
    try:
        list_0 = []
        var_0 = module_1.list_of_dict_key_value_elements_to_dict(list_0)
        var_1 = module_1.combine()
        dict_0 = None
        var_2 = module_1.flatten(dict_0, dict_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = '(\tf*Ss'
        var_0 = module_1.b64encode(str_0)
        list_0 = []
        dict_0 = {str_0: str_0, str_0: list_0}
        set_0 = set()
        var_1 = module_1.to_uuid(set_0)
        var_2 = module_1.dict_to_list_of_dict_key_value_elements(dict_0)
    except BaseException:
        pass

def test_case_44():
    try:
        int_0 = -2414
        tuple_0 = (int_0,)
        dict_0 = {}
        list_0 = [tuple_0, dict_0]
        list_1 = [dict_0, int_0, tuple_0, dict_0]
        var_0 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '.WV+\rk%~tl183~:'
        var_0 = module_1.fileglob(str_0)
        var_1 = module_1.flatten(str_0)
        str_1 = 'geturl'
        dict_0 = {str_1: var_1}
        var_2 = module_1.combine(**dict_0)
    except BaseException:
        pass

def test_case_46():
    try:
        bool_0 = False
        list_0 = []
        list_1 = [list_0, bool_0, bool_0]
        filter_module_0 = module_1.FilterModule(*list_0)
        var_0 = module_1.subelements(list_0, list_1, filter_module_0)
    except BaseException:
        pass

def test_case_47():
    try:
        float_0 = 1885.46311
        str_0 = 'Ko8t/.&4ce$ZG{V}z#'
        int_0 = -2700
        bytes_0 = b'\xea\xbe*;\xa8\xa5g\xc5\xc0\x9c\x0b\xd0\xce'
        set_0 = {str_0}
        list_0 = [float_0, float_0, int_0, set_0]
        list_1 = [set_0, bytes_0, float_0]
        dict_0 = {}
        list_2 = [float_0, str_0]
        tuple_0 = (list_0, list_1, dict_0, list_2)
        dict_1 = {str_0: tuple_0}
        var_0 = module_1.get_hash(dict_1)
        float_1 = -969.47279
        var_1 = module_1.rand(str_0, int_0, bytes_0, float_1)
    except BaseException:
        pass

def test_case_48():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        dict_0 = None
        list_1 = [list_0, dict_0, list_0]
        var_0 = module_1.combine(*list_1)
    except BaseException:
        pass

def test_case_49():
    try:
        filter_module_0 = module_1.FilterModule()
        str_0 = '.B+^\nV'
        var_0 = module_1.rand(filter_module_0, str_0)
        var_1 = module_1.combine()
        dict_0 = {}
        list_0 = None
        float_0 = 0.001
        set_0 = {float_0}
        var_2 = module_1.ternary(list_0, set_0, dict_0, set_0)
        bool_0 = True
        float_1 = 2773.0
        var_3 = module_1.regex_search(bool_0, float_1, *list_0)
    except BaseException:
        pass

def test_case_50():
    try:
        int_0 = -2476
        tuple_0 = (int_0,)
        dict_0 = {}
        list_0 = []
        list_1 = [dict_0, int_0, int_0, tuple_0, dict_0]
        var_0 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_51():
    try:
        tuple_0 = ()
        var_0 = module_1.mandatory(tuple_0)
        bytes_0 = b'\xb9B\xbc\x8d\x90\xff\xed\x9bh9\xba\xbb\xe6\xdb\xa1j\xf0\xad\xd7='
        var_1 = module_1.fileglob(bytes_0)
        float_0 = 344.34
        var_2 = module_1.regex_escape(float_0)
        str_0 = "\t'j)/^@<p"
        int_0 = -1194
        list_0 = [bytes_0]
        var_3 = module_1.combine(*list_0)
        str_1 = 'i*'
        dict_0 = {str_0: int_0, str_0: str_0, str_1: int_0}
        var_4 = module_1.comment(int_0, **dict_0)
    except BaseException:
        pass

def test_case_52():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0}
        str_0 = 'H5S4/'
        str_1 = '\n    A dict that acts similarly to the ParseResult named tuple from urllib\n    '
        int_0 = 5985
        var_0 = module_1.rand(dict_0, str_0, str_1, int_0, int_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = "wDp'Jk\r,}oGzevQX@[R^"
        filter_module_0 = None
        var_0 = module_1.to_uuid(str_0, filter_module_0)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = 'BJMa1Ui\t\tVfpJx2EqiwW'
        ansible_undefined_0 = module_2.AnsibleUndefined(str_0)
        var_0 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_55():
    try:
        bool_0 = True
        ansible_undefined_0 = module_2.AnsibleUndefined(bool_0)
        int_0 = -1796
        var_0 = module_1.mandatory(ansible_undefined_0, int_0)
    except BaseException:
        pass

def test_case_56():
    try:
        int_0 = -459
        str_0 = '\x0bBR'
        float_0 = -1501.5
        ansible_undefined_0 = module_2.AnsibleUndefined(int_0, str_0, float_0)
        var_0 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass