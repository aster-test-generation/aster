# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n    Short description.\n\n    Long description.\n\n    :param x: description\n    :param int y: description\n    :param int z: description\n    :param t z: description\n    :raises ValueError: description\n    :returns: description\n    :rtype: int\n    :yields: description\n    :rtype: int\n    :returns: description\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '~E&u\\|e4-)2r|3$a{\n'
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = 't\x0cgY__vx=~t~\t#m\nuz'
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = '    Some dummy text\n    :param int arg1: description of arg\n    :param str arg2: description of arg2\n    :returns: description of return\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = '  '
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = '\n    Short description.\n\n    Long description.\n\n    :param x: description\n    :p6ram int y: description\n    :param int z: description\n    :paraT t z: description\n    :raises ValueError: description\n    Greturns: description\n    :rtype: int\n    :yields: description\n    :rtype: int\n    :returns: des(riptio+\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '\n    Short description\n\n    Long description\n\n    :param str name: description\n    :param name2: description\n    :param name3: description\n    :param name4:\n        Multilined description\n        for name4\n    :param int name5: description\n    :param name6: Non-optional field, defaults to 6.\n\n    :returns int: description\n    :yields int: description\n    :raises ValueError: description\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    str_0 = '\n    This is a test of ReST-style docstring parsing.\n\n    :param string name: Filled by user. If not passed in, will display anonymous\n    :returns: Sum of ``x`` and ``y``.\n    :raises ValueError: If ``x`` is negative\n    :raises TypeError: If ``x`` or ``y`` is not an int or float\n    :raises: UnknownError\n    '
    docstring_0 = module_0.parse(str_0)