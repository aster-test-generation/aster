# Automatically generated by Pynguin.
import ansible.utils.jsonrpc as module_0
import json as module_1

def test_case_0():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.invalid_request()
    except BaseException:
        pass

def test_case_1():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{"sonpc": ".0", "method": "response", "params": [[1, 2, 3], {"a": "A", "b": "", "": "C"}], "id": 1}'
        var_0 = json_rpc_server_0.handle_request(str_0)
        var_1 = json_rpc_server_0.response()
    except BaseException:
        pass

def test_case_2():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{"jsonr": "2.0", "method": "response", "params": [[1, 2, 3], {"a": "A", "b": "B", "c": "C"}],"id": 1}'
        var_0 = json_rpc_server_0.handle_request(str_0)
        var_1 = json_rpc_server_0.parse_error()
    except BaseException:
        pass

def test_case_3():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.method_not_found()
    except BaseException:
        pass

def test_case_4():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{ "jsonrpc": "2.0", "method": ">etInfo", "params": [1,23], "id": 5 }'
        var_0 = json_rpc_server_0.handle_request(str_0)
        var_1 = json_rpc_server_0.invalid_params()
    except BaseException:
        pass

def test_case_5():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{"jsonrpc": "2.0", "method": "rpc.non_action", "params": [], "id": "0"}'
        var_0 = json_rpc_server_0.handle_request(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{"jsonrpc": "2.0", "method": "_private_method", "params": [], "id": "0"}'
        var_0 = json_rpc_server_0.handle_request(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '_identifier'
        int_0 = 1
        var_0 = setattr(json_rpc_server_0, str_0, int_0)
        var_1 = json_rpc_server_0.response()
        bytes_0 = b'\xf3\xfc\xa2z\xbd\x92\xcf\xbae\x92\xc4\x87'
        var_2 = json_rpc_server_0.response(bytes_0)
        str_1 = '-Tpe'
        bytes_1 = b'\xf3p"\xf1\xdao\x1e\x94\xfe\xd7~'
        dict_0 = {str_1: var_1, json_rpc_server_0: int_0, int_0: str_0}
        tuple_0 = (bytes_1, dict_0)
        dict_1 = {str_0: int_0, str_1: var_0, str_0: tuple_0}
        var_3 = json_rpc_server_0.invalid_request(dict_1)
        var_4 = module_1.loads(var_1)
    except BaseException:
        pass