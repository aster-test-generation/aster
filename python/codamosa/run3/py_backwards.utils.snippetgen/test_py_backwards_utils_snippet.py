# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_2():
    str_0 = 'T_M'
    str_1 = 'e7z>OC>)183cKz'
    a_s_t_0 = module_0.AST()
    list_0 = [a_s_t_0, a_s_t_0]
    dict_0 = {str_0: str_0, str_1: list_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)

def test_case_3():
    a_s_t_0 = module_0.AST()
    dict_0 = {}
    module_1.extend_tree(a_s_t_0, dict_0)
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    list_0 = [a_s_t_0]
    arg_0 = module_0.arg(*list_0)
    arg_1 = variables_replacer_0.visit_arg(arg_0)

def test_case_4():
    str_0 = 'BW8^p=}HJCEMM,`gv#_X'
    dict_0 = {str_0: str_0, str_0: str_0}
    arg_0 = module_0.arg(**dict_0)
    str_1 = None
    str_2 = 'L}qkh>G\t'
    dict_1 = {str_1: str_1, str_1: str_1, str_2: str_2, str_2: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    arg_1 = variables_replacer_0.visit_arg(arg_0)

def test_case_5():
    bool_0 = True
    list_0 = [bool_0]
    name_0 = module_0.Name(*list_0)
    str_0 = '`'
    dict_0 = {str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    name_1 = variables_replacer_0.visit_Name(name_0)
    snippet_0 = module_1.snippet(bool_0)

def test_case_6():
    str_0 = '\nx = 2\nlet(a)\nlet(b)\na = 3\nlet(c)\ny = 4\nlet(d)\n'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    str_1 = 'xten'
    str_2 = '*8R_tRh{~j'
    int_0 = None
    dict_0 = {str_0: iterable_0, str_1: var_0, str_0: str_0, str_2: int_0}
    class_def_0 = module_0.ClassDef(**dict_0)
    str_3 = 'G`Sw#\x0ciaSo4uB?69\nl1D'
    dict_1 = {str_0: str_3}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    var_1 = list(iterable_0)

def test_case_7():
    str_0 = ']Azxh.E'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    alias_0 = module_0.alias(**dict_0)
    function_def_0 = module_0.FunctionDef(**dict_0)
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    str_1 = "'5:Bn="
    list_0 = [str_1, variables_replacer_0]
    import_from_0 = module_0.ImportFrom(*list_0, **dict_0)
    import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    import_from_2 = variables_replacer_0.visit_ImportFrom(import_from_1)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    module_1.extend(alias_0)

def test_case_8():
    str_0 = 'lLAME/L!]fzS&!r\x0b'
    str_1 = '"Q-.pKHpJm\\A\\;dM'
    list_0 = []
    alias_0 = module_0.alias(*list_0)
    callable_0 = None
    snippet_0 = module_1.snippet(callable_0)
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    tuple_0 = (alias_0, snippet_0, variables_replacer_0)
    dict_1 = {str_0: str_0, str_1: tuple_0, str_0: variables_replacer_0}
    except_handler_0 = module_0.ExceptHandler(**dict_1)
    str_2 = '7^mL'
    dict_2 = {str_2: str_2, str_2: str_2}
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)
    except_handler_1 = variables_replacer_1.visit_ExceptHandler(except_handler_0)

def test_case_9():
    a_s_t_0 = module_0.AST()
    dict_0 = {}
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_10():
    callable_0 = None
    snippet_0 = module_1.snippet(callable_0)
    set_0 = set()
    snippet_1 = module_1.snippet(set_0)
    module_1.let(set_0)

def test_case_11():
    str_0 = 'xten(vars); pin(x, y)'
    var_0 = module_2.parse(str_0)
    module_1.extend_tree(var_0, str_0)

def test_case_12():
    str_0 = '\nx = 2\nlet(a)\nlet(b)\na = 3\nlet(c)\ny = 4\nlet(d)\n'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_13():
    str_0 = 'xten(vars); pint(x, y)'
    var_0 = module_2.parse(str_0)
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    str_1 = '>'
    module_1.extend_tree(var_0, str_0)
    list_0 = [str_1, str_1, str_0]
    import_from_0 = module_0.ImportFrom(*list_0)
    str_2 = 'xlgy{BKUx@Dml1`x'
    str_3 = "EGk'?"
    str_4 = 's2GRHa\x0c2'
    dict_0 = {str_0: str_3, str_2: str_3, str_1: str_3}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    str_5 = "\r&\rd8)TUM>'An\t\x0b"
    str_6 = '/Ic=A\'`"x9>'
    str_7 = '~fs'
    dict_1 = {str_4: str_4, str_5: str_5, str_6: iterable_0, str_7: str_2}
    a_s_t_1 = module_0.AST(**dict_1)
    str_8 = '\rgt 3ji\t"2CFze^N'
    dict_2 = {str_2: str_0, str_3: a_s_t_1, str_8: a_s_t_1, str_6: str_5}
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)
    callable_0 = None
    snippet_0 = module_1.snippet(callable_0)
    import_from_2 = variables_replacer_1.visit_ImportFrom(import_from_0)
    variables_replacer_2 = module_1.VariablesReplacer(dict_0)
    import_from_3 = variables_replacer_2.visit_ImportFrom(import_from_2)
    str_9 = 'AcT'
    str_10 = 'J8<OFhK%O);[7Z'
    dict_3 = {str_10: str_10, str_9: str_1, str_0: str_10, str_0: str_9, str_10: str_0}
    function_def_0 = module_0.FunctionDef(**dict_3)

def test_case_14():
    str_0 = 'xten(vars); pint(x, y)'
    var_0 = module_2.parse(str_0)
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    str_1 = '>'
    str_2 = 'pint'
    module_1.extend_tree(var_0, str_2)
    list_0 = [str_1, str_1, str_0]
    import_from_0 = module_0.ImportFrom(*list_0)
    str_3 = 'xlgy{BKUx@Dml1`x'
    str_4 = 's2GRHa\x0c2'
    str_5 = "\r&\rd8)TUM>'An\t\x0b"
    str_6 = '/Ic=A\'`"x9>'
    str_7 = '~fs'
    dict_0 = {str_4: str_4, str_5: str_5, str_6: iterable_0, str_7: str_3}
    a_s_t_1 = module_0.AST(**dict_0)
    str_8 = '\rgt 3ji\t"2CFze^N'
    list_1 = [str_8]
    alias_0 = module_0.alias(*list_1, **dict_0)
    str_9 = None
    dict_1 = {str_8: str_7, str_1: str_6, str_9: str_6, str_9: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    alias_1 = variables_replacer_1.visit_alias(alias_0)