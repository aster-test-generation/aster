# Automatically generated by Pynguin.
import py_backwards.utils.snippet as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        attribute_0 = None
        str_0 = '7B\\+A1G\r6efcy'
        str_1 = None
        str_2 = '_thread'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        str_1 = 'L}qkh>G\t'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_0}
        name_0 = None
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_2():
    try:
        a_s_t_0 = module_1.AST()
        dict_0 = {}
        module_0.extend_tree(a_s_t_0, dict_0)
        function_def_0 = None
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        list_0 = [a_s_t_0]
        arg_0 = module_1.arg(*list_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    except BaseException:
        pass

def test_case_3():
    try:
        a_s_t_0 = module_1.AST()
        str_0 = 'P'
        list_0 = []
        attribute_0 = module_1.Attribute(*list_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        dict_1 = {str_0: attribute_1}
        a_s_t_1 = module_1.AST(**dict_1)
        iterable_0 = module_0.find_variables(a_s_t_1)
        alias_0 = module_1.alias(*list_0, **dict_1)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_4():
    try:
        keyword_0 = None
        str_0 = 'e,f%ODX\nqx\x0b8IK`'
        str_1 = 'D'
        str_2 = 't>UP.Gda\nd}g=AKK'
        dict_0 = {str_0: str_1, str_1: str_1, str_2: str_0, str_2: str_2}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'D=A+&\nV>AxR[\\z'
        str_1 = 'Kx='
        dict_0 = {str_0: str_0, str_1: str_0}
        a_s_t_0 = module_1.AST()
        iterable_0 = module_0.find_variables(a_s_t_0)
        snippet_0 = module_0.snippet(iterable_0)
        list_0 = snippet_0.get_body(**dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        function_def_0 = None
        str_0 = None
        str_1 = 'Q\x0cl%{;IM'
        str_2 = '~98E}(Q\\8\x0cU'
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\nx = 2\nlTt(a)\nlet(b)\na = 3\nlet(c)\ny = 4\nlet(d)\n'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
        str_1 = 'PXIOs=z{mFS(y'
        str_2 = 'mzir)M|>aCR,,h>F<'
        dict_0 = {str_1: str_0, str_2: str_2, str_2: str_0, str_2: str_1}
        dict_1 = {str_0: str_1}
        a_s_t_0 = module_1.AST(**dict_0)
        module_0.extend_tree(a_s_t_0, dict_1)
        var_1 = list(iterable_0)
        list_0 = [str_0, dict_1]
        alias_0 = module_1.alias(*list_0)
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'extend(vars); print(x, y)'
        var_0 = module_2.parse(str_0)
        str_1 = {str_0: str_0, str_0: str_0}
        module_0.extend_tree(var_0, str_1)
    except BaseException:
        pass