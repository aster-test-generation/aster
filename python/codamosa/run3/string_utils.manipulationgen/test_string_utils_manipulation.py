# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    roman_numbers_0 = module_0.__RomanNumbers()

def test_case_1():
    int_0 = 2603
    str_0 = module_0.roman_encode(int_0)

def test_case_2():
    str_0 = 'W'
    str_1 = module_0.prettify(str_0)

def test_case_3():
    str_0 = 'la!i=z82'
    str_1 = module_0.prettify(str_0)

def test_case_4():
    str_0 = ',;ta (&BZ'
    str_1 = module_0.prettify(str_0)

def test_case_5():
    str_0 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()

def test_case_6():
    str_0 = '({})'
    str_1 = module_0.reverse(str_0)

def test_case_7():
    str_0 = 'DPi;a>ib|n8Ww'
    str_1 = 'LB-]4n(HnDr'
    var_0 = module_0.camel_case_to_snake(str_1)
    str_2 = module_0.shuffle(str_0)
    str_3 = module_0.reverse(str_2)

def test_case_8():
    str_0 = '((?<=")[^"]+(?=")|(?<=\\()[^)]+(?=\\)))'
    str_1 = module_0.slugify(str_0)

def test_case_9():
    str_0 = 'M6'
    bool_0 = module_0.booleanize(str_0)

def test_case_10():
    str_0 = ' that   is a string     with  an  e-mail. nico@perego.cf and a 20 URLs like: https://www.google.com'
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()

def test_case_11():
    str_0 = '0(j|ixE<W,m5g. \r(V2'
    str_1 = module_0.shuffle(str_0)
    str_2 = '\n    Checks if the given string represents a valid ISBN (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn(\'9780312498580\') # returns true\n    >>> is_isbn(\'1506715214\') # returns true\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens ("-") in the string (default), false otherwise.\n    :return: True if valid ISBN (10 or 13), false otherwise.\n    '
    string_formatter_0 = module_0.__StringFormatter(str_2)
    str_3 = string_formatter_0.format()
    int_0 = 2055
    str_4 = 'F'
    str_5 = module_0.compress(str_4)
    str_6 = '1N!*spe_p|B0OgKAx~f'
    str_7 = module_0.snake_case_to_camel(str_6)
    str_8 = module_0.roman_encode(int_0)
    str_9 = 'L#vZK#F%q2H%<'
    str_10 = module_0.asciify(str_9)
    int_1 = 1562
    str_11 = module_0.roman_encode(int_1)
    int_2 = module_0.roman_decode(str_8)
    str_12 = 'U8FQ/?'
    bool_0 = module_0.booleanize(str_12)

def test_case_12():
    str_0 = 'Gl6KkL(.Z'
    str_1 = module_0.compress(str_0)
    str_2 = module_0.snake_case_to_camel(str_0)
    string_compressor_0 = module_0.__StringCompressor()
    str_3 = '.+}D=ciwOgQpc75I9\\[u'
    str_4 = module_0.reverse(str_3)
    str_5 = ''
    roman_numbers_0 = module_0.__RomanNumbers()
    str_6 = 'NPETfQoQ@'
    str_7 = module_0.asciify(str_6)
    int_0 = 2432
    str_8 = 'e">\rlur'
    str_9 = module_0.prettify(str_8)
    str_10 = module_0.roman_encode(int_0)
    str_11 = 'M'
    str_12 = module_0.strip_html(str_11)
    bool_0 = module_0.booleanize(str_7)
    str_13 = module_0.slugify(str_5)
    int_1 = module_0.roman_decode(str_10)