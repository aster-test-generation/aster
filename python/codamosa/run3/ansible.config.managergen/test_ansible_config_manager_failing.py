# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        plugin_0 = module_0.Plugin()
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.find_ini_config_file()
        tuple_0 = ()
        str_0 = '8Ow\t`)*)!w,I`^ZFoHbz'
        var_1 = module_0.find_ini_config_file()
        config_manager_0 = module_0.ConfigManager()
        var_2 = config_manager_0.get_config_value(tuple_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        config_manager_0 = module_0.ConfigManager()
        int_0 = 1312
        float_0 = -2536.0
        var_0 = config_manager_0.get_config_value(float_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 't"\x0cF|$]^'
        config_manager_0 = module_0.ConfigManager(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        int_0 = 61
        config_manager_0 = module_0.ConfigManager()
        var_0 = module_0.get_ini_config_value(list_0, int_0)
        setting_0 = module_0.Setting(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager(config_manager_0, config_manager_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        tuple_0 = None
        config_manager_0 = module_0.ConfigManager(list_0)
        var_0 = config_manager_0.get_configuration_definition(config_manager_0, tuple_0)
        str_0 = '|sh|V^XEivA2gC^a'
        dict_0 = None
        int_0 = 57
        dict_1 = {str_0: dict_0, str_0: list_0, str_0: str_0, str_0: str_0}
        tuple_1 = (list_0, dict_1, dict_1)
        var_1 = config_manager_0.get_config_value(str_0, dict_0, int_0, dict_0, tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'str'
        config_manager_0 = module_0.ConfigManager()
        bool_0 = False
        set_0 = {str_0, bool_0}
        var_0 = config_manager_0.get_configuration_definition(bool_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        str_0 = None
        dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0}
        config_manager_0 = module_0.ConfigManager(str_0)
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(bool_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        config_manager_0 = module_0.ConfigManager(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        var_0 = module_0.get_ini_config_value(list_0, dict_0)
        config_manager_0 = module_0.ConfigManager()
        var_1 = module_0.get_config_type(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = None
        str_0 = '|sh|V^EiqA2gC^+'
        dict_0 = None
        int_0 = 61
        dict_1 = {str_0: dict_0, str_0: list_0, str_0: str_0}
        tuple_0 = (list_0, dict_1, dict_1)
        config_manager_0 = module_0.ConfigManager()
        var_0 = module_0.get_ini_config_value(list_0, int_0)
        var_1 = config_manager_0.get_config_value(str_0, dict_0, int_0, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = None
        set_0 = {tuple_0}
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_options(tuple_0, set_0, config_manager_0)
    except BaseException:
        pass

def test_case_14():
    try:
        set_0 = set()
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data(set_0)
    except BaseException:
        pass

def test_case_15():
    try:
        config_manager_0 = module_0.ConfigManager()
        bool_0 = True
        int_0 = 1312
        list_0 = [bool_0, config_manager_0]
        dict_0 = {}
        plugin_0 = module_0.Plugin(*list_0, **dict_0)
        float_0 = 60.0
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(plugin_0, int_0, float_0)
        set_0 = set()
        tuple_0 = (int_0, dict_0)
        var_1 = module_0.ensure_type(set_0, tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'list'
        dict_0 = None
        int_0 = 79
        str_1 = 'T.:,q%R'
        str_2 = 'l*FwnwP\\T,hT/!b'
        str_3 = '#~;(nLps7\x0b}\rRl`-GUoG'
        str_4 = 'path'
        dict_1 = {str_1: str_0, str_2: dict_0, str_3: dict_0, str_4: int_0}
        config_manager_0 = module_0.ConfigManager(dict_0)
        var_0 = config_manager_0.update_config_data(dict_1)
    except BaseException:
        pass

def test_case_17():
    try:
        list_0 = None
        str_0 = "\n6}LEi'\toL4jd*3\x0bX1Re"
        str_1 = ''
        var_0 = module_0.find_ini_config_file()
        str_2 = '^0pyZ\rz'
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(list_0, str_1, str_2)
        set_0 = {str_0}
        complex_0 = None
        int_0 = -3304
        var_2 = config_manager_0.initialize_plugin_configuration_definitions(list_0, complex_0, int_0)
        var_3 = module_0.ensure_type(set_0, list_0)
        int_1 = 79
        config_manager_1 = module_0.ConfigManager()
        var_4 = module_0.get_ini_config_value(list_0, int_1)
        setting_0 = module_0.Setting(*list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        list_0 = None
        str_0 = 'DJ?]s'
        var_0 = module_0.resolve_path(str_0)
        float_0 = 1228.9
        var_1 = module_0.get_ini_config_value(str_0, float_0)
        tuple_0 = None
        config_manager_0 = module_0.ConfigManager()
        dict_0 = None
        var_2 = config_manager_0.get_plugin_vars(dict_0, list_0)
        var_3 = config_manager_0.get_plugin_options(tuple_0, str_0)
        list_1 = None
        var_4 = config_manager_0.get_plugin_options(list_1, tuple_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = None
        str_0 = 'fi)st'
        str_1 = 'DJ?]s'
        float_0 = 0.1
        var_0 = module_0.get_ini_config_value(str_1, float_0)
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager(list_0)
        str_2 = '\n            If (Test-Path -PathType Leaf \'%(path)s\')\n            {\n                $sp = new-object -TypeName System.Security.Cryptography.SHA1CryptoServiceProvider;\n                $fp = [System.IO.File]::Open(\'%(path)s\', [System.IO.Filemode]::Open, [System.IO.FileAccess]::Read);\n                [System.BitConverter]::ToString($sp.ComputeHash($fp)).Replace("-", "").ToLower();\n                $fp.Dispose();\n            }\n            ElseIf (Test-Path -PathType Container \'%(path)s\')\n            {\n                Write-Output "3";\n            }\n            Else\n            {\n                Write-Output "1";\n            }\n        '
        str_3 = "\n6}LEi'\toL4#d*3\x0bX1Re"
        dict_0 = None
        int_0 = 68
        str_4 = '<Hy$2\x0b/vK\rj+$x#k*\t'
        var_1 = config_manager_1.get_plugin_vars(dict_0, list_0)
        dict_1 = {str_2: dict_0, str_0: list_0, str_4: str_3, str_3: str_0}
        tuple_0 = (list_0, dict_1, dict_1)
        config_manager_2 = module_0.ConfigManager()
        var_2 = config_manager_2.get_config_value(str_3, dict_0, int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = None
        str_0 = 'fi)st'
        str_1 = 'DJ?]s'
        float_0 = 1228.9
        var_0 = module_0.get_ini_config_value(str_1, float_0)
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager(list_0)
        str_2 = "\n6}LEi'\to4#c*3\x0bX1Re"
        str_3 = ';y$2\x0b/vK\rj+$x#k0*\t'
        str_4 = '/usr/bin/netstat -niw'
        str_5 = 'o"~1o>G=\x0c$(tIyf_'
        dict_0 = {str_4: str_4, str_5: str_5, str_4: config_manager_1, str_2: config_manager_0}
        str_6 = 'default'
        bool_0 = True
        dict_1 = {str_0: dict_0, str_1: str_3, str_6: str_6, str_4: bool_0}
        float_1 = 302.988816
        set_0 = set()
        var_1 = config_manager_0.get_configuration_definition(dict_1, float_1, set_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'DJ?]s'
        var_0 = module_0.resolve_path(str_0)
        float_0 = 1228.9
        var_1 = module_0.get_ini_config_value(str_0, float_0)
        config_manager_0 = module_0.ConfigManager()
        bool_0 = None
        bool_1 = False
        var_2 = config_manager_0.update_config_data(bool_0, bool_1)
    except BaseException:
        pass