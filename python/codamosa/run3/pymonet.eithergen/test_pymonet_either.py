# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    dict_0 = {}
    either_0 = module_0.Either(dict_0)

def test_case_2():
    object_0 = module_1.object()
    int_0 = -854
    either_0 = module_0.Either(int_0)
    bool_0 = either_0.__eq__(object_0)
    var_0 = either_0.is_right()
    bool_1 = False
    either_1 = module_0.Either(bool_1)
    left_0 = module_0.Left(int_0)

def test_case_3():
    object_0 = module_1.object()
    int_0 = -854
    either_0 = module_0.Either(int_0)
    bool_0 = either_0.__eq__(object_0)
    var_0 = either_0.to_try()
    var_1 = either_0.is_right()
    var_2 = either_0.to_box()
    int_1 = -1609
    left_0 = module_0.Left(int_1)
    var_3 = left_0.to_validation()

def test_case_4():
    str_0 = 'GRz6G&jhK\tux`i'
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: list_0}
    left_0 = module_0.Left(dict_0)
    var_0 = left_0.to_validation()
    bool_0 = False
    float_0 = 1093.0649
    either_0 = module_0.Either(float_0)
    var_1 = either_0.to_lazy()
    left_1 = module_0.Left(bool_0)
    var_2 = left_1.to_maybe()

def test_case_5():
    str_0 = 'All'
    object_0 = module_1.object()
    str_1 = '\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        '
    dict_0 = {str_1: str_1}
    set_0 = set()
    left_0 = module_0.Left(set_0)
    var_0 = left_0.map(dict_0)
    left_1 = module_0.Left(var_0)
    bool_0 = left_1.is_left()
    object_1 = module_1.object()
    bool_1 = False
    right_0 = module_0.Right(bool_1)
    either_0 = module_0.Either(object_1)
    either_1 = module_0.Either(either_0)
    bool_2 = either_1.__eq__(object_0)
    var_1 = either_0.to_try()
    either_2 = module_0.Either(str_0)

def test_case_6():
    set_0 = set()
    bytes_0 = b'\x10\xc0QQc'
    left_0 = module_0.Left(bytes_0)
    bool_0 = None
    var_0 = left_0.bind(bool_0)
    var_1 = left_0.bind(set_0)
    bool_1 = left_0.is_left()

def test_case_7():
    int_0 = 42
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    bool_0 = left_0.__eq__(left_1)
    left_2 = module_0.Left(int_0)
    right_0 = module_0.Right(int_0)
    left_3 = module_0.Left(int_0)
    bool_1 = right_0.__eq__(left_3)
    right_1 = module_0.Right(int_0)
    right_2 = module_0.Right(int_0)
    bool_2 = right_1.__eq__(right_2)
    right_3 = module_0.Right(int_0)
    bool_3 = right_3.__eq__(int_0)
    left_4 = module_0.Left(int_0)
    left_5 = module_0.Left(int_0)
    right_4 = module_0.Right(int_0)
    var_0 = lambda : int_0
    left_6 = module_0.Left(int_0)
    var_1 = lambda : int_0
    int_1 = True
    right_5 = module_0.Right(int_1)

def test_case_8():
    list_0 = []
    right_0 = module_0.Right(list_0)
    list_1 = []
    left_0 = module_0.Left(list_1)
    var_0 = left_0.to_validation()
    left_1 = module_0.Left(right_0)
    var_1 = left_1.to_validation()

def test_case_9():
    float_0 = -5267.1611
    right_0 = module_0.Right(float_0)
    bool_0 = right_0.is_left()

def test_case_10():
    int_0 = 42
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    bool_0 = left_0.__eq__(left_1)
    left_2 = module_0.Left(int_0)
    right_0 = module_0.Right(int_0)
    bool_1 = left_2.__eq__(right_0)
    right_1 = module_0.Right(int_0)
    left_3 = module_0.Left(int_0)
    bool_2 = right_1.__eq__(left_3)
    right_2 = module_0.Right(int_0)
    int_1 = None
    right_3 = module_0.Right(int_1)
    bool_3 = right_2.__eq__(right_3)
    right_4 = module_0.Right(int_0)
    bool_4 = right_4.__eq__(int_0)
    left_4 = module_0.Left(int_0)
    bool_5 = left_4.__eq__(int_0)
    right_5 = module_0.Right(int_0)
    left_5 = module_0.Left(int_0)
    right_6 = module_0.Right(int_0)
    var_0 = lambda : int_0
    left_6 = module_0.Left(int_0)
    var_1 = lambda : int_0