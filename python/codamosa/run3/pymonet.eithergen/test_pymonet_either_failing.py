# Automatically generated by Pynguin.
import pymonet.either as module_0

def test_case_0():
    try:
        dict_0 = None
        str_0 = '_.x[t?XVs&#U;+\\-kU~n'
        bool_0 = False
        either_0 = module_0.Either(bool_0)
        var_0 = either_0.case(dict_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '-su?h2UZi[DG'
        list_0 = [str_0]
        left_0 = module_0.Left(list_0)
        either_0 = module_0.Either(left_0)
        tuple_0 = ()
        var_0 = either_0.ap(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        float_0 = -144.333191
        left_0 = module_0.Left(float_0)
        var_0 = left_0.to_validation()
        int_0 = True
        tuple_0 = (set_0, int_0)
        float_1 = 648.989
        right_0 = module_0.Right(float_1)
        bool_0 = right_0.is_right()
        bool_1 = False
        list_0 = [float_1]
        left_1 = module_0.Left(list_0)
        var_1 = left_1.ap(bool_1)
        either_0 = module_0.Either(int_0)
        var_2 = either_0.to_try()
        bool_2 = False
        int_1 = 428
        right_1 = module_0.Right(int_1)
        either_1 = module_0.Either(right_1)
        list_1 = [int_0, set_0, either_1, int_0]
        left_2 = module_0.Left(list_1)
        bool_3 = left_2.is_left()
        var_3 = either_1.case(tuple_0, bool_2)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = None
        left_0 = module_0.Left(var_0)
        float_0 = 1968.23
        left_1 = module_0.Left(float_0)
        var_1 = None
        str_0 = '\n        Returns new ImmutableList with only this elements that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: ImmutableList[A]\n        '
        right_0 = module_0.Right(var_1)
        var_2 = right_0.map(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        dict_0 = {}
        tuple_0 = (dict_0,)
        right_0 = module_0.Right(tuple_0)
        var_0 = right_0.bind(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1
        right_0 = module_0.Right(int_0)
        var_0 = lambda x: x - int_0
        var_1 = right_0.case(right_0, var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'geZ9_RJhH5Fdsg$\\{-s'
        int_0 = 1448
        either_0 = module_0.Either(int_0)
        left_0 = module_0.Left(either_0)
        right_0 = module_0.Right(left_0)
        var_0 = right_0.to_maybe()
        tuple_0 = ()
        callable_0 = None
        list_0 = [tuple_0, str_0]
        either_1 = module_0.Either(list_0)
        var_1 = either_1.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        right_0 = module_0.Right(var_0)
        var_1 = right_0.to_maybe()
        object_0 = None
        either_0 = module_0.Either(var_0)
        bool_0 = either_0.__eq__(object_0)
        var_2 = right_0.to_maybe()
        var_3 = either_0.to_try()
        var_4 = either_0.is_right()
        var_5 = right_0.to_validation()
        right_1 = module_0.Right(var_0)
        var_6 = either_0.to_box()
        callable_0 = None
        left_0 = module_0.Left(var_0)
        var_7 = left_0.to_validation()
        var_8 = either_0.case(callable_0, callable_0)
    except BaseException:
        pass