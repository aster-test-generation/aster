# Automatically generated by Pynguin.
import youtube_dl.downloader.f4m as module_0

def test_case_0():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        var_0 = module_0.read_bootstrap_info(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        f4m_f_d_0 = None
        var_0 = module_0.read_bootstrap_info(f4m_f_d_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_3():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'lwV[?hq7?'
        var_0 = module_0.read_bootstrap_info(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'show id'
        var_0 = module_0.build_fragments_list(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Test the real_download function of class F4mFD.'
        int_0 = 3
        str_1 = 'fragment_retries'
        int_1 = 1
        str_2 = 'downloaded_bytes'
        flv_reader_0 = module_0.FlvReader()
        complex_0 = None
        dict_0 = {complex_0: int_1, str_1: str_2, int_0: str_0}
        var_0 = module_0.write_metadata_tag(flv_reader_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xe4U'
        var_0 = module_0.write_flv_header(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'faDDB@eFqZ'
        dict_0 = None
        str_1 = '5/'
        str_2 = 'xF@{\x0cK]'
        dict_1 = {str_1: str_0, str_2: str_1, str_0: str_2}
        list_0 = [str_0, str_0, dict_0, dict_1]
        dict_2 = {str_0: str_0, str_0: list_0, str_1: dict_0}
        var_0 = module_0.write_metadata_tag(dict_2, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        var_0 = module_0.remove_encrypted_media(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'regular HDS'
        str_1 = 'http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8'
        str_2 = 'url'
        str_3 = 'tbr'
        var_0 = None
        var_1 = {str_2: str_1, str_3: var_0}
        f4m_f_d_0 = module_0.F4mFD(str_1, var_1)
        var_2 = f4m_f_d_0.real_download(str_0, var_1)
    except BaseException:
        pass

def test_case_11():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = module_0.write_flv_header(flv_reader_0)
        var_1 = flv_reader_0.read_bootstrap_info()
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        bool_0 = True
        data_truncated_error_0 = None
        var_0 = module_0.write_metadata_tag(bool_0, data_truncated_error_0)
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_1 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_afrt()
        bool_0 = True
        var_1 = module_0.write_unsigned_int(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_afrt()
        bytes_1 = b'\x12'
        var_1 = module_0.build_fragments_list(bytes_1)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_afrt()
        var_1 = flv_reader_0.read_unsigned_long_long()
        var_2 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'\x00\x00\xc8,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00D\x01\x00\x00\x00\x03\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x000\x00\x01.\x00\x00\x03\x02\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\xff\xff\xff\xff\x00\x00\x86\x1d\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_abst()
        var_1 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'653\xba\x8eA\x8a#~'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\xd0\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_unsigned_long_long()
        var_1 = flv_reader_0.read_unsigned_long_long()
        var_2 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x000\x00\x01.\x00\x00\x03\x02\x00\x00\x00\x00B\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x15\x00\x00\x00\x00\x00\x00\x12\xff\xff\xff\xff\x00\x00\x86\x1d\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'\x00\x00\x00,stsd\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x00\x03\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'segments'
        str_1 = 'fragments'
        str_2 = 'segment_run'
        int_0 = 0
        int_1 = 2
        int_2 = (int_0, int_1)
        int_3 = [int_2, int_2]
        int_4 = {str_2: int_3}
        int_5 = [int_4]
        str_3 = 'first'
        str_4 = 'ts'
        int_6 = 94
        int_7 = {str_3: int_0, str_4: int_6, str_3: int_6}
        int_8 = [int_7, int_4, int_5, int_5]
        int_9 = {str_1: int_8}
        int_10 = [int_9]
        int_11 = {str_0: int_5, str_1: int_10}
        var_0 = module_0.build_fragments_list(int_11)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'fragments'
        str_1 = 'segments'
        str_2 = 'live'
        str_3 = 'first'
        int_0 = 5
        int_1 = {str_3: int_0}
        int_2 = {str_3: int_0}
        int_3 = 11
        int_4 = {str_3: int_3}
        int_5 = [int_1, int_2, int_4]
        int_6 = {str_0: int_5}
        int_7 = [int_6]
        str_4 = 'segment_run'
        int_8 = 0
        int_9 = (int_8, int_0)
        int_10 = [int_9]
        int_11 = {str_4: int_10}
        int_12 = [int_11]
        bool_0 = False
        var_0 = {str_0: int_7, str_1: int_12, str_2: bool_0}
        var_1 = module_0.build_fragments_list(var_0)
        var_2 = {str_0: int_4, str_1: int_9, str_2: bool_0}
        var_3 = module_0.build_fragments_list(var_2)
    except BaseException:
        pass