# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        str_0 = "var abc = '1234'; var bcd = '2345'; var cde = Math.floor(abc / bcd);alert(cde);"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = 100
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '(Mst_\tarp"2")'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, j_s_interpreter_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        str_0 = 'FHN,j*'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.extract_object(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "var abc = '1234'; var bcd = '2345'; var cde = Math.floor(abc / bcd);alert(cde);"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = {}
        str_1 = 'Math.floor(abc / bcd)'
        int_0 = 100
        var_1 = j_s_interpreter_0.interpret_expression(str_1, var_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'f'
        var_0 = j_s_interpreter_0.call_function(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'extractFunction'
        str_1 = '\n        function extractFunction(arg) {\n            return arg;\n        }'
        j_s_interpreter_0 = module_0.JSInterpreter(str_1)
        var_0 = j_s_interpreter_0.call_function(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "var abc = '1234'; var bcd = '2345'; var ce = Math.rloor(ac / bcd);alet(cde);"
        bytes_0 = b'\xb3\xd1x\xe9i\x04.\xe5A\xc3\x15}\xe6\xa7'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, bytes_0)
        int_0 = 747
        var_0 = j_s_interpreter_0.interpret_expression(str_0, bytes_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "var abc = '1234'; var bcd = '2345'; var cde = Math.floor(abc / bcd);alert(cde);"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = ''
        bytes_0 = None
        var_0 = j_s_interpreter_0.interpret_expression(str_1, bytes_0, j_s_interpreter_0)
        int_0 = 100
        var_1 = j_s_interpreter_0.interpret_expression(str_0, j_s_interpreter_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'd&#[.S<9o~KbN[#'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = 66
        var_0 = j_s_interpreter_0.interpret_expression(str_0, j_s_interpreter_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "ar abc = '1234'; var bd = '2345'; var cd = Mat.floor(abc / bcd);alert(cde);"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = 123
        var_0 = j_s_interpreter_0.interpret_expression(str_0, j_s_interpreter_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = "var abc = '1234'; var bcd = '2345'; var cde = Math.floor(abc / bcd);alert(cde);"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = -2545
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "var abc = '1234'; var bcd = '2345'; var cde = Math.floor(abc / bcd);alert(cde);"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'Math.floor(abc / bcd)'
        int_0 = 100
        var_0 = j_s_interpreter_0.interpret_expression(str_1, j_s_interpreter_0, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'var obj = {\n       1: function(x) { return x + 1; },\n       f2: function(y) { return this.f1(y); },\n       f3: function(z) { return this.f2(z); },\n};\n'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'obj'
        var_0 = j_s_interpreter_0.extract_object(str_1)
        str_2 = 'f3'
        var_1 = var_0[str_2]
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'tv.rFcs>MXXP\\'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, j_s_interpreter_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "var abc = '1234'; var bcd = '2345'; var cde = Math.floor(abc / bcd);alert(cde);"
        j_s_interpreter_0 = None
        str_1 = '1SUG+v$|/DVkrW>['
        float_0 = 4657.52031
        j_s_interpreter_1 = module_0.JSInterpreter(float_0)
        bytes_0 = b'\x9eha\xae\x9b\x96\xa1QWD.\r\xd7\x10\xdf'
        list_0 = None
        var_0 = j_s_interpreter_1.build_function(bytes_0, list_0)
        var_1 = j_s_interpreter_1.build_function(j_s_interpreter_0, str_1)
        j_s_interpreter_2 = module_0.JSInterpreter(str_0)
        str_2 = '(%'
        float_1 = -43.82
        bool_0 = True
        list_1 = []
        list_2 = [float_1, str_0, list_1]
        tuple_0 = (bool_0, list_2)
        var_2 = j_s_interpreter_2.interpret_expression(str_2, float_1, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Number(var0) >> 0'
        int_0 = 138
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, j_s_interpreter_0, int_0)
    except BaseException:
        pass