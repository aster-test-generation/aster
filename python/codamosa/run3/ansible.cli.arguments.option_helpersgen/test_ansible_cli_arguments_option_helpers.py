# Automatically generated by Pynguin.
import argparse as module_0
import ansible.cli.arguments.option_helpers as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'default'
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_module_options(argument_parser_0)
    str_1 = '-M'
    str_2 = [str_1, str_0]
    var_1 = argument_parser_0.parse_args(str_2)

def test_case_2():
    bytes_0 = b'\xd8\xaa'
    var_0 = module_1.maybe_unfrack_path(bytes_0)

def test_case_3():
    var_0 = module_1.version()

def test_case_4():
    str_0 = 'test parser'
    var_0 = module_1.create_base_parser(str_0)
    var_1 = module_1.add_check_options(var_0)

def test_case_5():
    str_0 = 'testprog'
    str_1 = 'usage'
    str_2 = 'desc'
    var_0 = module_1.create_base_parser(str_0, str_1, str_2)
    var_1 = module_1.add_meta_options(var_0)

def test_case_6():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_runas_options(argument_parser_0)
    int_0 = -1
    var_1 = argument_parser_0._action_groups[int_0]
    var_2 = var_1._group_actions
    var_3 = [(action.dest, action) for action in var_2]
    var_4 = dict(var_3)

def test_case_7():
    str_0 = 'Unit est for function dd_sbset_options()'
    var_0 = module_1.create_base_parser(str_0)
    var_1 = module_1.version()
    var_2 = module_1.add_subset_options(var_0)

def test_case_8():
    str_0 = 'value'
    namespace_0 = module_0.Namespace()
    str_1 = 'name'
    var_0 = module_1.ensure_value(namespace_0, str_1, str_0)
    var_1 = getattr(namespace_0, str_1)

def test_case_9():
    str_0 = 'ansible'
    var_0 = module_1.version(str_0)

def test_case_10():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_async_options(argument_parser_0)

def test_case_11():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_connect_options(argument_parser_0)
    str_0 = '--private-key'
    str_1 = 'privatekey.pem'
    str_2 = '--user'
    str_3 = 'myuser'
    str_4 = '--timeout'
    str_5 = '--sftp-extra-args'
    str_6 = '--scp-extra-args'
    str_7 = '-L 9000:localhost:3000'
    str_8 = '--ask-pass'
    str_9 = [str_0, str_1, str_2, str_3, str_4, str_1, str_4, str_8, str_8, str_8, str_5, str_4, str_6, str_0, str_5, str_7, str_8, str_4, str_8]
    var_1 = argument_parser_0.parse_args(str_9)

def test_case_12():
    str_0 = 'Vault Option'
    str_1 = 'test'
    var_0 = module_1.create_base_parser(str_1, str_0)
    var_1 = module_1.add_vault_options(var_0)

def test_case_13():
    namespace_0 = module_0.Namespace()
    str_0 = 'some_value'
    str_1 = 'default_value'
    str_2 = [str_1]
    var_0 = module_1.ensure_value(namespace_0, str_0, str_2)
    str_3 = [str_1]
    var_1 = module_1.ensure_value(namespace_0, str_0, str_3)

def test_case_14():
    str_0 = 'ansible'
    var_0 = module_1.create_base_parser(str_0)
    var_1 = module_1.add_inventory_options(var_0)

def test_case_15():
    var_0 = module_1.version()
    unrecognized_argument_0 = None
    var_1 = module_1.maybe_unfrack_path(unrecognized_argument_0)
    bytes_0 = b'@\x8d\xbe'
    int_0 = 4317
    set_0 = {int_0, bytes_0}
    bool_0 = True
    var_2 = module_1.create_base_parser(set_0, bool_0)
    float_0 = -1840.9150095966666
    list_0 = None
    str_0 = '\n5c'
    bool_1 = False
    ansible_version_0 = module_1.AnsibleVersion(str_0, str_0, bytes_0, bool_1)
    dict_0 = {}
    argument_parser_0 = module_0.ArgumentParser(float_0, list_0, ansible_version_0, dict_0)
    sorting_help_formatter_0 = module_1.SortingHelpFormatter(unrecognized_argument_0)
    var_3 = ansible_version_0.__call__(argument_parser_0, sorting_help_formatter_0, float_0)
    var_4 = module_1.add_basedir_options(argument_parser_0)
    var_5 = module_1.create_base_parser(unrecognized_argument_0)
    sorting_help_formatter_1 = module_1.SortingHelpFormatter(set_0)
    var_6 = argument_parser_0.parse_args(argument_parser_0)