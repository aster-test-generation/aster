# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        str_0 = '3irTJk1ikspWCB;a'
        set_0 = {str_0}
        int_0 = -2961
        bool_0 = False
        bytes_0 = b'0\xa5\x076\xacHH\xbc\xb9V*\x05\x97}\xba\xa4\xcadD'
        str_1 = '),'
        distribution_files_0 = module_0.DistributionFiles(str_1)
        var_0 = distribution_files_0.parse_distribution_file_Slackware(set_0, int_0, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        set_0 = {distribution_fact_collector_0, distribution_fact_collector_0, distribution_fact_collector_0, distribution_fact_collector_0}
        float_0 = -1848.5796
        bytes_0 = b'\xfd\x15&\x9c'
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        str_0 = 'vT:'
        list_0 = [str_0, str_0]
        distribution_files_2 = module_0.DistributionFiles(list_0)
        var_0 = distribution_files_2.parse_distribution_file_Amazon(set_0, float_0, float_0, distribution_files_1)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 3593
        distribution_0 = module_0.Distribution(int_0)
        var_0 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'redhat'
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0)
        list_0 = [str_0]
        distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
        var_0 = distribution_files_0.parse_distribution_file_Coreos(list_0, list_0, str_0, list_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_fact_collector_0)
        distribution_0 = module_0.Distribution(distribution_fact_collector_1)
        var_1 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_4():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        var_0 = distribution_fact_collector_0.collect()
        var_1 = distribution_0.get_distribution_SMGL()
        list_0 = [distribution_fact_collector_0]
        distribution_files_0 = module_0.DistributionFiles(list_0)
        var_2 = distribution_0.get_distribution_facts()
        var_3 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x17L\xa4Lv\xb8\x0f\xf9\x8f\xbc/\x95\x16\xc5N\x8e\xb4\xbd['
        tuple_0 = (bytes_0,)
        distribution_0 = module_0.Distribution(tuple_0)
        var_0 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xa4\x1f\xb3\xbet\xa2\x11\xc6e\xdc\xbc\x04q'
        list_0 = [bytes_0]
        distribution_0 = module_0.Distribution(list_0)
        distribution_1 = module_0.Distribution(distribution_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector(distribution_1)
        distribution_2 = module_0.Distribution(distribution_fact_collector_0)
        var_0 = distribution_2.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = None
        distribution_files_0 = module_0.DistributionFiles(bool_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        var_0 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -414
        str_0 = 'cookies_string'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_SMGL()
        distribution_files_0 = module_0.DistributionFiles(distribution_0)
        var_1 = distribution_0.get_distribution_facts()
        distribution_1 = module_0.Distribution(distribution_files_0)
        set_0 = {str_0}
        str_1 = 'GRys@.Ku~nI)'
        int_1 = 446
        distribution_files_1 = module_0.DistributionFiles(int_1)
        var_2 = distribution_files_1.parse_distribution_file_SUSE(int_0, distribution_1, set_0, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = ()
        distribution_files_0 = module_0.DistributionFiles(tuple_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        int_0 = 3287
        bool_0 = False
        bytes_0 = b"\xf7\x9et/d`\xdd\x0c'\xf0:\xcf\xa1\xf0]\xb3\x82"
        var_0 = distribution_files_0.parse_distribution_file_Alpine(distribution_fact_collector_0, int_0, bool_0, bytes_0)
        dict_0 = {distribution_files_0: tuple_0}
        distribution_files_1 = module_0.DistributionFiles(dict_0)
        var_1 = distribution_files_0.parse_distribution_file_Coreos(distribution_files_1, tuple_0, dict_0, dict_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        var_2 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2933
        var_0 = module_0.get_uname(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        tuple_0 = None
        list_0 = [bool_0, bool_0, bool_0, tuple_0]
        set_0 = set()
        float_0 = 2311.0
        str_0 = ''
        dict_0 = {float_0: list_0, bool_0: set_0, float_0: str_0}
        distribution_files_0 = module_0.DistributionFiles(dict_0)
        distribution_files_1 = module_0.DistributionFiles(tuple_0)
        bool_1 = None
        tuple_1 = (bool_1,)
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        var_0 = module_0.get_uname(tuple_1, distribution_fact_collector_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = None
        float_0 = 2181.0
        set_0 = {float_0}
        bool_0 = True
        distribution_0 = module_0.Distribution(bool_0)
        int_0 = None
        list_0 = [int_0]
        tuple_0 = (distribution_0, distribution_0, list_0)
        distribution_files_0 = module_0.DistributionFiles(tuple_0)
        distribution_1 = module_0.Distribution(tuple_0)
        var_0 = distribution_files_0.parse_distribution_file_Coreos(bytes_0, float_0, set_0, float_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector(list_0, float_0)
        var_1 = distribution_0.get_distribution_FreeBSD()
        var_2 = distribution_fact_collector_0.collect(int_0, distribution_files_0)
        distribution_2 = module_0.Distribution(float_0)
        var_3 = distribution_files_0.parse_distribution_file_Mandriva(set_0, int_0, float_0, distribution_files_0)
    except BaseException:
        pass