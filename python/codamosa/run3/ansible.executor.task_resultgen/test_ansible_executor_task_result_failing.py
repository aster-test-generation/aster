# Automatically generated by Pynguin.
import ansible.executor.task_result as module_0
import ansible.parsing.dataloader as module_1

def test_case_0():
    try:
        str_0 = "c4.^?>@f1-S#1W'GroMC"
        task_result_0 = module_0.TaskResult(str_0, str_0, str_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '2l]@^Hg[R*j|WONr:aZv'
        str_1 = '.py'
        str_2 = "z|.)'Ui6+!so"
        task_result_0 = module_0.TaskResult(str_0, str_1, str_2)
        float_0 = 1385.0965504018777
        dict_0 = {}
        task_result_1 = module_0.TaskResult(task_result_0, float_0, dict_0)
        var_0 = task_result_1.is_changed()
        var_1 = task_result_1.clean_copy()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '2l]@^Hg[R*j|WONr:aZv'
        str_1 = '/holders'
        task_result_0 = module_0.TaskResult(str_1, str_0, str_1)
        var_0 = task_result_0.is_unreachable()
    except BaseException:
        pass

def test_case_3():
    try:
        data_loader_0 = module_1.DataLoader()
        str_0 = "{'changed': True, 'msg': 'test message', 'bogus_key': 'bogus value'}"
        var_0 = data_loader_0.load(str_0)
        var_1 = None
        task_result_0 = module_0.TaskResult(var_1, var_1, var_0)
        var_2 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "z|.)'Ui6+!so"
        task_result_0 = module_0.TaskResult(str_0, str_0, str_0)
        var_0 = task_result_0.needs_debugger()
        bytes_0 = b'\xdca{=(g\xb3\x07\xc0\xa3!+\x8d\x0c\x838\r\xf75'
        var_1 = task_result_0.needs_debugger(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '.z'
        task_result_0 = module_0.TaskResult(str_0, str_0, str_0)
        float_0 = 2.103766112218014
        dict_0 = {str_0: float_0, float_0: float_0, str_0: task_result_0}
        task_result_1 = module_0.TaskResult(task_result_0, float_0, dict_0)
        var_0 = task_result_1.needs_debugger(float_0)
        var_1 = task_result_0.clean_copy()
    except BaseException:
        pass