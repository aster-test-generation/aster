# Automatically generated by Pynguin.
import ansible.playbook.role.requirement as module_0

def test_case_0():
    try:
        bytes_0 = b'M\xd6'
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.repo_url_to_role_name(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        bool_0 = False
        dict_0 = {role_requirement_0: role_requirement_0, role_requirement_0: role_requirement_0, bool_0: role_requirement_0, role_requirement_0: bool_0}
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        var_1 = role_requirement_0.role_yaml_parse(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        bool_0 = False
        var_0 = role_requirement_0.role_yaml_parse(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        bool_0 = True
        var_0 = role_requirement_0.scm_archive_role(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "z(''h6|J4&g@g"
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(str_0)
        role_requirement_1 = module_0.RoleRequirement()
        str_1 = 'Lf\n23)/Ap+*\x0cqTT$+_Mf'
        var_1 = role_requirement_0.role_yaml_parse(str_1)
        var_2 = role_requirement_1.role_yaml_parse(var_1)
        float_0 = None
        var_3 = role_requirement_0.repo_url_to_role_name(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'http://git.example.com/repos/repo.git'
        str_1 = 'http://git.example.com/repos/repo'
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(str_1)
        var_1 = role_requirement_0.role_yaml_parse(str_0)
        int_0 = 3485
        var_2 = role_requirement_0.role_yaml_parse(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Verify that the value is a string or convert to a string.\n\n    Since unexpected changes can sometimes happen when converting to a string,\n    ``allow_conversion`` controls whether or not the value will be converted or a\n    TypeError will be raised if the value is not a string and would be converted\n\n    :arg value: Value to validate or convert to a string\n    :arg allow_conversion: Whether to convert the string and return it or raise\n        a TypeError\n\n    :returns: Original value if it is a string, the value converted to a string\n        if allow_conversion=True, or raises a TypeError if allow_conversion=False.\n    '
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "z(''h6|J4&g@g"
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(str_0)
        role_requirement_1 = module_0.RoleRequirement()
        str_1 = 'Overridden ``generic_visit`` that makes some assumptions ,bout our\n        use case, and improves performance by calling visitors directly instead\n        of calling ``visit`` to offload calling visitors.\n        '
        var_1 = role_requirement_0.role_yaml_parse(str_1)
        var_2 = role_requirement_1.role_yaml_parse(var_1)
        float_0 = None
        var_3 = role_requirement_0.repo_url_to_role_name(float_0)
    except BaseException:
        pass