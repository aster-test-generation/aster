# Automatically generated by Pynguin.
import youtube_dl.aes as module_0
import youtube_dl.utils as module_1
import base64 as module_2

def test_case_0():
    try:
        bool_0 = False
        list_0 = [bool_0]
        set_0 = set()
        var_0 = module_0.aes_cbc_decrypt(set_0, list_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = None
        str_0 = 'Api-Password'
        bool_0 = True
        var_0 = module_0.aes_cbc_encrypt(list_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '?*;r&0G7XV"k2/c'
        var_0 = module_0.aes_encrypt(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'tf(`bCpFh#Vv('
        str_1 = 'Mt bG'
        var_0 = module_0.aes_decrypt(str_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -73.23609
        var_0 = module_0.sub_bytes_inv(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = None
        var_0 = module_0.mix_columns_inv(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = None
        var_0 = module_0.shift_rows(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 2206
        var_0 = module_0.shift_rows_inv(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        int_0 = -2282
        var_0 = module_0.rijndael_mul(bool_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        var_0 = module_0.sub_bytes_inv(dict_0)
        int_0 = -3992
        str_0 = '?*;r&0G7XV"k2/c'
        var_1 = module_0.mix_column(int_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 4627
        bytes_0 = b'\x7f\xf1\xd1\xc6\xf6'
        list_0 = [int_0, int_0, int_0]
        var_0 = module_0.aes_encrypt(bytes_0, list_0)
        list_1 = [list_0]
        float_0 = -2128.49
        bool_0 = False
        var_1 = module_0.rijndael_mul(float_0, bool_0)
        var_2 = module_0.key_expansion(list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -73
        str_0 = 'C~_|*CcDNL2~{}r3zO,8'
        list_0 = []
        var_0 = module_0.aes_decrypt(str_0, list_0)
        bool_0 = True
        var_1 = module_0.mix_column(int_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 124
        int_1 = 5
        int_2 = 8
        int_3 = 11
        int_4 = -5
        int_5 = [int_2, int_0, int_3, int_1, int_1, int_3, int_2, int_2, int_2, int_2, int_2, int_0, int_3, int_0, int_3, int_4, int_1]
        int_6 = 0
        int_7 = [int_3, int_4, int_2, int_0, int_3, int_4, int_2, int_2, int_2, int_3, int_1, int_2, int_0, int_0, int_2, int_6]
        var_0 = module_0.aes_cbc_encrypt(int_2, int_5, int_7)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\x00'
        int_0 = 24
        var_0 = bytes_0 * int_0
        var_1 = module_1.bytes_to_intlist(var_0)
        var_2 = module_0.key_expansion(var_1)
        var_3 = module_1.intlist_to_bytes(var_2)
        bytes_1 = b'AES TEST CBCBS24000000000000000000000000000000000000'
        var_4 = module_2.b64decode(bytes_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x00'
        int_0 = 32
        var_0 = bytes_0 * int_0
        var_1 = module_1.bytes_to_intlist(var_0)
        var_2 = module_0.key_expansion(var_1)
        var_3 = module_1.intlist_to_bytes(var_2)
        bytes_1 = b'AES TEST CBCBS160000000000000000000000'
        var_4 = module_2.b64decode(bytes_1)
        str_0 = None
        str_1 = '[~)\row_'
        var_5 = module_0.aes_decrypt(str_0, str_1)
    except BaseException:
        pass