# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 47
        var_0 = grammar_0.copy()
        str_0 = ' ]6pg\tjX^zG,'
        set_0 = {int_0, int_0, str_0}
        node_0 = None
        list_0 = [set_0, node_0]
        tuple_0 = (int_0, var_0, str_0, list_0)
        var_1 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_0.Grammar()
        tuple_0 = None
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 2118
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_1 = parser_0.classify(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2054
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 8
        str_0 = 'generate_tokens'
        int_1 = 2788
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.shift(int_0, str_0, int_0, tuple_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 3085
        tuple_0 = (int_0, int_0)
        list_0 = [tuple_0, tuple_0, tuple_0]
        list_1 = [list_0, list_0, list_0]
        int_1 = 1522
        int_2 = 120
        dict_0 = {int_1: int_2}
        tuple_1 = (list_1, dict_0)
        str_0 = 'P'
        tuple_2 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        bool_0 = True
        parser_0 = module_1.Parser(grammar_0, bool_0)
        parser_0.push(int_0, tuple_1, int_1, tuple_2)
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2
        str_0 = 'PatternGrammar.txt'
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        list_0 = [grammar_0, grammar_0]
        parser_0 = module_1.Parser(grammar_0, list_0)
        int_1 = parser_0.classify(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 2156
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2
        str_0 = 'BBBo[gPp4@rQO'
        tuple_0 = (int_0, int_0)
        str_1 = 'vk"TZ=n\r;{c?Wy=xX^'
        tuple_1 = (str_1, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_1 = -211
        optional_0 = None
        tuple_2 = (int_1, str_0, tuple_1, optional_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1
        str_0 = '=%(message)Ms'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_1 = parser_0.classify(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 1
        str_0 = 'I=9L~&HOVHxJ)L'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        str_1 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_1 = parser_0.classify(int_0, str_1, tuple_1)
    except BaseException:
        pass