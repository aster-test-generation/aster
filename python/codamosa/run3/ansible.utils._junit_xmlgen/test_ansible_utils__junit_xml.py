# Automatically generated by Pynguin.
import ansible.utils._junit_xml as module_0
import xml.etree.ElementTree as module_1

def test_case_0():
    test_error_0 = module_0.TestError()

def test_case_1():
    test_failure_0 = module_0.TestFailure()

def test_case_2():
    str_0 = "9\tCOnPaf\r2]\\ccF&''@"
    test_case_0 = module_0.TestCase(str_0, str_0, str_0, str_0)
    element_0 = test_case_0.get_xml_element()

def test_case_3():
    str_0 = '6B:G?;Ul7V>%/UpSg'
    test_suite_0 = module_0.TestSuite(str_0)
    element_0 = test_suite_0.get_xml_element()

def test_case_4():
    test_error_0 = module_0.TestError()
    test_suites_0 = module_0.TestSuites()
    str_0 = test_suites_0.to_pretty_xml()
    test_suite_0 = module_0.TestSuite(str_0)
    dict_0 = test_suites_0.get_attributes()

def test_case_5():
    str_0 = 'GMeU\\nwT4 k_X.\rq'
    test_suite_0 = module_0.TestSuite(str_0, str_0)
    var_0 = test_suite_0.__repr__()
    dict_0 = test_suite_0.get_attributes()
    var_1 = test_suite_0.__repr__()
    test_suites_0 = module_0.TestSuites()
    str_1 = 'MjSo'
    test_failure_0 = module_0.TestFailure(str_0, str_1)
    var_2 = test_suite_0.__eq__(test_failure_0)
    test_error_0 = module_0.TestError(str_1, str_0, str_1)
    dict_1 = test_suite_0.get_attributes()

def test_case_6():
    str_0 = "9\tCOnPaf\r2]\\ccF&''@"
    test_case_0 = module_0.TestCase(str_0, str_0, str_0, str_0)
    element_0 = test_case_0.get_xml_element()
    test_suite_0 = module_0.TestSuite(str_0, str_0, str_0)
    test_error_0 = module_0.TestError()
    list_0 = [test_suite_0, test_suite_0, test_suite_0]
    test_suites_0 = module_0.TestSuites(str_0, list_0)
    str_1 = test_suites_0.to_pretty_xml()
    element_1 = test_suite_0.get_xml_element()
    var_0 = test_suite_0.__repr__()

def test_case_7():
    str_0 = 'Example failure message'
    test_failure_0 = module_0.TestFailure(str_0, str_0)
    element_0 = test_failure_0.get_xml_element()
    str_1 = 'unicode'
    var_0 = module_1.tostring(element_0, str_1)

def test_case_8():
    str_0 = 'name'
    int_0 = 1
    str_1 = 'classname'
    str_2 = 'status'
    float_0 = 2.3
    test_error_0 = module_0.TestError()
    test_error_1 = [test_error_0]
    test_failure_0 = module_0.TestFailure()
    test_failure_1 = [test_failure_0]
    str_3 = 'skipped'
    str_4 = 'system_out'
    str_5 = 'system_err'
    test_case_0 = module_0.TestCase(str_0, int_0, str_1, str_2, float_0, test_error_1, test_failure_1, str_3, str_4, str_5)
    element_0 = test_case_0.get_xml_element()
    var_0 = print(element_0)

def test_case_9():
    str_0 = ':b;U7%UzShA,'
    str_1 = 'lC,'
    str_2 = None
    optional_0 = None
    str_3 = '*s}FhgJ=j*A/QT:t~xRq'
    str_4 = None
    str_5 = "\n        Validate an argument specification against a provided set of data.\n\n        The `validate_argument_spec` module expects to receive the arguments:\n            - argument_spec: A dict whose keys are the valid argument names, and\n                  whose values are dicts of the argument attributes (type, etc).\n            - provided_arguments: A dict whose keys are the argument names, and\n                  whose values are the argument value.\n\n        :param tmp: Deprecated. Do not use.\n        :param task_vars: A dict of task variables.\n        :return: An action result dict, including a 'argument_errors' key with a\n            list of validation errors found.\n        "
    dict_0 = {str_3: str_3, str_4: str_5, str_5: str_3, str_5: str_0}
    test_suites_0 = module_0.TestSuites()
    var_0 = test_suites_0.__repr__()
    test_suite_0 = module_0.TestSuite(str_1, str_2, str_1, str_0, optional_0, dict_0)
    element_0 = test_suite_0.get_xml_element()

def test_case_10():
    str_0 = '@=gsojA)%}I1Ns%-'
    str_1 = 'u\t9b\x0b'
    str_2 = ''
    test_case_0 = module_0.TestCase(str_1, str_2, str_0)
    element_0 = test_case_0.get_xml_element()
    test_error_0 = module_0.TestError(str_0)
    test_failure_0 = module_0.TestFailure(str_0)
    str_3 = '(T%7KnQD.g^g\nAdBN'
    str_4 = 'human_to_bytes() failed on bad input: %s'
    list_0 = []
    str_5 = ';'
    str_6 = 'B"Yeh@=q)E'
    dict_0 = {str_3: str_5, str_0: str_6}
    str_7 = 'wX`s2^=Pt+is!'
    test_case_1 = module_0.TestCase(str_7, str_6)
    list_1 = [test_case_0, test_case_1]
    test_suite_0 = module_0.TestSuite(str_3, str_0, str_4, str_1, list_0, dict_0, list_1)
    element_1 = test_suite_0.get_xml_element()
    list_2 = [test_failure_0, test_failure_0, test_failure_0]
    test_case_2 = module_0.TestCase(str_0, str_0, list_2, str_0)
    var_0 = test_error_0.__eq__(test_error_0)
    element_tree_0 = module_1.ElementTree(test_case_2)
    str_8 = 'Not waiting for response to prompt as stdin is not interactive'
    test_error_1 = module_0.TestError(str_8)
    var_1 = test_error_1.__eq__(element_tree_0)
    str_9 = 'www-authenticate'
    test_case_3 = module_0.TestCase(str_9, str_9, str_8)

def test_case_11():
    str_0 = 'Test Suite Name'
    var_0 = None
    var_1 = {}
    var_2 = []
    str_1 = 'System out information'
    str_2 = 'System error information'
    test_suite_0 = module_0.TestSuite(str_0, var_0, var_0, var_0, var_0, var_1, var_2, str_1, str_2)
    element_0 = test_suite_0.get_xml_element()