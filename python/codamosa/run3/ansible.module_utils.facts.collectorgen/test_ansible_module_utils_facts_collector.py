# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    pass

def test_case_1():
    base_fact_collector_0 = module_0.BaseFactCollector()

def test_case_2():
    base_fact_collector_0 = module_0.BaseFactCollector()
    var_0 = base_fact_collector_0.collect_with_namespace()

def test_case_3():
    var_0 = module_0.collector_classes_from_gather_subset()

def test_case_4():
    dict_0 = {}
    defaultdict_0 = None
    set_0 = {defaultdict_0}
    var_0 = module_0.collector_classes_from_gather_subset(dict_0, set_0, set_0)

def test_case_5():
    unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
    base_fact_collector_0 = module_0.BaseFactCollector(unresolved_fact_dep_0)

def test_case_6():
    bytes_0 = b'*\x7fD\xe0'
    var_0 = module_0.get_collector_names(bytes_0)
    unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
    base_fact_collector_0 = module_0.BaseFactCollector(unresolved_fact_dep_0)

def test_case_7():
    var_0 = module_0.collector_classes_from_gather_subset()
    var_1 = module_0.collector_classes_from_gather_subset()
    bytes_0 = b'\xca\n\x1a\x8f\x84'
    var_2 = module_0.resolve_requires(bytes_0, bytes_0)

def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    base_fact_collector_0 = module_0.BaseFactCollector(bool_0, list_0)
    var_0 = base_fact_collector_0.collect_with_namespace()

def test_case_9():
    base_fact_collector_0 = module_0.BaseFactCollector()
    str_0 = '^\n                ([^:\\]\\s]+)\n                \\s*                         # ignore trailing whitespace\n                (?:\\#.*)?                   # and/or a comment till the\n                $                           # end of the line\n            '
    base_fact_collector_1 = module_0.BaseFactCollector(str_0)
    dict_0 = {base_fact_collector_1: str_0}
    var_0 = module_0.build_fact_id_to_collector_map(dict_0)
    var_1 = module_0.collector_classes_from_gather_subset(dict_0, base_fact_collector_0)

def test_case_10():
    str_0 = '!all'
    str_1 = '!hardware'
    str_2 = 'network'
    str_3 = [str_0, str_1, str_2]
    str_4 = 'all'
    str_5 = 'hardware'
    str_6 = 'A'
    str_7 = 'B'
    str_8 = 'C'
    str_9 = [str_6, str_7, str_8]
    str_10 = 'D'
    str_11 = 'E'
    str_12 = 'F'
    str_13 = [str_10, str_11, str_12]
    str_14 = {str_4: str_9, str_5: str_13, str_2: str_4}
    var_0 = module_0.select_collector_classes(str_3, str_14)

def test_case_11():
    str_0 = '!hard@wae'
    var_0 = module_0.collector_classes_from_gather_subset()
    var_1 = module_0.get_collector_names(str_0, var_0, str_0, var_0)
    var_2 = print(str_0)
    var_3 = frozenset(var_1)

def test_case_12():
    str_0 = '20'
    str_1 = "v(\\3udTsW'DTD{(L6\r-"
    var_0 = module_0.collector_classes_from_gather_subset()
    str_2 = {str_1, str_1, str_0, str_1, str_1, str_1, str_0}
    var_1 = frozenset(str_2)
    base_fact_collector_0 = module_0.BaseFactCollector()
    var_2 = base_fact_collector_0.collect()
    list_0 = [str_0, var_1]
    collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0)
    base_fact_collector_1 = module_0.BaseFactCollector(str_1)
    float_0 = 1198.25
    base_fact_collector_2 = module_0.BaseFactCollector(collector_not_found_error_0, float_0)
    var_3 = base_fact_collector_2.collect_with_namespace()
    cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
    str_3 = 'o3!(\n\x0c7l'
    str_4 = "9MU$f)b'\tJu"
    base_fact_collector_3 = module_0.BaseFactCollector(str_4)
    dict_0 = {base_fact_collector_1: base_fact_collector_3, base_fact_collector_3: str_2}
    bool_0 = True
    var_4 = base_fact_collector_1.collect(bool_0)
    base_fact_collector_4 = module_0.BaseFactCollector(str_3)
    var_5 = module_0.build_fact_id_to_collector_map(dict_0)
    var_6 = module_0.collector_classes_from_gather_subset(dict_0, base_fact_collector_4)