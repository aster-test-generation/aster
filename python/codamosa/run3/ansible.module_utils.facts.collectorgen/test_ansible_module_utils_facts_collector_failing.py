# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0
import collections as module_1

def test_case_0():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        list_0 = []
        str_0 = ';H6^5Ynit\r]'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.get_collector_names(base_fact_collector_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '9Jju~K"XZE|B!\''
        var_0 = module_0.collector_classes_from_gather_subset(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -574.5509
        base_fact_collector_0 = module_0.BaseFactCollector(float_0)
        list_0 = [base_fact_collector_0, float_0]
        var_0 = module_0.build_fact_id_to_collector_map(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'w4w'
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, dict_0]
        var_0 = module_0.find_unresolved_requires(list_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '^9xVV1^'
        complex_0 = None
        var_0 = module_0.resolve_requires(str_0, complex_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        bytes_0 = b'\xca\n\x1a\x8f\x84'
        bytes_1 = b'\xce\xc3x\xce\xfd\xfa\x08\xc1\xa2\x12\x9b$e\xaf\x87e\xb8\xd2'
        var_1 = module_0.resolve_requires(bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'A'
        str_1 = 'B'
        str_2 = 'C'
        str_3 = 'D'
        str_4 = 'E'
        str_5 = 'F'
        str_6 = 'G'
        str_7 = [str_2, str_3]
        var_0 = set(str_7)
        var_1 = set()
        str_8 = [str_3]
        var_2 = set(str_8)
        str_9 = [str_4]
        var_3 = set(str_9)
        str_10 = [str_5]
        var_4 = set(str_10)
        var_5 = set()
        str_11 = [str_5]
        var_6 = set(str_11)
        var_7 = {str_0: var_0, str_1: var_1, str_2: var_2, str_3: var_3, str_4: var_4, str_5: var_5, str_6: var_6}
        var_8 = module_0.tsort(var_7)
        var_9 = set()
        str_12 = [str_2, str_3]
        var_10 = set(str_12)
        str_13 = [str_3]
        var_11 = set(str_13)
        str_14 = [str_4]
        var_12 = set(str_14)
        str_15 = [str_5]
        var_13 = set(str_15)
        str_16 = [str_5]
        var_14 = set(str_16)
        var_15 = set()
        str_17 = [str_1]
        var_16 = set(str_17)
        str_18 = [str_2]
        var_17 = set(str_18)
        var_18 = module_0.tsort(var_14)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'A'
        str_1 = 'B'
        str_2 = 'C'
        str_3 = 'D'
        str_4 = 'E'
        str_5 = 'F'
        str_6 = 'G'
        str_7 = [str_2, str_3]
        var_0 = set(str_7)
        var_1 = set()
        str_8 = [str_3]
        var_2 = set(str_8)
        str_9 = [str_4]
        var_3 = set(str_9)
        str_10 = [str_5]
        var_4 = set(str_10)
        var_5 = set()
        var_6 = {str_0: var_0, str_1: var_1, str_2: var_2, str_3: var_3, str_4: var_4, str_5: var_5, str_6: str_6}
        var_7 = module_0.tsort(var_6)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        list_0 = []
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
        str_0 = 'min'
        str_1 = '(@4:.'
        str_2 = '}'
        str_3 = ''
        dict_0 = {str_1: str_0, str_1: cycle_found_in_fact_deps_0, str_2: str_0, str_3: str_0}
        var_1 = module_0.find_unresolved_requires(str_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '!hard@wae'
        var_0 = None
        var_1 = module_0.collector_classes_from_gather_subset()
        var_2 = module_0.get_collector_names(str_0, var_0, str_0, var_0)
        bool_0 = True
        base_fact_collector_0 = module_0.BaseFactCollector(bool_0)
        var_3 = print(str_0)
        var_4 = module_0.get_collector_names(var_0, var_0, str_0, var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '!hard@wae'
        var_0 = module_0.get_collector_names(str_0, str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -2042.22
        dict_0 = {}
        defaultdict_0 = module_1.defaultdict(**dict_0)
        var_0 = module_0.build_dep_data(defaultdict_0, dict_0)
        str_0 = '\x0b91p'
        defaultdict_1 = module_1.defaultdict()
        list_0 = []
        var_1 = module_0.resolve_requires(defaultdict_1, list_0)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        var_2 = module_0.get_collector_names()
        var_3 = module_0.collector_classes_from_gather_subset(float_0, str_0, float_0, collector_not_found_error_0, collector_not_found_error_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'coco'
        base_fact_collector_0 = module_0.BaseFactCollector(str_0)
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        dict_0 = {}
        tuple_0 = (base_fact_collector_0, dict_0)
        var_0 = module_0.collector_classes_from_gather_subset(tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '390'
        str_1 = 'coco'
        str_2 = "v(\\3udTsW'DTD{(L6\r-"
        var_0 = module_0.collector_classes_from_gather_subset()
        str_3 = ':jG'
        str_4 = {str_3, str_1, str_0, str_2, str_1, str_3, str_0}
        var_1 = frozenset(str_4)
        set_0 = set()
        var_2 = module_0.build_fact_id_to_collector_map(set_0)
        list_0 = [str_0, var_1]
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0)
        str_5 = '\n-'
        base_fact_collector_0 = module_0.BaseFactCollector(str_5)
        float_0 = -1615.56374
        base_fact_collector_1 = module_0.BaseFactCollector(collector_not_found_error_0, float_0)
        var_3 = base_fact_collector_1.collect_with_namespace()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        dict_0 = {}
        tuple_0 = (base_fact_collector_1, dict_0)
        bytes_0 = b'"<\x7f\xe4e\xce`<\xb66\xd1\xdfI\x1e\xe1\x91\xad\\'
        var_4 = module_0.collector_classes_from_gather_subset(base_fact_collector_1, tuple_0, cycle_found_in_fact_deps_0, bytes_0, set_0, tuple_0)
    except BaseException:
        pass