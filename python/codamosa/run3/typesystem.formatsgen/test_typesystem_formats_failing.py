# Automatically generated by Pynguin.
import typesystem.formats as module_0
import datetime as module_1

def test_case_0():
    try:
        str_0 = '2019-1-07T00:00:00'
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1182.8035
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '59u*Inwxk'
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        var_0 = base_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(date_format_0)
        str_0 = '2021-05-33'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = set()
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '24:00'
        bool_0 = time_format_0.is_native_type(time_format_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '24:00'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_8():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_9():
    try:
        date_format_0 = module_0.DateFormat()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(date_format_0)
        str_0 = '2019-1-07T00:00:00'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        u_u_i_d_format_0 = module_0.UUIDFormat(*list_0)
        dict_0 = {}
        base_format_0 = module_0.BaseFormat(**dict_0)
        optional_0 = base_format_0.serialize(u_u_i_d_format_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'J\\\r>\\\x0cD$\r'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "b(x($'`5K{t[?%,@"
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        var_0 = None
        optional_0 = date_time_format_0.serialize(var_0)
        str_0 = '2021-10-10T13:22:59.0000000Z'
        optional_1 = date_time_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        optional_0 = date_time_format_0.serialize(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        complex_0 = None
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(complex_0)
        str_0 = 'p})h\\lYNy|5kY\x0c+Mtq8'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = 'invalid'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        time_format_0 = module_0.TimeFormat()
        var_0 = None
        optional_0 = time_format_0.serialize(var_0)
        int_0 = 10
        time_0 = module_1.time()
        optional_1 = time_format_0.serialize(time_0)
        time_1 = module_1.time()
        bool_0 = True
        optional_2 = time_format_0.serialize(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-02-30T12:00:00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-14-07T00:00:00Z'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-11-01'
        date_0 = date_format_0.validate(str_0)
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_format_0.serialize(date_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '00:00:00.123456'
        time_format_0 = module_0.TimeFormat()
        str_1 = '23:59:59'
        time_0 = time_format_0.validate(str_1)
        time_format_1 = module_0.TimeFormat()
        time_1 = time_format_1.validate(str_0)
        time_format_2 = module_0.TimeFormat()
        str_2 = '00'
        time_2 = time_format_1.validate(str_2)
    except BaseException:
        pass

def test_case_22():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2021-05-33'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2021-11-12T06:32:15.000100'
        datetime_0 = date_time_format_0.validate(str_0)
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_1 = u_u_i_d_format_0.serialize(date_time_format_0)
        optional_0 = date_time_format_0.serialize(datetime_0)
        datetime_1 = date_time_format_0.validate(str_0)
        str_2 = '2021-1-12T06:32:15.000100+53'
        datetime_2 = date_time_format_0.validate(str_2)
    except BaseException:
        pass