# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        bytes_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        float_0 = 995.0
        bytes_1 = b'\x06\t5\x8aK4C\xcb\x94\x85\xa3b!r\xac|pw\xa6r'
        str_0 = 'U+'
        tuple_0 = (float_0, float_0, bytes_1, str_0)
        bool_0 = True
        int_0 = 617
        tuple_1 = (list_0, tuple_0, bool_0, int_0)
        str_1 = ')o'
        var_0 = module_0.remove_values(tuple_1, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        list_0 = [str_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -108
        list_0 = [int_0, int_0, int_0, int_0]
        var_0 = module_0.set_fallbacks(int_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        str_0 = 'Unvault lookup found %s'
        dict_0 = {str_0: list_0}
        bool_0 = True
        var_0 = module_0.set_fallbacks(dict_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        str_0 = 'hostnamectl'
        dict_0 = {tuple_0: str_0, tuple_0: str_0}
        list_0 = []
        var_0 = module_0.sanitize_keys(dict_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'A+FJr}izKFJ'
        bytes_0 = b'\xa0\xa7X\xd2\x81\x11\xbf'
        list_0 = [str_0, bytes_0, str_0]
        list_1 = [list_0, str_0, list_0]
        var_0 = module_0.remove_values(list_1, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Tests for env_fallback'
        int_0 = -597
        list_0 = [int_0, int_0, str_0, str_0]
        tuple_0 = (int_0, list_0)
        var_0 = module_0.sanitize_keys(tuple_0, list_0)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'fallback'
        str_1 = {str_0: str_0}
        str_2 = {str_0: str_1}
        var_0 = {}
        var_1 = module_0.set_fallbacks(str_2, var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        dict_0 = {}
        var_0 = module_0.remove_values(bool_0, dict_0)
        dict_1 = {bool_0: dict_0}
        list_0 = [bool_0]
        var_1 = module_0.set_fallbacks(dict_1, list_0)
        var_2 = module_0.remove_values(dict_0, dict_0)
        str_0 = "g!H'vz-YGuh|{ygtS"
        var_3 = module_0.set_fallbacks(bool_0, str_0)
    except BaseException:
        pass