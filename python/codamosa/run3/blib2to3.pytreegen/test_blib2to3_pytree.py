# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 113
    str_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0)

def test_case_2():
    int_0 = 1107
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_3():
    int_0 = 14
    str_0 = 'p4]arent\n'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_4():
    str_0 = '%6gDCa5\tng,"j!t'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_5():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_6():
    str_0 = '"ram4at'
    optional_0 = None
    leaf_pattern_0 = module_0.LeafPattern(optional_0, str_0, str_0)

def test_case_7():
    int_0 = 1107
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_8():
    str_0 = '\n        Return a post-order iterator for the tree.\n\n        This must be implemented by the concrete subclass.\n        '
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_9():
    complex_0 = None
    int_0 = 5706
    list_0 = []
    list_1 = [complex_0, list_0]
    node_0 = module_0.Node(int_0, list_0, list_0, list_1)

def test_case_10():
    int_0 = 31
    str_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)
    optional_0 = leaf_0.remove()

def test_case_11():
    int_0 = 31
    str_0 = 'bart"nae'
    str_1 = None
    leaf_0 = module_0.Leaf(int_0, str_1, str_1)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_12():
    int_0 = 17
    str_0 = 'bare_name'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
    list_0 = []
    bool_0 = wildcard_pattern_0.match_seq(list_0)
    str_1 = None
    leaf_0 = module_0.Leaf(int_0, str_1, str_1)
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_13():
    leaf_pattern_0 = module_0.LeafPattern()
    str_0 = 'J'
    int_0 = 86
    tuple_0 = (int_0, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    str_1 = leaf_0.__repr__()
    var_0 = leaf_pattern_0.match(leaf_0, leaf_pattern_0)
    var_1 = leaf_pattern_0.match(leaf_0)
    leaf_1 = leaf_0.clone()

def test_case_14():
    int_0 = 50
    str_0 = 'r\\$)~/ja0">\n".9}'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 1488
    list_0 = [leaf_0]
    list_1 = [str_0, list_0]
    node_0 = module_0.Node(int_1, list_0, list_1)
    node_0.append_child(leaf_0)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()

def test_case_15():
    str_0 = '\n        Ret,rn a post-order iterator for the tree.\n\n        This must be implemented by the concrete subclass.\n        '
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    int_0 = 24
    int_1 = None
    int_2 = None
    tuple_0 = (int_1, int_2)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0)
    str_1 = leaf_0.get_suffix()

def test_case_16():
    str_0 = ','
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_17():
    str_0 = 'q'
    int_0 = 2166
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_18():
    int_0 = 4
    str_0 = 'p4]arent\n'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.get_suffix()

def test_case_19():
    negated_pattern_0 = module_0.NegatedPattern()
    str_0 = ''
    iterator_0 = negated_pattern_0.generate_matches(str_0)
    var_0 = list(iterator_0)
    str_1 = "string 'b' m{tchTd for p1"
    var_1 = list(str_1)

def test_case_20():
    negated_pattern_0 = module_0.NegatedPattern()
    str_0 = 'L|'
    iterator_0 = negated_pattern_0.generate_matches(str_0)
    var_0 = list(iterator_0)

def test_case_21():
    int_0 = 1
    str_0 = 'n_zo~X]'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_22():
    str_0 = 'states'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    list_0 = []
    bool_0 = wildcard_pattern_0.match_seq(list_0)

def test_case_23():
    str_0 = '*3'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bytes_0 = None
    tuple_0 = ()
    set_0 = {bytes_0, tuple_0}
    bool_0 = wildcard_pattern_0.match_seq(tuple_0, set_0)

def test_case_24():
    int_0 = 274
    int_1 = 1
    str_0 = ' x(pYI$:I+J=tx/'
    leaf_0 = module_0.Leaf(int_1, str_0)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()
    leaf_3 = [leaf_0, leaf_1, leaf_2]
    node_0 = module_0.Node(int_0, leaf_3)
    str_1 = 'nM]_zo~X]'
    str_2 = leaf_0.get_suffix()
    leaf_4 = leaf_2.clone()
    leaf_5 = module_0.Leaf(int_1, str_1)
    var_0 = str(node_0)

def test_case_25():
    int_0 = 0
    str_0 = 'dn\rzo~X\x0c'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    bool_0 = wildcard_pattern_0.match(str_0)

def test_case_26():
    int_0 = 26
    str_0 = 'bare_name'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
    list_0 = []
    bool_0 = wildcard_pattern_0.match_seq(list_0)

def test_case_27():
    int_0 = 2
    str_0 = 'bare_name'
    int_1 = 169
    tuple_0 = (int_0, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_1, str_0, tuple_1)
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    var_0 = leaf_pattern_0.match(leaf_0)
    leaf_1 = module_0.Leaf(int_0, str_0)
    leaf_2 = leaf_0.clone()
    var_1 = leaf_pattern_0.match(leaf_1)

def test_case_28():
    int_0 = 31
    str_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    optional_0 = leaf_0.remove()

def test_case_29():
    str_0 = 'h8p\\$a"~-k{J`'
    complex_0 = None
    int_0 = 5706
    list_0 = []
    int_1 = 1488
    node_0 = module_0.Node(int_1, list_0)
    list_1 = []
    iterator_0 = module_0.generate_matches(list_1, list_0)
    list_2 = [str_0, str_0, list_0]
    node_1 = module_0.Node(int_0, list_0, list_2)
    node_1.insert_child(int_0, node_0)
    list_3 = [complex_0, list_0]
    node_2 = module_0.Node(int_0, list_0, list_0, list_3)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_30():
    str_0 = '\tY-C%M];m bj)'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    grammar_0 = module_1.Grammar()
    int_0 = -2587
    str_1 = "I^0Zl.r{qT':0)w~+l"
    int_1 = 2257
    int_2 = None
    tuple_0 = (int_1, int_2)
    tuple_1 = (str_1, tuple_0)
    list_0 = [tuple_1]
    tuple_2 = (int_0, str_0, tuple_1, list_0)
    var_0 = module_0.convert(grammar_0, tuple_2)