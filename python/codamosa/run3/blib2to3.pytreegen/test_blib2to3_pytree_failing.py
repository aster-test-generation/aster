# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 943
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_2():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 49
        int_1 = -2207
        str_0 = '/8g71X'
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        leaf_0 = module_0.Leaf(int_1, str_0, leaf_pattern_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'q'
        int_0 = 2166
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        negated_pattern_0 = module_0.NegatedPattern()
        bool_1 = negated_pattern_0.match(bool_0)
        str_0 = '2_Q| 9@B}Y\t('
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        str_1 = 'A\x0b(I-RrV'
        bool_2 = wildcard_pattern_0.match(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 55
        list_0 = []
        optional_0 = None
        node_0 = module_0.Node(int_0, list_0, optional_0)
    except BaseException:
        pass

def test_case_8():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        str_0 = 'mIsv" q\r'
        iterator_0 = negated_pattern_0.generate_matches(str_0)
        var_0 = list(iterator_0)
        int_0 = 2802
        str_1 = 'q'
        list_0 = []
        leaf_0 = module_0.Leaf(int_0, str_1, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 24
        str_0 = 'iw[fr[>E;sdl\'"K'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        str_1 = leaf_1.__repr__()
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 0
        str_0 = '-n\rzL~X\x0c'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 563
        list_0 = []
        grammar_0 = module_1.Grammar()
        node_0 = module_0.Node(int_0, list_0, grammar_0)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ' +t/'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        bool_0 = wildcard_pattern_0.match(negated_pattern_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1107
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        str_0 = 'o__\tFGAn'
        leaf_pattern_0 = module_0.LeafPattern(int_0, node_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -1532
        wildcard_pattern_0 = module_0.WildcardPattern(int_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        dict_0 = {}
        negated_pattern_0 = module_0.NegatedPattern(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 1934
        str_0 = 'Parser engine for the grammar tables generated by pgen.\n\nThe grammar table must be loaded first.\n\nSee Parser/parser.c in the Python distribution for additional info on\nhow this parsing engine works.\n\n'
        bool_0 = negated_pattern_0.match_seq(str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 3
        str_0 = 'p4]arent\n'
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 2976
        list_0 = [leaf_0, leaf_0, leaf_0, leaf_0]
        node_0 = module_0.Node(int_1, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 24
        str_0 = 'iw[fr[>E;sdl\'"K'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        str_1 = leaf_1.__repr__()
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_20():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -2302
        optional_0 = None
        none_type_0 = None
        tuple_0 = (int_0, optional_0, grammar_0, none_type_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_21():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 1065
        str_0 = 'wpent\n'
        list_0 = [grammar_0]
        tuple_0 = (int_0, str_0, list_0, grammar_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_22():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = None
        str_0 = 'Y4hp144yx#=Z8(x|/o'
        str_1 = '[Ea:E.2a3'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_1, tuple_0)
        list_0 = None
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 1659
        list_0 = []
        str_0 = "Rp?qI%)[h:Q@i8;F[O0'"
        node_pattern_0 = module_0.NodePattern(int_0, list_0, str_0)
        negated_pattern_0 = module_0.NegatedPattern()
        str_1 = '-'
        wildcard_pattern_0 = module_0.WildcardPattern(str_1)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 1022
        list_1 = []
        node_0 = module_0.Node(int_1, list_1, any_0, str_1)
        node_0.set_child(int_1, node_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 17
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        str_1 = None
        leaf_0 = module_0.Leaf(int_0, str_1, str_1)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_1, str_0)
        var_0 = leaf_pattern_0.match(leaf_0, leaf_0)
    except BaseException:
        pass

def test_case_25():
    try:
        complex_0 = None
        int_0 = 5702
        list_0 = []
        list_1 = [complex_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_0, list_1)
        node_0.insert_child(int_0, node_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 21
        str_0 = '0nz4CU`\t'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        int_1 = 593
        list_0 = [leaf_1]
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        node_0 = module_0.Node(int_1, list_0, var_0)
        node_1 = node_0.clone()
        str_1 = node_0.__repr__()
    except BaseException:
        pass

def test_case_27():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -449
        negated_pattern_0 = None
        str_0 = '0123456789'
        str_1 = 'NTg'
        tuple_0 = (int_0, negated_pattern_0, str_0, str_1)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_28():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        str_0 = '{_TESk-U\x0bm=G0'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 1005
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, any_0, str_0)
        int_1 = -439
        leaf_pattern_0 = module_0.LeafPattern(int_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = "lf)[a9']b"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'Grammat$'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = None
        dict_0 = {str_0: int_0, str_0: int_0, str_0: str_0}
        node_pattern_0 = module_0.NodePattern(int_0, dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '"ram4at'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        optional_0 = None
        leaf_pattern_0 = module_0.LeafPattern(optional_0, str_0, str_0)
        list_0 = []
        int_0 = 1085
        node_0 = module_0.Node(int_0, list_0)
        var_0 = leaf_pattern_0.match(node_0)
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 563
        list_0 = []
        grammar_0 = module_1.Grammar()
        node_0 = module_0.Node(int_0, list_0, grammar_0)
        node_0.replace(list_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'q'
        int_0 = 2166
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 1085
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 5140
        str_0 = 'n\rzo~X\x0c'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 573
        list_0 = []
        node_pattern_0 = module_0.NodePattern(int_0, list_0)
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        list_1 = []
        bool_0 = wildcard_pattern_0.match_seq(list_1)
        str_1 = '1BY41AA:at"m\nazkBgB['
        wildcard_pattern_1 = module_0.WildcardPattern(str_0)
        bool_1 = wildcard_pattern_1.match(str_1)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 274
        int_1 = 1
        str_0 = ' x(pYI$uI+J=tx/'
        leaf_0 = module_0.Leaf(int_1, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        leaf_3 = [leaf_0, leaf_1, leaf_2]
        node_0 = module_0.Node(int_0, leaf_3)
        leaf_4 = module_0.Leaf(int_1, str_0)
        node_0.replace(leaf_4)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 325
        int_1 = -2329
        str_0 = 'RB=3:\nhI]BH"'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1, str_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 0
        str_0 = ''
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.pre_order()
        var_0 = list(iterator_0)
        str_1 = 'abc'
        leaf_1 = module_0.Leaf(int_0, str_1)
        iterator_1 = leaf_1.pre_order()
        var_1 = list(iterator_1)
        int_1 = 1
        str_2 = 'a'
        leaf_2 = module_0.Leaf(int_1, str_2)
        int_2 = 2
        str_3 = 'b'
        leaf_3 = module_0.Leaf(int_2, str_3)
        int_3 = 3
        str_4 = 'c'
        leaf_4 = module_0.Leaf(int_3, str_4)
        leaf_5 = [leaf_2, leaf_3, leaf_4]
        node_0 = module_0.Node(int_0, leaf_5)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 4
        set_0 = {int_0, int_0, int_0}
        leaf_pattern_0 = module_0.LeafPattern(int_0, set_0)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 2
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0, int_0)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 1
        str_0 = '&{Aq}W>LgtT%OSH7'
        str_1 = 'n\rzo~X\x0c'
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_0)
        any_0 = wildcard_pattern_0.optimize()
        bytes_0 = b'\xfa\xa3tNF\x0f\xff'
        wildcard_pattern_1 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_1.match(bytes_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'h8p\\$a"~-k{J`'
        complex_0 = None
        int_0 = 5706
        list_0 = []
        list_1 = [complex_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_0, str_0, list_1)
        node_1 = node_0.clone()
        node_0.insert_child(int_0, node_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'nam'
        str_1 = [str_0]
        int_0 = 34
        str_2 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_0, int_0, str_2)
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match(int_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '**8^)'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = None
        int_0 = 372
        any_0 = wildcard_pattern_0.optimize()
        list_1 = []
        any_1 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_1, any_1, str_0)
        node_1 = node_0.clone()
        list_2 = [node_1]
        iterator_0 = module_0.generate_matches(list_0, list_2)
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        int_1 = 4683
        node_2 = module_0.Node(int_1, list_2, any_1, str_0)
        int_2 = 48
        node_2.insert_child(int_2, node_0)
        dict_0 = {}
        bool_0 = wildcard_pattern_0.match(var_0, dict_0)
    except BaseException:
        pass