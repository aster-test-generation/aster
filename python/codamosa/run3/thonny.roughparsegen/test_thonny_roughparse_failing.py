# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        dict_0 = {}
        str_0 = 'open_file'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_0 = string_translate_pseudo_mapping_0.__len__()
        float_0 = None
        bytes_0 = b'\xe0'
        tuple_0 = (bytes_0,)
        float_1 = 1057.26
        dict_1 = {bytes_0: tuple_0, float_0: float_1}
        str_1 = 'fNSU\\6IH9BvG'
        rough_parser_0 = module_0.RoughParser(str_1, dict_1)
        var_1 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'7]\xa8\rC\x021LN2'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        complex_0 = None
        tuple_0 = (dict_0, dict_0, complex_0)
        rough_parser_0 = module_0.RoughParser(tuple_0, bytes_0)
        var_0 = rough_parser_0.set_str(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        dict_0 = {}
        var_1 = rough_parser_0.set_str(dict_0)
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2349.011407
        str_0 = '#002240'
        rough_parser_0 = module_0.RoughParser(float_0, str_0)
        var_0 = rough_parser_0.get_continuation_type()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycoy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        dict_0 = {}
        var_0 = rough_parser_0.set_str(dict_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        dict_0 = {}
        str_1 = 'open_file'
        var_0 = rough_parser_0.set_str(dict_0)
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_1)
        var_1 = string_translate_pseudo_mapping_0.__len__()
        var_2 = rough_parser_0.find_good_parse_start()
        set_0 = set()
        rough_parser_1 = module_0.RoughParser(set_0, dict_0)
        var_3 = rough_parser_1.get_base_indent_string()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        dict_0 = {}
        var_0 = rough_parser_0.set_str(dict_0)
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = None
        bool_0 = False
        tuple_0 = (float_0, bool_0)
        str_0 = '>\r6@,:'
        list_0 = [tuple_0, bool_0]
        rough_parser_0 = module_0.RoughParser(list_0, str_0)
        var_0 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 192
        float_0 = -4885.8
        str_0 = 'x=M$'
        dict_0 = {int_0: str_0, float_0: float_0, str_0: float_0, float_0: str_0}
        rough_parser_0 = module_0.RoughParser(str_0, dict_0)
        var_0 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '6J=<^x&'
        hyper_parser_0 = module_0.HyperParser(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        str_0 = 'open_file'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_0 = string_translate_pseudo_mapping_0.__len__()
        str_1 = 'OWA9\rP7.\x0b`qB"S*RPpVW'
        var_1 = string_translate_pseudo_mapping_0.__getitem__(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        dict_0 = {}
        var_0 = rough_parser_0.set_str(dict_0)
        var_1 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '6\\\n5,F`.8whIgqL^Ji8A'
        set_0 = {str_0}
        str_1 = 'P0wh$\x0b>z'
        rough_parser_0 = module_0.RoughParser(set_0, str_1)
        dict_0 = {str_1: str_0}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, rough_parser_0)
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, string_translate_pseudo_mapping_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 1130
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdir", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        var_0 = rough_parser_0.set_lo(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        dict_0 = {}
        var_1 = rough_parser_0.set_str(dict_0)
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_2 = string_translate_pseudo_mapping_0.__len__()
        var_3 = rough_parser_0.find_good_parse_start()
        var_4 = string_translate_pseudo_mapping_0.__iter__()
        var_5 = rough_parser_0.set_lo(string_translate_pseudo_mapping_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        dict_0 = {}
        str_1 = 'open_file'
        var_1 = rough_parser_0.set_str(dict_0)
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_1)
        var_2 = string_translate_pseudo_mapping_0.__len__()
        var_3 = string_translate_pseudo_mapping_0.__iter__()
        float_0 = None
        bytes_0 = b'\xe0'
        tuple_0 = (bytes_0,)
        float_1 = 1057.26
        dict_1 = {bytes_0: tuple_0, float_0: float_1}
        bytes_1 = b'>\xe2y\xe1\x91\xd3K0\xf7FYw'
        var_4 = string_translate_pseudo_mapping_0.get(str_0, bytes_1)
        str_2 = 'fNSU\\6IH9BvG'
        var_5 = string_translate_pseudo_mapping_0.__getitem__(str_1)
        rough_parser_1 = module_0.RoughParser(str_2, dict_1)
        var_6 = rough_parser_1.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        dict_0 = {}
        str_1 = 'open_file'
        var_1 = rough_parser_0.set_str(dict_0)
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_1)
        var_2 = string_translate_pseudo_mapping_0.__len__()
        str_2 = 'No results.\n\n'
        var_3 = rough_parser_0.set_str(str_2)
        str_3 = 'WN$/ gR|xgnN30iY/q^'
        int_0 = 5612
        rough_parser_1 = module_0.RoughParser(str_3, int_0)
        var_4 = rough_parser_1.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        str_0 = '\n            # https://github.com/pfalcon/pycopy-lib/blob/master/os/os/__init__.py\n            \n            import ffi\n            \n            libc = ffi.open(\n                "libc.so.6" if sys.platform == "linux" else "libc.dylib"\n            )\n            \n            @classmethod\n            def check_error(cls, ret):\n                if ret == -1:\n                    raise OSError(cls.os.errno())\n            \n            _getcwd = libc.func("s", "getcwd", "si")\n            @classmethod\n            def getcwd(cls):\n                buf = bytearray(512)\n                return cls._getcwd(buf, 512)\n\n            _chdir = libc.func("i", "chdiG", "s")\n            @classmethod\n            def chdir(cls, dir):\n                r = cls._chdir(dir)\n                cls.check_error(r)\n            \n            _rmdir = libc.func("i", "rmdir", "s")\n            @classmethod\n            def rmdir(cls, name):\n                e = cls._rmdir(name)\n                cls.check_error(e)                                    \n            '
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        dict_0 = {}
        str_1 = 'open_file'
        var_1 = rough_parser_0.set_str(dict_0)
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_1)
        var_2 = rough_parser_0.find_good_parse_start(rough_parser_0)
    except BaseException:
        pass