# Automatically generated by Pynguin.
import tornado.escape as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = "test http://tornadoweb.org 'http://tornadoweb.org' http://www.google.com, http://www.reddit.com/ http://www.reddit.com/r/subreddit http://www.reddit.com/r/lalalalalalalala http://www.reddit.com/r/lalalalalalalala/ lalalal http://www.google.com/test lalalal http://www.google.com/test/ www.reddit.com/r/subreddit"
    str_1 = module_0.linkify(str_0)

def test_case_2():
    str_0 = "A utility class to write to and read from a non-blocking file or socket.\n\n    We support a non-blocking ``write()`` and a family of ``read_*()``\n    methods. When the operation completes, the ``Awaitable`` will resolve\n    with the data read (or ``None`` for ``write()``). All outstanding\n    ``Awaitables`` will resolve with a `StreamClosedError` when the\n    stream is closed; `.BaseIOStream.set_close_callback` can also be used\n    to be notified of a closed stream.\n\n    When a stream is closed due to an error, the IOStream's ``error``\n    attribute contains the exception object.\n\n    Subclasses must implement `fileno`, `close_fd`, `write_to_fd`,\n    `read_from_fd`, and optionally `get_fd_error`.\n\n    "
    str_1 = module_0.xhtml_unescape(str_0)

def test_case_3():
    str_0 = ',Qx|:p\r&XE8O"U-\n{23'
    str_1 = module_0.squeeze(str_0)

def test_case_4():
    str_0 = 'Prints all the command line options to stderr (or another file).\n\n    See `OptionParser.print_help`.\n    '
    any_0 = module_0.recursive_unicode(str_0)
    str_1 = module_0.json_encode(str_0)
    str_2 = '+\x0b$E"|CZp3ke/y<B4UI#'
    str_3 = module_0.squeeze(str_2)
    any_1 = module_0.recursive_unicode(str_1)
    str_4 = module_0.xhtml_unescape(str_1)
    bool_0 = None
    str_5 = module_0.xhtml_unescape(str_4)
    var_0 = module_0.url_unescape(str_2, bool_0)
    str_6 = module_0.xhtml_unescape(str_2)
    str_7 = module_0.xhtml_unescape(str_1)
    var_1 = module_0.url_unescape(str_2)
    any_2 = module_0.json_decode(str_7)
    optional_0 = module_0.to_unicode(str_7)

def test_case_5():
    bytes_0 = b'0N'
    var_0 = module_0.url_unescape(bytes_0)

def test_case_6():
    bytes_0 = b'a;7k\xc3DyC\x19\xa0\x1ay\xbbO\x19\t\x90\xef'
    bool_0 = False
    dict_0 = module_0.parse_qs_bytes(bytes_0, bool_0)
    bytes_1 = b'\x96\xeeT\xe3'
    bool_1 = True
    dict_1 = module_0.parse_qs_bytes(bytes_1, bool_1)

def test_case_7():
    str_0 = '1v'
    optional_0 = module_0.utf8(str_0)

def test_case_8():
    bool_0 = True
    any_0 = module_0.recursive_unicode(bool_0)
    any_1 = module_0.recursive_unicode(bool_0)

def test_case_9():
    str_0 = "test http://tornadoweb.org 'http://tornadoweb.org' http://www.google.com, http://www.reddit.com/ http://www.reddit.com/r/subreddit http://www.reddit.com/r/lalalalalalalala http://www.reddit.com/r/lalalalalalalala/ lalalal http://www.google.com/test lalalal http://www.google.com/test/ www.reddit.com/r/subreddit"
    str_1 = 'www.google.com/?q=python+linkify'
    str_2 = module_0.linkify(str_1)
    str_3 = module_0.linkify(str_1, str_0)
    bool_0 = False
    str_4 = module_0.linkify(str_0, str_1)
    bool_1 = False
    str_5 = module_0.url_escape(str_3, bool_1)
    str_6 = module_0.linkify(str_1, bool_0, str_0)

def test_case_10():
    str_0 = 'http://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/http://www.example.com/x'
    list_0 = []
    str_1 = module_0.linkify(str_0, str_0, list_0)
    str_2 = module_0.linkify(str_1, list_0)
    dict_0 = module_0.parse_qs_bytes(str_1)
    str_3 = module_0.xhtml_unescape(str_2)

def test_case_11():
    str_0 = 'http://tornadoweb.org'
    bool_0 = True
    str_1 = module_0.linkify(str_0, bool_0, str_0)

def test_case_12():
    str_0 = 'http://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/http://www.example.com/x'
    list_0 = []
    str_1 = module_0.linkify(str_0, str_0, list_0)
    str_2 = module_0.linkify(str_1, list_0)
    str_3 = module_0.xhtml_unescape(str_2)

def test_case_13():
    str_0 = '\nX6'
    bool_0 = False
    var_0 = module_0.url_unescape(str_0)
    str_1 = '\\Q045]Fn'
    str_2 = module_0.squeeze(str_1)
    str_3 = module_0.squeeze(str_0)
    str_4 = module_0.xhtml_escape(str_2)
    dict_0 = module_0.parse_qs_bytes(str_0, bool_0)
    str_5 = module_0.xhtml_escape(str_3)
    str_6 = module_0.url_escape(str_5)
    any_0 = module_0.recursive_unicode(dict_0)

def test_case_14():
    bytes_0 = b'\x9bz\n\x97\x07P\x0c\xf5$\x10\x05\xd95\xd7\x91'
    dict_0 = module_0.parse_qs_bytes(bytes_0)
    str_0 = '8{Sn&|+%kBB;!eh++c'
    str_1 = module_0.url_escape(str_0)
    str_2 = '+\x0b$E"|CZp3ke/y<B4UI#'
    str_3 = module_0.squeeze(str_2)
    any_0 = module_0.recursive_unicode(str_0)
    str_4 = module_0.xhtml_unescape(str_0)
    optional_0 = module_0.to_unicode(str_0)
    var_0 = module_0.url_unescape(str_0)
    str_5 = module_0.xhtml_escape(str_0)
    any_1 = module_0.recursive_unicode(str_0)
    str_6 = module_0.xhtml_unescape(str_5)
    str_7 = None
    bool_0 = False
    var_1 = module_0.url_unescape(str_5, str_7, bool_0)

def test_case_15():
    str_0 = 'http://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://Hww.examplecom/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.cm/xhttp://www.example.com/xhttp://www.example.com/xhttp://ww.example.com/xhttp://www.example.com/xht.p://wwwexample.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://wwwexample.com/http://www.example.com/x'
    list_0 = []
    str_1 = module_0.linkify(str_0, str_0, list_0)

def test_case_16():
    bool_0 = True
    str_0 = 'www.google.com/?q=python+linkify'
    str_1 = module_0.linkify(str_0, bool_0)

def test_case_17():
    str_0 = 'http://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.examplecom/xhtGp://www.example.comdxhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.cm/xhtp://www.example.com/xhttp://www.example.com/xhttp://w .example.c/xh2tp://www.example.com/xhttp://wwwexamle.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://wwwexample.co/htt%://www.example.com/x'
    str_1 = module_0.linkify(str_0)

def test_case_18():
    str_0 = 'http://www.google.com/'
    str_1 = module_0.linkify(str_0)
    str_2 = 'http://www.google.com/path/'
    str_3 = module_0.linkify(str_2)
    bool_0 = False
    str_4 = '|$('
    str_5 = '.'
    str_6 = 'ie<K"de:2<,=%I"'
    list_0 = [str_2, str_4, str_5, str_6]
    str_7 = module_0.linkify(str_3, bool_0, str_3, list_0)

def test_case_19():
    str_0 = "test http://tornadoweb.org 'http://tornadoweb.org' http://www.google.com, http://www.reddit.com/ http://www.reddit.com/r/subreddit http://www.reddit.com/r/lalalalalalalala http://www.reddit.com/r/lalalalalalalala/ lalalal http://www.google.com/test lalalal http://www.google.com/test/ www.reddit.com/r/subreddit"
    bool_0 = True
    str_1 = 'www.google.com/?q=python+linkify'
    str_2 = module_0.xhtml_escape(str_0)
    optional_0 = module_0.to_unicode(str_1)
    bool_1 = False
    str_3 = module_0.linkify(str_1, bool_1)
    str_4 = module_0.linkify(str_0)
    bool_2 = False
    str_5 = module_0.url_escape(str_2, bool_0)
    str_6 = module_0.xhtml_unescape(str_4)
    bool_3 = True
    str_7 = module_0.xhtml_unescape(str_0)
    str_8 = module_0.linkify(str_1, bool_2, str_5, bool_3)
    any_0 = module_0.recursive_unicode(str_6)

def test_case_20():
    bool_0 = True
    str_0 = 'www.googge.comg?q=python+linkify'
    list_0 = []
    str_1 = module_0.linkify(str_0, str_0, list_0)
    bool_1 = False
    str_2 = module_0.linkify(str_0, bool_0, bool_1)
    bool_2 = False
    str_3 = module_0.linkify(str_1, str_0, bool_2)
    str_4 = module_0.xhtml_escape(str_1)
    str_5 = module_0.xhtml_unescape(str_3)
    str_6 = module_0.linkify(str_1)

def test_case_21():
    str_0 = 'http://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.co/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.cm/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.example.com/xhttp://www.xample.com/x'
    bool_0 = False
    list_0 = []
    str_1 = module_0.linkify(str_0, str_0, list_0)
    callable_0 = None
    str_2 = module_0.linkify(str_1, callable_0, bool_0)
    str_3 = '>/g^|WkjP~E\t'
    str_4 = module_0.squeeze(str_3)
    str_5 = module_0.xhtml_unescape(str_2)
    optional_0 = module_0.utf8(str_2)
    str_6 = module_0.linkify(str_2, list_0)