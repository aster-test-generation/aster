# Automatically generated by Pynguin.
import pytutils.trees as module_0

def test_case_0():
    try:
        str_0 = ')YAO/$'
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(tree_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = ".l7U^'B-F*eTgq,"
        var_0 = module_0.set_tree_node(bool_0, str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tree_0 = module_0.Tree()
        registry_tree_0 = module_0.RegistryTree(tree_0)
        var_0 = tree_0.__getitem__(registry_tree_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tree_0 = module_0.Tree()
        str_0 = 'gj'
        var_0 = tree_0.__setitem__(str_0, tree_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tree_0 = module_0.Tree()
        str_0 = 'Impossible to format dict due to missing elements: %r'
        var_0 = tree_0.__setitem__(str_0, tree_0)
    except BaseException:
        pass

def test_case_6():
    try:
        registry_tree_0 = module_0.RegistryTree()
        float_0 = 1138.4
        list_0 = [registry_tree_0, registry_tree_0, registry_tree_0]
        registry_tree_1 = module_0.RegistryTree()
        str_0 = 'bad import string %r'
        tree_0 = module_0.Tree(registry_tree_0, list_0, str_0)
        var_0 = tree_0.__getitem__(registry_tree_0, float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        tree_0 = module_0.Tree(tuple_0)
        str_0 = '7S;-AG#7,ph~O #Bcx'
        var_0 = tree_0.__setitem__(tuple_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\x8d\xbc\xd7'
        str_0 = ';'
        str_1 = '\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    '
        str_2 = 'B\rQJD8h!{[dxt{hx}'
        bytes_1 = b'X(\x0e\xac\x85j8\xc1o\x93\xb8{\x04{\x02\x9b\xc4\xcb\xde\x8b'
        dict_0 = {str_1: str_0, str_2: bytes_1}
        int_0 = 116
        var_0 = module_0.get_tree_node(bytes_0, str_0, dict_0, int_0)
    except BaseException:
        pass