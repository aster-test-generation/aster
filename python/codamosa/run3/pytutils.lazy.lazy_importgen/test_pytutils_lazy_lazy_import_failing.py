# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = 'extra'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
        var_1 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(var_0, var_0)
        var_1 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
        bytes_0 = b''
        var_0 = illegal_use_of_scope_replacer_0.__eq__(bytes_0)
        var_1 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        bool_0 = False
        float_0 = -3265.452
        import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, float_0)
        var_0 = module_0.lazy_import(dict_0, import_replacer_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'kwargs'
        bytes_0 = b'\x9c0$\x1aY'
        bytes_1 = b'\x8eI\xa1\xb9\xd8Z\xecj\xa4\xe3\x93\xc0\xbeYv\x0c'
        dict_0 = {bytes_0: str_0, str_0: bytes_0}
        list_0 = [bytes_0, dict_0, bytes_0]
        import_replacer_0 = module_0.ImportReplacer(str_0, bytes_0, bytes_1, dict_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n    from bzrlh import (\n      erVrs,\n       osutils,\n        brErc,\n  k    )\n   import b,lib.branch\n    '
        var_0 = module_0.lazy_import(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n    from bzrlib import (\n       errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\n    from bzrlib import (\n       errors,\n        osutils,\n        branc,\n        )\n    iport bzrlib.branch\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '    from bzrlh import (\n      erVrs,\n       osutils,\n        brErc,\n  k   )\n   import b,lib.branchh    '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        int_0 = 36
        bool_0 = True
        import_replacer_0 = module_0.ImportReplacer(dict_0, int_0, str_0, bool_0)
        var_0 = module_0.lazy_import(import_replacer_0, import_replacer_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_0, bool_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = None
        str_0 = '7Z{G975\\,]'
        bytes_0 = b''
        bool_0 = True
        list_0 = [bytes_0, float_0, bytes_0, str_0]
        dict_0 = {float_0: bytes_0, bytes_0: bool_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, dict_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        import_processor_0 = module_0.ImportProcessor(bytes_0)
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(import_processor_0, import_processor_0)
        var_1 = illegal_use_of_scope_replacer_1.__repr__()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\n    from bzrlh import (\nS     erVrs,\n       osutils,\n  "     brErc,\n  k     )\n   import b,lib#branch\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ' <e>fU2e1(W=s'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hydrated class instances (unused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'q'
        list_0 = [str_0]
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = '"e\t_PCBYDxz\'y'
        bool_0 = True
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_1, list_0, bool_0)
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
        var_0 = scope_replacer_0.__getattribute__(list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '    from bzrlh import (\n      erVrs,\n       osutils,\n        brErc,\n  k   )\n   import b,lib.branchh,   '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        import_processor_0 = module_0.ImportProcessor()
        list_0 = [import_processor_0]
        bool_0 = False
        set_0 = set()
        import_replacer_0 = module_0.ImportReplacer(list_0, bool_0, set_0)
        var_0 = module_0.lazy_import(list_0, import_replacer_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\n    from bzrlh import (\n      erVr(,\n      osutils,\n  D    ,brErc,\n  k    )\n   import b,b.bra&ch\n   '
        var_0 = module_0.lazy_import(str_0, str_0, str_0)
    except BaseException:
        pass