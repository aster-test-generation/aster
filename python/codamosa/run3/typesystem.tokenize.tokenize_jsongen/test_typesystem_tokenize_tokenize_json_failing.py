# Automatically generated by Pynguin.
import typesystem.tokenize.tokenize_json as module_0
import typesystem.base as module_1
import typesystem.fields as module_2

def test_case_0():
    try:
        bytes_0 = b'\x90\x9e<C\xf9\x81nHS\xe1\x0b\x92G\x04\x82\x96'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xc1\x88\xbf0\x83P\x9c\xcd\x1f{\r\n\xea]2\xd0q\x8a\x14\xa5'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '[UvnnPtjKpHK`j_oQ'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tokenizing_decoder_0 = module_0._TokenizingDecoder()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n    {\n        "a": 10,\n        "b": 20,\n        "c": ["hello", "world"]\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
        str_1 = ''
        int_0 = 1
        int_1 = 0
        position_0 = module_1.Position(int_0, int_0, int_1)
        token_1 = module_0.tokenize_json(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'~\xcd(\xae\x81j'
        any_0 = module_0.validate_json(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'form-'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 't9ud) _)"O\'#'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'{<\xcd\x90\xc3\x96\xd35(\xa7\xbc;\xe9\xd0\xc2\x98\x1a\x04\xc1'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'{<\xcd\x90\xc3\x96\xd35(\xa7\xbc;\xe9\xd0\xc2\x98\x1a\x04\xc1'
        field_0 = module_2.Field(default=bytes_0)
        str_0 = 'false'
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'numb'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '{\n        "x":10,\n        "y": "foo",\n        "z": 123.456C    }'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xac[\xb0'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '{}N'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '{"n~me":"John",\n    "age":30,%    "cars": [\n        {"name""Ford", "mo_els":[ "Fiesta", "Focus", "Mustang" ]},\n        {"name":"BMW", "model":[ "320", "X3", "X5" ]},\n        {"name":"Fiat", "models":[ "500", "Panda" ]}    ]\n}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '{"n~me":"John",\n    "age":30,\n    "cars": [\n        {"name""Ford", "mo_els":[ "Fiesta", "Focus", "Mustang" ]},\n        {"name":"BMW", "model":[ "320", "X3", "X5" ]},\n        {"name":"Fiat", "models":[ "500", "Panda" ]}    ]\n}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '{"a":\r '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '{"n~me":"John",\n    "age":0,\n    "ca4s": \n        {"name""Ford", "mo_els":[ "Fiesta", "Focus", "Mutan ]},\n        "n{me":"BMW", "model":[ "320", "X3", "X5" ]},\n        {"name":"Fiat", "models"[ "500", "Panda" ]}    ]\n}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\n{\n    "empty_object" : {},\n    "empty_array" : [],\n    "booleans" : { "YES" : true, "NO" : false, "NULL" : null },\n    "numbers" : { "int" : 123, "float" : -2.34e5 },\n    "string" : { "key" : "value",\n                 "unicode" : "∆˚∆˚∆˚µå∑∂ƒ©˙∆´"}\n}\n'
        token_0 = module_0.tokenize_json(str_0)
        str_1 = 'empty_object'
        var_0 = token_0[str_1]
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '{"a": 1'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '{"a": '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass