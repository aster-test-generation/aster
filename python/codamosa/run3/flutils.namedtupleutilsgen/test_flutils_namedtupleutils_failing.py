# Automatically generated by Pynguin.
import types as module_0
import flutils.namedtupleutils as module_1

def test_case_0():
    try:
        float_0 = -2373.9
        simple_namespace_0 = module_0.SimpleNamespace()
        var_0 = module_1.to_namedtuple(simple_namespace_0)
        var_1 = module_1.to_namedtuple(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\nL.'
        var_0 = module_1.to_namedtuple(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        var_0 = module_1.to_namedtuple(tuple_0)
        dict_0 = {var_0: var_0}
        str_0 = '__attr_map__ must be a tuple containing strings.'
        tuple_1 = (dict_0, str_0, tuple_0, str_0)
        var_1 = module_1.to_namedtuple(tuple_1)
        list_0 = []
        list_1 = [list_0, list_0, list_0, list_0]
        var_2 = module_1.to_namedtuple(tuple_0)
        var_3 = module_1.to_namedtuple(list_1)
        tuple_2 = ()
        var_4 = module_1.to_namedtuple(tuple_2)
        str_1 = "Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is list-like; :\n        * :obj:`False` otherwise.\n\n    Examples:\n        >>> from flutils.objutils import is_list_like\n        >>> is_list_like([1, 2, 3])\n        True\n        >>> is_list_like(reversed([1, 2, 4]))\n        True\n        >>> is_list_like('hello')\n        False\n        >>> is_list_like(sorted('hello'))\n        True\n    "
        var_5 = module_1.to_namedtuple(tuple_2)
        var_6 = module_1.to_namedtuple(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Iz39QP@^b~=RK4I{.%dt'
        int_0 = -895
        bytes_0 = b"?\x96r\xe9\x94\x8b\xd5q\x97\xd7'\xc0"
        dict_0 = {bytes_0: str_0}
        float_0 = -3224.0
        tuple_0 = (dict_0, float_0)
        tuple_1 = (int_0, tuple_0, tuple_0)
        var_0 = module_1.to_namedtuple(tuple_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Z|3t='
        list_0 = [str_0, str_0]
        var_0 = module_1.to_namedtuple(list_0)
        bytes_0 = b'\xadtX\xc1<\xb5z\xe6\x9b25'
        dict_0 = {str_0: str_0, str_0: bytes_0}
        var_1 = module_1.to_namedtuple(dict_0)
        tuple_0 = (str_0,)
        var_2 = module_1.to_namedtuple(tuple_0)
        tuple_1 = None
        var_3 = module_1.to_namedtuple(tuple_0)
        list_1 = [tuple_0, var_1]
        var_4 = module_1.to_namedtuple(list_1)
        var_5 = module_1.to_namedtuple(tuple_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Zlf'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_1.to_namedtuple(list_0)
        bytes_0 = b'\xadtX\xc1<\xb5z\xe6\x9b25'
        dict_0 = {str_0: str_0, str_0: bytes_0}
        list_1 = [list_0]
        var_1 = module_1.to_namedtuple(list_1)
        var_2 = module_1.to_namedtuple(dict_0)
        tuple_0 = (str_0,)
        var_3 = module_1.to_namedtuple(tuple_0)
        var_4 = module_1.to_namedtuple(tuple_0)
        list_2 = []
        tuple_1 = None
        var_5 = module_1.to_namedtuple(tuple_0)
        list_3 = [tuple_0, var_2]
        var_6 = module_1.to_namedtuple(list_3)
        str_1 = 'g;K|6]IIaVzB3Q'
        str_2 = '\rqm'
        dict_1 = {str_1: str_0, str_2: tuple_0}
        simple_namespace_0 = module_0.SimpleNamespace(**dict_1)
        var_7 = module_1.to_namedtuple(simple_namespace_0)
        var_8 = module_1.to_namedtuple(tuple_0)
        var_9 = module_1.to_namedtuple(list_0)
        var_10 = module_1.to_namedtuple(list_2)
        var_11 = module_1.to_namedtuple(tuple_0)
        var_12 = module_1.to_namedtuple(tuple_1)
    except BaseException:
        pass