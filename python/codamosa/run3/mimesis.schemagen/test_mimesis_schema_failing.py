# Automatically generated by Pynguin.
import mimesis.schema as module_0

def test_case_0():
    try:
        str_0 = ''
        abstract_field_0 = module_0.AbstractField(str_0)
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'food.ruit'
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        schema_0 = module_0.Schema(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        abstract_field_0 = module_0.AbstractField()
        abstract_field_1 = module_0.AbstractField()
        schema_0 = module_0.Schema(abstract_field_1)
        list_0 = schema_0.create()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'choice'
        str_1 = '.wmv'
        str_2 = '.network'
        str_3 = 'S$Zm\tf!(&G`NP'
        dict_0 = {str_1: str_1, str_2: str_2, str_1: str_0, str_3: str_0}
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(str_0, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        abstract_field_0 = module_0.AbstractField()
        schema_0 = module_0.Schema(abstract_field_0)
        int_0 = -1105
        list_0 = schema_0.create(int_0)
        list_1 = schema_0.create()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        abstract_field_0 = module_0.AbstractField()
        abstract_field_1 = module_0.AbstractField(str_0, str_0, abstract_field_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'P+HGoBUhzu'
        str_1 = 'application/vnd.uplanet.channel-wbxml'
        str_2 = 'food.fruit'
        abstract_field_0 = module_0.AbstractField()
        abstract_field_1 = module_0.AbstractField()
        str_3 = 'k<|Z\x0b<*F[40&T'
        dict_0 = {str_3: str_3, str_0: abstract_field_1, str_3: str_0}
        list_0 = [dict_0, dict_0]
        any_0 = abstract_field_0.__call__(str_2, list_0)
        bytes_0 = b'}%F\xb2\xfb\xe4\x8c'
        any_1 = abstract_field_0.__call__(str_1, bytes_0)
    except BaseException:
        pass