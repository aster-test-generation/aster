# Automatically generated by Pynguin.
import ansible.modules.subversion as module_0

def test_case_0():
    try:
        str_0 = 'HEAD'
        bool_0 = False
        subversion_0 = module_0.Subversion(bool_0, str_0, str_0, str_0, bool_0, bool_0, str_0, bool_0)
        var_0 = subversion_0.update()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\x0bEmD'
        bool_0 = True
        subversion_0 = module_0.Subversion(bool_0, str_0, str_0, str_0, bool_0, bool_0, str_0, bool_0)
        var_0 = subversion_0.update()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2932.57856
        list_0 = [float_0, float_0, float_0]
        int_0 = 5958
        float_1 = 4214.466905
        set_0 = {float_1, int_0}
        str_0 = '.iW&oHMX,>IZ-o'
        list_1 = [int_0, float_0, list_0]
        str_1 = 'Prompt for the string to encrypt'
        subversion_0 = module_0.Subversion(int_0, float_1, set_0, str_0, list_0, list_1, float_1, str_1)
        dict_0 = {float_0: float_0, float_0: list_0, subversion_0: str_0, str_0: str_0}
        bool_0 = True
        subversion_1 = module_0.Subversion(float_0, list_0, dict_0, subversion_0, set_0, str_1, float_0, bool_0)
        var_0 = subversion_1.is_svn_repo()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0bEmD'
        bool_0 = True
        subversion_0 = module_0.Subversion(bool_0, str_0, str_0, str_0, bool_0, bool_0, str_0, bool_0)
        var_0 = subversion_0.checkout()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b''
        set_0 = {bytes_0, bytes_0, bytes_0}
        str_0 = '__main__'
        str_1 = '__main__'
        list_0 = [str_1, str_1, bytes_0]
        float_0 = -1481.2432
        int_0 = -886
        tuple_0 = ()
        float_1 = 598.35
        tuple_1 = (int_0, tuple_0, float_1)
        tuple_2 = (int_0, list_0, tuple_1)
        dict_0 = {float_1: list_0, int_0: float_0, tuple_1: float_1, float_1: float_1}
        str_2 = ''
        tuple_3 = ()
        str_3 = '2wr}e?)'
        subversion_0 = module_0.Subversion(float_0, tuple_2, set_0, dict_0, str_2, tuple_3, str_3, str_0)
        int_1 = None
        tuple_4 = (subversion_0, int_1)
        tuple_5 = (str_1, list_0, tuple_4)
        int_2 = -801
        subversion_1 = module_0.Subversion(set_0, str_0, tuple_5, set_0, str_1, int_2, float_1, subversion_0)
        var_0 = subversion_1.export()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1822
        set_0 = {int_0, int_0, int_0}
        str_0 = 'g'
        list_0 = [set_0]
        bool_0 = False
        float_0 = 1790.893
        tuple_0 = (float_0,)
        int_1 = 2377
        int_2 = 1127
        float_1 = 1.0
        str_1 = 'OY7kFb`FoNF6&yWcJ/'
        int_3 = -826
        subversion_0 = module_0.Subversion(tuple_0, int_1, str_0, int_2, float_1, str_1, int_3, tuple_0)
        bytes_0 = b'\x9a\xb5[E\xe1\xfd\xd3\xf9\xc8\xff\x98\xf1\xa2>L\x01\xbe\x922'
        subversion_1 = module_0.Subversion(set_0, float_0, bool_0, subversion_0, list_0, int_0, bytes_0, float_0)
        bool_1 = True
        subversion_2 = module_0.Subversion(set_0, str_0, list_0, bool_0, subversion_1, list_0, subversion_1, bool_1)
        str_2 = ''
        bool_2 = True
        subversion_3 = module_0.Subversion(int_0, subversion_2, str_2, bool_2, bool_2, float_1, int_0, float_1)
        int_4 = 1308
        str_3 = 'W\x0c(3}U":5 7\\@#BG(XG'
        subversion_4 = module_0.Subversion(subversion_3, subversion_0, set_0, list_0, int_4, int_1, subversion_3, str_3)
        var_0 = subversion_3.switch()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1754
        str_0 = 'qF[J"CX2R'
        list_0 = []
        tuple_0 = (list_0,)
        subversion_0 = module_0.Subversion(int_0, str_0, tuple_0, int_0, str_0, tuple_0, int_0, str_0)
        var_0 = subversion_0.get_revision()
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -1661.44
        bool_0 = True
        float_1 = 0.1
        str_0 = 'r]Z8t]4ux2'
        list_0 = [bool_0]
        bytes_0 = b'{?\x89\xa0\xe3\xc5\xa1`\xe7\xbd'
        int_0 = 79
        str_1 = '"vb{'
        dict_0 = {bool_0: str_1, bytes_0: float_0}
        subversion_0 = module_0.Subversion(bool_0, float_1, str_0, list_0, bytes_0, int_0, float_0, dict_0)
        float_2 = -2189.2405
        int_1 = -31
        set_0 = {str_1, float_2, float_2}
        tuple_0 = (subversion_0, set_0)
        str_2 = '3FIBlp6KA]X\t05nZ> -'
        subversion_1 = module_0.Subversion(subversion_0, set_0, float_0, tuple_0, int_1, set_0, str_0, str_2)
        subversion_2 = module_0.Subversion(float_0, subversion_0, list_0, float_2, int_1, dict_0, subversion_1, subversion_0)
        var_0 = subversion_2.get_remote_revision()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'ansible.modules.subversion'
        int_0 = 2913
        set_0 = set()
        float_0 = -324.63
        tuple_0 = ()
        bytes_0 = b'T\xe1\xf1\x93\xd2\x95\x9aPh'
        int_1 = 2028
        bytes_1 = b'\x1c\xc07\xc1!\x9f'
        tuple_1 = (int_1, bytes_1, set_0, tuple_0)
        subversion_0 = module_0.Subversion(str_0, int_0, set_0, float_0, tuple_0, bytes_0, int_0, tuple_1)
        var_0 = subversion_0.has_local_mods()
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        dict_0 = None
        bool_1 = None
        str_0 = 'ansible.modules.subversion'
        set_0 = {str_0}
        tuple_0 = (dict_0, bool_1, str_0, set_0)
        tuple_1 = ()
        float_0 = 100.0
        bytes_0 = b'\xbb\x18'
        list_0 = [bytes_0, bytes_0, set_0, tuple_1]
        int_0 = 900
        int_1 = 117
        subversion_0 = module_0.Subversion(str_0, str_0, dict_0, str_0, list_0, list_0, int_1, bytes_0)
        bool_2 = False
        float_1 = 1.5
        subversion_1 = module_0.Subversion(subversion_0, list_0, float_0, str_0, int_0, subversion_0, bool_2, float_1)
        subversion_2 = module_0.Subversion(set_0, str_0, list_0, int_0, subversion_1, str_0, bytes_0, list_0)
        subversion_3 = module_0.Subversion(bool_0, tuple_0, tuple_1, float_0, bytes_0, subversion_2, bool_2, tuple_1)
        var_0 = subversion_3.needs_update()
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = None
        bool_0 = None
        str_0 = 'ansible.modules.subversion'
        set_0 = {str_0}
        tuple_0 = ()
        float_0 = 100.0
        bytes_0 = b'\xbb\x18'
        list_0 = [bytes_0, bytes_0, set_0, tuple_0]
        int_0 = 900
        int_1 = 117
        subversion_0 = module_0.Subversion(str_0, str_0, dict_0, str_0, list_0, list_0, int_1, bytes_0)
        bool_1 = False
        float_1 = 1.5
        subversion_1 = module_0.Subversion(subversion_0, list_0, float_0, str_0, int_0, subversion_0, bool_1, float_1)
        str_1 = '$cF)'
        int_2 = 5314
        subversion_2 = module_0.Subversion(set_0, str_1, set_0, float_0, int_2, subversion_0, bool_0, int_1)
        str_2 = 'HnoP{B,F%m.'
        complex_0 = None
        str_3 = '}R6\n!"{Hsz\r_W,qkc'
        bool_2 = False
        subversion_3 = module_0.Subversion(subversion_1, str_2, complex_0, str_3, tuple_0, bytes_0, bool_2, complex_0)
        bool_3 = False
        int_3 = -3311
        subversion_4 = module_0.Subversion(bytes_0, list_0, dict_0, subversion_3, bool_3, dict_0, complex_0, int_3)
        var_0 = subversion_2.export(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\x13\xb1\xe6\xaf\xefaR\x80i\x88\xe5\x9cvG\x9f\x16Zd\xda'
        int_0 = -242
        bool_0 = True
        dict_0 = {bytes_0: bool_0}
        str_0 = '+Cl\\#?{Td5D02~q.t.'
        set_0 = {int_0, bytes_0}
        str_1 = 'L'
        tuple_0 = (bytes_0, bytes_0)
        subversion_0 = module_0.Subversion(bool_0, dict_0, str_0, set_0, str_1, int_0, tuple_0, str_0)
        str_2 = 'A\\Z?(3^q|/'
        list_0 = [set_0]
        subversion_1 = module_0.Subversion(int_0, subversion_0, subversion_0, set_0, dict_0, str_2, list_0, tuple_0)
        var_0 = subversion_1.revert()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'HERD'
        bool_0 = False
        subversion_0 = module_0.Subversion(bool_0, str_0, str_0, str_0, bool_0, bool_0, str_0, bool_0)
        var_0 = subversion_0.checkout(subversion_0)
    except BaseException:
        pass