# Automatically generated by Pynguin.
import httpie.utils as module_0

def test_case_0():
    try:
        str_0 = 'fixtures/fakefile.csv'
        var_0 = module_0.get_content_type(str_0)
        str_1 = None
        str_2 = ''
        dict_0 = {str_1: var_0, str_2: str_1, str_0: var_0}
        var_1 = module_0.load_json_preserve_order(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        var_0 = module_0.humanize_bytes(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        list_0 = [str_0]
        str_1 = 'P~iA05XlA#'
        var_0 = module_0.get_content_type(str_1)
        var_1 = module_0.humanize_bytes(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'f~\n'
        var_0 = module_0.get_content_type(str_0)
        explicit_null_auth_0 = module_0.ExplicitNullAuth()
        dict_0 = {str_0: explicit_null_auth_0, explicit_null_auth_0: str_0, str_0: explicit_null_auth_0, str_0: var_0}
        str_1 = module_0.repr_dict(dict_0)
        str_2 = "\n    By default, HTTPie exits with 0 when no network or other fatal errors\n    occur. This flag instructs HTTPie to also check the HTTP status code and\n    exit with an error if the status indicates one.\n\n    When the server replies with a 4xx (Client Error) or 5xx (Server Error)\n    status code, HTTPie exits with 4 or 5 respectively. If the response is a\n    3xx (Redirect) and --follow hasn't been set, then the exit status is 3.\n    Also an error message is written to stderr if stdout is redirected.\n\n    "
        dict_1 = {str_0: var_0}
        str_3 = module_0.repr_dict(dict_1)
        str_4 = 'cert'
        tuple_0 = (str_4, str_3)
        list_0 = [tuple_0]
        list_1 = module_0.get_expired_cookies(list_0)
        int_0 = 1301
        str_5 = None
        dict_2 = {str_5: tuple_0, str_1: list_0, str_2: dict_0}
        var_1 = module_0.humanize_bytes(int_0, dict_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Set-Cookie'
        str_1 = 'A%#(l'
        var_0 = module_0.get_content_type(str_1)
        str_2 = (str_0, str_0)
        str_3 = 'valu/2; Path=/; Expire=ed, 29-an-2020 21:59:02 GMT; Max-Age=0'
        dict_0 = {str_0: str_3}
        str_4 = module_0.repr_dict(dict_0)
        str_5 = (str_0, str_4)
        str_6 = [str_2, str_5]
        var_1 = print(var_0)
        list_0 = module_0.get_expired_cookies(str_6)
        var_2 = module_0.get_content_type(dict_0)
    except BaseException:
        pass