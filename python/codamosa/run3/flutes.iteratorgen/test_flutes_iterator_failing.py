# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        int_0 = -325
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = list(lazy_list_0)
        bool_0 = False
        tuple_0 = (bool_0,)
        bytes_0 = b'\x8d\x9a\x8e\xcdY\xd0D2\x8f'
        var_1 = module_0.scanr(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 5
        list_0 = [int_0, int_0, int_0]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = list(lazy_list_0)
        list_1 = [list_0, int_0, int_0]
        range_0 = module_0.Range(*list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -25
        list_0 = [int_0, int_0, int_0, int_0]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = list(lazy_list_0)
        list_1 = [list_0, lazy_list_0]
        map_list_0 = module_0.MapList(list_1, int_0)
        int_1 = map_list_0.__len__()
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -440.84774
        list_0 = [float_0, float_0, float_0, float_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        set_0 = None
        list_0 = [set_0, set_0, set_0, set_0]
        int_0 = 1165
        bytes_0 = b''
        var_0 = module_0.scanr(int_0, bytes_0, *list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2
        var_0 = lambda x: x ** int_0
        int_1 = 1
        int_2 = 3
        int_3 = 4
        int_4 = 5
        int_5 = [int_1, int_0, int_2, int_3, int_4]
        map_list_0 = module_0.MapList(var_0, int_5)
        int_6 = 0
        var_1 = slice(int_6, int_4, int_0)
        var_2 = map_list_0.__getitem__(var_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        range_0 = module_0.Range(*list_0)
        iterator_0 = None
        list_1 = [range_0, iterator_0, range_0, list_0]
        int_0 = 2264
        float_0 = -1800.0
        tuple_0 = (float_0,)
        map_list_0 = module_0.MapList(int_0, tuple_0)
        var_0 = module_0.scanr(list_1, map_list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 963
        bool_0 = False
        iterator_0 = module_0.take(int_0, bool_0)
        bool_1 = True
        list_0 = [bool_1, bool_1]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -3703.95416
        list_0 = [float_0, float_0]
        range_0 = module_0.Range(*list_0)
        int_0 = range_0.__next__()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -2168
        int_1 = -556
        list_0 = [int_0, int_1, int_1]
        range_0 = module_0.Range(*list_0)
        int_2 = range_0.__next__()
        var_0 = range(int_1, int_1)
        iterator_0 = module_0.drop_until(int_1, var_0)
        var_1 = list(iterator_0)
        var_2 = lambda x: x > int_1
        bool_0 = True
        lazy_list_0 = module_0.LazyList(list_0)
        var_3 = lazy_list_0.__getitem__(bool_0)
        var_4 = [var_2]
        iterator_1 = module_0.drop_until(var_2, var_4)
        var_5 = lazy_list_0.__iter__()
        var_6 = list(iterator_1)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        str_0 = 'T'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'o\xc4\xb3d\t\xe67\x0e\x14'
        complex_0 = None
        dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
        list_0 = [dict_0, dict_0, complex_0, dict_0]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = lazy_list_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -526.0
        list_0 = [float_0, float_0, float_0]
        range_0 = module_0.Range(*list_0)
        tuple_0 = (range_0,)
        iterable_0 = None
        iterator_0 = module_0.drop_until(tuple_0, iterable_0)
        map_list_0 = module_0.MapList(iterator_0, tuple_0)
        list_1 = None
        bool_0 = True
        var_0 = range_0.__getitem__(bool_0)
        range_1 = module_0.Range(*list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Hello, world!'
        int_0 = 0
        int_1 = -413
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, str_0)
        var_1 = list(iterator_0)
        int_2 = 10
        iterator_1 = module_0.take(int_2, str_0)
        var_2 = list(int_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 5
        var_0 = lambda x: x > int_0
        int_1 = 10
        var_1 = range(int_1)
        int_2 = 0
        var_2 = lambda x: x != int_2
        iterable_0 = None
        iterator_0 = module_0.take(int_2, iterable_0)
        var_3 = list(iterator_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -606
        var_0 = [int_0, int_0]
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 10
        var_0 = range(int_0)
        iterator_0 = module_0.split_by(var_0, criterion=var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 0
        int_1 = [int_0, int_0, int_0, int_0, int_0]
        lazy_list_0 = module_0.LazyList(int_1)
        int_2 = -35
        var_0 = lazy_list_0[int_2]
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = None
        int_0 = -4725
        iterator_0 = None
        tuple_0 = (iterator_0,)
        iterator_1 = module_0.chunk(int_0, tuple_0)
        iterator_2 = module_0.split_by(iterator_1)
        lazy_list_0 = module_0.LazyList(iterator_2)
        var_0 = lazy_list_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 3
        str_0 = 'C^'
        iterator_0 = module_0.take(int_0, str_0)
        var_0 = list(iterator_0)
        int_1 = 0
        int_2 = 1000000
        var_1 = range(int_2)
        iterator_1 = module_0.take(int_0, var_1)
        var_2 = list(iterator_1)
        iterator_2 = module_0.take(int_1, str_0)
        var_3 = list(iterator_2)
        int_3 = -35
        str_1 = 'Python'
        iterator_3 = module_0.take(int_3, str_1)
        var_4 = list(iterator_3)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 5
        list_0 = [int_0, int_0, int_0]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = list(lazy_list_0)
        var_1 = lazy_list_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 3
        int_1 = -505
        iterator_0 = None
        float_0 = -636.2
        tuple_0 = (iterator_0, float_0)
        lazy_list_0 = module_0.LazyList(tuple_0)
        var_0 = lazy_list_0.__iter__()
        list_0 = [int_0, int_0, int_1]
        iterator_1 = module_0.chunk(int_1, lazy_list_0)
        var_1 = module_0.scanl(list_0, iterator_1)
        var_2 = list(var_1)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 3
        iterator_0 = None
        float_0 = -636.2
        tuple_0 = (iterator_0, float_0)
        lazy_list_0 = module_0.LazyList(tuple_0)
        iterator_1 = module_0.chunk(int_0, lazy_list_0)
        var_0 = list(iterator_1)
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = -4745
        str_0 = '>DeWbk VE".lk'
        iterator_0 = module_0.chunk(int_0, str_0)
        set_0 = {int_0, int_0, iterator_0}
        map_list_0 = module_0.MapList(iterator_0, set_0)
        int_1 = map_list_0.__len__()
        str_1 = 'W'
        dict_0 = {str_0: int_1, str_1: int_0}
        int_2 = -271
        float_0 = -636.2
        iterator_1 = module_0.chunk(int_2, float_0)
        list_0 = []
        map_list_1 = module_0.MapList(iterator_1, list_0)
        iterator_2 = map_list_1.__iter__()
        iterator_3 = None
        tuple_0 = (iterator_3, float_0)
        lazy_list_0 = module_0.LazyList(tuple_0)
        var_0 = lazy_list_0.__iter__()
        list_1 = [int_0, int_0, int_0]
        iterator_4 = module_0.chunk(int_1, lazy_list_0)
        var_1 = module_0.scanl(list_1, iterator_4)
        var_2 = list(var_1)
        iterable_0 = None
        iterator_5 = module_0.drop(int_1, iterable_0)
        int_3 = 23
        var_3 = module_0.scanr(int_3, dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 70
        iterable_0 = None
        iterator_0 = module_0.chunk(int_0, iterable_0)
        list_0 = [iterable_0]
        iterator_1 = module_0.split_by(list_0)
        map_list_0 = module_0.MapList(iterator_0, iterator_1)
        bytes_0 = b'\xbf\t\xbe'
        tuple_0 = (bytes_0,)
        var_0 = module_0.scanr(map_list_0, tuple_0, *list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 5
        float_0 = -3303.78
        int_1 = 67
        bytes_0 = b'H\x9b\x9a'
        iterator_0 = module_0.drop(int_1, bytes_0)
        var_0 = module_0.scanl(float_0, iterator_0)
        int_2 = 3
        iterator_1 = module_0.drop(int_0, int_2)
        var_1 = list(iterator_1)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 5
        int_1 = 2
        int_2 = 3
        int_3 = 4
        int_4 = 6
        int_5 = 7
        int_6 = [int_1, int_1, int_2, int_3, int_0, int_4, int_5]
        iterator_0 = module_0.drop(int_0, int_6)
        var_0 = list(iterator_0)
        int_7 = 0
        int_8 = [int_7, int_1, int_2]
        iterator_1 = module_0.drop(int_7, int_8)
        var_1 = list(iterator_1)
        var_2 = list(iterator_0)
        int_9 = 100
        int_10 = [int_2, int_1, int_2]
        iterator_2 = module_0.drop(int_9, int_10)
        var_3 = list(iterator_2)
        int_11 = -1
        int_12 = [int_1, int_1, int_2]
        iterator_3 = module_0.drop(int_11, int_12)
        var_4 = list(iterator_3)
    except BaseException:
        pass