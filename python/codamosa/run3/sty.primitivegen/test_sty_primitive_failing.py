# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    try:
        str_0 = "The unmute() method can only be used with objects that inherit from the 'Register class'."
        list_0 = [str_0, str_0, str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        str_0 = register_0.__call__()
        bytes_0 = b'5\xf3\xf8\x97\xea\x9c!\xb4'
        register_0.set_eightbit_call(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = None
        register_0 = module_0.Register()
        register_0.set_rgb_call(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        set_0 = None
        bytes_0 = b'#\xac\xcaE\x83\xcc&\xcf\x08\xd1\xeaj'
        int_0 = -1793
        tuple_0 = (bytes_0, int_0)
        register_2.set_renderfunc(set_0, tuple_0)
        style_0 = None
        list_0 = [style_0]
        style_1 = module_0.Style()
        str_0 = 'H!a9\x0biEk@KwMg`//f'
        var_0 = register_0.__setattr__(str_0, style_1)
        bool_0 = True
        dict_0 = register_0.as_dict()
        register_2.set_renderfunc(list_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        str_0 = register_0.__call__()
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        type_0 = None
        register_0.set_renderfunc(type_0, register_0)
        int_0 = -269
        dict_0 = {}
        list_0 = [var_0, int_0, var_0, dict_0]
        style_1 = style_0.__new__(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        int_0 = 4
        var_0 = register_1.as_namedtuple()
        list_0 = [int_0]
        style_0 = module_0.Style(*list_0)
        dict_0 = register_1.as_dict()
        int_1 = -1470
        register_1.set_renderfunc(int_1, style_0)
        register_1.mute()
        dict_1 = register_1.as_dict()
        register_2 = register_1.copy()
        str_0 = register_1.__call__()
        var_1 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '3_%s(\rmj8,Z1\x0b8r'
        list_0 = [str_0]
        register_0 = module_0.Register()
        str_1 = register_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        register_0 = module_0.Register()
        register_0.mute()
        str_0 = register_0.__call__(*list_0)
        var_0 = register_0.as_namedtuple()
        register_1 = module_0.Register()
        register_2 = module_0.Register()
        str_1 = 'VbqoG'
        int_0 = 4
        register_0.unmute()
        var_1 = register_2.as_namedtuple()
        list_1 = [int_0, str_0]
        type_0 = None
        list_2 = [register_0]
        register_1.set_renderfunc(type_0, list_2)
        style_0 = module_0.Style(*list_1)
        dict_0 = register_2.as_dict()
        register_1.set_rgb_call(type_0)
        register_2.set_renderfunc(int_0, style_0)
        register_0.mute()
        str_2 = 'm'
        list_3 = [str_2, str_2, str_2]
        register_2.set_renderfunc(str_1, list_3)
        register_3 = register_2.copy()
        str_3 = register_2.__call__()
        var_2 = register_1.__setattr__(str_3, style_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0, str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        list_1 = [style_0, register_0]
        style_1 = module_0.Style(*list_1)
        var_0 = register_0.__setattr__(str_0, style_1)
    except BaseException:
        pass

def test_case_9():
    try:
        render_type_0 = module_1.RenderType()
        str_0 = 'tV8;^XSA =n\t&1pl'
        str_1 = 'z~\r'
        list_0 = [str_0, str_1, str_1]
        list_1 = [render_type_0, render_type_0, list_0, render_type_0]
        dict_0 = {}
        style_0 = module_0.Style(*list_1, **dict_0)
        register_0 = module_0.Register()
        str_2 = '\x0b|"{f(_l;\\{O\x0bi\\\' 7'
        var_0 = register_0.__setattr__(str_2, style_0)
    except BaseException:
        pass