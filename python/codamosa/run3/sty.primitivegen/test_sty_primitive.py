# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    pass

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    str_0 = "JV>=,M&J'F*Ux"
    style_0 = module_0.Style()
    register_0 = module_0.Register()
    var_0 = register_0.__setattr__(str_0, style_0)
    list_0 = [str_0]
    str_1 = register_0.__call__(*list_0)
    register_0.mute()

def test_case_3():
    register_0 = module_0.Register()

def test_case_4():
    register_0 = module_0.Register()
    str_0 = register_0.__call__()

def test_case_5():
    register_0 = module_0.Register()
    var_0 = register_0.as_namedtuple()
    register_0.unmute()
    register_1 = register_0.copy()
    register_0.unmute()
    str_0 = 'Bvw\x0bHKoB\nRl'
    list_0 = [str_0, str_0, str_0]
    str_1 = register_0.__call__(*list_0)
    register_2 = module_0.Register()
    register_2.unmute()

def test_case_6():
    type_0 = None
    bytes_0 = None
    register_0 = module_0.Register()
    register_0.set_renderfunc(type_0, bytes_0)
    register_1 = module_0.Register()
    register_1.mute()

def test_case_7():
    str_0 = "JV>=,M&J'F*Ux"
    style_0 = module_0.Style()
    register_0 = module_0.Register()
    var_0 = register_0.__setattr__(str_0, style_0)
    list_0 = [str_0]
    str_1 = register_0.__call__(*list_0)
    register_0.unmute()

def test_case_8():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    dict_0 = register_1.as_dict()

def test_case_9():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    var_0 = register_2.as_namedtuple()
    register_3 = module_0.Register()
    dict_0 = register_3.as_dict()
    register_4 = module_0.Register()
    register_4.unmute()

def test_case_10():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_0.unmute()
    str_0 = 'Bvw\x0bHKoB\nRl'
    register_1.mute()
    list_0 = [str_0, str_0, str_0]
    str_1 = register_0.__call__(*list_0)
    register_2 = module_0.Register()
    register_3 = module_0.Register()
    type_0 = None
    int_0 = 2373
    register_2.set_renderfunc(type_0, int_0)
    register_2.set_eightbit_call(type_0)
    register_4 = register_0.copy()

def test_case_11():
    int_0 = -4007
    list_0 = [int_0]
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    str_0 = register_2.__call__(*list_0)
    str_1 = "JV>=,M&J'F*Ux"
    style_0 = module_0.Style()
    register_3 = module_0.Register()
    var_0 = register_3.__setattr__(str_1, style_0)
    register_3.mute()
    register_4 = module_0.Register()
    register_3.mute()
    register_3.unmute()