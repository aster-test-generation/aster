# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        bytes_0 = b'\x92\xb4\xe4'
        list_0 = [bytes_0, bytes_0]
        var_0 = module_0.check_required_one_of(list_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "{['key':'value'}"
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b''
        str_0 = 'E%LLV&'
        tuple_0 = (str_0,)
        str_1 = 'S'
        var_0 = module_0.check_mutually_exclusive(tuple_0, str_1)
        var_1 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 1415.87104
        int_0 = -657
        dict_0 = {int_0: int_0, int_0: int_0}
        int_1 = None
        var_0 = module_0.check_type_path(int_1)
        tuple_0 = None
        var_1 = module_0.check_mutually_exclusive(tuple_0, dict_0, int_0)
        str_0 = 'pu")ghS2)&~>dJwO'
        var_2 = module_0.check_required_by(str_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '=f'
        var_0 = module_0.check_type_dict(str_0)
        int_0 = -469
        float_0 = 720.2431
        dict_0 = None
        var_1 = module_0.check_required_together(int_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '? V\\%\ro:oPe\x0b,y\t*\r'
        bool_0 = False
        bool_1 = True
        bytes_0 = b'\x04'
        var_0 = module_0.check_required_together(str_0, bytes_0)
        bool_2 = True
        tuple_0 = (str_0, bool_0, bool_1, bool_2)
        tuple_1 = (tuple_0,)
        int_0 = 986
        var_1 = module_0.check_required_arguments(tuple_1, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'V&2sk'
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        var_0 = module_0.check_required_by(str_0, tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '%'
        var_0 = module_0.check_required_arguments(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2349
        list_0 = [int_0, int_0, int_0, int_0]
        str_0 = 'f'
        var_0 = module_0.check_required_if(list_0, str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'qO!q'
        bool_0 = False
        var_0 = module_0.check_type_float(bool_0)
        float_0 = 0.0
        var_1 = module_0.check_missing_parameters(str_0, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        bytes_0 = b'\x08M\xaay\x19\xf6\xb7\x9e\xd1\xffY\x05k'
        var_0 = module_0.safe_eval(bytes_0)
        var_1 = module_0.check_type_float(bool_0)
        float_0 = 826.621457
        var_2 = module_0.check_missing_parameters(float_0)
        float_1 = -2196.516
        var_3 = module_0.check_type_bytes(float_1)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 0.0001
        var_0 = module_0.check_type_float(float_0)
        bool_0 = None
        var_1 = module_0.check_type_list(bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        var_0 = module_0.check_type_dict(bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Vf'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 11
        var_0 = module_0.check_type_bool(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -1095.3
        var_0 = module_0.check_type_int(float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'kI/_<>\\C1ZEMYfM Z'
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = "Skipping callback '%s', already loaded as '%s'."
        var_0 = module_0.check_type_float(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = "{'key':'value'}"
        var_0 = module_0.check_type_bytes(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        tuple_0 = ()
        var_0 = module_0.check_type_bits(tuple_0)
    except BaseException:
        pass

def test_case_20():
    try:
        set_0 = set()
        var_0 = module_0.check_type_jsonarg(set_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = "{'key':'value'}"
        var_0 = module_0.check_type_dict(str_0)
        dict_0 = {str_0: str_0, str_0: str_0}
        bytes_0 = None
        int_0 = -5
        var_1 = module_0.check_type_list(int_0)
        list_0 = [bytes_0]
        var_2 = module_0.check_required_by(dict_0, list_0)
        set_0 = set()
        var_3 = module_0.check_required_together(str_0, dict_0, dict_0)
        var_4 = module_0.check_required_one_of(list_0, set_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = None
        var_0 = module_0.check_type_float(bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'f'
        var_0 = module_0.check_type_str(str_0)
        bool_0 = False
        bytes_0 = b'\x9e!W'
        bool_1 = True
        tuple_0 = (bool_0, bytes_0, bool_1)
        var_1 = module_0.check_required_by(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = -1342.8
        int_0 = None
        var_0 = module_0.check_required_arguments(int_0, int_0, float_0)
        int_1 = -4641
        list_0 = [int_1]
        var_1 = module_0.check_type_bool(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = "XSctqVm96*'P\x0c\tgiD"
        var_0 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'nas_server_id'
        bool_0 = True
        var_0 = dict(nas_server_id=bool_0)
        list_0 = [var_0, str_0, str_0]
        str_1 = '\n---\nmodule: apt_key\nauthor:\n- Jayson Vantuyl (@jvantuyl)\nversion_added: "1.0"\nshort_description: Add or remove an apt key\ndescription:\n    - Add or remove an I(apt) key, optionally downloading it.\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: debian\nnotes:\n    - The apt-key command has been deprecated and suggests to \'manage keyring files in trusted.gpg.d instead\'. See the Debian wiki for details.\n      This module is kept for backwards compatiblity for systems that still use apt-key as the main way to manage apt repository keys.\n    - As a sanity check, downloaded key id must match the one specified.\n    - "Use full fingerprint (40 characters) key ids to avoid key collisions.\n      To generate a full-fingerprint imported key: C(apt-key adv --list-public-keys --with-fingerprint --with-colons)."\n    - If you specify both the key id and the URL with C(state=present), the task can verify or add the key as needed.\n    - Adding a new key requires an apt cache update (e.g. using the M(ansible.builtin.apt) module\'s update_cache option).\nrequirements:\n    - gpg\noptions:\n    id:\n        description:\n            - The identifier of the key.\n            - Including this allows check mode to correctly report the changed state.\n            - If specifying a subkey\'s id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key\'s id instead.\n            - This parameter is required when C(state) is set to C(absent).\n        type: str\n    data:\n        description:\n            - The keyfile contents to add to the keyring.\n        type: str\n    file:\n        description:\n            - The path to a keyfile on the remote server to add to the keyring.\n        type: path\n    keyring:\n        description:\n            - The full path to specific keyring file in C(/etc/apt/trusted.gpg.d/).\n        type: path\n        version_added: "1.3"\n    url:\n        description:\n            - The URL to retrieve key from.\n        type: str\n    keyserver:\n        description:\n            - The keyserver to retrieve key from.\n        type: str\n        version_added: "1.6"\n    state:\n        description:\n            - Ensures that the key is present (added) or absent (revoked).\n        type: str\n        choices: [ absent, present ]\n        default: present\n    validate_certs:\n        description:\n            - If C(no), SSL certificates for the target url will not be validated. This should only be used\n              on personally controlled sites using self-signed certificates.\n        type: bool\n        default: \'yes\'\n'
        var_1 = module_0.check_required_one_of(list_0, str_1)
    except BaseException:
        pass

def test_case_27():
    try:
        var_0 = None
        int_0 = 13
        var_1 = module_0.check_required_by(var_0, int_0)
        str_0 = 'b'
        str_1 = {str_0: str_0}
        int_1 = {str_0: int_0, str_0: int_0}
        var_2 = module_0.check_required_by(str_1, int_1)
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = True
        var_0 = module_0.check_type_bool(bool_0)
        dict_0 = {}
        bytes_0 = b'\x1e \xcd\x92\xed-j\xe1\xc1N4\xc5+ \x13R\x7f\xb2'
        float_0 = 0.0001
        var_1 = module_0.check_type_raw(float_0)
        var_2 = module_0.check_required_if(dict_0, bytes_0)
        bool_1 = False
        tuple_0 = (bool_1,)
        var_3 = module_0.check_type_bits(tuple_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 417
        dict_0 = {int_0: int_0, int_0: int_0}
        var_0 = module_0.check_required_by(dict_0, dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = False
        var_0 = module_0.check_type_str(bool_0, bool_0)
    except BaseException:
        pass

def test_case_31():
    try:
        bytes_0 = b'\xf3\xe0'
        dict_0 = {}
        str_0 = 'O\r0qvud'
        var_0 = module_0.check_required_one_of(dict_0, str_0)
        dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0}
        var_1 = module_0.check_type_raw(dict_1)
        str_1 = '`'
        var_2 = module_0.check_type_int(str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = "{'key':'value'}"
        var_0 = module_0.check_type_dict(str_0)
        bytes_0 = None
        bool_0 = None
        var_1 = module_0.check_required_one_of(bytes_0, bool_0)
        str_1 = ':'
        var_2 = module_0.check_type_bytes(str_1)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'Qk8*Gb"g1%'
        var_0 = module_0.safe_eval(str_0)
        dict_0 = {str_0: var_0}
        var_1 = module_0.check_required_if(dict_0, dict_0)
    except BaseException:
        pass

def test_case_34():
    try:
        set_0 = set()
        str_0 = 'a9\tvE1G1/",\'x^\tdwh}'
        bytes_0 = b''
        var_0 = module_0.check_missing_parameters(str_0, bytes_0)
        var_1 = module_0.check_type_list(set_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bytes_0 = b'!IW\xe2\x009\xc5\xa7\x0f\x1c@\xad\xa8'
        set_0 = {bytes_0}
        tuple_0 = (set_0,)
        int_0 = 457
        var_0 = module_0.safe_eval(bytes_0, tuple_0, int_0)
        str_0 = ''
        str_1 = "{'key':'value'}"
        var_1 = module_0.check_type_dict(str_1)
        str_2 = 'key=value'
        str_3 = 'key'
        var_2 = module_0.check_type_dict(str_2)
        float_0 = 2215.37099
        list_0 = [var_1, str_0, float_0, str_1]
        tuple_1 = (list_0, str_3, int_0)
        bool_0 = False
        var_3 = module_0.check_required_if(tuple_1, bool_0, set_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = ''
        str_1 = "K|@M=[nle]\x0bKI'm\x0b!"
        var_0 = module_0.check_type_jsonarg(str_1)
        var_1 = module_0.safe_eval(str_0)
        str_2 = "'a'"
        var_2 = module_0.safe_eval(str_2)
        dict_0 = {var_2: str_2, var_0: var_0, str_1: str_1}
        str_3 = 'c`NXw;r'
        var_3 = module_0.check_required_by(dict_0, str_3)
        str_4 = 'Custom iterencode, primarily design to handle encoding ``AnsibleUnsafe``\n        as the ``AnsibleUnsafe`` subclasses inherit from string types and\n        ``json.JSONEncoder`` does not support custom encoders for string types\n        '
        str_5 = 'o]uS'
        var_4 = module_0.check_required_one_of(str_4, str_5)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'name'
        str_1 = 'required'
        str_2 = 'type'
        bool_0 = True
        str_3 = 'str'
        var_0 = {str_1: bool_0, str_2: str_3}
        var_1 = {str_0: var_0}
        str_4 = 'test'
        str_5 = {str_0: str_4}
        var_2 = module_0.check_required_arguments(var_1, str_5, str_2)
        var_3 = {str_1: bool_0, str_2: str_3}
        var_4 = {str_0: var_3}
        str_6 = {str_4: str_4}
        var_5 = module_0.check_required_arguments(var_4, str_6, str_1)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'nas_server_id'
        bool_0 = False
        var_0 = [str_0, bool_0, str_0, bool_0]
        var_1 = [var_0, str_0]
        var_2 = dict(nas_server_id=bool_0)
        var_3 = module_0.check_required_if(var_1, var_2)
    except BaseException:
        pass

def test_case_39():
    try:
        float_0 = None
        var_0 = module_0.check_type_path(float_0)
        list_0 = [var_0]
        var_1 = module_0.check_required_if(list_0, list_0)
        float_1 = -1338.69153
        var_2 = module_0.check_type_list(float_1)
        str_0 = ''
        var_3 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_40():
    try:
        dict_0 = None
        int_0 = -1294
        var_0 = module_0.check_required_if(dict_0, int_0)
        str_0 = 'Nuame'
        set_0 = {str_0}
        var_1 = module_0.safe_eval(set_0)
        str_1 = '[%~I&03~\x0bH'
        tuple_0 = (str_1,)
        bytes_0 = b'\x16\x02\x15\xf5,\x85TCz\xdd\xc32q('
        float_0 = 1127.071
        tuple_1 = (tuple_0, bytes_0, tuple_0, float_0)
        var_2 = module_0.check_required_one_of(set_0, tuple_1)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'one'
        str_1 = 'two'
        str_2 = 'three'
        str_3 = {str_0: str_0, str_1: str_1, str_2: str_2}
        str_4 = [str_0, str_1]
        var_0 = module_0.check_missing_parameters(str_3, str_4)
        str_5 = {str_0: str_0, str_2: str_2}
        str_6 = [str_0, str_1]
        var_1 = module_0.check_missing_parameters(str_5, str_6)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '?j|'
        list_0 = [str_0]
        str_1 = '/d69CvV\tv`|=35a!'
        float_0 = 2474.0186
        var_0 = module_0.check_required_one_of(str_1, list_0, float_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = "'a'"
        var_0 = module_0.safe_eval(str_0)
        var_1 = module_0.safe_eval(str_0, str_0)
        str_1 = 'import os'
        var_2 = module_0.safe_eval(str_1)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'term1'
        str_1 = 'term2'
        str_2 = [str_0, str_1]
        str_3 = 'term3'
        str_4 = [str_3]
        str_5 = [str_2, str_4]
        str_6 = 'value1'
        str_7 = 'value3'
        str_8 = {str_0: str_6, str_3: str_7}
        var_0 = None
        var_1 = module_0.check_required_together(str_5, str_8, var_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '`'
        bytes_0 = b'\xe60\xd4\xf70V\x87\xe1'
        float_0 = 0.5
        str_1 = ':bD0Gc-r'
        tuple_0 = (float_0, str_1)
        complex_0 = None
        tuple_1 = (bytes_0, tuple_0, complex_0)
        dict_0 = {tuple_1: tuple_1, float_0: str_1, bytes_0: str_1, str_0: str_1}
        var_0 = module_0.check_required_together(str_0, dict_0)
        bool_0 = False
        var_1 = module_0.check_type_bits(bool_0)
    except BaseException:
        pass

def test_case_46():
    try:
        var_0 = None
        var_1 = module_0.check_mutually_exclusive(var_0, var_0)
        str_0 = 'term1'
        str_1 = 'term2'
        str_2 = [str_0, str_1]
        var_2 = module_0.check_mutually_exclusive(str_2, str_2)
        str_3 = [str_0, str_1]
        str_4 = [str_3]
        str_5 = [str_0, str_1]
        var_3 = module_0.check_mutually_exclusive(str_4, str_5)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'nas_server_id'
        bool_0 = True
        str_1 = (str_0,)
        var_0 = [str_0, bool_0, str_1, bool_0]
        var_1 = [str_0, bool_0, str_0, bool_0]
        var_2 = [var_0, var_1]
        var_3 = dict(nas_server_id=bool_0)
        var_4 = module_0.check_required_if(var_2, var_3)
    except BaseException:
        pass

def test_case_48():
    try:
        var_0 = None
        var_1 = {}
        var_2 = None
        var_3 = module_0.check_required_arguments(var_0, var_1, var_2)
        str_0 = 'name'
        str_1 = 'required'
        str_2 = 'type'
        bool_0 = True
        str_3 = 'str'
        str_4 = 'test'
        str_5 = {str_0: str_4}
        var_4 = module_0.check_required_arguments(var_0, str_5, var_2)
        var_5 = {str_1: bool_0, str_2: str_3}
        var_6 = {str_0: var_5}
        str_6 = {str_4: str_4}
        var_7 = module_0.check_required_arguments(var_6, str_6, var_2)
    except BaseException:
        pass

def test_case_49():
    try:
        var_0 = None
        var_1 = {}
        var_2 = module_0.check_required_arguments(var_0, var_1, var_0)
        str_0 = 'name'
        str_1 = 'required'
        str_2 = 'type'
        bool_0 = True
        str_3 = 'str'
        var_3 = {str_0: bool_0}
        var_4 = {str_0: var_3}
        str_4 = 'test'
        str_5 = {str_0: str_4}
        var_5 = module_0.check_required_arguments(var_4, str_5, str_4)
        var_6 = {str_1: bool_0, str_2: str_3}
        str_6 = {str_4: str_4}
        var_7 = module_0.check_required_arguments(var_5, str_6, var_6)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = 'Q{7f_55Ok=,Jbtw?'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = ''
        var_0 = module_0.safe_eval(str_0)
        var_1 = module_0.safe_eval(str_0)
        var_2 = module_0.safe_eval(str_0)
        str_1 = "'a'"
        str_2 = '1.5'
        var_3 = module_0.safe_eval(str_1, str_1)
        var_4 = module_0.safe_eval(str_2)
        var_5 = module_0.safe_eval(str_0)
        dict_0 = {var_1: var_2, str_2: var_0, var_2: var_3}
        var_6 = module_0.check_required_by(dict_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'a'
        str_1 = 'c'
        int_0 = 45
        str_2 = 'b'
        str_3 = {str_0: str_2}
        int_1 = {str_0: int_0, str_1: int_0}
        var_0 = module_0.check_required_by(str_3, int_1)
    except BaseException:
        pass

def test_case_53():
    try:
        var_0 = None
        str_0 = 'Ff'
        int_0 = 13
        var_1 = module_0.check_required_by(var_0, int_0)
        str_1 = 'b'
        str_2 = {str_0: str_1}
        int_1 = {str_0: int_0, str_1: int_0}
        var_2 = module_0.check_required_by(str_2, int_1)
        str_3 = {str_0: str_1}
        var_3 = {str_0: var_0}
        var_4 = module_0.check_required_by(str_3, var_3)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = 'param1'
        str_1 = 'param2'
        str_2 = [str_0, str_1]
        str_3 = 'param3'
        str_4 = 'param4'
        str_5 = [str_3, str_4]
        str_6 = [str_2, str_5]
        int_0 = 1
        int_1 = 3
        int_2 = {str_0: int_0, str_3: int_1}
        str_7 = 'spec'
        str_8 = 'vars'
        str_9 = [str_7, str_8]
        var_0 = module_0.check_required_together(str_6, int_2, str_9)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = 'path'
        str_1 = (str_0,)
        bool_0 = True
        var_0 = [str_0, str_0, str_1, bool_0]
        str_2 = 'someint'
        str_3 = 'bool_param'
        str_4 = 'string_param'
        int_0 = None
        var_1 = module_0.safe_eval(int_0)
        str_5 = (str_3, str_4)
        var_2 = [str_2, int_0, str_5]
        var_3 = [var_0, var_2]
        var_4 = {str_1: str_4, str_2: int_0, str_3: bool_0}
        var_5 = module_0.check_required_if(var_3, var_4, bool_0)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = 'group1'
        str_1 = 'group3'
        int_0 = 1
        int_1 = {str_0: int_0, str_1: int_0, str_1: int_0}
        str_2 = [str_0, str_1]
        str_3 = [str_0, str_1]
        str_4 = [str_2, str_3]
        str_5 = [str_4]
        var_0 = module_0.check_mutually_exclusive(str_4, int_1, str_5)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = ".Y2c,l_\\k=M']E<Xj4\no"
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass