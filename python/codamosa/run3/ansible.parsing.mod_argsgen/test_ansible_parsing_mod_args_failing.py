# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        bytes_0 = b'Ye\x03jO\xee\xef\x96.e'
        module_args_parser_0 = module_0.ModuleArgsParser(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '?Gx.'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'copy src=a dest='
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '*X)|2O'
        bytes_0 = b'\xf5\xde\xc2\x03\xc4\xc5\x84\x90\xcdf'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bytes_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'action'
        str_1 = 'copy src=a dest=b args=123'
        str_2 = {str_1: str_1, str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse(module_args_parser_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'action'
        str_1 = 'roles'
        str_2 = {str_0: str_1, str_1: str_1}
        str_3 = {str_0: str_2}
        module_args_parser_0 = module_0.ModuleArgsParser(str_3)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'action'
        str_1 = 'roles'
        str_2 = {str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse()
        str_3 = {str_0: str_2}
        module_args_parser_1 = module_0.ModuleArgsParser(str_3)
        str_4 = 'local_action'
        str_5 = {str_0: module_args_parser_0, str_4: str_3, str_1: str_1}
        module_args_parser_2 = module_0.ModuleArgsParser(str_5)
        var_1 = module_args_parser_2.parse()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'args'
        str_1 = 'shell'
        str_2 = 'strip_empty_ends'
        str_3 = 'echo {{ content | upper }}'
        var_0 = {str_0: str_2, str_1: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'arhgs'
        str_1 = 'shell'
        str_2 = ''
        str_3 = 'This is a test'
        var_0 = {str_2: str_3}
        str_4 = 'echo {{ content | upper }}'
        var_1 = {str_0: var_0, str_1: str_4}
        module_args_parser_0 = module_0.ModuleArgsParser(var_1)
        var_2 = module_args_parser_0.parse()
        bytes_0 = b'\xfd\x9dd\x13\x9e'
        bytes_1 = None
        tuple_0 = (module_args_parser_0, bytes_0, bytes_0, bytes_1)
        var_3 = module_args_parser_0.parse(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'action'
        str_1 = {str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        str_2 = {str_0: str_1}
        module_args_parser_1 = module_0.ModuleArgsParser(str_2)
        str_3 = 'local_action'
        str_4 = {str_3: str_0, str_0: str_0}
        module_args_parser_2 = module_0.ModuleArgsParser(str_4)
        var_0 = module_args_parser_2.parse()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'args'
        str_1 = 'strip_empty_ends'
        bool_0 = True
        str_2 = 'This is a test'
        var_0 = {str_1: bool_0, str_2: str_2}
        str_3 = 'echo {{ content | upper }}'
        var_1 = {str_0: var_0, str_2: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(var_1)
        var_2 = module_args_parser_0.parse(bool_0)
        var_3 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'args'
        str_1 = 'shell'
        bool_0 = True
        str_2 = 'echo {{ content | upper }}'
        var_0 = {str_0: bool_0, str_1: str_2}
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        str_3 = 'action'
        str_4 = 'copy src=a dest=b'
        str_5 = {str_3: str_4}
        module_args_parser_1 = module_0.ModuleArgsParser(str_5)
        var_1 = module_args_parser_1.parse()
        var_2 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'action'
        str_1 = 'copy src=a dest=b args=123'
        str_2 = {str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass