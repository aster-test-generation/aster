# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        var_0 = []
        one_of_0 = module_0.OneOf(var_0)
        any_0 = one_of_0.validate(var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        field_0 = module_1.Field()
        list_1 = [field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_1)
        any_0 = all_of_0.validate(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        never_match_0 = module_0.NeverMatch()
        bool_0 = False
        list_0 = []
        all_of_0 = module_0.AllOf(list_0)
        any_0 = all_of_0.validate(never_match_0, bool_0)
        str_0 = 'r8'
        field_0 = module_1.Field(description=str_0, default=any_0)
        not_0 = module_0.Not(field_0)
        list_1 = []
        one_of_0 = module_0.OneOf(list_1)
        any_1 = one_of_0.validate(one_of_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'test'
        any_0 = module_1.Any()
        not_0 = module_0.Not(any_0)
        any_1 = not_0.validate(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'search'
        bool_0 = True
        field_0 = module_1.Field()
        if_then_else_0 = module_0.IfThenElse(field_0)
        any_0 = if_then_else_0.validate(str_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        never_match_0 = module_0.NeverMatch()
        not_0 = module_0.Not(never_match_0)
        var_0 = None
        any_0 = not_0.validate(var_0)
        bool_0 = True
        field_0 = module_1.Field()
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, field_0)
        str_0 = 'S0fL)yfoI?b|C>F}B'
        bool_1 = None
        field_1 = module_1.Field(description=str_0, allow_null=bool_1)
        dict_0 = {}
        list_0 = []
        one_of_0 = module_0.OneOf(list_0, **dict_0)
        any_1 = one_of_0.validate(never_match_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Fr0|EqVlH$4Fe]{8'
        field_0 = module_1.Field(title=str_0, default=str_0)
        str_1 = 'allow_null'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '(-?(?:0|[1-9]\\d*))(\\.\\d+)?([eE][-+]?\\d+)?'
        str_1 = 'allow_null'
        str_2 = 'enum'
        dict_0 = {str_0: str_0, str_0: str_1, str_2: str_0, str_1: str_1}
        never_match_0 = module_0.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '(-?(?:0|[1-9]\\d*))(\\.\\d+)?([eE][-+]?\\d+)?'
        str_1 = 'allow_null'
        str_2 = 'enum'
        dict_0 = {str_0: str_0, str_0: str_1, str_2: str_0, str_1: str_1}
        list_0 = []
        all_of_0 = module_0.AllOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '(-?(?:0|[1-9]\\d*))(\\.\\d+)?([eE][-+]?\\d+)?'
        str_1 = 'allow_null'
        field_0 = module_1.Field(title=str_1)
        dict_0 = {str_1: str_0}
        not_0 = module_0.Not(field_0, **dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '(-?(?:0|[1-9]\\d*))(\\.\\d+)?([eE][-+]?\\d+)?'
        str_1 = 'allow_null'
        str_2 = 'enum'
        dict_0 = {str_0: str_0, str_0: str_1, str_2: str_0, str_1: str_1}
        field_0 = module_1.Field(default=str_1)
        list_0 = [field_0, field_0]
        one_of_0 = module_0.OneOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0, any_0]
        one_of_0 = module_0.OneOf(any_1)
        any_2 = one_of_0.validate(any_0)
    except BaseException:
        pass