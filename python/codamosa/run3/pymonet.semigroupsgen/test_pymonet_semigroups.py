# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    str_0 = '\n        Transform Maybe to Try.\n\n        :returns: Lazy monad with function returning previous value in other case Left with None\n        :rtype: Lazy[Function() -> (A | None)]\n        '
    last_0 = module_0.Last(str_0)

def test_case_1():
    int_0 = True
    complex_0 = None
    str_0 = '\t'
    set_0 = None
    tuple_0 = (str_0, set_0)
    one_0 = module_0.One(tuple_0)
    map_0 = module_0.Map(one_0)
    semigroup_0 = module_0.Semigroup(complex_0)
    first_0 = module_0.First(semigroup_0)
    tuple_1 = (int_0, first_0)
    sum_0 = module_0.Sum(tuple_1)
    min_0 = module_0.Min(sum_0)
    str_1 = min_0.__str__()

def test_case_2():
    int_0 = -3743
    one_0 = module_0.One(int_0)
    str_0 = one_0.__str__()

def test_case_3():
    str_0 = 'J:wJR'
    one_0 = module_0.One(str_0)
    str_1 = '\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    '
    one_1 = module_0.One(str_1)
    var_0 = one_1.concat(one_0)

def test_case_4():
    int_0 = 5714
    list_0 = [int_0]
    int_1 = -511
    max_0 = module_0.Max(int_1)
    sum_0 = module_0.Sum(max_0)
    max_1 = module_0.Max(list_0)
    str_0 = '\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        '
    one_0 = module_0.One(str_0)
    str_1 = 'W_\x0b9dyl0R#_D9)'
    all_0 = module_0.All(str_1)
    min_0 = module_0.Min(all_0)
    first_0 = module_0.First(min_0)
    first_1 = module_0.First(first_0)
    var_0 = first_1.concat(one_0)
    str_2 = max_1.__str__()

def test_case_5():
    bytes_0 = b'N\x85\xf8lx;q\xd5\xd5<)A\xe6\xe4sA\xb7\x19A\xdf'
    last_0 = module_0.Last(bytes_0)
    str_0 = 'J:wJR'
    one_0 = module_0.One(str_0)
    str_1 = '\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    '
    str_2 = last_0.__str__()
    one_1 = module_0.One(str_1)
    var_0 = one_1.concat(one_0)

def test_case_6():
    str_0 = '\n        Transform Validation to Maybe.\n\n        :returns: Maybe with Validation Value when Validation has no errors, in other case empty Maybe\n        :rtype: Maybe[A | None]\n        '
    map_0 = module_0.Map(str_0)
    str_1 = map_0.__str__()

def test_case_7():
    str_0 = '\n    Max is a Monoid that will combines 2 numbers, resulting in the largest of the two.\n    '
    sum_0 = module_0.Sum(str_0)
    semigroup_0 = module_0.Semigroup(sum_0)
    max_0 = module_0.Max(semigroup_0)
    str_1 = max_0.__str__()

def test_case_8():
    str_0 = 'w;%! \\U1XPI{,{d%\r'
    bytes_0 = b"'\x0b"
    sum_0 = module_0.Sum(bytes_0)
    str_1 = 'Box\rU]'
    all_0 = module_0.All(str_1)
    all_1 = module_0.All(all_0)
    complex_0 = None
    semigroup_0 = module_0.Semigroup(complex_0)
    last_0 = module_0.Last(semigroup_0)
    max_0 = module_0.Max(str_0)
    var_0 = max_0.concat(all_0)

def test_case_9():
    dict_0 = None
    tuple_0 = (dict_0,)
    first_0 = module_0.First(tuple_0)
    map_0 = module_0.Map(first_0)
    all_0 = module_0.All(map_0)
    bool_0 = False
    semigroup_0 = module_0.Semigroup(bool_0)
    all_1 = module_0.All(semigroup_0)
    all_2 = all_1.concat(all_0)
    str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
    list_0 = []
    all_3 = module_0.All(list_0)
    min_0 = module_0.Min(str_0)
    str_1 = min_0.__str__()
    str_2 = 'l|_U=V+\r0*ak1'
    sum_0 = module_0.Sum(str_2)
    last_0 = module_0.Last(sum_0)
    str_3 = last_0.__str__()
    int_0 = 1688
    all_4 = all_3.concat(all_3)
    str_4 = min_0.__str__()
    tuple_1 = (int_0,)
    map_1 = module_0.Map(tuple_1)
    str_5 = ''
    map_2 = module_0.Map(str_5)
    str_6 = map_1.__str__()
    str_7 = "^L:aBsC\x0b.C'>,w8|t%d"
    str_8 = min_0.__str__()
    last_1 = module_0.Last(str_7)
    var_0 = min_0.concat(last_1)
    str_9 = all_3.__str__()
    all_5 = all_4.concat(all_4)
    str_10 = last_1.__str__()

def test_case_10():
    str_0 = 'w;%! \\U1XPI{,{d%\r'
    one_0 = module_0.One(str_0)
    bytes_0 = b"'\x0b"
    float_0 = -530.6
    var_0 = one_0.concat(float_0)
    sum_0 = module_0.Sum(bytes_0)
    str_1 = 'Box[U]'
    all_0 = module_0.All(str_1)
    all_1 = module_0.All(all_0)
    complex_0 = None
    dict_0 = {str_1: str_0, str_0: all_1, str_0: str_0}
    min_0 = module_0.Min(float_0)
    tuple_0 = (dict_0, min_0)
    first_0 = module_0.First(tuple_0)
    min_1 = module_0.Min(first_0)
    semigroup_0 = module_0.Semigroup(min_1)
    float_1 = -2527.446
    min_2 = module_0.Min(complex_0)
    first_1 = module_0.First(min_0)
    last_0 = None
    last_1 = module_0.Last(last_0)
    var_1 = first_0.concat(last_1)
    map_0 = module_0.Map(float_1)
    last_2 = module_0.Last(map_0)
    bool_0 = False
    max_0 = module_0.Max(bool_0)
    var_2 = max_0.concat(max_0)

def test_case_11():
    semigroup_0 = None
    map_0 = None
    str_0 = '"?go3,U0JV2 C'
    float_0 = 3545.00715
    min_0 = module_0.Min(float_0)
    min_1 = module_0.Min(float_0)
    str_1 = '?T\x0cK$,9[%=u9{|'
    all_0 = module_0.All(str_1)
    all_1 = all_0.concat(all_0)
    tuple_0 = (min_1, all_1)
    max_0 = module_0.Max(tuple_0)
    one_0 = module_0.One(max_0)
    var_0 = one_0.concat(str_0)
    str_2 = map_0.__str__()
    dict_0 = {}
    str_3 = max_0.__str__()
    list_0 = []
    first_0 = module_0.First(list_0)
    str_4 = first_0.__str__()
    map_1 = module_0.Map(dict_0)
    var_1 = map_1.concat(semigroup_0)
    int_0 = True
    map_2 = module_0.Map(int_0)
    str_5 = first_0.__str__()
    one_1 = module_0.One(semigroup_0)
    str_6 = 'g0Q.duV'
    bytes_0 = b'\xbf\xd7\xe5\xaa\xbeW\xd26\xe2\x87\xe7\x0e2\xe4\\'
    last_0 = module_0.Last(first_0)
    tuple_1 = (bytes_0, last_0, first_0)
    var_2 = map_1.concat(tuple_1)
    last_1 = module_0.Last(str_6)
    str_7 = map_1.__str__()
    var_3 = last_1.concat(one_1)