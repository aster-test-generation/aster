# Automatically generated by Pynguin.
import ansible.plugins.lookup.sequence as module_0

def test_case_0():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = ':'
        int_0 = 5
        var_0 = lookup_module_0.run(str_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x11\xec\xebn\x88\x133\x9b\xbd\x8e\xf1o\x05\xd2\x86'
        list_0 = [bytes_0, bytes_0, bytes_0]
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'B2'
        int_0 = 5
        var_0 = lookup_module_0.run(str_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 30
        lookup_module_0 = module_0.LookupModule(int_0)
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xa5\x87\xf6\xd1\xd6\xcc\x8e]\xc0\x0c\xd6q~U[\xfa1\xc2\xed\x8b'
        tuple_0 = ()
        lookup_module_0 = module_0.LookupModule(tuple_0)
        var_0 = lookup_module_0.run(bytes_0, lookup_module_0)
    except BaseException:
        pass

def test_case_6():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '0T'
        int_0 = 5
        var_0 = lookup_module_0.run(str_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.generate_sequence()
        var_2 = list(var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '0x0a-0x0f/03'
        var_0 = lookup_module_0.parse_simple_args(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '4:host%02'
        str_1 = [str_0, str_0, str_0, str_0, str_0, str_0, str_0]
        int_0 = 10
        var_0 = lookup_module_0.run(str_1, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '2-10/2'
        str_1 = '4:host%02d'
        str_2 = 'start=0x0f0r'
        str_3 = [str_0, str_1, str_0, str_2, str_1, str_0, str_2]
        int_0 = 10
        var_0 = lookup_module_0.run(str_3, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '0a-0x0Df'
        var_0 = lookup_module_0.parse_simple_args(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '=2'
        str_1 = 'mHfd'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_0: str_1}
        lookup_module_0 = module_0.LookupModule(**dict_0)
        lookup_module_1 = module_0.LookupModule()
        str_2 = '2-10/2'
        str_3 = '4:host"K2d'
        str_4 = "E3T'3oX\x0bQ*q]"
        str_5 = [str_2, str_3, str_2, str_4, str_3, str_2, str_4]
        int_0 = 10
        var_0 = lookup_module_1.run(str_5, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '5-9'
        str_1 = '7/2'
        str_2 = 'start=5 end=6 format=0x%02x end=6'
        str_3 = 'end=6 count=1 format=%04x'
        str_4 = 'start=0x0f00 count=4 format=%04x'
        str_5 = 'start=0 cout=5 stride=2'
        str_6 = 'start=1 count=5 stride=2'
        str_7 = [str_0, str_6, str_1, str_4, str_2, str_1, str_1, str_3, str_4, str_5, str_6]
        var_0 = None
        var_1 = lookup_module_0.run(str_7, var_0)
    except BaseException:
        pass