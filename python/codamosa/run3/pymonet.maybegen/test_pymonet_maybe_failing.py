# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    try:
        callable_0 = None
        float_0 = 1079.68537
        bool_0 = True
        maybe_0 = module_0.Maybe(bool_0, bool_0)
        var_0 = maybe_0.bind(float_0)
        bool_1 = False
        bool_2 = False
        maybe_1 = module_0.Maybe(bool_1, bool_2)
        var_1 = maybe_1.map(callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'h~b~]|uG>'
        str_1 = '(8'
        bool_0 = True
        maybe_0 = module_0.Maybe(str_1, bool_0)
        str_2 = 'EJu\tMr8.'
        dict_0 = {str_2: str_0}
        var_0 = maybe_0.map(dict_0)
        var_1 = maybe_0.filter(str_0)
        list_0 = None
        object_0 = module_1.object(*list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n    In mathematics, a semigroup is an algebraic structure\n    consisting of a set together with an associative binary operation.\n    A semigroup generalizes a monoid in that there might not exist an identity element.\n    It also (originally) generalized a group (a monoid with all inverses)\n    to a type where every element did not have to have an inverse, this the name semigroup.\n    '
        str_1 = '4!(t2W\'9C{z^\x0b\'J24\\"j'
        str_2 = '|p'
        int_0 = False
        str_3 = 'jXqbT\\\ro*\t$/'
        tuple_0 = (int_0, str_3)
        str_4 = 't##b'
        bool_0 = True
        maybe_0 = module_0.Maybe(str_4, bool_0)
        var_0 = maybe_0.filter(tuple_0)
        object_0 = module_1.object()
        dict_0 = {str_2: str_0, str_2: str_2, str_0: str_0, str_0: str_1}
        bool_1 = False
        maybe_1 = module_0.Maybe(object_0, bool_1)
        bool_2 = maybe_0.__eq__(object_0)
        var_1 = maybe_1.to_either()
        maybe_2 = module_0.Maybe(dict_0, bool_1)
        set_0 = set()
        var_2 = maybe_1.bind(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        object_0 = module_1.object()
        list_0 = [set_0, object_0, object_0, object_0]
        bool_0 = False
        maybe_0 = module_0.Maybe(list_0, bool_0)
        var_0 = maybe_0.to_lazy()
        dict_0 = {object_0: object_0}
        str_0 = 'uYh~,\n3'
        str_1 = '\n'
        dict_1 = {str_0: object_0, str_1: object_0}
        bool_1 = True
        bool_2 = True
        maybe_1 = module_0.Maybe(bool_1, bool_2)
        var_1 = maybe_1.get_or_else(str_1)
        maybe_2 = module_0.Maybe(dict_1, bool_1)
        var_2 = None
        bytes_0 = b'\xc1\xd3S\xc69o\xb2\xdb\x01\xee\xd5\x11\x04\x15|'
        bool_3 = False
        maybe_3 = module_0.Maybe(bytes_0, bool_3)
        var_3 = maybe_3.get_or_else(var_2)
        var_4 = maybe_2.get_or_else(dict_0)
        str_2 = 'kF&4w@`{>G6x-.*'
        list_1 = [object_0, object_0, object_0, str_2]
        bool_4 = False
        var_5 = maybe_2.get_or_else(bool_1)
        maybe_4 = module_0.Maybe(list_1, bool_4)
        var_6 = maybe_4.to_try()
        bytes_1 = b'\xb0\xff'
        var_7 = maybe_4.ap(bytes_1)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        list_1 = [list_0, list_0]
        bool_0 = False
        maybe_0 = module_0.Maybe(list_1, bool_0)
        var_0 = maybe_0.to_lazy()
        bool_1 = True
        maybe_1 = module_0.Maybe(list_0, bool_1)
        bool_2 = False
        maybe_2 = module_0.Maybe(maybe_1, bool_2)
        float_0 = -2139.48
        list_2 = []
        bool_3 = False
        tuple_0 = (float_0, list_2, bool_3)
        var_1 = maybe_2.map(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b''
        str_0 = '\nD0%}gJD.Z'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bool_0 = False
        maybe_0 = module_0.Maybe(dict_0, bool_0)
        bool_1 = True
        maybe_1 = module_0.Maybe(maybe_0, bool_1)
        var_0 = maybe_1.filter(bytes_0)
        dict_1 = {}
        maybe_2 = module_0.Maybe(dict_1, bool_0)
        var_1 = maybe_2.filter(bytes_0)
    except BaseException:
        pass