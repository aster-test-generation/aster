# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)

def test_case_2():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)

def test_case_3():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)

def test_case_4():
    bytes_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)

def test_case_5():
    object_0 = module_1.object()
    str_0 = '+VkjC_NfQ##dX+Ou"Jg^'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.get_or_else(object_0)

def test_case_6():
    bytes_0 = b'\x91'
    float_0 = 785.0584
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.get_or_else(bytes_0)

def test_case_7():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_validation()
    str_0 = '\n        Transform Either to Try.\n\n        :returns: Lazy monad with function returning previous value\n        :rtype: Lazy[Function() -> A]\n        '
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_1 = maybe_1.to_either()
    var_2 = maybe_1.to_box()

def test_case_8():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_either()

def test_case_9():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.to_box()

def test_case_10():
    bool_0 = True
    var_0 = None
    maybe_0 = module_0.Maybe(var_0, bool_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)
    var_1 = maybe_0.to_box()
    var_2 = maybe_0.to_either()
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_3 = maybe_1.to_lazy()

def test_case_11():
    bytes_0 = b'\r\xe4\xf0oo\xf7\xaf=\xcb\xe5\xdb\xaf\xddG'
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_try()
    int_0 = 5
    int_1 = 6
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    maybe_2 = module_0.Maybe(int_0, bool_1)
    maybe_3 = module_0.Maybe(int_0, bool_1)
    maybe_4 = module_0.Maybe(int_1, bool_1)
    var_1 = maybe_3 == maybe_4
    maybe_5 = module_0.Maybe(int_0, bool_1)
    bool_2 = False
    maybe_6 = module_0.Maybe(int_1, bool_2)
    var_2 = maybe_5 == maybe_6

def test_case_12():
    int_0 = True
    bool_0 = True
    set_0 = {bool_0, int_0, int_0, bool_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(set_0, bool_1)
    var_0 = maybe_0.to_box()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_1.to_try()

def test_case_13():
    str_0 = 'o'
    list_0 = [str_0]
    dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0}
    bool_0 = False
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_validation()

def test_case_14():
    tuple_0 = None
    float_0 = -1537.739
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.ap(tuple_0)
    str_0 = '`v]'
    dict_0 = {str_0: str_0}
    bool_1 = True
    maybe_1 = module_0.Maybe(dict_0, bool_1)
    var_1 = maybe_1.to_try()
    var_2 = maybe_1.to_validation()
    var_3 = maybe_1.to_either()

def test_case_15():
    int_0 = 5
    int_1 = 6
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(int_1, bool_0)
    var_0 = maybe_1 == maybe_2
    maybe_3 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    maybe_4 = module_0.Maybe(int_1, bool_1)

def test_case_16():
    int_0 = 5
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    maybe_3 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_2 == maybe_3
    maybe_4 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    maybe_5 = module_0.Maybe(int_0, bool_1)
    var_1 = maybe_4 == maybe_5

def test_case_17():
    int_0 = 5
    int_1 = 6
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    maybe_3 = module_0.Maybe(int_1, bool_0)
    var_0 = maybe_2 == maybe_3
    maybe_4 = module_0.Maybe(int_0, bool_0)
    bool_1 = False
    maybe_5 = module_0.Maybe(int_1, bool_1)
    var_1 = maybe_4 == maybe_5