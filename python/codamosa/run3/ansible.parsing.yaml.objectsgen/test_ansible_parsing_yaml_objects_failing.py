# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        float_0 = 635.24995
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        set_0 = set()
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.isidentifier()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_1 = ansible_vault_encrypted_unicode_1.__lt__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        float_0 = 2.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        ansible_unicode_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        list_0 = []
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        bytes_0 = b'\xc2\x90\xfe\x1dN\xb2\xcd\xb4\xa20i\xf5\xa1}\x81'
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.isidentifier()
        var_1 = ansible_vault_encrypted_unicode_0.__len__()
        list_0 = []
        tuple_0 = (list_0,)
        int_0 = None
        var_2 = ansible_vault_encrypted_unicode_0.__getslice__(tuple_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0]
        dict_1 = {}
        str_0 = '&k0@s3&MT*xg< 8&K'
        bytes_0 = b'\x04[\x14Q\xce\x18 `'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_1.isnumeric()
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = None
        bool_0 = False
        bytes_0 = b'h'
        str_0 = 'S&|P},m;*1c-|0|%\\$'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = 'o/"X5/{G\n[\\>P8'
        dict_1 = {str_0: dict_0, str_1: bool_0}
        list_0 = []
        tuple_0 = (bytes_0, ansible_vault_encrypted_unicode_0, dict_1, list_0)
        list_1 = [dict_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_1.__radd__(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_0.__contains__(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'WwO0\t8OWGS'
        bytes_0 = b'\x91QjD\xae+2r\xb4\tR=3E'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.center(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = None
        str_0 = "!h0vCr??>',/$$\\"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.find(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'L_BtqogV'
        dict_0 = {str_0: str_0, str_0: str_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.format()
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        tuple_0 = ()
        var_0 = ansible_vault_encrypted_unicode_0.capitalize()
        var_1 = ansible_vault_encrypted_unicode_0.index(ansible_vault_encrypted_unicode_0, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 868
        int_1 = -2857
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_1)
        var_0 = ansible_vault_encrypted_unicode_0.join(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -2754.41
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        float_1 = 2.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_1)
        var_0 = ansible_vault_encrypted_unicode_0.__repr__()
        list_0 = [float_0, ansible_base_y_a_m_l_object_0]
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.__lt__(ansible_vault_encrypted_unicode_1)
        var_2 = ansible_vault_encrypted_unicode_1.istitle()
        var_3 = ansible_vault_encrypted_unicode_1.lstrip(list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        int_0 = 37
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.partition(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 2.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        int_0 = -1064
        dict_0 = {}
        var_1 = ansible_vault_encrypted_unicode_0.replace(int_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        complex_0 = None
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(complex_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -475.875
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        str_0 = 'q:'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_1.isidentifier()
        var_2 = ansible_vault_encrypted_unicode_1.rjust(float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 2105
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.capitalize()
        str_0 = 'izN7AP/Nt;mHB9%_'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_1.__len__()
        str_1 = 'O'
        var_2 = ansible_vault_encrypted_unicode_0.upper()
        float_0 = 2389.8583
        var_3 = ansible_vault_encrypted_unicode_1.__eq__(float_0)
        str_2 = "Sn'!2s+>@bKzFSU< ~"
        var_4 = ansible_vault_encrypted_unicode_1.format_map(str_2)
        dict_0 = {str_1: int_0}
        var_5 = ansible_vault_encrypted_unicode_1.split(dict_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'c'
        int_0 = -735
        str_1 = 'd^%&e;H`f6m,\n@ze\nV'
        tuple_0 = (int_0, str_1)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [int_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.casefold()
        bytes_0 = b'\x97\x96h\x9a\x01\xc8\xd3\xb0\xa7/\x83\x9c\x04\x0c\x9a#E\xc1\x82\x11'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_2)
        list_1 = [tuple_0, ansible_unicode_0, str_1]
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_4.__contains__(str_0)
        ansible_unicode_1 = module_0.AnsibleUnicode()
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_2 = ansible_vault_encrypted_unicode_0.__ne__(ansible_sequence_0)
        var_3 = ansible_vault_encrypted_unicode_3.find(ansible_unicode_1)
        dict_0 = {str_1: int_0}
        var_4 = ansible_vault_encrypted_unicode_0.ljust(dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = -4751.0562
        bytes_0 = b'q'
        dict_0 = {bytes_0: bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdecimal()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_1 = ansible_vault_encrypted_unicode_1.count(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        float_0 = 2.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        list_0 = []
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
        var_1 = ansible_vault_encrypted_unicode_0.__mul__(ansible_mapping_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'Waiting for Privilege Escalation input'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(ansible_mapping_0)
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = None
        bytes_0 = b'\x82\xca\xbc\xf4\x1a\x16\xe4'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(dict_0)
    except BaseException:
        pass

def test_case_26():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, tuple_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.isdecimal()
        list_1 = []
        var_1 = ansible_vault_encrypted_unicode_1.__mod__(ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_2 = ansible_vault_encrypted_unicode_2.center(tuple_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'vpb('
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_1 = ansible_vault_encrypted_unicode_1.istitle()
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_3 = ansible_vault_encrypted_unicode_0.isprintable()
        var_4 = ansible_vault_encrypted_unicode_0.isalpha()
        float_0 = None
        var_5 = ansible_vault_encrypted_unicode_1.replace(ansible_vault_encrypted_unicode_1, float_0, float_0)
    except BaseException:
        pass

def test_case_28():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.__len__()
        list_0 = []
        str_0 = 'Waiting for Privilege Escalation input'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = '1+"ZhIb7'
        var_1 = ansible_vault_encrypted_unicode_1.__ne__(str_1)
        var_2 = ansible_vault_encrypted_unicode_1.islower()
        var_3 = ansible_vault_encrypted_unicode_1.swapcase()
        list_1 = [list_0]
        var_4 = ansible_vault_encrypted_unicode_0.__repr__()
        var_5 = ansible_vault_encrypted_unicode_1.__add__(list_1)
        float_0 = -2627.02
        str_2 = 'False'
        str_3 = 'yO*XIYT}JH"1G&N{OE'
        var_6 = ansible_vault_encrypted_unicode_0.__getslice__(float_0, float_0)
        dict_0 = {str_2: var_4, str_2: str_1, str_0: list_0, str_3: var_5}
        var_7 = ansible_vault_encrypted_unicode_1.rfind(dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.swapcase()
        ansible_sequence_0 = None
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_1 = ansible_vault_encrypted_unicode_0.rindex(ansible_sequence_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_30():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        str_0 = 'Waiting for Privilege Escalation input'
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.islower()
        float_0 = 0.2
        int_0 = -2583
        var_3 = ansible_vault_encrypted_unicode_0.endswith(float_0, int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        list_0 = []
        str_0 = 'Waiting for Privilege Escalation input'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = '1+"ZhIb7'
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(str_1)
        list_1 = [list_0]
        str_2 = 'bJ>){'
        var_2 = ansible_vault_encrypted_unicode_0.__gt__(str_2)
        var_3 = ansible_vault_encrypted_unicode_0.__repr__()
        var_4 = ansible_vault_encrypted_unicode_0.__add__(list_1)
        var_5 = ansible_vault_encrypted_unicode_0.is_encrypted()
        int_0 = 166
        bytes_0 = b';\x0f\xcf\x19i\xb7\xf2g\xa1\x1c\x19m\xc3b\xd6\xbfs\x86\xc9\x95'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_6 = ansible_vault_encrypted_unicode_0.replace(int_0, ansible_vault_encrypted_unicode_1)
    except BaseException:
        pass

def test_case_32():
    try:
        list_0 = []
        str_0 = 'Waiting for Privilege Escalation input'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = '1+"ZhIb7'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.count(ansible_vault_encrypted_unicode_1)
        tuple_0 = (list_0,)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_1 = ansible_vault_encrypted_unicode_2.isdigit()
        var_2 = ansible_vault_encrypted_unicode_0.__ne__(str_1)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_3 = ansible_vault_encrypted_unicode_2.__le__(ansible_unicode_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_4 = ansible_vault_encrypted_unicode_3.lower()
        var_5 = ansible_vault_encrypted_unicode_2.__mod__(ansible_vault_encrypted_unicode_3)
        list_1 = [list_0]
        var_6 = ansible_vault_encrypted_unicode_2.__gt__(str_0)
        var_7 = ansible_vault_encrypted_unicode_0.__repr__()
        var_8 = ansible_vault_encrypted_unicode_3.isnumeric()
        var_9 = ansible_vault_encrypted_unicode_0.__add__(list_1)
        var_10 = ansible_vault_encrypted_unicode_2.__ge__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_33():
    try:
        list_0 = []
        str_0 = 'Waiting for Privilege Escalation input'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = '1+"ZhIb7'
        tuple_0 = (list_0,)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_0 = ansible_vault_encrypted_unicode_1.isdigit()
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(str_1)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_2 = ansible_vault_encrypted_unicode_1.__le__(ansible_vault_encrypted_unicode_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_1.__mod__(ansible_vault_encrypted_unicode_2)
        list_1 = [list_0]
        var_4 = ansible_vault_encrypted_unicode_1.__gt__(str_0)
        var_5 = ansible_vault_encrypted_unicode_0.__repr__()
        var_6 = ansible_vault_encrypted_unicode_0.__add__(list_1)
        var_7 = ansible_vault_encrypted_unicode_1.__ge__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_34():
    try:
        list_0 = []
        str_0 = 'Waiting for Privilege Escalation input'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = '+"ZhIb7'
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_1 = ansible_vault_encrypted_unicode_0.__radd__(str_1)
        tuple_0 = (list_0,)
        var_2 = ansible_vault_encrypted_unicode_0.__eq__(tuple_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_3 = ansible_vault_encrypted_unicode_1.isdigit()
        var_4 = ansible_vault_encrypted_unicode_0.__str__()
        var_5 = ansible_vault_encrypted_unicode_0.__ne__(str_1)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_6 = ansible_vault_encrypted_unicode_1.__le__(ansible_unicode_0)
        var_7 = ansible_vault_encrypted_unicode_1.isdecimal()
        var_8 = ansible_vault_encrypted_unicode_1.__mod__(ansible_vault_encrypted_unicode_1)
        list_1 = [list_0]
        var_9 = ansible_vault_encrypted_unicode_1.__gt__(str_0)
        var_10 = ansible_vault_encrypted_unicode_0.__repr__()
        var_11 = ansible_vault_encrypted_unicode_0.__add__(list_1)
        str_2 = '<ansible.parsing.yaml.objects.AnsibleBaseYAMLObject object at 0x7f9ddd6877f0>'
        str_3 = '/usr/local/etc/openssl'
        str_4 = '-M'
        list_2 = [var_6, var_9]
        dict_0 = {str_4: var_5, str_3: list_2, str_2: var_2}
        ansible_sequence_1 = module_0.AnsibleSequence(**dict_0)
        dict_1 = {str_2: var_0, str_3: ansible_sequence_1}
        var_12 = ansible_vault_encrypted_unicode_0.__contains__(dict_1)
    except BaseException:
        pass

def test_case_35():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '\n91j}Hmyc3sCR&a0'
        var_0 = ansible_vault_encrypted_unicode_0.isidentifier()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_1 = ansible_vault_encrypted_unicode_1.find(ansible_vault_encrypted_unicode_0)
        ansible_mapping_1 = None
        var_2 = ansible_vault_encrypted_unicode_1.index(ansible_mapping_1)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 252
        float_0 = -1891.142044
        list_0 = [float_0]
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
        str_0 = ''
        ansible_mapping_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.endswith(str_0, ansible_mapping_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_1.__eq__(int_0)
        list_1 = []
        str_1 = 'Waiting for Privilege Escalation input'
        var_3 = ansible_vault_encrypted_unicode_0.lower()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        str_2 = 'j{\\_{{xrb\x0bMf'
        tuple_0 = (list_1,)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_4 = ansible_vault_encrypted_unicode_3.isdigit()
        var_5 = ansible_vault_encrypted_unicode_2.__ne__(str_2)
        ansible_unicode_1 = module_0.AnsibleUnicode()
        var_6 = ansible_vault_encrypted_unicode_3.__le__(ansible_vault_encrypted_unicode_3)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_1)
        var_7 = ansible_vault_encrypted_unicode_3.__mod__(ansible_vault_encrypted_unicode_4)
        var_8 = ansible_vault_encrypted_unicode_3.__gt__(str_1)
        var_9 = ansible_vault_encrypted_unicode_2.__repr__()
        var_10 = ansible_vault_encrypted_unicode_2.__ge__(ansible_vault_encrypted_unicode_0)
        ansible_mapping_1 = module_0.AnsibleMapping()
        var_11 = ansible_vault_encrypted_unicode_4.lower()
        var_12 = ansible_vault_encrypted_unicode_3.__contains__(ansible_mapping_1)
    except BaseException:
        pass