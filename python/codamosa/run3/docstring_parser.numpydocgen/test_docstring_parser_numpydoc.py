# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0
import inspect as module_1

def test_case_0():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_1():
    str_0 = 'title key type'
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = "Som dsariptin.\n\n    Multi-line descripin.\n\n    Parameters\n    ----------\n    argA : nt\n        Decription o ar'A\n    argB : float\n        Description of argB\n\n    Returns\n    -------\n    int\n       Description o2 return type\n\n    Raises\n    ------\n    ValueError\n        DWscription of Valuerror\n    rr\n        Descrip%ion of TypeError\n    "
    section_0 = module_0.Section(str_0, str_0)
    numpydoc_parser_0 = module_0.NumpydocParser()
    var_0 = numpydoc_parser_0.add_section(section_0)
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = '\n    Test parse of NumpyDoc\n    \n    Parameters\n    ----------\n    a : int\n        Description of a\n    b : str, optional\n        Description of b\n    c : float\n        Description of c\n    \n    Returns\n    -------\n    value : bool\n        Description of return value\n    \n    Other Parameters\n    ----------------\n    pname : int\n        Description of pname\n    pvalue : bool, optional\n        Description of pvalue\n    \n    See Also\n    --------\n    otherfunc :\n        Other function\n    \n    Notes\n    -----\n    Some notes\n    \n    Warnings\n    --------\n    Some warnings\n    \n    Examples\n    --------\n    Some examples\n    \n    References\n    ----------\n    Some references\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = 'Some description.\n\n    Multi-line description.\n\n    Parameters\n    ----------\n    argA : int\n        Decription of argA\n    argB : float\n        Description of argB\n\n    Returns\n    -------\n    int\n        Description o2 return type\n\n    Raises\n    ------\n    ValueError\n        Description of Valuerror\n    TypErrr\n        Description of TypeError\n    '
    docstring_0 = module_0.parse(str_0)
    str_1 = None
    docstring_1 = module_0.parse(str_1)

def test_case_5():
    str_0 = ' \n    This function adds two numbers `a` and `b`.\n\n    It returns the added value :math:`a + b`.\n\n    Parameters\n    ----------\n    a : float\n        One number to be added.\n\n    b : float\n        Other number to be added.\n\n    Returns\n    -------\n    float\n        The sum of the two input numbers.\n\n    See Also\n    --------\n    numpy.add : Equivalent numpy function.\n\n    Examples\n    --------\n    >>> add(1, 2)  # doctest: +SKIP\n    3\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = 'Examples\n--------'
    str_1 = 'examples'
    var_0 = module_1.cleandoc(str_1)
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = '\n    Test parse of NumpyDoc\n    \n    Parameters\n    ----------\n    a : int\n        Description of a\n    b : str, optional\n        Description of b\n    c : float\n        Description of c\n    \n    Returns\n    -------\n    value : bool\n        Description of return value\n    \n    Other Parameters\n    ----------------\n    pname : int\n        Description of pname\n    pvalue : bool, optional\n        Description of pvalue\n    \n    See Also\n    ----U---\n    otherfunc :\n        Other function\n    \n    Notes\n    -----\n    Some notes\n    \n    Warnings\n    --------\n    Some warnings\n    \n    Examples\n    --------\n    Some examples\n    \n    References\n    ----------\n    Some references\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = 'Example'
    str_1 = 'example'
    k_v_section_0 = module_0._KVSection(str_0, str_1)
    str_2 = '1.2.3\n\n    test\n\n    test2'
    iterable_0 = k_v_section_0.parse(str_2)
    var_0 = next(iterable_0)
    var_1 = print(var_0)
    var_2 = None
    var_3 = next(iterable_0, var_2)

def test_case_9():
    str_0 = "Performs a backpropagation step, i.e. computes the gradients of\n    the weights with respect to some loss.\n\n    Parameters\n    ----------\n    x : {'input', 'output'}, optional\n        If given, computes the first-order approximation around this\n        input/output point.\n    step : float, optional\n        The finite difference step size that is used. Defaults to\n        ``sqrt(np.finfo(float).eps)``, which is roughly 1e-8.\n\n    Returns\n    -------\n    gradients : dict\n        A dict containing the first-order gradient approximation with\n        respect to each weight."
    docstring_0 = module_0.parse(str_0)

def test_case_10():
    str_0 = 'Some description.\n\n    Multi-line description.\n\n    Parameters\n    ----------\n    argA : int\n        Description of argA\n    argB : float\n        Description of argB\n\n    Returns\n    -------\n    int\n        Description of return type\n\n    Raises\n    ------\n    ValueError\n        Description of ValueError\n    TypeError\n        Description of TypeError\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = ''
    docstring_0 = numpydoc_parser_0.parse(str_0)
    numpydoc_parser_1 = module_0.NumpydocParser()
    str_1 = 'dw}_'
    section_0 = module_0.Section(str_0, str_1)
    var_0 = numpydoc_parser_1.add_section(section_0)
    var_1 = numpydoc_parser_1.add_section(section_0)
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_0)
    iterable_0 = deprecation_section_0.parse(str_1)
    str_2 = 'First line\n\n\nSecond line\n\n'
    docstring_1 = numpydoc_parser_1.parse(str_2)
    var_2 = docstring_1.short_description
    numpydoc_parser_2 = module_0.NumpydocParser()
    docstring_2 = numpydoc_parser_2.parse(str_2)
    var_3 = docstring_2.short_description
    var_4 = type(var_3)
    numpydoc_parser_3 = module_0.NumpydocParser()
    docstring_3 = numpydoc_parser_3.parse(str_2)
    var_5 = docstring_3.blank_after_short_description
    numpydoc_parser_4 = module_0.NumpydocParser()
    docstring_4 = numpydoc_parser_4.parse(str_2)
    var_6 = docstring_4.blank_after_short_description
    var_7 = type(var_6)
    numpydoc_parser_5 = module_0.NumpydocParser()
    str_3 = 'First line\n\n\nSecond line.'
    docstring_5 = numpydoc_parser_5.parse(str_3)
    var_8 = docstring_5.long_description