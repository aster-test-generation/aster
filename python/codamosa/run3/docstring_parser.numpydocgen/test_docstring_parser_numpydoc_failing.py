# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    try:
        str_0 = 'c.$#b<\x0b$!~bQ<YSy>5u'
        str_1 = 'K?pYvI }*`;-MP'
        str_2 = ''
        section_0 = module_0.Section(str_1, str_2)
        dict_0 = {str_0: section_0, str_2: section_0}
        numpydoc_parser_0 = module_0.NumpydocParser(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '".UX12N\r_|kY5?['
        str_1 = '`}V5(gXt30\rEYJ'
        str_2 = 'qCB\t~\x0b:8q<p)'
        deprecation_section_0 = module_0.DeprecationSection(str_2, str_2)
        iterable_0 = deprecation_section_0.parse(str_2)
        str_3 = 'Exceptions'
        returns_section_0 = module_0.ReturnsSection(str_0, str_3)
        docstring_0 = module_0.parse(str_2)
        str_4 = None
        yields_section_0 = module_0.YieldsSection(str_3, str_2)
        yields_section_1 = module_0.YieldsSection(str_4, str_4)
        str_5 = 'Parse the Google-style docstring into its components.\n\n    :returns: parsed docstring\n    '
        numpydoc_parser_0 = module_0.NumpydocParser()
        docstring_1 = numpydoc_parser_0.parse(str_5)
        str_6 = 'XR'
        section_0 = module_0.Section(str_0, str_6)
        docstring_2 = module_0.parse(str_0)
        raises_section_0 = module_0.RaisesSection(str_3, str_0)
        str_7 = '|RBp.\r#\\pb}wrMA^'
        iterable_1 = deprecation_section_0.parse(str_7)
        str_8 = 'I*s^4I,3'
        raises_section_1 = module_0.RaisesSection(str_4, str_8)
        numpydoc_parser_1 = module_0.NumpydocParser()
        deprecation_section_1 = module_0.DeprecationSection(str_1, str_8)
        numpydoc_parser_2 = module_0.NumpydocParser(iterable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '`}V5(gXt30\rEYJ'
        str_1 = 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        ValueError\n            A description of what might raise ValueError\n    '
        k_v_section_0 = module_0._KVSection(str_0, str_1)
        iterable_0 = k_v_section_0.parse(str_0)
        deprecation_section_0 = module_0.DeprecationSection(str_1, str_1)
        str_2 = '[hGnfF^bVniUM\tF"a0['
        iterable_1 = k_v_section_0.parse(str_2)
        iterable_2 = deprecation_section_0.parse(str_1)
        str_3 = 'Exceptions'
        returns_section_0 = module_0.ReturnsSection(str_0, str_3)
        str_4 = None
        yields_section_0 = module_0.YieldsSection(str_3, str_3)
        str_5 = None
        yields_section_1 = module_0.YieldsSection(str_4, str_5)
        str_6 = 'Parse the Google-style docstring into its components.\n\n    :returns: parsed docstring\n    '
        numpydoc_parser_0 = module_0.NumpydocParser()
        docstring_0 = numpydoc_parser_0.parse(str_6)
        str_7 = 'XR'
        str_8 = None
        str_9 = '!]qng=P9'
        k_v_section_1 = module_0._KVSection(str_8, str_9)
        section_0 = module_0.Section(str_9, str_7)
        docstring_1 = module_0.parse(str_9)
        iterable_3 = k_v_section_1.parse(str_9)
        raises_section_0 = module_0.RaisesSection(str_3, str_9)
        iterable_4 = deprecation_section_0.parse(str_4)
        str_10 = 'I*s^4I,3'
        str_11 = 'Other Args'
        k_v_section_2 = module_0._KVSection(str_11, str_1)
        str_12 = 'Efke-ar^L?:'
        numpydoc_parser_1 = module_0.NumpydocParser()
        deprecation_section_1 = module_0.DeprecationSection(str_12, str_10)
        numpydoc_parser_2 = module_0.NumpydocParser(iterable_2)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        docstring_0 = module_0.parse(str_0)
        str_1 = ' '
        str_2 = '|4'
        section_0 = module_0.Section(str_1, str_2)
        str_3 = 'cj?$1`O;B\x0bZY'
        str_4 = 'zG|gzf\x0bI$'
        k_v_section_0 = module_0._KVSection(str_3, str_4)
        iterable_0 = k_v_section_0.parse(str_0)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
        docstring_1 = numpydoc_parser_0.parse(str_1)
    except BaseException:
        pass