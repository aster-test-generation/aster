# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    set_0 = {a_s_t_0, a_s_t_0, a_s_t_0, a_s_t_0, a_s_t_0, a_s_t_0}
    list_0 = [set_0, set_0, set_0, set_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)

def test_case_2():
    bytes_0 = b'\x87:\x9a\x84\x86bD]\xfb\xd3-\xfa\x07\xa2\xeb\x0fYn'
    list_0 = [bytes_0, bytes_0, bytes_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    a_s_t_0 = module_0.AST()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)

def test_case_3():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    a_s_t_0 = module_0.AST()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)