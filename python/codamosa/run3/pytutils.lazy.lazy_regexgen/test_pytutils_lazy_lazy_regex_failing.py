# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        str_0 = '}r'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 31
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_0 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_2():
    try:
        invalid_pattern_0 = None
        invalid_pattern_1 = module_0.InvalidPattern(invalid_pattern_0)
        var_0 = invalid_pattern_1.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 779
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_0 = invalid_pattern_0.__eq__(invalid_pattern_0)
        var_1 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_4():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(lazy_regex_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    '
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getstate__()
        var_1 = lazy_regex_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        bool_0 = False
        lazy_regex_0 = module_0.LazyRegex(bool_0)
        var_0 = lazy_regex_0.__setstate__(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'all is good'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = module_0.install_lazy_compile()
        var_1 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -531.50642
        var_0 = module_0.lazy_compile()
        float_1 = -1668.789602
        dict_0 = {float_1: float_1}
        list_0 = [float_1]
        str_0 = '\ni'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_1 = invalid_pattern_0.__eq__(list_0)
        str_1 = 'j,\t)EY'
        tuple_0 = (float_0, float_1, dict_0, str_1)
        lazy_regex_0 = module_0.LazyRegex()
        var_2 = lazy_regex_0.__getstate__()
        list_1 = [tuple_0, str_1, float_0, str_1]
        list_2 = [float_1, list_1, float_1]
        str_2 = '}HfXh'
        dict_1 = {str_1: list_2, str_2: dict_0}
        int_0 = None
        var_3 = module_0.install_lazy_compile()
        var_4 = module_0.finditer_public(int_0, dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        str_0 = 'nKsant?]zr(Jk4ZGP'
        dict_0 = {str_0: lazy_regex_0, str_0: lazy_regex_0, str_0: lazy_regex_0}
        var_0 = module_0.finditer_public(lazy_regex_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
        dict_0 = {str_0: str_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_0.__getattr__(lazy_regex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "f.poOz]\tsz)&Q'w"
        dict_0 = {str_0: str_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_0.__getattr__(lazy_regex_0)
    except BaseException:
        pass