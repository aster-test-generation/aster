# Automatically generated by Pynguin.
import ansible.module_utils.common.collections as module_0

def test_case_0():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__iter__()
        dict_0 = None
        var_1 = immutable_dict_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -242
        bytes_0 = b'\xfa\xd6(&'
        var_0 = module_0.is_iterable(bytes_0)
        list_0 = [int_0, int_0]
        immutable_dict_0 = module_0.ImmutableDict()
        var_1 = immutable_dict_0.union(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ']RV&Xr:iMJG3'
        var_0 = module_0.count(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 907
        list_0 = []
        immutable_dict_0 = module_0.ImmutableDict(*list_0)
        var_0 = immutable_dict_0.__eq__(int_0)
        bytes_0 = b'<\xfe\x92\x01H\x90\xf4\xff\x8aY\xac'
        immutable_dict_1 = module_0.ImmutableDict()
        str_0 = 'xw[&vE<t'
        tuple_0 = (immutable_dict_1, str_0)
        var_1 = module_0.count(tuple_0)
        list_1 = [bytes_0, bytes_0]
        var_2 = immutable_dict_1.__repr__()
        immutable_dict_2 = module_0.ImmutableDict(*list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        float_0 = 824.436341
        str_0 = None
        str_1 = '2,'
        dict_0 = {str_0: float_0, str_1: list_0, str_1: list_0, str_0: str_1}
        var_0 = module_0.is_string(dict_0)
        bytes_0 = b'\x86\x14\xba\xf3'
        var_1 = module_0.is_sequence(float_0, bytes_0)
        immutable_dict_0 = module_0.ImmutableDict()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = None
        str_0 = '2k^Ru'
        dict_0 = {str_0: str_0}
        str_1 = '_0sXtD\x0c\r\r|QfO)ak>1'
        dict_1 = {str_0: dict_0, str_1: dict_0}
        immutable_dict_0 = module_0.ImmutableDict(**dict_1)
        var_0 = immutable_dict_0.difference(dict_1)
        var_1 = immutable_dict_0.__iter__()
        immutable_dict_1 = module_0.ImmutableDict()
        var_2 = immutable_dict_1.__iter__()
        list_0 = [int_0, int_0]
        str_2 = "Invalid data passed to 'loop', it requires a list, got this instead: %s. Hint: If you passed a list/dict of just one element, try adding wantlist=True to your lookup invocation or use q/query instead of lookup."
        dict_2 = {str_0: list_0, str_2: immutable_dict_1}
        float_0 = 172.91817
        var_3 = module_0.is_iterable(dict_2, float_0)
        var_4 = module_0.is_string(list_0)
        var_5 = immutable_dict_0.__len__()
        var_6 = module_0.is_string(int_0)
        bytes_0 = b'\x9bHe\x16\n\x81\xaa'
        var_7 = immutable_dict_1.__hash__()
        list_1 = [bytes_0, bytes_0, bytes_0]
        immutable_dict_2 = module_0.ImmutableDict(*list_1)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        dict_0 = {}
        immutable_dict_0 = module_0.ImmutableDict(*list_0, **dict_0)
        var_0 = module_0.is_string(list_0)
        str_0 = "~pSIj_ff't]PgtJ,%WI{"
        immutable_dict_1 = module_0.ImmutableDict()
        int_0 = 3011
        var_1 = module_0.is_sequence(int_0)
        var_2 = immutable_dict_1.difference(str_0)
        var_3 = immutable_dict_1.__iter__()
        immutable_dict_2 = module_0.ImmutableDict(*list_0)
        var_4 = immutable_dict_1.__len__()
        var_5 = module_0.is_iterable(immutable_dict_2)
        var_6 = immutable_dict_2.__len__()
        bool_0 = True
        bool_1 = False
        dict_1 = {bool_1: immutable_dict_1, immutable_dict_0: var_4, immutable_dict_1: bool_0, bool_1: str_0}
        var_7 = immutable_dict_2.__eq__(dict_1)
        var_8 = immutable_dict_1.__repr__()
        str_1 = None
        var_9 = immutable_dict_2.__getitem__(str_1)
    except BaseException:
        pass