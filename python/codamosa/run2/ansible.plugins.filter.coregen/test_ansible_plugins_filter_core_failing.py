# Automatically generated by Pynguin.
import ansible.template as module_0
import ansible.plugins.filter.core as module_1
import ansible.errors as module_2

def test_case_0():
    try:
        list_0 = []
        float_0 = -1311.03
        ansible_undefined_0 = module_0.AnsibleUndefined(list_0, float_0)
        var_0 = module_1.to_yaml(ansible_undefined_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = None
        float_0 = 569.3
        dict_0 = {}
        var_0 = module_1.to_yaml(float_0, **dict_0)
        dict_1 = {list_0: list_0, list_0: list_0}
        var_1 = module_1.regex_escape(dict_1)
        set_0 = set()
        str_0 = '={1T7?E4$vKx&'
        var_2 = module_1.get_hash(set_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.to_nice_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        str_0 = 'PSRP STDERR: %s'
        list_1 = [str_0, list_0, list_0, str_0]
        var_0 = module_1.to_nice_yaml(list_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0, str_0: str_0, str_0: list_1, str_0: list_1}
        var_1 = module_1.regex_search(dict_0, str_0, *list_1, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'MGUnmT(a,Q)4'
        set_0 = None
        str_1 = 'P;j{*j<M,p'
        dict_0 = {str_0: set_0, str_1: str_0}
        var_0 = module_1.to_nice_yaml(dict_0)
        float_0 = 2498.64
        var_1 = module_1.to_datetime(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        ansible_undefined_0 = module_0.AnsibleUndefined()
        list_0 = [ansible_undefined_0]
        var_0 = module_1.strftime(ansible_undefined_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        var_0 = module_1.strftime(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = None
        str_0 = 'G\\@6'
        var_0 = module_1.quote(list_0)
        list_1 = [str_0, list_0, list_0, str_0]
        dict_0 = {str_0: str_0, str_0: str_0, str_0: list_1}
        var_1 = module_1.regex_search(list_0, str_0, *list_1, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0]
        dict_1 = {}
        bool_0 = True
        var_0 = module_1.ternary(dict_1, bool_0, list_0, bool_0)
        var_1 = module_1.list_of_dict_key_value_elements_to_dict(dict_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '}h'
        async_iterator_0 = None
        set_0 = {async_iterator_0, str_0, str_0}
        var_0 = module_1.regex_escape(set_0)
        list_0 = [str_0]
        var_1 = module_1.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'test'
        var_0 = module_1.mandatory(str_0)
        str_1 = 'sC\rK2\\P:eC@/-xA@'
        filter_module_0 = module_1.FilterModule()
        var_1 = module_1.regex_escape(str_1, filter_module_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_undefined_0 = None
        var_0 = module_1.from_yaml(ansible_undefined_0)
        set_0 = {var_0}
        list_0 = None
        var_1 = module_1.get_hash(set_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 0.6964119804070746
        list_0 = []
        list_1 = [list_0, list_0, float_0, float_0, list_0, list_0]
        int_0 = -494
        var_0 = module_1.from_yaml_all(int_0)
        var_1 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        filter_module_0 = module_1.FilterModule()
        list_0 = [filter_module_0, filter_module_0, filter_module_0, filter_module_0]
        list_1 = [list_0]
        list_2 = [filter_module_0]
        var_0 = module_1.rand(list_1, list_2, list_2)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -9.296866972625264
        float_1 = -2866.0
        filter_module_0 = None
        dict_0 = {float_0: float_1}
        var_0 = module_1.rand(float_1, filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'mystring'
        var_0 = module_1.get_hash(str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -655
        str_0 = '^t6W|'
        var_0 = module_1.regex_search(int_0, str_0)
        var_1 = module_1.regex_replace(int_0)
        set_0 = set()
        var_2 = module_1.get_encrypted_password(set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        list_0 = []
        str_0 = 'f0Nf_w/V9yVcr5'
        var_0 = module_1.regex_search(list_0, str_0)
        var_1 = module_1.to_nice_yaml(list_0)
        var_2 = module_1.combine()
        var_3 = module_1.randomize_list(list_0)
        filter_module_0 = module_1.FilterModule()
        bytes_0 = b'\x95N*'
        bytes_1 = b'L=`\x0b'
        var_4 = module_1.get_encrypted_password(bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = -3719.34322
        dict_0 = {}
        var_0 = module_1.get_encrypted_password(float_0, dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'[\x17\xce\xac\n,P\xb4\xd9\xe7'
        var_0 = module_1.to_uuid(bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = module_1.combine()
        int_0 = -671
        list_0 = [var_0]
        var_1 = module_1.regex_escape(list_0)
        str_0 = '^Mt6W'
        var_2 = module_1.regex_search(int_0, str_0)
        filter_module_0 = module_1.FilterModule()
        tuple_0 = ()
        str_1 = 'yj^oY,v'
        var_3 = module_1.do_groupby(filter_module_0, tuple_0, str_1)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        var_0 = module_1.mandatory(dict_0)
        var_1 = module_1.b64encode(dict_0)
        bool_0 = False
        var_2 = module_1.comment(bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = True
        list_0 = [bool_0]
        var_0 = module_1.b64decode(bool_0, list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'k3z'
        list_0 = None
        float_0 = 198.0
        var_0 = module_1.subelements(str_0, list_0, float_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'G'
        var_0 = module_1.to_bool(str_0)
        str_1 = 'OAR4y8]j^\r4G]lBCWC4'
        var_1 = module_1.dict_to_list_of_dict_key_value_elements(str_1)
    except BaseException:
        pass

def test_case_25():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0]
        var_0 = module_1.b64decode(list_0)
        dict_0 = {}
        var_1 = module_1.dict_to_list_of_dict_key_value_elements(dict_0, list_0)
        str_0 = '+DMaM<k9\n\x0b==kory'
        bytes_0 = b'\x91ti\xf4'
        dict_1 = {var_0: str_0, bytes_0: tuple_0}
        var_2 = module_1.to_nice_yaml(dict_1)
    except BaseException:
        pass

def test_case_26():
    try:
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.list_of_dict_key_value_elements_to_dict(filter_module_0)
    except BaseException:
        pass

def test_case_27():
    try:
        float_0 = None
        var_0 = module_1.path_join(float_0)
    except BaseException:
        pass

def test_case_28():
    try:
        float_0 = 0.5
        list_0 = []
        list_1 = [list_0, list_0, float_0, float_0, list_0, list_0]
        str_0 = 'QY{!*k+7)P&?S_lYg:1'
        var_0 = module_1.quote(str_0)
        var_1 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '7d^H;f~*Q0N'
        var_0 = module_1.from_yaml_all(str_0)
        str_1 = 'N\rv'
        bytes_0 = b'\xe1\x1dy\xd8\x93\x88\xdaIJ\x9b]a\x93'
        dict_0 = {str_1: bytes_0}
        var_1 = module_1.combine(**dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        ansible_undefined_0 = None
        var_0 = module_1.from_yaml(ansible_undefined_0)
        dict_0 = {var_0: var_0, var_0: var_0}
        str_0 = '+|R'
        var_1 = module_1.strftime(str_0)
        str_1 = 'y\x0cgAA1F\tq\\Q|'
        var_2 = module_1.path_join(str_1)
        var_3 = module_1.combine()
        var_4 = module_1.b64decode(dict_0)
        str_2 = 'qsla'
        var_5 = module_1.regex_search(str_2, str_2)
        list_0 = [dict_0, dict_0, dict_0]
        var_6 = module_1.comment(str_2)
        float_0 = -1679.0
        var_7 = module_1.randomize_list(float_0)
        filter_module_0 = module_1.FilterModule()
        bool_0 = False
        var_8 = module_1.regex_replace()
        var_9 = module_1.randomize_list(ansible_undefined_0, bool_0)
        list_1 = [var_9, var_9]
        var_10 = module_1.regex_search(list_0, list_0, *list_1)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = -632
        str_0 = 'Y7_P\x0bDi`_q*VJJA#1'
        str_1 = 'hBZD'
        dict_0 = {str_0: int_0, str_1: int_0}
        filter_module_0 = None
        var_0 = module_1.mandatory(dict_0, filter_module_0)
        str_2 = 'SelectorErroq'
        var_1 = module_1.fileglob(str_2)
        tuple_0 = None
        float_0 = 658.579535
        tuple_1 = (tuple_0, float_0, filter_module_0, tuple_0)
        var_2 = module_1.to_nice_json(tuple_1)
        str_3 = 'fMr\rE0=w\r'
        var_3 = module_1.regex_replace()
        filter_module_1 = module_1.FilterModule()
        var_4 = module_1.regex_search(int_0, str_3)
        list_0 = [str_2, int_0, var_3, int_0, str_2, str_3]
        list_1 = [str_3, list_0]
        var_5 = module_1.combine(*list_1)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = -1004
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.ternary(int_0, filter_module_0, filter_module_0)
        float_0 = 1.0
        var_1 = module_1.get_hash(float_0)
    except BaseException:
        pass

def test_case_33():
    try:
        float_0 = None
        int_0 = None
        var_0 = module_1.extract(float_0, int_0, float_0)
    except BaseException:
        pass

def test_case_34():
    try:
        float_0 = 531.6
        str_0 = ''
        list_0 = []
        str_1 = 'f0Nf_w/V9yVcr5'
        var_0 = module_1.regex_search(list_0, str_1)
        list_1 = None
        var_1 = module_1.to_nice_yaml(list_1)
        var_2 = module_1.combine()
        var_3 = module_1.regex_escape(list_1)
        dict_0 = {str_0: float_0, str_0: str_0}
        var_4 = module_1.randomize_list(list_0)
        bytes_0 = b'!\xeajD\x1b\x1c\xcf\x1f\xee\x18'
        var_5 = module_1.mandatory(bytes_0)
        bool_0 = True
        var_6 = module_1.get_hash(bool_0)
        bytes_1 = b'0{d"B$'
        var_7 = module_1.dict_to_list_of_dict_key_value_elements(dict_0, bytes_1)
        filter_module_0 = module_1.FilterModule(**dict_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'refs/tags/'
        list_0 = [str_0, str_0]
        var_0 = module_1.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 'hR,bE,emp]MG<YNT\x0ck'
        list_0 = []
        var_0 = module_1.to_nice_yaml(list_0)
        dict_0 = {str_0: str_0, var_0: list_0}
        str_1 = ',G<NG'
        var_1 = module_1.subelements(dict_0, str_1)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'yd{BFT~UaX3P}U^la['
        str_1 = '$+XqMC5Z%V5i@\t.@'
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_1: str_0}
        list_0 = [str_1, str_1, dict_0, dict_0, str_1]
        float_0 = 2858.636
        var_0 = module_1.subelements(list_0, float_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = '{['
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_1.flatten(dict_0)
        list_0 = [var_0]
        var_1 = module_1.to_bool(list_0)
        var_2 = module_1.list_of_dict_key_value_elements_to_dict(list_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = ',h`UProl1C}d:kH'
        list_0 = []
        var_0 = module_1.regex_search(list_0, str_0)
        var_1 = module_1.list_of_dict_key_value_elements_to_dict(list_0, str_0)
        list_1 = None
        var_2 = module_1.to_nice_yaml(list_1)
        var_3 = module_1.combine()
        var_4 = module_1.regex_escape(list_1)
        var_5 = module_1.randomize_list(list_0)
        str_1 = '*g`X~b3H _'
        str_2 = '[ed;x(3o\\16'
        str_3 = '}P[-97lpby8KY'
        dict_0 = {str_2: list_0, str_1: var_5, str_3: var_5}
        filter_module_0 = None
        var_6 = module_1.comment(dict_0, filter_module_0)
    except BaseException:
        pass

def test_case_40():
    try:
        bool_0 = None
        int_0 = 326
        var_0 = module_1.to_uuid(bool_0, int_0)
    except BaseException:
        pass

def test_case_41():
    try:
        dict_0 = {}
        list_0 = []
        str_0 = "[Q( To'j-`-_L))j"
        var_0 = module_1.regex_findall(dict_0, list_0, str_0)
    except BaseException:
        pass

def test_case_42():
    try:
        float_0 = 310.2143
        var_0 = module_1.randomize_list(float_0)
        filter_module_0 = module_1.FilterModule()
        float_1 = 2604.49378
        var_1 = module_1.regex_findall(filter_module_0, float_1)
    except BaseException:
        pass

def test_case_43():
    try:
        float_0 = 0.5
        list_0 = []
        list_1 = [list_0, list_0, float_0, float_0, list_0, list_0]
        var_0 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_44():
    try:
        list_0 = None
        str_0 = 'C!m\x0cNx#IByK$g~XxG'
        list_1 = [str_0, list_0, list_0, str_0]
        dict_0 = {str_0: str_0, str_0: str_0, str_0: list_1}
        var_0 = module_1.regex_search(list_0, str_0, *list_1, **dict_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'lnk_target'
        var_0 = module_1.from_yaml(str_0)
        float_0 = 0.6964119804070746
        list_0 = []
        list_1 = [list_0, list_0, float_0, float_0, list_0, list_0]
        var_1 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = ''
        list_0 = []
        var_0 = module_1.regex_search(list_0, str_0)
        str_1 = '!xH'
        str_2 = '1\nyJA=yx'
        var_1 = module_1.fileglob(str_2)
        tuple_0 = (str_1,)
        var_2 = module_1.from_yaml_all(tuple_0)
        var_3 = module_1.to_nice_yaml(list_0)
        var_4 = module_1.combine()
        var_5 = module_1.randomize_list(list_0)
        filter_module_0 = module_1.FilterModule()
        complex_0 = None
        var_6 = module_1.to_uuid(tuple_0, complex_0)
    except BaseException:
        pass

def test_case_47():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0]
        var_0 = module_1.subelements(list_1, list_0)
        ansible_undefined_0 = module_0.AnsibleUndefined(list_1)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        str_0 = 'R8d+aqQt9xq7rJu'
        var_1 = module_1.extract(list_0, async_iterator_0, str_0, async_iterator_0)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = '*g`~b3H _'
        int_0 = 2746
        list_0 = [str_0, int_0, int_0, str_0]
        var_0 = module_1.combine(*list_0)
    except BaseException:
        pass

def test_case_49():
    try:
        dict_0 = {}
        filter_module_0 = module_1.FilterModule()
        int_0 = 1445
        set_0 = {int_0}
        int_1 = -2015
        filter_module_1 = module_1.FilterModule()
        tuple_0 = (int_1, dict_0, filter_module_1)
        str_0 = 'yT'
        list_0 = [str_0]
        var_0 = module_1.extract(set_0, tuple_0, str_0, list_0)
    except BaseException:
        pass

def test_case_50():
    try:
        tuple_0 = None
        str_0 = 'l'
        list_0 = [tuple_0, str_0, tuple_0, tuple_0]
        bytes_0 = b'\x7f\x1a\x7f\xd4\xa1\x89\xc2'
        dict_0 = {}
        var_0 = module_1.combine(*list_0, **dict_0)
        var_1 = module_1.rand(str_0, bytes_0)
        filter_module_0 = module_1.FilterModule(*list_0)
    except BaseException:
        pass

def test_case_51():
    try:
        float_0 = 0.5070296762339311
        set_0 = None
        var_0 = module_1.to_bool(set_0)
        list_0 = [float_0, float_0, float_0]
        list_1 = [list_0, list_0, float_0, float_0, list_0, list_0]
        var_1 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_52():
    try:
        ansible_undefined_0 = None
        var_0 = module_1.from_yaml(ansible_undefined_0)
        dict_0 = {var_0: var_0, var_0: var_0}
        var_1 = module_1.combine()
        str_0 = 'qsla'
        var_2 = module_1.regex_search(str_0, str_0)
        bool_0 = False
        var_3 = module_1.regex_replace()
        var_4 = module_1.randomize_list(ansible_undefined_0, bool_0)
        set_0 = {var_0}
        var_5 = module_1.ternary(ansible_undefined_0, set_0, bool_0)
        filter_module_0 = None
        var_6 = module_1.extract(filter_module_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_53():
    try:
        int_0 = -2213
        int_1 = None
        list_0 = [int_0]
        list_1 = [int_1]
        dict_0 = {}
        var_0 = module_1.ternary(int_1, list_0, list_1, dict_0)
        tuple_0 = (int_0,)
        var_1 = module_1.strftime(tuple_0)
    except BaseException:
        pass

def test_case_54():
    try:
        int_0 = 3
        bytes_0 = b"\x135'S\xe1l?\xf2\xd1"
        var_0 = module_1.rand(int_0, int_0, bytes_0)
    except BaseException:
        pass

def test_case_55():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        var_0 = module_1.combine(*list_0)
        filter_module_0 = module_1.FilterModule()
        int_0 = -680
        float_0 = 2110.049619
        var_1 = filter_module_0.filters()
        var_2 = module_1.to_json(float_0)
        list_1 = [filter_module_0, int_0]
        var_3 = module_1.from_yaml_all(list_1)
        var_4 = module_1.regex_search(filter_module_0, int_0, *list_1)
    except BaseException:
        pass

def test_case_56():
    try:
        float_0 = 2856.8
        list_0 = [float_0, float_0]
        bytes_0 = b'\xa7Bd\xfd\x89\xc9{a3\xd5\x0e0\xebC\x82\xa7\x1d\x92\x0b\xd6'
        int_0 = -19
        var_0 = module_1.rand(bytes_0, int_0, list_0, list_0)
    except BaseException:
        pass

def test_case_57():
    try:
        float_0 = 0.6964119804070746
        list_0 = []
        str_0 = 'update_cache_retries'
        int_0 = 2032
        list_1 = [list_0]
        tuple_0 = (list_1,)
        tuple_1 = (str_0, int_0, tuple_0)
        bool_0 = False
        str_1 = ']l]PsO\x0b9AC.]>`\t6'
        var_0 = module_1.regex_findall(tuple_1, bool_0, str_1, float_0)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = 'yes'
        var_0 = module_1.to_bool(str_0)
        str_1 = 'Yes'
        var_1 = module_1.to_bool(str_1)
        str_2 = 'YES'
        var_2 = module_1.to_bool(str_2)
        int_0 = 1
        var_3 = module_1.regex_search(str_1, int_0)
    except BaseException:
        pass

def test_case_59():
    try:
        str_0 = '[]'
        str_1 = 'posix_basic'
        var_0 = module_1.regex_escape(str_0, str_1)
        int_0 = 5
        filter_module_0 = module_1.FilterModule()
        var_1 = module_1.regex_search(int_0, filter_module_0)
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = None
        ansible_undefined_0 = module_0.AnsibleUndefined(str_0, str_0)
        var_0 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_61():
    try:
        str_0 = 'a*b*c'
        str_1 = 'posix_baeic'
        ansible_undefined_0 = module_0.AnsibleUndefined()
        async_iterator_0 = ansible_undefined_0.__aiter__()
        str_2 = ":['J`o#?z4)?"
        dict_0 = {str_2: str_1, str_0: str_0}
        tuple_0 = ()
        int_0 = -3783
        var_0 = module_1.rand(async_iterator_0, dict_0, tuple_0, int_0)
    except BaseException:
        pass

def test_case_62():
    try:
        float_0 = 17.4411657233179
        list_0 = []
        list_1 = [list_0, list_0, list_0]
        list_2 = [float_0, list_1]
        var_0 = module_1.combine(*list_2)
    except BaseException:
        pass

def test_case_63():
    try:
        str_0 = '[]'
        str_1 = 'posix_basic'
        var_0 = module_1.regex_escape(str_0, str_1)
        str_2 = 'posix_extended'
        var_1 = module_1.regex_escape(str_0, str_2)
    except BaseException:
        pass

def test_case_64():
    try:
        ansible_undefined_0 = None
        var_0 = module_1.from_yaml(ansible_undefined_0)
        str_0 = 'qsla'
        var_1 = module_1.regex_search(str_0, str_0)
        bool_0 = True
        var_2 = module_1.randomize_list(ansible_undefined_0, bool_0)
        set_0 = {var_0}
        var_3 = module_1.combine()
        int_0 = 0
        list_0 = []
        tuple_0 = (set_0, list_0)
        var_4 = module_1.rand(int_0, ansible_undefined_0, int_0, set_0, tuple_0)
    except BaseException:
        pass

def test_case_65():
    try:
        str_0 = 'foo'
        str_1 = '1+U9vB)[Ml'
        var_0 = module_1.comment(str_1)
        var_1 = module_1.mandatory(str_0)
        var_2 = module_1.mandatory(str_1)
        var_3 = module_1.mandatory(str_0, str_1)
        ansible_undefined_0 = module_0.AnsibleUndefined()
        str_2 = '|/\tN`tq)K'
        var_4 = module_1.mandatory(ansible_undefined_0, str_2)
    except BaseException:
        pass

def test_case_66():
    try:
        str_0 = ' Unit test for function regex_search '
        str_1 = 'abc def'
        str_2 = '(?:abc|def)'
        var_0 = module_1.regex_search(str_1, str_2)
        tuple_0 = ()
        ansible_filter_error_0 = module_2.AnsibleFilterError(tuple_0, str_0)
        bytes_0 = b'\x85f\xa5\x0f\xc4\x9a\xdb\xe8x|\xb4'
        ansible_filter_error_1 = module_2.AnsibleFilterError(ansible_filter_error_0, bytes_0)
        ansible_undefined_0 = module_0.AnsibleUndefined()
        var_1 = module_1.mandatory(ansible_filter_error_1, ansible_undefined_0)
        str_3 = '(a)(.*)(d)'
        var_2 = module_1.regex_replace(str_1)
        list_0 = [str_2, str_3]
        var_3 = module_1.flatten(list_0)
        str_4 = '\\g<2>'
        tuple_1 = ()
        int_0 = -776
        list_1 = [str_4]
        var_4 = module_1.regex_search(tuple_1, int_0, *list_1)
    except BaseException:
        pass

def test_case_67():
    try:
        str_0 = 'A#+Nsw.:'
        dict_0 = {}
        list_0 = [dict_0]
        var_0 = module_1.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_68():
    try:
        none_type_0 = None
        ansible_undefined_0 = module_0.AnsibleUndefined(none_type_0)
        str_0 = 'e[,">{?54f2(\x0b@LIS'
        float_0 = 2645.5862
        ansible_undefined_1 = module_0.AnsibleUndefined(ansible_undefined_0, str_0, float_0)
        var_0 = module_1.mandatory(ansible_undefined_1)
    except BaseException:
        pass