# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        bool_0 = False
        list_0 = []
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(bool_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        any_0 = module_1.Any()
        any_1 = module_1.Any()
        any_2 = module_1.Any()
        any_3 = [any_0, any_1, any_2]
        one_of_0 = module_0.OneOf(any_3)
        str_0 = 'test'
        any_4 = one_of_0.validate(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        bool_0 = False
        one_of_0 = module_0.OneOf(list_0)
        all_of_0 = module_0.AllOf(list_0)
        any_0 = all_of_0.validate(bool_0)
        bool_1 = True
        any_1 = one_of_0.validate(list_0, bool_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "'pyyaml' must be installed."
        field_0 = module_1.Field(description=str_0)
        field_1 = None
        list_0 = [field_1]
        all_of_0 = module_0.AllOf(list_0)
        if_then_else_0 = module_0.IfThenElse(field_1, field_1)
        not_0 = module_0.Not(field_0)
        bool_0 = False
        any_0 = all_of_0.validate(str_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        any_0 = module_1.Any()
        not_0 = module_0.Not(any_0)
        str_0 = 'Any'
        any_1 = not_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        any_0 = None
        list_0 = [any_0]
        field_0 = module_1.Field()
        if_then_else_0 = module_0.IfThenElse(field_0, field_0)
        any_1 = if_then_else_0.validate(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        field_0 = None
        if_then_else_0 = module_0.IfThenElse(field_0)
        str_0 = 'b)}b'
        field_1 = module_1.Field(title=str_0)
        str_1 = 'field'
        any_0 = field_1.serialize(str_0)
        str_2 = 'XF(r2g>Vg/C'
        dict_0 = {str_1: any_0, str_1: str_0, str_2: str_1}
        not_0 = module_0.Not(field_1, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        str_0 = ';-|oX9^BsF2`'
        bool_0 = False
        one_of_0 = module_0.OneOf(list_0)
        field_0 = module_1.Field(title=str_0, allow_null=bool_0)
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, field_0)
        any_0 = one_of_0.validate(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        never_match_0 = module_0.NeverMatch()
        never_match_1 = module_0.NeverMatch()
        never_match_2 = [never_match_0, never_match_1]
        one_of_0 = module_0.OneOf(never_match_2)
        bool_0 = False
        never_match_3 = module_0.NeverMatch()
        never_match_4 = module_0.NeverMatch()
        str_0 = 'abc'
        any_0 = one_of_0.validate(str_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        any_0 = module_1.Any()
        any_1 = module_1.Any()
        any_2 = module_1.Any()
        if_then_else_0 = module_0.IfThenElse(any_0, any_1, any_2)
        str_0 = 'Test'
        any_3 = if_then_else_0.validate(str_0)
        str_1 = '\r]SgvC:X/x)61z]JL&9'
        field_0 = module_1.Field(description=str_1)
        if_then_else_1 = module_0.IfThenElse(field_0, field_0)
        any_4 = if_then_else_1.validate(if_then_else_0)
    except BaseException:
        pass

def test_case_10():
    try:
        never_match_0 = module_0.NeverMatch()
        list_0 = []
        all_of_0 = module_0.AllOf(list_0)
        never_match_1 = [never_match_0, never_match_0]
        field_0 = module_1.Field(default=never_match_1)
        if_then_else_0 = module_0.IfThenElse(field_0, field_0)
        bool_0 = False
        never_match_2 = module_0.NeverMatch()
        not_0 = module_0.Not(field_0)
        never_match_3 = module_0.NeverMatch()
        never_match_4 = [never_match_2, never_match_2, all_of_0, never_match_3]
        one_of_0 = module_0.OneOf(never_match_4)
        str_0 = "H\x0c0')Zrv\nFxo$"
        any_0 = one_of_0.validate(str_0, bool_0)
        str_1 = 'ipv4'
        field_1 = module_1.Field()
        str_2 = 'ipv6'
        field_2 = module_1.Field()
        list_1 = []
        one_of_1 = module_0.OneOf(list_1)
        any_1 = one_of_1.validate(field_0)
    except BaseException:
        pass

def test_case_11():
    try:
        field_0 = module_1.Field()
        str_0 = 'allow_null'
        str_1 = {str_0: str_0}
        one_of_0 = module_0.OneOf(field_0, **str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '4c]9Q!8\tb\n'
        field_0 = module_1.Field(description=str_0)
        not_0 = module_0.Not(field_0)
        never_match_0 = module_0.NeverMatch()
        list_0 = []
        field_1 = module_1.Field()
        list_1 = [field_1]
        one_of_0 = module_0.OneOf(list_1)
        all_of_0 = module_0.AllOf(list_0)
        if_then_else_0 = module_0.IfThenElse(field_0, field_0)
        str_1 = 'form-'
        not_1 = module_0.Not(field_0)
        never_match_1 = [never_match_0]
        one_of_1 = module_0.OneOf(never_match_1)
        str_2 = 'allnbwO'
        str_3 = 'allow_null'
        str_4 = 'K2G!/8s>$#k_*l&,Hv]N'
        dict_0 = {str_1: str_1, str_3: field_0, str_2: never_match_0, str_4: list_0}
        not_2 = module_0.Not(field_0, **dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'allow_null'
        str_1 = 'c\x0c8!RyQwWYenH\\uuc1'
        bool_0 = False
        field_0 = module_1.Field(title=str_1, allow_null=bool_0)
        not_0 = module_0.Not(field_0)
        list_0 = []
        str_2 = '0sxbV/3soL,<lU&O1'
        dict_0 = {str_0: str_1, str_2: str_0}
        all_of_0 = module_0.AllOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'allow_null'
        str_1 = 'c\x0c8!RyQwWYenH\\uuc1'
        bool_0 = False
        field_0 = module_1.Field(title=str_1, allow_null=bool_0)
        not_0 = module_0.Not(field_0)
        list_0 = [field_0, field_0, field_0]
        one_of_0 = module_0.OneOf(list_0)
        dict_0 = {str_0: str_1, str_0: str_0}
        never_match_0 = module_0.NeverMatch(**dict_0)
    except BaseException:
        pass