# Automatically generated by Pynguin.
import typesystem.formats as module_0

def test_case_0():
    try:
        str_0 = "b'>f!keaBv@[-"
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        base_format_0 = module_0.BaseFormat()
        bool_1 = base_format_0.is_native_type(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_format_0 = module_0.BaseFormat()
        time_format_0 = module_0.TimeFormat()
        base_format_1 = module_0.BaseFormat()
        var_0 = base_format_1.validate(time_format_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 1353.0842
        base_format_0 = module_0.BaseFormat()
        optional_0 = base_format_0.serialize(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = 'true'
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 't0^b\n<ZsA'
        date_time_format_0 = module_0.DateTimeFormat()
        str_1 = None
        optional_0 = date_time_format_0.serialize(str_1)
        date_time_format_1 = module_0.DateTimeFormat()
        date_format_0 = module_0.DateFormat()
        optional_1 = date_format_0.serialize(optional_0)
        datetime_0 = date_time_format_1.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '|a6=\x0b&'
        date_time_format_0 = module_0.DateTimeFormat()
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(str_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '25:0000>'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        u_u_i_d_format_0 = None
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(u_u_i_d_format_0)
        str_0 = '2020-02-31T22:59:53.3121+05:00'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        str_0 = '2020-02-31T22:59:52.33121+05:00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '2020-02-31T22:59:52.3121+05:00'
        date_time_format_0 = module_0.DateTimeFormat()
        time_0 = None
        optional_0 = date_time_format_0.serialize(time_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_13():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(date_time_format_0)
        str_0 = '2020-2-31T2:9:53.3121+05:00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = None
        str_1 = ''
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(str_0)
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        time_format_0 = module_0.TimeFormat()
        int_0 = 59
        optional_0 = time_format_0.serialize(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(date_format_0)
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-02-31T2:59:52.33121+05:00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '|a1=\x0b&'
        date_time_format_0 = module_0.DateTimeFormat()
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '25:00:10.6'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-02-31T22:59:52.33121+05:00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = '4e186174-2b4e-4ca0-9f72-50f7c9e3ff4f'
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
        str_1 = 'Test valid UUID passed'
        var_0 = print(str_1)
        str_2 = 'blah'
        u_u_i_d_1 = u_u_i_d_format_0.validate(str_2)
    except BaseException:
        pass

def test_case_21():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2021-05-32'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-02-31T22:59:52.33121+00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass