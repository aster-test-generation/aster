# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        int_0 = 20
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = ';'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = message_0.__repr__()
        bool_1 = message_0.__eq__(message_0)
        list_0 = None
        validation_error_0 = module_0.ValidationError(messages=list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -627.651714
        str_0 = '05Bw/Yu4Cdc4-QI'
        int_0 = 854
        int_1 = 510
        position_0 = module_0.Position(int_0, int_1, int_0)
        message_0 = module_0.Message(text=str_0, index=position_0, end_position=position_0)
        bool_0 = message_0.__eq__(float_0)
        str_1 = '9[;]#gC~jj0Y-9"OX'
        bytes_0 = b'\xb2\xa6d\xa6U*|'
        str_2 = message_0.__repr__()
        base_error_0 = module_0.BaseError(code=str_1, key=str_1, messages=bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'!\x84\xd5\xf8\xba\x00\xe6.nk\xd6n\x07y\xf4\xfc'
        base_error_0 = module_0.BaseError(messages=bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 5
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = ';'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, key=str_0, position=position_0)
        int_1 = base_error_0.__len__()
        parse_error_0 = module_0.ParseError(text=str_0, code=str_0, key=int_0)
        iterator_0 = None
        message_1 = module_0.Message(text=str_0, index=iterator_0, position=position_0)
        validation_result_0 = module_0.ValidationResult(error=message_0)
        list_0 = base_error_0.messages()
        bool_1 = message_1.__eq__(position_0)
        str_1 = position_0.__repr__()
        list_1 = []
        str_2 = base_error_0.__repr__()
        base_error_1 = module_0.BaseError(key=str_1, position=position_0, messages=list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 20
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = ';'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = message_0.__repr__()
        bool_1 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(text=str_1, code=str_0, key=str_1, position=position_0)
        str_2 = base_error_0.__str__()
        list_0 = None
        validation_error_0 = module_0.ValidationError(messages=list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        validation_result_0 = module_0.ValidationResult()
        bool_0 = validation_result_0.__bool__()
        bool_1 = validation_result_0.__bool__()
        str_0 = ':A\t&VGq`-g3M\x0b4am'
        base_error_0 = module_0.BaseError(code=str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "TJ\x0b'"
        str_1 = 'E!~T`\n~\\BU!?#]n`N9'
        message_0 = module_0.Message(text=str_1, key=str_1)
        validation_result_0 = module_0.ValidationResult(value=message_0)
        iterator_0 = validation_result_0.__iter__()
        int_0 = -1350
        int_1 = -458
        int_2 = None
        position_0 = module_0.Position(int_0, int_1, int_2)
        int_3 = 3
        int_4 = -466
        int_5 = None
        iterator_1 = validation_result_0.__iter__()
        position_1 = module_0.Position(int_3, int_4, int_5)
        validation_result_1 = module_0.ValidationResult(value=position_1)
        message_1 = module_0.Message(text=str_0, position=position_1, end_position=position_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'E?XYa9 \r\x0bR6G8sO2"Z_'
        dict_0 = {}
        int_0 = -1532
        int_1 = 1835
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_result_0 = module_0.ValidationResult(error=validation_error_0)
        int_2 = -111
        position_0 = module_0.Position(int_0, int_1, int_2)
        message_0 = module_0.Message(text=str_0, key=str_0, index=dict_0, position=position_0, start_position=position_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\n    Conditional sub-item matching.\n\n    You should use custom validation instead.\n    '
        str_1 = "\n        Either instantiated with a single message, like so:\n\n        text - The error message. 'May not have more than 100 characters'\n        code - An optional error code, eg. 'max_length'\n        key - An optional key of the message within a single parent. eg. 'username'\n\n        Or instantiated with a list of error messages:\n\n        messages - A list of all the messages in the error.\n        "
        dict_0 = {}
        int_0 = -687
        int_1 = 2813
        position_0 = module_0.Position(int_0, int_0, int_1)
        message_0 = module_0.Message(text=str_1, key=str_0, position=dict_0, start_position=position_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -3010
        position_0 = module_0.Position(int_0, int_0, int_0)
        bool_0 = position_0.__eq__(position_0)
        validation_error_0 = module_0.ValidationError(code=position_0, position=position_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -1101
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = None
        list_0 = []
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, key=str_0, position=position_0, messages=list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        validation_result_0 = module_0.ValidationResult()
        list_0 = [validation_result_0, validation_result_0]
        str_0 = 'JSONSchema'
        base_error_0 = module_0.BaseError(text=list_0, code=str_0, key=str_0)
        bool_0 = base_error_0.__eq__(validation_result_0)
        bool_1 = validation_result_0.__bool__()
        str_1 = ':A\t&VGq`-g3M\x0b4am'
        set_0 = set()
        validation_error_0 = module_0.ValidationError(text=str_1, messages=set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 5
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = '/'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        bool_1 = message_0.__eq__(message_0)
        iterator_0 = None
        message_1 = module_0.Message(text=str_0, index=iterator_0, position=position_0)
        bool_2 = message_0.__eq__(position_0)
        validation_result_0 = module_0.ValidationResult(error=message_0)
        validation_result_1 = module_0.ValidationResult()
        bool_3 = message_1.__eq__(position_0)
        bool_4 = position_0.__eq__(int_0)
        str_1 = position_0.__repr__()
        list_0 = []
        base_error_0 = module_0.BaseError(messages=list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 5
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = ';'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = message_0.__repr__()
        bool_1 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(text=str_1, code=str_0, key=str_1, position=position_0)
        int_1 = base_error_0.__len__()
        iterator_0 = None
        message_1 = module_0.Message(text=str_0, index=iterator_0, position=position_0)
        bool_2 = message_0.__eq__(position_0)
        str_2 = base_error_0.__str__()
        validation_result_0 = module_0.ValidationResult(error=message_0)
        validation_result_1 = module_0.ValidationResult()
        bool_3 = message_1.__eq__(position_0)
        list_0 = base_error_0.messages()
        str_3 = base_error_0.__repr__()
        iterator_1 = base_error_0.__iter__()
        str_4 = validation_result_1.__repr__()
        validation_result_2 = module_0.ValidationResult(value=str_4)
        iterator_2 = base_error_0.__iter__()
        str_5 = validation_result_0.__repr__()
        str_6 = position_0.__repr__()
        int_2 = None
        int_3 = None
        position_1 = module_0.Position(int_2, int_3, int_3)
        validation_error_0 = None
        validation_result_3 = module_0.ValidationResult(error=validation_error_0)
        validation_result_4 = module_0.ValidationResult()
        base_error_1 = module_0.BaseError(key=int_3)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -506.91309
        set_0 = {float_0, float_0}
        int_0 = -1679
        validation_error_0 = module_0.ValidationError(text=set_0, position=int_0)
        validation_result_0 = module_0.ValidationResult(value=float_0, error=validation_error_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 5
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = ';'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = message_0.__repr__()
        bool_1 = message_0.__eq__(message_0)
        str_2 = None
        base_error_0 = module_0.BaseError(text=str_1, code=str_0, key=str_2, position=position_0)
        int_1 = base_error_0.__len__()
        iterator_0 = None
        message_1 = module_0.Message(text=str_0, index=iterator_0, position=position_0)
        bool_2 = message_0.__eq__(position_0)
        str_3 = base_error_0.__str__()
        validation_result_0 = module_0.ValidationResult(error=message_0)
        bool_3 = message_1.__eq__(position_0)
        list_0 = base_error_0.messages()
        str_4 = base_error_0.__repr__()
        base_error_1 = module_0.BaseError(key=str_1, position=position_0, messages=list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 5
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = ';'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = message_0.__repr__()
        bool_1 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(text=str_1, code=str_0, key=str_1, position=position_0)
        int_1 = base_error_0.__len__()
        parse_error_0 = module_0.ParseError(text=str_1, code=str_1, key=int_0)
        iterator_0 = None
        message_1 = module_0.Message(text=str_0, index=iterator_0, position=position_0)
        str_2 = base_error_0.__repr__()
        str_3 = base_error_0.__str__()
        validation_result_0 = module_0.ValidationResult(error=message_0)
        str_4 = base_error_0.__str__()
        validation_result_1 = module_0.ValidationResult()
        validation_result_2 = module_0.ValidationResult()
        set_0 = {str_0}
        message_2 = module_0.Message(text=str_0, code=str_1, index=set_0, start_position=position_0)
        bool_2 = message_2.__eq__(message_0)
        list_0 = base_error_0.messages()
        str_5 = base_error_0.__repr__()
        base_error_1 = module_0.BaseError(key=int_1)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 5
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = 'f'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = message_0.__repr__()
        bool_1 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(text=str_1, code=str_0, key=str_1, position=position_0)
        int_1 = base_error_0.__hash__()
        int_2 = base_error_0.__len__()
        parse_error_0 = module_0.ParseError(text=str_1, code=str_1, key=int_0)
        str_2 = position_0.__repr__()
        iterator_0 = None
        iterator_1 = base_error_0.__iter__()
        message_1 = module_0.Message(text=str_0, index=iterator_0, position=position_0)
        bool_2 = message_0.__eq__(position_0)
        bool_3 = base_error_0.__eq__(iterator_0)
        list_0 = [message_0, message_0, message_1, message_0]
        base_error_1 = module_0.BaseError(messages=list_0)
        str_3 = base_error_1.__str__()
        validation_result_0 = module_0.ValidationResult()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        list_0 = []
        int_0 = 3269
        int_1 = 584
        int_2 = -609
        position_0 = module_0.Position(int_1, int_0, int_2)
        int_3 = 1699
        position_1 = module_0.Position(int_0, int_0, int_3)
        int_4 = -3301
        int_5 = 2241
        position_2 = module_0.Position(int_4, int_5, int_2)
        bool_0 = position_2.__eq__(position_0)
        message_0 = module_0.Message(text=str_0, index=list_0, position=position_1)
        str_1 = message_0.__repr__()
        int_6 = 5217
        position_3 = module_0.Position(int_0, int_2, int_6)
        bool_1 = message_0.__eq__(str_0)
        int_7 = 769
        position_4 = module_0.Position(int_4, int_7, int_5)
        bool_2 = position_4.__eq__(position_2)
        int_8 = -1115
        bool_3 = message_0.__eq__(int_0)
        base_error_0 = module_0.BaseError(text=str_0)
        iterator_0 = base_error_0.__iter__()
        int_9 = None
        position_5 = module_0.Position(int_8, int_8, int_9)
        bool_4 = message_0.__eq__(int_1)
        list_1 = [str_0, str_0, str_0]
        message_1 = module_0.Message(text=str_0, position=list_1, start_position=list_1)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 5
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = position_0.__repr__()
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        str_1 = message_0.__repr__()
        bool_0 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(text=str_1, code=str_1, key=str_1, position=position_0)
        int_1 = base_error_0.__hash__()
        int_2 = base_error_0.__len__()
        parse_error_0 = module_0.ParseError(text=str_1, code=str_1, key=int_0)
        str_2 = position_0.__repr__()
        iterator_0 = None
        message_1 = module_0.Message(text=str_0, index=iterator_0, position=position_0)
        bool_1 = message_1.__eq__(message_1)
        bool_2 = base_error_0.__eq__(parse_error_0)
        str_3 = base_error_0.__str__()
        validation_result_0 = module_0.ValidationResult()
        message_2 = module_0.Message(text=str_0, end_position=position_0)
        bool_3 = message_2.__eq__(message_0)
        list_0 = base_error_0.messages()
        str_4 = base_error_0.__repr__()
        base_error_1 = module_0.BaseError(key=str_4)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 5
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = 'f'
        message_0 = module_0.Message(text=str_0, start_position=position_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = message_0.__repr__()
        bool_1 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(text=str_1, code=str_0, key=str_1, position=position_0)
        int_1 = base_error_0.__hash__()
        int_2 = base_error_0.__len__()
        parse_error_0 = module_0.ParseError(text=str_1, code=str_1, key=int_0)
        validation_result_0 = module_0.ValidationResult()
        str_2 = position_0.__repr__()
        iterator_0 = base_error_0.__iter__()
        message_1 = module_0.Message(text=str_0, index=iterator_0, position=position_0)
        bool_2 = base_error_0.__eq__(iterator_0)
        str_3 = base_error_0.__str__()
        optional_0 = None
        validation_result_1 = module_0.ValidationResult(value=optional_0)
        any_0 = None
        validation_result_2 = module_0.ValidationResult(value=any_0)
        bool_3 = message_1.__eq__(message_0)
        list_0 = base_error_0.messages()
        base_error_1 = module_0.BaseError(key=str_3)
    except BaseException:
        pass