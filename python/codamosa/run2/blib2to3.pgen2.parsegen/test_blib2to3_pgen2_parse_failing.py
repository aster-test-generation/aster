# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 354
        str_0 = 'o|Bp[}v04h`|lu_'
        tuple_0 = None
        list_0 = []
        tuple_1 = (int_0, str_0, tuple_0, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_1)
        int_1 = 1
        str_1 = ''
        tuple_2 = (int_1, int_1)
        tuple_3 = (str_1, tuple_2)
        grammar_1 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_1)
        int_2 = parser_0.classify(int_1, str_1, tuple_3)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 648
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 51
        grammar_0 = module_0.Grammar()
        int_1 = 48
        tuple_0 = None
        grammar_1 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_1)
        parser_0.shift(int_0, grammar_0, int_1, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 58
        tuple_0 = None
        str_0 = '#]DzGVt%m\rj/('
        int_1 = -2790
        tuple_1 = (int_0, int_1)
        tuple_2 = (str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_0, int_0, tuple_2)
    except BaseException:
        pass

def test_case_5():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -1685
        str_0 = 'Q{y/t1KWti>eC'
        float_0 = -1104.4
        list_0 = None
        tuple_0 = (int_0, str_0, float_0, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1
        str_0 = "hello = 'goodbde'\n"
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0, grammar_0)
        int_1 = parser_0.classify(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 25
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1
        str_0 = 'J~'
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_1 = parser_0.classify(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0, int_0)
        str_0 = None
        int_1 = parser_0.classify(int_0, str_0, tuple_0)
    except BaseException:
        pass