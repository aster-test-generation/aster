# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        float_0 = 77.15263
        float_1 = 253.2245
        bool_0 = True
        try_0 = module_0.Try(float_1, bool_0)
        var_0 = try_0.map(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'wq+$N'
        bool_0 = True
        try_0 = module_0.Try(str_0, bool_0)
        str_1 = try_0.__str__()
        str_2 = try_0.__str__()
        var_0 = try_0.get_or_else(str_0)
        bytes_0 = b'L\xc9<R'
        dict_0 = {}
        bool_1 = try_0.__eq__(dict_0)
        str_3 = try_0.__str__()
        var_1 = try_0.bind(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2911.0
        tuple_0 = ()
        list_0 = [tuple_0]
        bool_0 = True
        try_0 = module_0.Try(list_0, bool_0)
        var_0 = try_0.on_success(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        int_0 = 523
        str_0 = 'bD"j>q9"y>\rPh'
        set_0 = {bool_0, str_0}
        bool_1 = True
        try_0 = module_0.Try(set_0, bool_1)
        bool_2 = try_0.__eq__(int_0)
        dict_0 = {}
        var_0 = try_0.on_fail(dict_0)
        try_1 = module_0.Try(dict_0, bool_0)
        var_1 = try_1.get()
        str_1 = try_0.__str__()
        bool_3 = try_0.__eq__(bool_2)
        list_0 = [bool_0, var_0, str_1]
        bool_4 = try_0.__eq__(list_0)
        float_0 = 703.77885
        tuple_0 = ()
        bool_5 = try_1.__eq__(tuple_0)
        set_1 = set()
        tuple_1 = (float_0, set_1)
        tuple_2 = (list_0, float_0, tuple_1)
        var_2 = try_1.on_success(tuple_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '!IoBT$~c\r?&&ia '
        bool_0 = False
        try_0 = module_0.Try(str_0, bool_0)
        var_0 = try_0.on_fail(try_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'h'
        float_0 = -1552.13
        bool_0 = False
        try_0 = module_0.Try(float_0, bool_0)
        try_1 = module_0.Try(try_0, bool_0)
        str_0 = try_1.__str__()
        bool_1 = try_0.__eq__(try_0)
        var_0 = try_1.map(bytes_0)
        list_0 = None
        var_1 = try_0.filter(list_0)
        str_1 = 'Otf#fYv"UVIkq\x0c'
        bytes_1 = b'\x9d[\x16\xf9\x9b\x03\xbb\x1dr\xd9\xd6nSv\x8c{\xcbf\xf5='
        bool_2 = True
        try_2 = module_0.Try(str_1, bool_2)
        var_2 = try_2.filter(bytes_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        try_0 = module_0.Try(bool_0, bool_0)
        var_0 = lambda x: x
        var_1 = try_0.filter(var_0)
        try_1 = module_0.Try(bool_0, bool_0)
        var_2 = lambda x: x
        var_3 = try_1.filter(var_2)
        try_2 = module_0.Try(bool_0, bool_0)
        var_4 = lambda x: not x
        var_5 = try_2.filter(var_4)
        var_6 = var_0.value
    except BaseException:
        pass