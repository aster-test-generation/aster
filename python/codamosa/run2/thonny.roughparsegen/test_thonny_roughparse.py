# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\xa6\xe6\x98\xde\xe6\xa6x\xea1\xa2\xf0'
    rough_parser_0 = module_0.RoughParser(bytes_0, bytes_0)

def test_case_2():
    list_0 = []
    int_0 = 1001
    rough_parser_0 = module_0.RoughParser(list_0, int_0)
    str_0 = ']0l|%\n'
    var_0 = rough_parser_0.set_str(str_0)
    var_1 = rough_parser_0.is_block_opener()

def test_case_3():
    str_0 = ' \t\n\r'
    var_0 = {ord(c): ord(c) for c in str_0}
    int_0 = 42
    var_1 = {}
    int_1 = -1
    string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(var_1, int_1)
    int_2 = 5
    var_2 = string_translate_pseudo_mapping_0.get(int_2, int_0)

def test_case_4():
    int_0 = 1011
    tuple_0 = ()
    rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
    str_0 = ''
    var_0 = rough_parser_0.set_str(str_0)
    var_1 = rough_parser_0.is_block_opener()

def test_case_5():
    int_0 = 1001
    tuple_0 = ()
    rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
    str_0 = ''
    var_0 = rough_parser_0.set_str(str_0)
    var_1 = rough_parser_0.get_last_stmt_bracketing()
    var_2 = rough_parser_0.is_block_opener()

def test_case_6():
    int_0 = 1001
    tuple_0 = ()
    rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
    str_0 = ''
    var_0 = rough_parser_0.set_str(str_0)
    var_1 = rough_parser_0.is_block_closer()
    var_2 = rough_parser_0.get_last_stmt_bracketing()
    bytes_0 = b'[hu'
    bool_0 = None
    rough_parser_1 = module_0.RoughParser(bytes_0, bool_0)

def test_case_7():
    int_0 = 1001
    tuple_0 = ()
    rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
    str_0 = ''
    var_0 = rough_parser_0.set_str(str_0)
    str_1 = ''
    dict_0 = {str_1: str_1, rough_parser_0: tuple_0}
    var_1 = rough_parser_0.find_good_parse_start(dict_0)
    var_2 = rough_parser_0.set_str(str_1)

def test_case_8():
    int_0 = 1001
    tuple_0 = ()
    rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
    str_0 = ''
    var_0 = rough_parser_0.set_str(str_0)
    var_1 = rough_parser_0.get_last_stmt_bracketing()
    var_2 = rough_parser_0.find_good_parse_start()
    var_3 = rough_parser_0.get_base_indent_string()