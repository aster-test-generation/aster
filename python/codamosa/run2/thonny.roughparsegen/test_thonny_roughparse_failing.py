# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        list_0 = []
        int_0 = -3531
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        var_0 = rough_parser_0.set_str(list_0)
        var_1 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1001
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        str_1 = '6sD?BQk_$}"Elx`'
        var_2 = rough_parser_0.get_continuation_type()
        var_3 = rough_parser_0.set_str(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xa6\xe6\x98\xde\xe6\xa6x\xea1\xa2\xf0'
        bytes_1 = b'\xf8Z\xfd\x0ck\xb5'
        rough_parser_0 = module_0.RoughParser(bytes_0, bytes_1)
        var_0 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1001
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2583
        set_0 = {int_0}
        tuple_0 = (set_0, set_0)
        float_0 = 2763.91715
        rough_parser_0 = module_0.RoughParser(tuple_0, float_0)
        var_0 = rough_parser_0.get_base_indent_string()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '('
        bytes_0 = b'\xcc\xc8\xc5\xef'
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        var_0 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_6():
    try:
        rough_parser_0 = None
        set_0 = {rough_parser_0}
        rough_parser_1 = module_0.RoughParser(set_0, set_0)
        var_0 = rough_parser_1.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 0.2
        string_translate_pseudo_mapping_0 = None
        hyper_parser_0 = module_0.HyperParser(float_0, string_translate_pseudo_mapping_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1001
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        var_2 = rough_parser_0.find_good_parse_start()
        str_1 = 'red_fg'
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = ()
        int_0 = 991
        dict_0 = {int_0: int_0, int_0: int_0}
        rough_parser_0 = module_0.RoughParser(int_0, dict_0)
        var_0 = rough_parser_0.set_lo(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '('
        bytes_0 = b'\xcc\xc8\xc5\xef'
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        var_0 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 991
        dict_0 = {int_0: int_0, int_0: int_0}
        rough_parser_0 = module_0.RoughParser(int_0, dict_0)
        str_0 = '\r@8Rl31\x0c'
        rough_parser_1 = module_0.RoughParser(rough_parser_0, str_0)
        var_0 = rough_parser_1.compute_backslash_indent()
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xa6\xe6\x98\xde\xe6\xa6xO1\xa2\xf0'
        bytes_1 = b'Qy\xaf&\xaa\xb9\xbb\xf7\xa2f\xf6\xdf\x04\xc7'
        rough_parser_0 = module_0.RoughParser(bytes_0, bytes_1)
        var_0 = rough_parser_0.find_good_parse_start()
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 1016
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_0 = '*@u'
        var_0 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '*w3u'
        int_0 = 1003
        tuple_0 = ()
        set_0 = {tuple_0, int_0, str_0, tuple_0}
        rough_parser_0 = module_0.RoughParser(int_0, set_0)
        list_0 = [rough_parser_0, int_0, str_0, rough_parser_0]
        bool_0 = False
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.set_str(list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = None
        bytes_1 = b'K\xd7\xdf\xa25S@\x1c\x02\xd7\x00hx\x17\xe1\xe7>\x94-'
        float_0 = 0.005
        dict_0 = {bytes_1: bytes_1}
        dict_1 = {bytes_0: bytes_1, bytes_1: float_0, float_0: dict_0}
        list_0 = [bytes_0, dict_0, dict_1]
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_1, list_0)
        var_0 = string_translate_pseudo_mapping_0.__iter__()
        str_0 = 'e~`\t-i+'
        hyper_parser_0 = module_0.HyperParser(float_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '*w3u'
        int_0 = 1003
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_1 = '*@u'
        dict_0 = {tuple_0: str_1, str_0: tuple_0}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, tuple_0)
        str_2 = 'aTA/k}Z6gYM8mxG/%4-1'
        rough_parser_1 = module_0.RoughParser(int_0, str_2)
        var_0 = rough_parser_1.set_str(string_translate_pseudo_mapping_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 1001
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        bytes_0 = b'}X\x91V\x81\x95\xbc\x92\xa4\xff\xf5'
        var_2 = rough_parser_0.set_str(bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 1001
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        str_1 = ''
        dict_0 = {str_1: str_1, rough_parser_0: tuple_0}
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.set_str(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 1001
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        var_2 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = []
        int_0 = 1001
        rough_parser_0 = module_0.RoughParser(list_0, int_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 1013
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(int_0, tuple_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        str_1 = 'G'
        var_3 = rough_parser_0.get_base_indent_string()
        var_4 = rough_parser_0.find_good_parse_start(str_1)
        var_5 = rough_parser_0.get_last_open_bracket_pos()
        var_6 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_7 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass