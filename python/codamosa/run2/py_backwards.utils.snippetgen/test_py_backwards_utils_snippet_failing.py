# Automatically generated by Pynguin.
import py_backwards.utils.snippet as module_0
import typed_ast.ast3 as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    try:
        arg_0 = None
        str_0 = '(sV/k'
        str_1 = 'HTTPDigestAuthHandler'
        dict_0 = {str_0: str_0, str_1: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
    except BaseException:
        pass

def test_case_1():
    try:
        function_def_0 = None
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\nx = 1\ny = 2\nz = 3\nlet(x)\nx += 1\n        '
        var_0 = module_1.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
        attribute_0 = None
        str_1 = 'let'
        str_2 = '\n    '
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_2, str_0: str_2}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\nlet(x)\nx += 1\nlet(y)\nlet(z)\nz = 1\n    '
        var_0 = module_1.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
        var_1 = list(iterable_0)
        class_def_0 = None
        str_1 = '\nh,63,*j6D^]^['
        dict_0 = {str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_4():
    try:
        keyword_0 = module_2.keyword()
        str_0 = 'MXh8\\?]k'
        function_def_0 = module_2.FunctionDef()
        dict_0 = {str_0: function_def_0}
        a_s_t_0 = module_2.AST(**dict_0)
        str_1 = 'AC$D'
        str_2 = 'zip_longest'
        dict_1 = {str_1: str_1, str_1: str_1, str_2: a_s_t_0}
        module_0.extend_tree(a_s_t_0, dict_1)
        str_3 = 'Ql)<W\x0c\tJG6uDm\rF8fpSW'
        str_4 = '.urllib.error'
        dict_2 = {str_3: str_3, str_4: str_4}
        name_0 = module_2.Name()
        variables_replacer_0 = module_0.VariablesReplacer(dict_2)
        name_1 = variables_replacer_0.visit_Name(name_0)
        variables_replacer_1 = module_0.VariablesReplacer(dict_2)
        name_2 = variables_replacer_1.visit_Name(name_1)
        a_s_t_1 = module_2.AST()
        except_handler_0 = module_2.ExceptHandler()
        variables_replacer_2 = module_0.VariablesReplacer(dict_2)
        except_handler_1 = variables_replacer_2.visit_ExceptHandler(except_handler_0)
        iterable_0 = module_0.find_variables(a_s_t_1)
        variables_replacer_3 = module_0.VariablesReplacer(dict_2)
        attribute_0 = module_2.Attribute()
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        attribute_2 = variables_replacer_0.visit_Attribute(attribute_1)
        keyword_1 = variables_replacer_3.visit_keyword(keyword_0)
        str_5 = 'y8dIfysOu325]4e$3AZq'
        str_6 = 'h'
        dict_3 = {str_5: str_5, str_5: str_5, str_6: str_5, str_6: str_6}
        variables_replacer_4 = module_0.VariablesReplacer(dict_3)
        arg_0 = module_2.arg(**dict_0)
        arg_1 = module_2.arg(**dict_0)
        list_0 = [str_4]
        alias_0 = module_2.alias(*list_0)
        variables_replacer_5 = module_0.VariablesReplacer(dict_2)
        alias_1 = variables_replacer_5.visit_alias(alias_0)
        var_0 = module_1.parse(attribute_2, alias_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "C!v`N;>Y9C2mg'Yp?hGP"
        except_handler_0 = None
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        list_0 = [except_handler_0, variables_replacer_0]
        list_1 = [str_0, list_0]
        dict_1 = {str_0: list_1, str_0: variables_replacer_0, str_0: variables_replacer_0}
        arg_0 = module_2.arg()
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        import_from_0 = module_2.ImportFrom(*list_1, **dict_1)
        snippet_0 = module_0.snippet(except_handler_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        keyword_0 = module_2.keyword(**dict_1)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
        keyword_2 = variables_replacer_0.visit_keyword(keyword_1)
        import_from_2 = variables_replacer_0.visit_ImportFrom(import_from_1)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    except BaseException:
        pass

def test_case_6():
    try:
        import_from_0 = module_2.ImportFrom()
        dict_0 = {}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        a_s_t_0 = module_2.AST()
        module_0.extend_tree(a_s_t_0, dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_7():
    try:
        alias_0 = module_2.alias()
        module_0.extend(alias_0)
        str_0 = "Z\x0cnkb\x0cEZFlg'yMnAw"
        str_1 = 'Yh"#hZi`uY.=\nA(a3h)'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '`VR-^:vkH/xSKP?'
        snippet_0 = module_0.snippet(str_0)
        list_0 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        name_0 = module_2.Name(**dict_0)
        str_0 = '{)P'
        str_1 = None
        dict_1 = {str_0: str_0, str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_10():
    try:
        a_s_t_0 = module_2.AST()
        str_0 = 'e{G{xTD$pyf'
        module_0.let(a_s_t_0)
        list_0 = [str_0]
        str_1 = 'files'
        dict_0 = {str_1: a_s_t_0}
        import_from_0 = module_2.ImportFrom(*list_0, **dict_0)
        str_2 = 'H'
        str_3 = 'tkinter_filedialog'
        str_4 = 'install_opener'
        dict_1 = {str_2: str_0, str_3: str_0, str_4: str_4}
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        str_5 = '_K!On}`q"B$4R+s_s'
        dict_2 = {str_5: str_0, str_5: str_5, str_5: str_5}
        variables_replacer_1 = module_0.VariablesReplacer(dict_2)
        import_from_2 = variables_replacer_1.visit_ImportFrom(import_from_1)
        str_6 = ''
        str_7 = 'P6*L1*JO5(rJ'
        list_1 = []
        dict_3 = {str_0: str_6, str_7: str_7, str_7: list_1, str_0: a_s_t_0}
        variables_replacer_2 = module_0.VariablesReplacer(dict_3)
        import_from_3 = variables_replacer_2.visit_ImportFrom(import_from_2)
        str_8 = 'Initial ast:\n{}'
        str_9 = '5TmTe'
        dict_4 = {str_0: str_0, str_8: a_s_t_0, str_9: str_8}
        module_0.extend_tree(a_s_t_0, dict_4)
        list_2 = [a_s_t_0, str_0, str_0]
        class_def_0 = module_2.ClassDef(*list_2)
        except_handler_0 = None
        variables_replacer_3 = module_0.VariablesReplacer(dict_4)
        except_handler_1 = variables_replacer_3.visit_ExceptHandler(except_handler_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "\nextend({\n    'x': 1,\n    'y': 2\n})\nprint(x, y)  # print here will fail\n    "
        str_1 = 'x = 1'
        var_0 = module_1.parse(str_0)
        module_0.extend_tree(var_0, str_1)
    except BaseException:
        pass