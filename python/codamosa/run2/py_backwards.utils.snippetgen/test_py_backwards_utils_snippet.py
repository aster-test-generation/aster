# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_2():
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)

def test_case_3():
    str_0 = 'TD#80nTk~("m4|i'
    str_1 = 'getcwdb'
    str_2 = '@HmbGlMVC\t'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    name_0 = module_0.Name(**dict_0)
    str_3 = '-1-mA\\g:'
    str_4 = None
    dict_1 = {str_3: str_3, str_4: str_3}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    name_1 = variables_replacer_0.visit_Name(name_0)

def test_case_4():
    arg_0 = module_0.arg()
    str_0 = None
    str_1 = 'parse_qs'
    str_2 = 'M_.}\x0b2D%Z7'
    a_s_t_0 = module_0.AST()
    dict_0 = {str_0: str_0, str_1: str_0, str_2: a_s_t_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    arg_1 = variables_replacer_0.visit_arg(arg_0)
    str_3 = 'o\x0c/ED!nk0?'
    str_4 = None
    str_5 = ".B&k.])ye>b\x0cS35'x."
    a_s_t_1 = module_0.AST()
    list_0 = [a_s_t_1, a_s_t_1]
    a_s_t_2 = module_0.AST()
    dict_1 = {str_3: str_3, str_4: str_4, str_5: list_0, str_3: a_s_t_2}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    arg_2 = variables_replacer_1.visit_arg(arg_1)
    str_6 = '`'
    str_7 = ''
    str_8 = None
    dict_2 = {str_6: str_6, str_6: str_6, str_7: str_6, str_8: str_8}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    arg_3 = variables_replacer_2.visit_arg(arg_2)

def test_case_5():
    str_0 = '\nlet(x)\nx += 1\nlet(y)\nlet(z)\nz = 1\n    '
    name_0 = module_0.Name()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    name_1 = variables_replacer_0.visit_Name(name_0)
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_6():
    str_0 = 'gABoCfDSL3*l>'
    list_0 = [str_0, str_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    str_1 = '3IBHEaD\nS'
    str_2 = 'YF:Cl\r$EYl!{Y<'
    dict_0 = {str_1: str_2, str_2: str_2}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)

def test_case_7():
    str_0 = None
    str_1 = 'xmlrpc.client'
    dict_0 = {str_0: str_0, str_1: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    list_0 = [variables_replacer_0, str_0]
    keyword_0 = module_0.keyword(*list_0)
    keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    variables_replacer_1 = module_1.VariablesReplacer(dict_0)
    keyword_2 = variables_replacer_1.visit_keyword(keyword_1)
    keyword_3 = variables_replacer_0.visit_keyword(keyword_2)

def test_case_8():
    str_0 = '\nx = 1\ny = 2\nz = 3\nlet(x)\nx += 1\n        '
    except_handler_0 = module_0.ExceptHandler()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    var_1 = list(iterable_0)

def test_case_9():
    list_0 = []
    function_def_0 = module_0.FunctionDef(*list_0)
    str_0 = '\\E0,2;C RzAo;'
    str_1 = 'tsS\x0cK/\t\\S|uMML&FvlV'
    str_2 = 'n'
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_2: str_0}
    a_s_t_0 = module_0.AST()
    module_1.extend_tree(a_s_t_0, dict_0)
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)

def test_case_10():
    str_0 = 'r "z_A#_X0AgmO0>b'
    dict_0 = {str_0: str_0, str_0: str_0}
    snippet_0 = module_1.snippet(dict_0)

def test_case_11():
    str_0 = '\nx = 1\ny = 2\nz = 3\nlet(x)\nx += 1\n        '
    module_1.let(str_0)
    except_handler_0 = module_0.ExceptHandler()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    var_0 = module_2.parse(str_0)
    name_0 = module_0.Name()
    name_1 = variables_replacer_0.visit_Name(name_0)
    name_2 = variables_replacer_0.visit_Name(name_1)
    name_3 = variables_replacer_0.visit_Name(name_2)
    iterable_0 = module_1.find_variables(var_0)
    var_1 = list(iterable_0)

def test_case_12():
    float_0 = 2048.499
    module_1.extend(float_0)

def test_case_13():
    str_0 = 'x'
    str_1 = 'x = ast.Assign()'
    var_0 = module_2.parse(str_1)
    var_1 = module_2.dump(var_0)
    var_2 = module_2.parse(str_1)
    var_3 = module_2.dump(var_2)
    str_2 = 'x = [ast.Assign()]'
    var_4 = module_2.parse(str_2)
    var_5 = module_2.dump(var_4)
    str_3 = 'let(x)'
    callable_0 = None
    snippet_0 = module_1.snippet(callable_0)
    var_6 = module_2.parse(str_3)
    var_7 = module_2.dump(var_6)
    str_4 = '_py_backwards_x_0 = ast.Assign()'
    var_8 = module_2.parse(str_4)
    var_9 = module_2.dump(var_8)
    var_10 = module_2.parse(str_1)
    int_0 = 1
    int_1 = {str_0: int_0}
    module_1.extend_tree(var_10, int_1)
    var_11 = module_2.dump(var_10)
    str_5 = 'x = 1'
    var_12 = module_2.parse(str_5)
    var_13 = module_2.parse(str_2)

def test_case_14():
    str_0 = 'exte2d(x)'
    var_0 = module_2.parse(str_0)
    str_1 = 'x'
    var_1 = module_2.dump(var_0)
    str_2 = 'x = ast.Assign()'
    var_2 = module_2.parse(str_2)
    var_3 = module_2.dump(var_2)
    var_4 = module_2.parse(str_0)
    var_5 = module_2.dump(var_4)
    str_3 = 'x = [ast.Assign()]'
    var_6 = module_2.parse(str_3)
    var_7 = module_2.dump(var_6)
    str_4 = 'let(x)'
    var_8 = module_2.parse(str_4)
    var_9 = module_2.dump(var_8)
    str_5 = '_py_backwards_x_0 = ast.Assign()'
    var_10 = module_2.parse(str_5)
    var_11 = module_2.dump(var_10)
    var_12 = module_2.parse(str_0)
    int_0 = 1
    int_1 = {str_1: int_0}
    module_1.extend_tree(var_12, int_1)
    var_13 = module_2.dump(var_12)
    dict_0 = None
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    str_6 = 'x = 1'
    var_14 = module_2.parse(str_6)
    var_15 = module_2.dump(var_14)
    var_16 = module_2.parse(str_0)

def test_case_15():
    str_0 = '\nlet(x)\nx += 1\nlet(y)\nlet(z)\nz = 1\n    '
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_16():
    str_0 = '\nlet(x)\nx += 1\net(y)\nlet(z)\nz = 1\n   '
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)