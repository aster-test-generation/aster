# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        str_0 = 'nocache:used'
        bool_0 = True
        var_0 = module_0.unique(str_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = None
        str_0 = 'Q|\x0cz2a\nP'
        tuple_0 = ()
        bytes_0 = b'\x9fJ\xfc'
        var_0 = module_0.difference(str_0, tuple_0, bytes_0)
        var_1 = module_0.human_to_bytes(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'n\tG:F=}(wdw'
        dict_0 = {str_0: str_0}
        str_1 = '\n    Determine what branch HEAD is associated with.  This is partly\n    taken from lib/ansible/utils/__init__.py.  It finds the correct\n    path to .git/HEAD and reads from that file the branch that HEAD is\n    associated with.  In the case of a detached HEAD, this will look\n    up the branch in .git/refs/remotes/<remote>/HEAD.\n    '
        list_0 = [str_1, str_0]
        var_0 = module_0.difference(dict_0, str_1, list_0)
        bool_0 = None
        filter_module_0 = None
        var_1 = module_0.min(bool_0, filter_module_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -2719.14
        tuple_0 = (float_0,)
        bytes_0 = b'\xe0\xc7\x1a\xfe\x8cqQ\xd0\xc06\x903\xbf\x99I3\xf7\xf1k\x17'
        str_0 = '_'
        var_0 = module_0.union(tuple_0, bytes_0, str_0)
        str_1 = ']MnQ~.\\_k.t3>[='
        set_0 = {str_1, str_1}
        dict_0 = {str_1: set_0, str_1: str_1}
        float_1 = 1282.5872
        var_1 = module_0.human_to_bytes(dict_0, float_1)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        var_0 = module_0.min(dict_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        var_0 = module_0.max(dict_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.logarithm(filter_module_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Wuj_/&M\n|O(x'
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.power(str_0, filter_module_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 2030.0
        var_0 = module_0.inversepower(float_0)
        dict_0 = None
        var_1 = module_0.max(dict_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = set()
        bool_0 = False
        var_0 = module_0.inversepower(set_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        tuple_0 = (bool_0,)
        str_0 = 'KYKVS.!f]lJ\x0c!\rl44q+e'
        list_0 = [bool_0, tuple_0, bool_0]
        var_0 = module_0.unique(str_0, list_0)
        var_1 = module_0.inversepower(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = None
        var_0 = module_0.human_readable(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -3926.07
        var_0 = module_0.human_to_bytes(float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'j\xff\xb7'
        list_0 = [bytes_0]
        filter_module_0 = None
        var_0 = module_0.rekey_on_member(list_0, filter_module_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '9j\tw5?POPM*2b'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.rekey_on_member(dict_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\nCF+H{#O\r`h'
        list_0 = [str_0, str_0, str_0, str_0]
        float_0 = 1494.770581
        bytes_0 = b'\x0b\xe4\xd7\xf8\xfd\x1ft\xb9\xd3\x92\x8e'
        var_0 = module_0.rekey_on_member(list_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = None
        str_0 = '\x0b$YW-P*mu7Y%&['
        var_0 = module_0.rekey_on_member(str_0, float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'j\xff\xb7'
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        list_0 = [bytes_0]
        filter_module_1 = None
        var_1 = module_0.rekey_on_member(list_0, filter_module_1)
    except BaseException:
        pass

def test_case_18():
    try:
        list_0 = []
        str_0 = 'MI2O=r+^TG>Q0'
        var_0 = module_0.symmetric_difference(list_0, str_0, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = []
        str_0 = '/4<.MC-0\rcYmcm8OzjM'
        dict_0 = {}
        var_0 = module_0.min(list_0, str_0, **dict_0)
        dict_1 = {}
        bool_0 = False
        var_1 = module_0.rekey_on_member(dict_1, bool_0)
        filter_module_0 = module_0.FilterModule()
        var_2 = filter_module_0.filters()
        bool_1 = False
        str_1 = '/\x0chW4'
        set_0 = {bool_1, str_1, bool_0, str_1}
        dict_2 = {}
        tuple_0 = (dict_2,)
        var_3 = module_0.intersect(bool_0, set_0, tuple_0)
        float_0 = 1000.0
        var_4 = module_0.logarithm(float_0)
        filter_module_1 = module_0.FilterModule()
        str_2 = 'emhC$"[\\/`D1rd>'
        var_5 = module_0.max(list_0, str_2)
        float_1 = -1357.38
        var_6 = module_0.rekey_on_member(float_1, set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '9j\tw5?POPM*2b'
        var_0 = filter_module_0.filters()
        set_0 = {filter_module_0, filter_module_0}
        tuple_0 = ()
        var_1 = module_0.intersect(set_0, tuple_0, tuple_0)
        var_2 = filter_module_0.filters()
        var_3 = module_0.max(set_0, set_0)
        filter_module_1 = module_0.FilterModule()
        bool_0 = True
        int_0 = -2815
        dict_0 = {str_0: bool_0}
        var_4 = module_0.min(bool_0, int_0, **dict_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = -428.5949
        var_0 = module_0.logarithm(float_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '5K\\Wl\r{S/XI\t\\gG'
        dict_0 = {}
        bool_0 = True
        list_0 = [str_0, dict_0]
        var_0 = module_0.human_readable(dict_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        dict_0 = {}
        bool_0 = False
        var_0 = module_0.rekey_on_member(dict_0, bool_0)
        var_1 = module_0.power(bool_0, dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bytes_0 = b'T(7o\x86'
        set_0 = {bytes_0, bytes_0}
        str_0 = None
        bool_0 = False
        dict_0 = {str_0: bytes_0, bool_0: bool_0, bool_0: bool_0}
        list_0 = [bytes_0]
        str_1 = ':?b'
        tuple_0 = (set_0, bool_0)
        var_0 = module_0.unique(list_0, str_1, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'vaue1'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = [str_1, str_0, str_1]
        var_0 = module_0.rekey_on_member(str_2, str_1)
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = b'j\xff\xb7'
        filter_module_0 = module_0.FilterModule()
        list_0 = [bytes_0]
        str_0 = '^JGjF+$pT=!AE&[<!&'
        dict_0 = {str_0: list_0, str_0: filter_module_0, str_0: list_0, str_0: bytes_0}
        list_1 = [dict_0, bytes_0, bytes_0]
        float_0 = None
        var_0 = module_0.rekey_on_member(list_1, float_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = -1091
        str_0 = 'Ex\r4aLki%]'
        dict_0 = {str_0: int_0}
        var_0 = module_0.difference(dict_0, dict_0, str_0)
        var_1 = module_0.logarithm(int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'\x94\x9c\x84U'
        list_0 = [bytes_0]
        float_0 = 102.37967165196194
        tuple_0 = (list_0, float_0)
        int_0 = -394
        var_0 = module_0.unique(bytes_0, tuple_0, int_0)
        var_1 = module_0.power(int_0, float_0)
    except BaseException:
        pass

def test_case_29():
    try:
        list_0 = []
        str_0 = '/4<.MC-0\rcYmcm8OzjM'
        dict_0 = {}
        var_0 = module_0.min(list_0, str_0, **dict_0)
        dict_1 = {}
        bool_0 = False
        var_1 = module_0.rekey_on_member(dict_1, bool_0)
        filter_module_0 = module_0.FilterModule()
        var_2 = filter_module_0.filters()
        str_1 = '1[Q'
        bool_1 = False
        var_3 = module_0.human_to_bytes(str_1, bool_1)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = "\n'O\x0bg>&8]a"
        tuple_0 = None
        bool_0 = False
        var_0 = module_0.unique(str_0, tuple_0, bool_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'vaue1'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = [str_1, str_1, str_1]
        var_0 = module_0.rekey_on_member(str_2, str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 48
        int_1 = 2
        var_0 = module_0.logarithm(int_0, int_1)
        int_2 = 16
        var_1 = module_0.logarithm(int_2, int_1)
        int_3 = 3
        var_2 = round(var_1, int_3)
        int_4 = 2000
        int_5 = 10
        var_3 = module_0.logarithm(int_4, int_5)
        var_4 = round(var_3, int_3)
        str_0 = '5'
        int_6 = 2
        var_5 = module_0.logarithm(str_0, int_6)
    except BaseException:
        pass