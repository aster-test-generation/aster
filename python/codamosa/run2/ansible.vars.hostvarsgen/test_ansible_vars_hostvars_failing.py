# Automatically generated by Pynguin.
import ansible.vars.hostvars as module_0
import ansible.template as module_1

def test_case_0():
    try:
        str_0 = 'L\x0bb%\\YN_'
        bytes_0 = b''
        host_vars_0 = module_0.HostVars(bytes_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x80r'
        set_0 = {bytes_0, bytes_0}
        bool_0 = None
        str_0 = '2E*kF'
        dict_0 = {str_0: bytes_0, bytes_0: set_0, bytes_0: bytes_0}
        host_vars_vars_0 = module_0.HostVarsVars(str_0, dict_0)
        var_0 = host_vars_vars_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        str_0 = ''
        bytes_0 = b'_\xb3?\x80'
        list_0 = [bytes_0]
        float_0 = -81.040293
        host_vars_vars_0 = module_0.HostVarsVars(list_0, float_0)
        var_0 = host_vars_vars_0.__iter__()
        host_vars_vars_1 = module_0.HostVarsVars(bytes_0, set_0)
        list_1 = []
        float_1 = 2274.84365
        bool_0 = False
        tuple_0 = (str_0, list_1, float_1, bool_0)
        var_1 = host_vars_vars_1.__getitem__(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xc5\xaf\x13\xd5^d\x0c\x9b\x83\x0e\x06'
        float_0 = -1353.1
        host_vars_vars_0 = module_0.HostVarsVars(float_0, float_0)
        var_0 = host_vars_vars_0.__contains__(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2685
        host_vars_vars_0 = module_0.HostVarsVars(int_0, int_0)
        var_0 = host_vars_vars_0.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '2PJZC1txxt\r4Yt!;i'
        int_0 = 660
        host_vars_vars_0 = module_0.HostVarsVars(str_0, int_0)
        host_vars_0 = module_0.HostVars(host_vars_vars_0, host_vars_vars_0, str_0)
        set_0 = set()
        var_0 = host_vars_0.__setstate__(set_0)
        bytes_0 = None
        var_1 = host_vars_0.__contains__(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '1\x0cW0!_gd]'
        str_1 = 'cW<Kis'
        dict_0 = {str_1: str_1}
        float_0 = 164.0
        float_1 = -1064.14
        bool_0 = True
        tuple_0 = (float_1, dict_0, bool_0)
        bytes_0 = b'\r\xbd\xf8Z2\xb79P\xb8\xd0\xa9\xd0\x08*\x9f\xe6\x01\xe6'
        str_2 = 'Fit$BUj)LT?=\x0bpn'
        host_vars_vars_0 = module_0.HostVarsVars(str_2, dict_0)
        list_0 = [str_1]
        dict_1 = {str_0: list_0, bool_0: host_vars_vars_0, bool_0: list_0}
        host_vars_0 = module_0.HostVars(tuple_0, host_vars_vars_0, dict_1)
        var_0 = host_vars_0.__deepcopy__(bytes_0)
        host_vars_1 = module_0.HostVars(dict_0, float_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'BU[&\x8f\xc8>\xb3\xc1n\xf9N}'
        tuple_0 = (bytes_0,)
        list_0 = [bytes_0, tuple_0, bytes_0]
        str_0 = 'subject'
        set_0 = {tuple_0}
        int_0 = -3023
        set_1 = set()
        list_1 = [str_0, set_1, set_0]
        tuple_1 = (int_0, list_1)
        list_2 = [tuple_1, tuple_1, bytes_0, tuple_0]
        host_vars_vars_0 = module_0.HostVarsVars(set_0, list_2)
        host_vars_0 = module_0.HostVars(str_0, host_vars_vars_0, bytes_0)
        var_0 = host_vars_0.set_variable_manager(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'GAP&X@\\KEZ%'
        list_0 = []
        host_vars_vars_0 = module_0.HostVarsVars(str_0, list_0)
        var_0 = host_vars_vars_0.__repr__()
        bytes_0 = b'BU[&\x8f\xc8>\xb3\xc1n\xf9N}'
        tuple_0 = (bytes_0,)
        float_0 = 2612.0193
        host_vars_vars_1 = module_0.HostVarsVars(tuple_0, float_0)
        str_1 = "\n    Holds inventory data (host and group objects).\n    Using it's methods should guarantee expected relationships and data.\n    "
        bool_0 = False
        var_1 = host_vars_vars_1.__contains__(bool_0)
        host_vars_0 = module_0.HostVars(host_vars_vars_1, str_1, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        host_vars_0 = None
        bytes_0 = b'd\xe7\xa5\x9d_'
        dict_0 = None
        bool_0 = True
        tuple_0 = (host_vars_0, bytes_0, dict_0, bool_0)
        tuple_1 = (tuple_0,)
        list_0 = None
        str_0 = 'OL1X8V;X'
        host_vars_vars_0 = module_0.HostVarsVars(list_0, str_0)
        host_vars_1 = module_0.HostVars(tuple_1, host_vars_vars_0, list_0)
        var_0 = host_vars_1.__len__()
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = None
        list_0 = [tuple_0]
        str_0 = '2PJZC1txxt\r4Yt!;i'
        tuple_1 = (list_0, tuple_0, str_0)
        str_1 = 'CeaQk%$}>Po:/4'
        int_0 = 660
        host_vars_vars_0 = module_0.HostVarsVars(str_1, int_0)
        str_2 = 'b[?~]M9Sd9J4'
        host_vars_0 = module_0.HostVars(host_vars_vars_0, host_vars_vars_0, str_2)
        var_0 = host_vars_0.__getitem__(tuple_1)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b''
        str_0 = 'x8hKHFyn+Pt$wvoYkd.w'
        bool_0 = True
        bool_1 = False
        dict_0 = {}
        bytes_1 = b'\xa2\xd1\x93\xad\xafR'
        host_vars_vars_0 = module_0.HostVarsVars(dict_0, bytes_1)
        host_vars_vars_1 = module_0.HostVarsVars(bool_1, host_vars_vars_0)
        dict_1 = {bool_0: bool_0, bytes_1: host_vars_vars_0}
        host_vars_0 = module_0.HostVars(bool_0, host_vars_vars_1, dict_1)
        var_0 = host_vars_0.set_host_facts(bytes_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tuple_0 = None
        str_0 = 'CeaQk%$}>Po:/4'
        bytes_0 = b'\x8a\x16[4&'
        host_vars_vars_0 = module_0.HostVarsVars(bytes_0, tuple_0)
        int_0 = 660
        host_vars_vars_1 = module_0.HostVarsVars(str_0, int_0)
        str_1 = 'b[?~]M9Sd9J4'
        host_vars_0 = module_0.HostVars(host_vars_vars_1, host_vars_vars_1, str_1)
        var_0 = host_vars_0.__repr__()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\n    name: tree\n    type: notification\n    requirements:\n      - invoked in the command line\n    short_description: Save host events to files\n    version_added: "2.0"\n    options:\n        directory:\n            version_added: \'2.11\'\n            description: directory that will contain the per host JSON files. Also set by the ``--tree`` option when using adhoc.\n            ini:\n                - section: callback_tree\n                  key: directory\n            env:\n                - name: ANSIBLE_CALLBACK_TREE_DIR\n            default: "~/.ansible/tree"\n            type: path\n    description:\n        - "This callback is used by the Ansible (adhoc) command line option `-t|--tree`"\n        - This produces a JSON dump of events in a directory, a file for each host, the directory used MUST be passed as a command line option.\n'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = 'Jlp5..<\\'
        list_0 = [str_0, dict_0, str_0, str_0]
        int_0 = -350
        complex_0 = None
        bytes_0 = b'\xf8\xfb\xcdSA\xf0\xbdW\x991D'
        float_0 = -2658.94
        tuple_0 = (complex_0, bytes_0, float_0)
        host_vars_vars_0 = module_0.HostVarsVars(int_0, tuple_0)
        str_2 = 'h0^xn[tl"AFqVIH+.'
        host_vars_0 = module_0.HostVars(list_0, host_vars_vars_0, str_2)
        var_0 = host_vars_0.set_nonpersistent_facts(str_1, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        ansible_undefined_0 = module_1.AnsibleUndefined()
        ansible_undefined_1 = module_1.AnsibleUndefined()
        list_0 = []
        tuple_0 = None
        host_vars_0 = module_0.HostVars(list_0, ansible_undefined_0, tuple_0)
        str_0 = '\\bU\\(([^)]+)\\)'
        dict_0 = {str_0: tuple_0}
        var_0 = host_vars_0.set_host_variable(tuple_0, host_vars_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'GAP&X@\\KEZ%'
        list_0 = []
        host_vars_vars_0 = module_0.HostVarsVars(str_0, list_0)
        var_0 = host_vars_vars_0.__repr__()
        bytes_0 = b'BU[&\x8f\xc8>\xb3\xc1n\xf9N}'
        tuple_0 = (bytes_0,)
        float_0 = 2612.0193
        host_vars_vars_1 = module_0.HostVarsVars(tuple_0, float_0)
        bool_0 = False
        var_1 = host_vars_vars_1.__contains__(bool_0)
        bool_1 = True
        var_2 = host_vars_vars_0.__getitem__(bool_1)
        bytes_1 = b'rQG\t\x96\x19\x83\xdcs7\xf4H\xd3\xf7'
        float_1 = 0.0001
        host_vars_0 = module_0.HostVars(host_vars_vars_0, bytes_1, float_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'CeaQk%$}>Po:/4'
        int_0 = 660
        host_vars_vars_0 = module_0.HostVarsVars(str_0, int_0)
        str_1 = 'b[?~]M9Sd9J4'
        host_vars_0 = module_0.HostVars(host_vars_vars_0, host_vars_vars_0, str_1)
        var_0 = host_vars_0.__setstate__(host_vars_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 660
        int_1 = None
        host_vars_vars_0 = module_0.HostVarsVars(int_0, int_1)
        str_0 = 'b[?~]M9Sd9J4'
        host_vars_0 = module_0.HostVars(host_vars_vars_0, host_vars_vars_0, str_0)
        set_0 = set()
        var_0 = host_vars_0.__setstate__(set_0)
        dict_0 = None
        var_1 = host_vars_0.__setstate__(dict_0)
    except BaseException:
        pass