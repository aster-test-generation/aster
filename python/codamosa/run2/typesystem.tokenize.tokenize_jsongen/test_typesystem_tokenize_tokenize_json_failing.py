# Automatically generated by Pynguin.
import typesystem.tokenize.tokenize_json as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = 'ytjLA'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '[\nC$Ql4X\nBPyt+'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tokenizing_decoder_0 = module_0._TokenizingDecoder()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xcem\xf3\xa8\x8f\xc7j\x08\xfe\xf9'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xc3\xc1'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '{"": 1, "b": 2.0, "c "3", "":null, "e": tue, "fm false, `Oy [1, 2, 3K"h": }a":1, "b":2}}'
        any_0 = module_0.validate_json(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x9dt^&4\xabl\x85K\x91(\xb2%\x8aa\xe5N'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '4'
        field_0 = module_1.Field()
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'n,d`'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'forms/checkbox.html'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '{"a": 1, "b": 2.0, "c": "3", "d": null, "e": true, "f": false, "g": [1, 2, 3], "h": {a"W1, "b7:2}}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '{"a": , "b": 2.0, "": "3%, "d": null, "e": trxe, f": false, "g": [1, 2, 3], "h": {"a":1, "b":2}}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '{"a": 1, "b": 2.0, "c": "3",!"d": null, "e": true, "f"m false, "O": [1, 2, 3], "h": {a"E1, "b":2}}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '{"a": 1, "b": 2.0, "c": "3%, "d": null, "e": trxe, "f": false, "g": [1, 2, 3], "h": {"a":1, "b":2}}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '{"a": 1, "b": 2.0, "c": "3", "d": null, "e": true, "f": false, "g": [1, 2, 3], "h": {"a"1, "b":2}}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '['
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '{}'
        token_0 = module_0.tokenize_json(str_0)
        str_1 = '{'
        token_1 = module_0.tokenize_json(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '{"a": \n, "b": 2.0, "c": "3", "d": nul, "e": true, "" false, "O": [1, 24 3],"h": {a":1, "b":2}}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '{"a": "a", "b": "b"'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = "3E5[2&y 4GeR'In1Bf."
        field_0 = module_1.Field(title=str_0)
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '{"a": "a", "Gb": '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass