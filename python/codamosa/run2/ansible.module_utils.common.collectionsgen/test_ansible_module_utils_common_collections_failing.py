# Automatically generated by Pynguin.
import ansible.module_utils.common.collections as module_0

def test_case_0():
    try:
        bool_0 = False
        var_0 = module_0.count(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'KFVL}#z$PI15rE`7jR\tc'
        immutable_dict_0 = module_0.ImmutableDict()
        str_1 = '+GDPoYIq (Fy&'
        var_0 = module_0.is_string(str_1)
        var_1 = immutable_dict_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = 'Sc(i&ObZfa8\x0b"{~$\rH<'
        float_0 = -2366.939139
        dict_0 = {str_0: float_0, str_0: str_0, str_0: float_0}
        immutable_dict_0 = module_0.ImmutableDict(**dict_0)
        var_0 = immutable_dict_0.__len__()
        var_1 = module_0.count(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Archarm'
        str_1 = 'K<7~6/ >?_(6C'
        var_0 = module_0.is_iterable(str_0, str_1)
        dict_0 = {}
        immutable_dict_0 = module_0.ImmutableDict(**dict_0)
        var_1 = immutable_dict_0.__hash__()
        str_2 = "ap>M&U=C#C/?'#"
        var_2 = module_0.is_string(dict_0)
        str_3 = 'XZIB3u;:F2b +<\t!8'
        var_3 = immutable_dict_0.difference(str_3)
        var_4 = module_0.is_string(str_2)
        var_5 = immutable_dict_0.__len__()
        var_6 = immutable_dict_0.__repr__()
        list_0 = [var_4, var_3, immutable_dict_0, var_2]
        var_7 = module_0.count(list_0)
        immutable_dict_1 = module_0.ImmutableDict(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xdeN\x80\x97,\xbe\xd6\xca\xcb\xe0-9\x82\x13'
        dict_0 = {bytes_0: bytes_0}
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.union(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1.5
        list_0 = None
        set_0 = {list_0}
        str_0 = '3<XmDEU[;Etc]:kh(!n'
        dict_0 = {str_0: str_0, str_0: set_0, str_0: set_0}
        var_0 = module_0.count(dict_0)
        tuple_0 = (float_0, set_0)
        str_1 = 'pu'
        tuple_1 = (tuple_0, str_1)
        immutable_dict_0 = module_0.ImmutableDict()
        var_1 = immutable_dict_0.difference(tuple_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'P\t\xa6\xe6\xe3i\x16\x9f8\x9b\xdamo\xbf[\xf4\xecB'
        str_0 = '[6~v!HB'
        dict_0 = {str_0: bytes_0}
        str_1 = 'xSvj4!<J9%.i!=sUq`'
        dict_1 = {str_0: bytes_0, str_1: bytes_0, str_1: str_0}
        immutable_dict_0 = module_0.ImmutableDict(**dict_1)
        var_0 = immutable_dict_0.difference(dict_0)
        var_1 = module_0.count(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Error accessing plugin paths: %s'
        str_1 = ':S?H)/\x0cXh_/%FthY'
        str_2 = 'PUu$@O/RC/hY'
        str_3 = "Z\x0ctA)'8|mK_x}#~8}"
        str_4 = None
        dict_0 = {str_0: str_0, str_0: str_1, str_2: str_1, str_3: str_4}
        list_0 = [dict_0, str_2, str_3, str_2]
        tuple_0 = (list_0,)
        int_0 = 1815
        var_0 = module_0.is_sequence(int_0)
        list_1 = [tuple_0, str_0]
        list_2 = [list_1, str_3, list_0]
        immutable_dict_0 = module_0.ImmutableDict(*list_2)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = None
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__eq__(tuple_0)
        float_0 = -133.321089
        var_1 = module_0.count(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = ()
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = module_0.is_string(tuple_0)
        var_1 = immutable_dict_0.difference(tuple_0)
        var_2 = module_0.is_iterable(tuple_0)
        immutable_dict_1 = module_0.ImmutableDict()
        list_0 = [immutable_dict_1]
        var_3 = immutable_dict_1.__eq__(list_0)
        var_4 = module_0.is_sequence(immutable_dict_1)
        var_5 = module_0.count(immutable_dict_1)
        str_0 = '4j\t0'
        var_6 = module_0.is_sequence(tuple_0, str_0)
        var_7 = immutable_dict_0.__repr__()
        bytes_0 = b'["\x1d\xdc\xa68'
        var_8 = module_0.is_string(bytes_0)
        int_0 = 32600
        var_9 = immutable_dict_1.union(int_0)
    except BaseException:
        pass