# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        str_0 = None
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        distribution_1 = module_0.Distribution(distribution_0)
        var_1 = module_0.get_uname(distribution_1)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -861.39336
        str_0 = '%qd)U$~XXhp'
        distribution_0 = module_0.Distribution(str_0)
        str_1 = "!:'&:@,\tl\n8Q7lw}("
        bytes_0 = b'?'
        set_0 = set()
        distribution_files_0 = module_0.DistributionFiles(set_0)
        var_0 = distribution_files_0.parse_distribution_file_Amazon(float_0, distribution_0, str_1, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'uCU,O'
        list_0 = None
        dict_0 = {}
        str_1 = ']R`3\to\x0bb6`e'
        bool_0 = True
        distribution_files_0 = module_0.DistributionFiles(bool_0)
        var_0 = distribution_files_0.parse_distribution_file_NA(str_0, list_0, dict_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xc7_\x9d0C\xa5\x153q\xe0\xb7\x0fR\x80W'
        int_0 = 674
        distribution_0 = module_0.Distribution(int_0)
        bool_0 = False
        distribution_files_0 = module_0.DistributionFiles(bool_0)
        float_0 = None
        bytes_1 = b'*\xd8\x02\x94\n\xb4F'
        distribution_files_1 = module_0.DistributionFiles(bytes_1)
        var_0 = distribution_files_1.parse_distribution_file_ClearLinux(bytes_0, distribution_0, distribution_files_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'flatcar'
        list_0 = [str_0, str_0, str_0, str_0]
        str_1 = 'dqb%#0X\n72 '
        distribution_0 = module_0.Distribution(str_1)
        bool_0 = True
        int_0 = 19
        distribution_fact_collector_0 = module_0.DistributionFactCollector(bool_0, int_0)
        dict_0 = {distribution_0: distribution_fact_collector_0, bool_0: str_0, str_0: list_0}
        distribution_files_0 = module_0.DistributionFiles(str_0)
        var_0 = distribution_files_0.parse_distribution_file_CentOS(distribution_0, list_0, dict_0, int_0)
        list_1 = [list_0, list_0, str_0, list_0]
        distribution_1 = module_0.Distribution(list_1)
        bool_1 = False
        var_1 = distribution_files_0.parse_distribution_file_Flatcar(list_0, list_0, str_0, bool_1)
        var_2 = distribution_1.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        var_1 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = None
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        dict_0 = None
        str_0 = ''
        var_0 = distribution_files_0.parse_distribution_file_Coreos(dict_0, str_0, bytes_0, dict_0)
        distribution_0 = module_0.Distribution(bytes_0)
        var_1 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 1830.65
        str_0 = ":xxdjo.}f'U=Dw6\r,t("
        list_0 = [float_0, str_0, str_0, str_0]
        int_0 = 662
        distribution_files_0 = module_0.DistributionFiles(int_0)
        var_0 = distribution_files_0.parse_distribution_file_Mandriva(float_0, str_0, float_0, list_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        int_1 = -359
        str_1 = '\n'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_files_1 = module_0.DistributionFiles(distribution_fact_collector_0)
        var_1 = distribution_files_1.parse_distribution_file_Flatcar(int_1, list_0, list_0, str_1)
        var_2 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '?4\\%);e'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 1830.65
        str_0 = ":xxdjo.}f'U=Dw6\r,t("
        list_0 = [float_0, str_0, str_0, str_0]
        int_0 = 662
        distribution_files_0 = module_0.DistributionFiles(int_0)
        var_0 = distribution_files_0.parse_distribution_file_Mandriva(float_0, str_0, float_0, list_0)
        str_1 = '\x0c<}i\x0b5'
        str_2 = 'nB3xFEZ4W@r~Xt6oB=s'
        var_1 = distribution_files_0.parse_distribution_file_Slackware(str_1, str_2, float_0, float_0)
        distribution_0 = module_0.Distribution(list_0)
        var_2 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 1340.807
        distribution_files_0 = module_0.DistributionFiles(float_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        var_0 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0}
        distribution_0 = module_0.Distribution(dict_0)
        var_0 = distribution_0.get_distribution_facts()
        var_1 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        float_0 = -5439.1857
        distribution_files_0 = module_0.DistributionFiles(float_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        bool_0 = False
        list_0 = [dict_0, dict_0, dict_0]
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        str_0 = 'ca_path'
        str_1 = 'get_platform_subclass'
        tuple_0 = ()
        str_2 = '-Z'
        var_1 = distribution_fact_collector_0.collect(tuple_0, str_2)
        distribution_1 = module_0.Distribution(str_1)
        distribution_files_1 = module_0.DistributionFiles(distribution_1)
        var_2 = distribution_files_1.parse_distribution_file_CentOS(bool_0, list_0, distribution_fact_collector_0, str_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector()
        var_3 = distribution_1.get_distribution_FreeBSD()
        var_4 = distribution_1.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -1705.11
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_files_0)
        var_0 = distribution_fact_collector_1.collect(float_0)
        dict_0 = {}
        bytes_0 = b"V^\x03+\x12T\x11\x12\x1fu\x02k'J\x93"
        var_1 = module_0.get_uname(dict_0, bytes_0)
    except BaseException:
        pass