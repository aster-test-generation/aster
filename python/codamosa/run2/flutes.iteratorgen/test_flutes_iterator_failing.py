# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        var_0 = module_0.scanr(dict_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 50
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(int_0)
        var_1 = module_0.scanr(int_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '%{{{pYAhSvJtMO_eogoX'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_3():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'"\x1e\xbf!N\xd3\x91\xc9{\x0c\xcbtnjU\xc2'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = list(lazy_list_0)
        str_0 = '\x0b>.e!Qr'
        dict_0 = {}
        tuple_0 = (str_0, dict_0)
        float_0 = -2865.03357
        list_0 = [lazy_list_0, var_0, lazy_list_0]
        map_list_0 = module_0.MapList(float_0, list_0)
        var_1 = map_list_0.__getitem__(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'"\x96\xac\xea\x8f"\xe3D\xb0\xaa}z'
        int_0 = -815
        bytes_1 = b'#B\xe9U\xa6#<x\xd5'
        iterator_0 = module_0.drop(int_0, bytes_1)
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = list(lazy_list_0)
        set_0 = {bytes_0, int_0}
        map_list_0 = module_0.MapList(set_0, bytes_1)
        var_1 = module_0.scanr(set_0, map_list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -2332
        float_0 = 0.1
        map_list_0 = module_0.MapList(int_0, float_0)
        iterator_0 = map_list_0.__iter__()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\nrX#lgU2u{F'
        str_1 = 'T%|*<'
        lazy_list_0 = module_0.LazyList(str_1)
        map_list_0 = module_0.MapList(str_0, lazy_list_0)
        int_0 = map_list_0.__len__()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'O=1=\x0cRKw%l'
        str_1 = 'GD[-<V*,8R\\hZYC'
        dict_0 = {str_0: str_0, str_1: str_1}
        tuple_0 = ()
        list_0 = [str_0]
        var_0 = module_0.scanr(dict_0, tuple_0, *list_0)
        var_1 = []
        iterator_0 = module_0.drop_until(var_1, var_1)
        var_2 = list(iterator_0)
        int_0 = [iterator_0, var_2, var_1, var_2]
        iterator_1 = module_0.drop_until(var_2, int_0)
        var_3 = list(iterator_1)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        lazy_list_0 = module_0.LazyList(list_0)
        tuple_0 = ()
        var_0 = lazy_list_0.__getitem__(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Register a container type as `non-mappable`, i.e., instances of the class will be treated as singleton objects in\n    :func:`map_structure` and :func:`map_structure_zip`, their contents will not be traversed. This would be useful for\n    certain types that subclass built-in container types, such as ``torch.Size``.\n\n    :param container_type: The type of the container, e.g. :py:class:`list`, :py:class:`dict`.\n    '
        lazy_list_0 = module_0.LazyList(str_0)
        list_0 = None
        list_1 = [list_0, list_0, list_0, list_0]
        range_0 = module_0.Range(*list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'L9#%5h,\ro3"2UdU$?'
        dict_0 = {}
        list_0 = [str_0, str_0, dict_0, dict_0]
        var_0 = module_0.scanr(str_0, dict_0, *list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        lazy_list_0 = module_0.LazyList(list_0)
        iterator_0 = None
        var_0 = lazy_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = []
        bool_0 = False
        iterator_0 = module_0.split_by(list_0, criterion=bool_0)
        list_1 = [list_0]
        lazy_list_0 = module_0.LazyList(list_1)
        int_0 = -164
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = []
        iterator_0 = module_0.drop_until(var_0, var_0)
        var_1 = list(iterator_0)
        int_0 = [var_0]
        iterator_1 = module_0.drop_until(var_1, int_0)
        var_2 = list(iterator_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 1
        iterator_0 = module_0.drop(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = None
        float_0 = 1718.12061
        int_0 = -2379
        list_0 = [float_0]
        iterator_0 = module_0.chunk(int_0, list_0)
        map_list_0 = module_0.MapList(float_0, iterator_0)
        lazy_list_0 = module_0.LazyList(map_list_0)
        var_0 = lazy_list_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -32
        int_1 = 2
        int_2 = 3
        int_3 = [int_0, int_1, int_2]
        iterator_0 = module_0.drop(int_0, int_3)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 1756
        bool_0 = True
        list_0 = [int_0, bool_0, int_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(bool_0)
        int_1 = range_0.__next__()
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 12
        var_0 = range(int_0)
        int_1 = 3
        var_1 = lambda x: x % int_1 == int_1
        iterator_0 = module_0.split_by(var_0, criterion=var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        str_0 = '\\'
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        iterator_1 = None
        lazy_list_0 = module_0.LazyList(iterator_1)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = []
        int_0 = 0
        iterator_0 = module_0.split_by(var_0, criterion=int_0)
        var_1 = list(iterator_0)
        var_2 = list(iterator_0)
        int_1 = 1
        int_2 = 2
        int_3 = [int_0, int_1, int_2]
        var_3 = lambda x: x <= int_0
        iterator_1 = module_0.split_by(int_3, criterion=var_3)
        var_4 = list(iterator_1)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 2
        int_1 = 6
        int_2 = 7
        str_0 = 'ut~\tFbzA:G/+Hi:\\L'
        dict_0 = {str_0: int_2, str_0: int_2}
        iterator_0 = module_0.split_by(str_0, criterion=dict_0, separator=int_1)
        str_1 = ' Split by: '
        bool_0 = True
        str_2 = '.'
        iterator_1 = module_0.split_by(str_1, bool_0, separator=str_2)
        var_0 = list(iterator_1)
        iterator_2 = module_0.split_by(iterator_0, separator=int_0)
        var_1 = list(iterator_2)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'm\xa8'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = list(lazy_list_0)
        var_1 = lazy_list_0.__getitem__(lazy_list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 5
        var_0 = range(int_0)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        int_1 = -1
        iterator_1 = module_0.take(int_1, var_0)
        var_2 = list(iterator_1)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = [str_0, str_1, str_2]
        lazy_list_0 = module_0.LazyList(str_3)
        int_0 = 0
        int_1 = 0
        var_0 = None
        var_1 = slice(int_1, var_0, var_0)
        var_2 = lazy_list_0.__getitem__(int_0)
        var_3 = lazy_list_0.__getitem__(var_1)
        str_4 = [str_0, str_1, str_2]
        lazy_list_1 = module_0.LazyList(str_4)
        int_2 = -1
        var_4 = lazy_list_1.__getitem__(int_2)
        str_5 = [str_0, str_1, str_2]
        lazy_list_2 = module_0.LazyList(str_5)
        bytes_0 = b'(\x83\r\xdc:\xe2~\xc9'
        var_5 = lazy_list_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 5
        int_1 = 1000000
        var_0 = range(int_1)
        int_2 = 0
        var_1 = range(int_2)
        iterator_0 = module_0.take(int_1, var_1)
        int_3 = -923
        bytes_0 = b'M\xff\xa2\x97\x8c\x95\xb3\x0b\xb9\x186\xe7\r\xd5[\xe1\xcf'
        str_0 = '|\x0bCP;a!a\\p$|A\x0b'
        bytes_1 = b'\x8e_\x851\xe5v*\xf1I\x12\xd3\x1e,\xbb\xcf'
        iterator_1 = module_0.split_by(bytes_0, criterion=str_0, separator=bytes_1)
        iterator_2 = module_0.chunk(int_3, iterator_1)
        var_2 = list(iterator_0)
        var_3 = range(int_2)
        iterator_3 = module_0.take(int_2, var_3)
        var_4 = list(iterator_3)
        int_4 = 10
        iterator_4 = module_0.take(int_4, int_0)
        var_5 = list(iterator_4)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 4
        var_0 = lambda s, x: x + s
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = 'd'
        str_4 = [str_0, str_1, str_2, str_3]
        var_1 = module_0.scanl(var_0, str_4)
        var_2 = list(var_1)
        var_3 = list(int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        float_0 = -147.762
        int_0 = 410
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(float_0)
        range_1 = module_0.Range()
    except BaseException:
        pass