# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        str_0 = ' |0Wy^*oA:hn'
        str_1 = module_0.strip_html(str_0)
        int_0 = -1912
        str_2 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "Ta_\n''c"
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '"zg)zQA*SGz\\Ix'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0c'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ':O+'
        int_0 = None
        str_1 = module_0.compress(str_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        str_1 = 'owLs)Pa'
        str_2 = 'H'
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = string_formatter_0.format()
        str_4 = module_0.decompress(str_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'8y\xe5\x9a'
        string_formatter_0 = module_0.__StringFormatter(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '((?<=[^\\s\\d]),(?=[^\\s\\d])|\\s,\\s|\\s,(?=[^\\s\\d])|\\s,(?!.)|(?<=[^\\s\\d.])\\.+(?=[^\\s\\d.])|\\s\\.+\\s|\\s\\.+(?=[^\\s\\d])|\\s\\.+(?!\\.)|(?<=\\S);(?=\\S)|\\s;\\s|\\s;(?=\\S)|\\s;(?!.)|(?<=\\S):(?=\\S)|\\s:\\s|\\s:(?=\\S)|\\s:(?!.)|(?<=[^\\s!])!+(?=[^\\s!])|\\s!+\\s|\\s!+(?=[^\\s!])|\\s!+(?!!)|(?<=[^\\s?])\\?+(?=[^\\s?])|\\s\\?+\\s|\\s\\?+(?=[^\\s?])|\\s\\?+(?!\\?)|\\d%(?=\\S)|(?<=\\d)\\s%\\s|(?<=\\d)\\s%(?=\\S)|(?<=\\d)\\s%(?!.))'
        str_1 = module_0.prettify(str_0)
        str_2 = '\x0c'
        int_0 = module_0.roman_decode(str_2)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        str_1 = module_0.reverse(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '?*,\r.S*)|({!7n;'
        str_1 = module_0.strip_margin(str_0)
        str_2 = module_0.asciify(str_0)
        str_3 = '0'
        var_0 = module_0.camel_case_to_snake(str_3)
        int_0 = None
        string_formatter_0 = module_0.__StringFormatter(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        var_0 = module_0.camel_case_to_snake(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        str_1 = module_0.strip_html(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 347
        str_0 = module_0.roman_encode(int_0)
        str_1 = 'nt=BP~HGO:fMbD\n'
        str_2 = module_0.snake_case_to_camel(str_1, str_1)
        str_3 = module_0.snake_case_to_camel(str_1)
        str_4 = module_0.strip_margin(str_2)
        str_5 = 'x(7K-*A'
        bool_0 = True
        str_6 = module_0.strip_html(str_5, bool_0)
        str_7 = module_0.roman_encode(str_3)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = 'g8=_$@\x0cbFgxC'
        str_3 = module_0.asciify(str_2)
        str_4 = None
        str_5 = module_0.strip_margin(str_4)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '-79_ S\x0c*J6\\\\1\rO;P|~'
        str_1 = module_0.reverse(str_0)
        str_2 = module_0.reverse(str_0)
        str_3 = None
        str_4 = module_0.snake_case_to_camel(str_3, str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'zNE}H[e;1&TBlWro'
        str_1 = module_0.shuffle(str_0)
        string_compressor_0 = module_0.__StringCompressor()
        str_2 = '1@CPN;T]!'
        bool_0 = module_0.booleanize(str_2)
        str_3 = module_0.compress(str_2)
        str_4 = '@@6vj'
        str_5 = module_0.strip_margin(str_2)
        str_6 = module_0.prettify(str_4)
        str_7 = None
        bool_1 = module_0.booleanize(str_7)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = "\\RVc'?H@s0/@@8p=Pu"
        str_1 = module_0.asciify(str_0)
        int_0 = 387
        str_2 = module_0.roman_encode(int_0)
        bool_0 = False
        str_3 = module_0.strip_html(str_0, bool_0)
        str_4 = 'DINERS_CLUB'
        str_5 = module_0.snake_case_to_camel(str_4, str_1)
        str_6 = 'G`j'
        str_7 = module_0.snake_case_to_camel(str_6)
        str_8 = module_0.strip_margin(str_6)
        bool_1 = True
        str_9 = '.!6UFElJQe/f9QE'
        str_10 = module_0.strip_html(str_9, bool_1)
        str_11 = module_0.prettify(str_1)
        bytes_0 = b'\x13u\xe6\x04\x8b\xb5i]4{\xc0\xdeL?F\xc8v{v\x1f'
        var_0 = module_0.camel_case_to_snake(bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        str_1 = module_0.shuffle(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 347
        str_0 = module_0.roman_encode(int_0)
        str_1 = 'nt=BP~HGO:fMbD\n'
        str_2 = module_0.snake_case_to_camel(str_1, str_1)
        str_3 = module_0.strip_margin(str_1)
        string_compressor_0 = module_0.__StringCompressor()
        str_4 = '1'
        str_5 = module_0.strip_margin(str_4)
        str_6 = '38RM1 <H$w}c\rS%'
        str_7 = module_0.compress(str_2, str_6, int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        str_0 = 'ehcW@yG?R'
        str_1 = module_0.compress(str_0)
        str_2 = 'z*U($\\YgDq_.P'
        str_3 = module_0.snake_case_to_camel(str_2)
        int_0 = -2374
        str_4 = module_0.compress(str_1, str_2, int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'xI'
        str_1 = module_0.asciify(str_0)
        int_0 = 892
        str_2 = module_0.roman_encode(int_0)
        str_3 = module_0.strip_html(str_0)
        str_4 = 'nt=BP~HGO:fMbD\n'
        bool_0 = True
        str_5 = module_0.snake_case_to_camel(str_4, bool_0)
        str_6 = '"'
        str_7 = module_0.strip_margin(str_6)
        str_8 = module_0.strip_html(str_7)
        str_9 = module_0.strip_margin(str_0)
        int_1 = module_0.roman_decode(str_4)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = "\\RVc'?H@s0/@@8p=Pu"
        str_1 = module_0.asciify(str_0)
        int_0 = 347
        str_2 = module_0.roman_encode(int_0)
        str_3 = '!)Lk<)V$S~k'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = module_0.strip_margin(str_4)
        str_6 = module_0.strip_html(str_5)
        str_7 = 'h(P \x0c=>Iv$uE\x0bFxvf'
        str_8 = module_0.strip_margin(str_7)
        str_9 = module_0.slugify(str_1)
        str_10 = 'I'
        int_1 = module_0.roman_decode(str_10)
        int_2 = module_0.roman_decode(str_3)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'RIGHT_SPACE'
        bool_0 = False
        str_1 = 'zZ"~J\\'
        str_2 = module_0.slugify(str_1)
        str_3 = module_0.snake_case_to_camel(str_0, bool_0)
        str_4 = module_0.shuffle(str_0)
        str_5 = module_0.strip_html(str_0)
        float_0 = 2221.4
        string_formatter_0 = module_0.__StringFormatter(float_0)
    except BaseException:
        pass

def test_case_24():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        str_0 = '@CPN;T]!'
        bool_0 = module_0.booleanize(str_0)
        str_1 = module_0.compress(str_0)
        str_2 = module_0.strip_margin(str_0)
        str_3 = module_0.prettify(str_1)
        str_4 = None
        str_5 = 'S9:Q9\\=]'
        str_6 = module_0.slugify(str_4, str_5)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = "\\RVc'?H@s0/@@8p=Pu"
        str_1 = module_0.asciify(str_0)
        str_2 = 'nt=BP~HGO:fMbD\n'
        str_3 = module_0.snake_case_to_camel(str_2, str_2)
        str_4 = module_0.strip_margin(str_0)
        bool_0 = None
        str_5 = module_0.strip_html(str_3, bool_0)
        str_6 = '-JL|H#hD?tYpS-0p'
        str_7 = module_0.strip_margin(str_6)
        str_8 = '-T6en%SVW-^Se-=dd'
        int_0 = module_0.roman_decode(str_8)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = "\\RVc'?H@s0/@@8p=Pu"
        str_1 = module_0.asciify(str_0)
        int_0 = 347
        str_2 = module_0.roman_encode(int_0)
        str_3 = ''
        bool_0 = False
        str_4 = module_0.strip_html(str_3, bool_0)
        str_5 = module_0.strip_html(str_4)
        str_6 = module_0.strip_margin(str_5)
        str_7 = module_0.compress(str_4)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = "\\RVc'?H@s0/@@8p=Pu"
        str_1 = module_0.asciify(str_0)
        int_0 = 347
        str_2 = module_0.roman_encode(int_0)
        str_3 = 'nt=BP~HGO:fMbD\n'
        str_4 = module_0.snake_case_to_camel(str_3, str_3)
        str_5 = module_0.strip_margin(str_0)
        str_6 = module_0.strip_margin(str_2)
        str_7 = "=\rC`[M{n'\r. \x0c)"
        str_8 = module_0.strip_html(str_7)
        str_9 = 'LMl_\r+#mwR9E$)'
        int_1 = None
        str_10 = module_0.compress(str_9, str_0, int_1)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = "\\RVc'?H@s0/@@8p=Pu"
        str_1 = module_0.asciify(str_0)
        int_0 = 5171
        str_2 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = "\\RVc'?H@s0/@@8p=Pu"
        str_1 = module_0.asciify(str_0)
        int_0 = 387
        str_2 = module_0.roman_encode(int_0)
        bool_0 = False
        str_3 = module_0.strip_html(str_0, bool_0)
        str_4 = 'DINERS__CLUB'
        str_5 = module_0.snake_case_to_camel(str_4, str_1)
        str_6 = module_0.strip_margin(str_3)
        bool_1 = True
        str_7 = '.!6UFElJQe/f9QE'
        str_8 = module_0.strip_html(str_7, bool_1)
        str_9 = module_0.prettify(str_1)
        str_10 = module_0.shuffle(str_2)
        str_11 = 'vSX'
        int_1 = module_0.roman_decode(str_11)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '9O\\-+]uS)&Z\t('
        str_1 = module_0.reverse(str_0)
        str_2 = "\\RVc'?H@s0/@@8p=Pu"
        int_0 = 387
        str_3 = module_0.roman_encode(int_0)
        bool_0 = False
        str_4 = module_0.strip_html(str_2, bool_0)
        str_5 = 'DINERS_CLUB'
        str_6 = module_0.snake_case_to_camel(str_5, str_1)
        str_7 = 'yjjyR"H\rYz|[zIm#i'
        str_8 = module_0.strip_margin(str_3)
        str_9 = module_0.strip_margin(str_7)
        bool_1 = True
        str_10 = '.!6UFElJQe/f9QE'
        str_11 = module_0.strip_html(str_10, bool_1)
        str_12 = module_0.prettify(str_6)
        var_0 = module_0.camel_case_to_snake(str_12)
        str_13 = module_0.shuffle(str_3)
        str_14 = 'vSX'
        int_1 = module_0.roman_decode(str_14)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = "\\RVc'?H@s0/@@8p=Pu"
        int_0 = 387
        str_1 = module_0.roman_encode(int_0)
        bool_0 = False
        str_2 = module_0.strip_html(str_0, bool_0)
        str_3 = 'DINERS_CLUB'
        str_4 = module_0.snake_case_to_camel(str_3, str_1)
        str_5 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
        str_6 = module_0.strip_margin(str_5)
        bool_1 = False
        str_7 = module_0.strip_html(str_1, bool_1)
        str_8 = module_0.prettify(str_5)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_9 = module_0.shuffle(str_1)
        bool_2 = module_0.booleanize(str_8)
        str_10 = 'vSX'
        int_1 = module_0.roman_decode(str_10)
    except BaseException:
        pass