# Automatically generated by Pynguin.
import ansible.utils.context_objects as module_0

def test_case_0():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        c_l_i_args_0 = module_0.CLIArgs(dict_0)
        c_l_i_args_1 = module_0.CLIArgs(c_l_i_args_0)
        str_0 = None
        set_0 = {c_l_i_args_0, c_l_i_args_1}
        float_0 = 563.5
        tuple_0 = (str_0, set_0, float_0, str_0)
        tuple_1 = (c_l_i_args_1, tuple_0)
        int_0 = False
        a_b_c_singleton_0 = module_0._ABCSingleton(tuple_1, dict_0, float_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -845.07538
        c_l_i_args_0 = module_0.CLIArgs(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1507.962731
        set_0 = {float_0}
        str_0 = '*E\x0c('
        str_1 = 'E1*(8x9'
        dict_0 = {str_0: set_0, float_0: str_1}
        c_l_i_args_0 = module_0.CLIArgs(dict_0)
        bytes_0 = b'\xfb\xc2M\xf9c\xbb\x0c@\xf8\xdcx\xb1\xaa+\x98\xa6'
        list_0 = [dict_0, bytes_0, float_0, float_0]
        str_2 = 'Y~\r"A" \r\rl'
        a_b_c_singleton_0 = module_0._ABCSingleton(set_0, list_0, set_0, str_2)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        float_0 = 1507.962731
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, float_0: float_0}
        c_l_i_args_0 = module_0.CLIArgs(dict_0)
        set_0 = {float_0, tuple_0}
        str_0 = '*E\x0c'
        str_1 = 'E1*(8x9'
        dict_1 = {str_0: set_0, float_0: str_1}
        c_l_i_args_1 = module_0.CLIArgs(dict_1)
        str_2 = 'Error while obtaining timestamp for time %s using format %s: %s'
        c_l_i_args_2 = module_0.CLIArgs(str_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'b'
        str_1 = 'c'
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = [int_0, int_1, int_2]
        int_4 = {str_1: int_3}
        int_5 = {str_0: int_4}
        int_6 = {str_1: int_5}
        c_l_i_args_0 = module_0.CLIArgs(int_6)
        c_l_i_args_1 = module_0.CLIArgs(c_l_i_args_0)
        str_2 = 'f'
        var_0 = c_l_i_args_1[str_2]
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        float_0 = 1507.962731
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, float_0: float_0}
        c_l_i_args_0 = module_0.CLIArgs(dict_0)
        set_0 = {float_0, c_l_i_args_0, tuple_0}
        str_0 = '*E\x0c'
        str_1 = 'E1*(8x9'
        dict_1 = {str_0: set_0, float_0: str_1}
        c_l_i_args_1 = module_0.CLIArgs(dict_1)
        str_2 = 'Error while obtaining timestamp for time %s using format %s: %s'
        c_l_i_args_2 = module_0.CLIArgs(str_2)
    except BaseException:
        pass