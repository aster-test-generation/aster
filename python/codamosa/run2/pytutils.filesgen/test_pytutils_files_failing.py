# Automatically generated by Pynguin.
import pytutils.files as module_0

def test_case_0():
    try:
        str_0 = 'R\'-8Aa\t!"NYZ|&'
        dict_0 = {}
        var_0 = module_0.burp(str_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'foo'
        complex_0 = None
        var_0 = module_0.burp(str_0, complex_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = '-'
        var_0 = module_0.burp(str_0, str_0, bool_0)
        float_0 = None
        set_0 = {var_0, float_0, var_0}
        list_0 = None
        list_1 = None
        tuple_0 = (set_0, float_0, list_0, list_1)
        bool_1 = False
        dict_0 = None
        var_1 = module_0.burp(float_0, tuple_0, bool_1, str_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = None
        var_1 = module_0.islurp(var_0, var_0)
        var_2 = [l for l in var_1]
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'test_file'
        var_0 = module_0.islurp(str_0, str_0)
        var_1 = [l for l in var_0]
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        bytes_0 = b'\x08\x08\x93h\x8d\xa1]b\xf4,\xba'
        int_0 = 520
        str_0 = 'v*KK{>B&[V`j@Og'
        var_0 = module_0.islurp(bytes_0, int_0, str_0)
        bytes_1 = b"\x9b\xd5)\x9cMn\x18\xe3\x8eD\\<y\xf5\xb7\xbd'>\xff\x8f"
        dict_0 = {bytes_1: tuple_0, tuple_0: bytes_1, tuple_0: bytes_1}
        str_1 = '_fmt'
        set_0 = {str_1, bytes_1}
        bytes_2 = b':\xfa\xca\x07\x91\xb2'
        bytes_3 = b'\xcb7\xf3'
        bool_0 = False
        set_1 = set()
        var_1 = module_0.burp(dict_0, set_0, bytes_2, bytes_3, bool_0, set_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '-'
        var_0 = module_0.islurp(str_0)
        var_1 = list(var_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '}'
        var_0 = module_0.islurp(str_0)
        var_1 = [l for l in var_0]
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = None
        var_1 = module_0.islurp(var_0, var_0, var_0, var_0, var_0)
        var_2 = [l for l in var_1]
    except BaseException:
        pass