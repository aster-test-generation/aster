# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        int_0 = 2031
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\tar'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'e\rqt+)'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        str_1 = 'aXA>]"O* 99'
        var_0 = invalid_pattern_0.__eq__(str_1)
        var_1 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.non_existent
    except BaseException:
        pass

def test_case_4():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getstate__()
        var_1 = lazy_regex_0.__getattr__(lazy_regex_0)
    except BaseException:
        pass

def test_case_5():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        invalid_pattern_0 = module_0.InvalidPattern(lazy_regex_0)
        var_0 = module_0.lazy_compile()
        invalid_pattern_1 = module_0.InvalidPattern(lazy_regex_0)
        str_0 = "This converts a 'from foo import bar' string into an import map.\n\n        :param from_str: The import string to process\n        "
        int_0 = 2
        dict_0 = {str_0: int_0, str_0: lazy_regex_0, str_0: invalid_pattern_0}
        var_1 = lazy_regex_0.__setstate__(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ' k'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = module_0.lazy_compile()
        var_1 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        bool_0 = False
        var_0 = module_0.finditer_public(list_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '";6N)j%F'
        int_0 = -3142
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        lazy_regex_0 = module_0.LazyRegex()
        invalid_pattern_1 = module_0.InvalidPattern(lazy_regex_0)
        list_0 = [str_0, str_0, str_0, str_0]
        invalid_pattern_2 = module_0.InvalidPattern(list_0)
        var_0 = invalid_pattern_2.__eq__(invalid_pattern_0)
        invalid_pattern_3 = module_0.InvalidPattern(str_0)
        var_1 = invalid_pattern_3.__unicode__()
    except BaseException:
        pass

def test_case_9():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        list_0 = [lazy_regex_0]
        var_0 = module_0.finditer_public(lazy_regex_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '$'
        str_1 = [str_0]
        str_2 = 'eventual'
        str_3 = 'True'
        str_4 = {str_2: str_3}
        lazy_regex_0 = module_0.LazyRegex(str_1, str_4)
        var_0 = lazy_regex_0.__getstate__()
        int_0 = 0
        str_5 = 'args'
        var_1 = var_0[str_5][int_0]
        str_6 = 'kwargs'
        var_2 = var_0[str_6][str_2]
        var_3 = lazy_regex_0.__setstate__(var_0)
        var_4 = lazy_regex_0._regex_args
        var_5 = var_0[lazy_regex_0]
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '~|y/i>4Su`\r3i.}Li^#I'
        dict_0 = {str_0: str_0}
        str_1 = 'xV,[Ec[\\Y>>bHFS5R-"+'
        dict_1 = {str_1: str_1}
        lazy_regex_0 = module_0.LazyRegex(dict_1)
        var_0 = lazy_regex_0.__getattr__(dict_0)
    except BaseException:
        pass