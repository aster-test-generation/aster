# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        str_0 = 'urldecode'
        module_args_parser_0 = module_0.ModuleArgsParser(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Test unit for the parse() method of the ModuleArgsParser class'
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '@NDfzfT%q{J'
        dict_0 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'lh'
        module_args_parser_0 = module_0.ModuleArgsParser()
        dict_0 = {str_0: str_0, str_0: module_args_parser_0}
        module_args_parser_1 = module_0.ModuleArgsParser(dict_0)
        float_0 = -426.8
        var_0 = module_args_parser_1.parse(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'H'
        str_1 = ';1]'
        dict_0 = {str_1: str_0, str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        float_0 = -426.8
        var_0 = module_args_parser_0.parse(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Test unit for the parse() method of the ModuleArgsParser class'
        str_1 = 'action'
        str_2 = {str_1: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'action'
        str_1 = 'args'
        str_2 = {str_0: str_0, str_1: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'action'
        bool_0 = None
        dict_0 = {str_0: bool_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'shelleho hello world1'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = 'local_action'
        str_3 = {str_2: str_2, str_2: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_3)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'action'
        str_1 = 'local_action'
        str_2 = 'hello'
        str_3 = 'shell echo hi'
        str_4 = {str_0: str_2, str_1: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 2
        var_0 = dict(a=int_0, b=int_0)
        str_0 = 'delegate_\nost'
        var_1 = dict(action=str_0, args=var_0, delegate_to=str_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_1)
        var_2 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'foobar action'
        int_0 = -301
        str_1 = 'delegate_host'
        var_0 = dict(action=str_0, args=int_0, delegate_to=str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass