# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'localhost'
    host_0 = module_0.Host()
    var_0 = host_0.__getstate__()
    str_1 = None
    host_1 = module_0.Host(str_1)
    group_0 = module_1.Group(str_0)
    var_1 = host_1.add_group(group_0)
    var_2 = host_1.remove_group(group_0)
    var_3 = host_1.get_groups()

def test_case_2():
    dict_0 = {}
    host_0 = module_0.Host()
    var_0 = host_0.__setstate__(dict_0)
    str_0 = "'RSO"
    str_1 = ',~)b'
    host_1 = module_0.Host(str_1)
    var_1 = host_1.get_vars()
    host_2 = module_0.Host(str_0)
    var_2 = host_1.get_name()

def test_case_3():
    str_0 = '?f*\x0cCK%'
    group_0 = module_1.Group()
    host_0 = module_0.Host(str_0)
    str_1 = '>/P'
    group_1 = module_1.Group(str_1)
    var_0 = host_0.add_group(group_1)
    var_1 = host_0.get_vars()
    var_2 = host_0.get_groups()
    var_3 = host_0.__ne__(host_0)

def test_case_4():
    str_0 = 'Ie5{zn]\rtuZ&r'
    bytes_0 = b'R"\xbd\xcbY\x15\x1c\x86\x83\x085oi\xb4\xf9\xc2\xbfx'
    host_0 = module_0.Host(bytes_0)
    var_0 = host_0.__ne__(str_0)

def test_case_5():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    host_0 = module_0.Host(tuple_1)
    str_0 = None
    float_0 = -836.45
    tuple_2 = (host_0, str_0, host_0, float_0)
    host_1 = module_0.Host(tuple_2)
    var_0 = host_1.__hash__()

def test_case_6():
    bool_0 = False
    host_0 = module_0.Host(bool_0)
    var_0 = host_0.get_groups()
    var_1 = host_0.populate_ancestors()
    var_2 = host_0.__str__()

def test_case_7():
    bool_0 = False
    host_0 = module_0.Host(bool_0)
    var_0 = host_0.get_groups()
    var_1 = host_0.__getstate__()
    bool_1 = False
    var_2 = host_0.__eq__(bool_1)
    host_1 = module_0.Host()
    var_3 = host_1.__str__()
    var_4 = host_0.populate_ancestors()
    var_5 = host_0.__repr__()
    var_6 = host_1.__getstate__()

def test_case_8():
    bool_0 = False
    host_0 = module_0.Host(bool_0)
    var_0 = host_0.get_groups()
    var_1 = host_0.populate_ancestors()
    host_1 = module_0.Host()
    var_2 = host_1.serialize()

def test_case_9():
    host_0 = module_0.Host()

def test_case_10():
    bool_0 = False
    host_0 = module_0.Host(bool_0)
    var_0 = host_0.get_groups()
    var_1 = host_0.populate_ancestors()

def test_case_11():
    group_0 = module_1.Group()
    host_0 = module_0.Host()
    var_0 = host_0.add_group(group_0)

def test_case_12():
    host_0 = module_0.Host()
    group_0 = module_1.Group()
    var_0 = host_0.add_group(group_0)
    var_1 = host_0.remove_group(group_0)

def test_case_13():
    list_0 = []
    host_0 = module_0.Host(list_0)
    bool_0 = True
    host_1 = module_0.Host(host_0, bool_0)

def test_case_14():
    str_0 = 'h@l'
    host_0 = module_0.Host(str_0)
    group_0 = module_1.Group(str_0)
    var_0 = host_0.add_group(group_0)
    var_1 = host_0.get_magic_vars()

def test_case_15():
    host_0 = module_0.Host()
    bytes_0 = b'\x9f\xa1\x8b\xc9Z\x95+N,'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    var_0 = host_0.remove_group(list_0)

def test_case_16():
    str_0 = 'h@l'
    host_0 = module_0.Host(str_0)
    group_0 = module_1.Group(str_0)
    var_0 = host_0.add_group(group_0)
    var_1 = host_0.get_magic_vars()
    var_2 = host_0.populate_ancestors()

def test_case_17():
    host_0 = module_0.Host()
    str_0 = '*al\te3'
    var_0 = host_0.set_variable(str_0, str_0)
    str_1 = 'key3'
    str_2 = {str_0: str_0}
    var_1 = host_0.set_variable(str_1, str_2)
    str_3 = {str_0: str_0}
    var_2 = host_0.set_variable(str_1, str_3)

def test_case_18():
    host_0 = module_0.Host()
    str_0 = 'key1'
    var_0 = host_0.set_variable(str_0, str_0)
    str_1 = 'value3'
    var_1 = host_0.set_variable(str_0, str_1)
    str_2 = 'key3'
    str_3 = 'zubkey1'
    str_4 = 'subvalue1'
    str_5 = {str_3: str_4}
    var_2 = host_0.set_variable(str_2, str_5)
    str_6 = 's|\x0cvalSe2'
    str_7 = {str_3: str_6}
    var_3 = host_0.set_variable(str_2, str_7)

def test_case_19():
    str_0 = 'host1'
    host_0 = module_0.Host(str_0)
    var_0 = host_0.populate_ancestors()
    var_1 = host_0.get_name()
    str_1 = 'group2'
    group_0 = module_1.Group(str_1)
    str_2 = 'group3'
    group_1 = module_1.Group(str_2)
    group_2 = module_1.Group(str_1)
    var_2 = group_0.add_child_group(group_1)
    var_3 = group_0.add_child_group(group_2)
    var_4 = host_0.add_group(group_2)

def test_case_20():
    host_0 = module_0.Host()
    str_0 = '/\\\x0ct9.[5C;x&${m()Z-Y'
    var_0 = host_0.__eq__(str_0)
    str_1 = 'key3'
    str_2 = 'zubkey1'
    var_1 = host_0.get_groups()
    str_3 = 'subvalue1'
    str_4 = {str_2: str_3}
    var_2 = host_0.set_variable(str_1, str_4)
    var_3 = host_0.set_variable(str_1, str_3)

def test_case_21():
    str_0 = 'h@l'
    host_0 = module_0.Host(str_0)
    group_0 = module_1.Group(str_0)
    var_0 = host_0.groups
    var_1 = len(var_0)
    var_2 = host_0.add_group(group_0)
    var_3 = host_0.get_magic_vars()
    var_4 = host_0.remove_group(group_0)
    var_5 = host_0.groups
    str_1 = 'gAoup2'
    group_1 = module_1.Group(str_1)
    str_2 = 'group3'
    var_6 = host_0.get_vars()
    group_2 = module_1.Group(str_2)
    var_7 = group_1.add_child_group(group_2)
    var_8 = host_0.add_group(group_2)
    var_9 = host_0.populate_ancestors()