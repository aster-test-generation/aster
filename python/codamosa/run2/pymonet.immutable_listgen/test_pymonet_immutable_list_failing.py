# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        immutable_list_0 = module_0.ImmutableList()
        bool_0 = immutable_list_0.__eq__(immutable_list_0)
        int_0 = -2051
        list_0 = [int_0, bool_0]
        immutable_list_1 = module_0.ImmutableList(int_0, list_0, bool_0)
        var_0 = immutable_list_1.__len__()
        callable_0 = None
        var_1 = None
        var_2 = immutable_list_0.append(var_1)
        int_1 = -1589
        bool_1 = True
        immutable_list_2 = module_0.ImmutableList(int_1, bool_1)
        var_3 = immutable_list_2.append(var_1)
        immutable_list_3 = module_0.ImmutableList(var_1)
        var_4 = immutable_list_3.filter(callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '/D'
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.unshift(str_0)
        int_0 = 912
        set_0 = {int_0, int_0, int_0, int_0}
        immutable_list_1 = module_0.ImmutableList(set_0)
        var_1 = immutable_list_1.__add__(var_0)
        str_1 = immutable_list_1.__str__()
        var_2 = None
        var_3 = immutable_list_1.__add__(var_2)
    except BaseException:
        pass

def test_case_2():
    try:
        immutable_list_0 = module_0.ImmutableList()
        bool_0 = immutable_list_0.__eq__(immutable_list_0)
        int_0 = -2051
        list_0 = [int_0, bool_0]
        immutable_list_1 = module_0.ImmutableList(int_0, list_0, bool_0)
        var_0 = immutable_list_1.__len__()
        var_1 = immutable_list_0.map(immutable_list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        '
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.__len__()
        callable_0 = None
        var_1 = None
        var_2 = immutable_list_0.reduce(callable_0, var_1)
        var_3 = immutable_list_0.reduce(callable_0, var_2)
        var_4 = immutable_list_0.reduce(callable_0, var_3)
        immutable_list_1 = module_0.ImmutableList()
        optional_0 = None
        optional_1 = immutable_list_0.find(optional_0)
        var_5 = immutable_list_1.filter(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        str_0 = 'yyh.7^e*mb~4Nl(r)W'
        dict_0 = {str_0: str_0, str_0: bool_0}
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_0 = immutable_list_0.append(dict_0)
        object_0 = module_1.object()
        bool_1 = immutable_list_0.__eq__(object_0)
        immutable_list_1 = module_0.ImmutableList(bool_0)
        var_1 = immutable_list_1.__len__()
        bytes_0 = b'\x0c\x95Z\xa1'
        bool_2 = True
        immutable_list_2 = module_0.ImmutableList(bytes_0, bool_2)
        var_2 = immutable_list_2.to_list()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -345
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.map(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        immutable_list_0 = module_0.ImmutableList()
        bool_0 = immutable_list_0.__eq__(immutable_list_0)
        int_0 = -2051
        list_0 = [int_0, bool_0]
        immutable_list_1 = module_0.ImmutableList(int_0, list_0, bool_0)
        var_0 = immutable_list_1.__len__()
        callable_0 = None
        var_1 = immutable_list_1.filter(callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        immutable_list_0 = module_0.ImmutableList()
        object_0 = module_1.object()
        var_0 = immutable_list_0.filter(object_0)
    except BaseException:
        pass

def test_case_8():
    try:
        callable_0 = None
        bytes_0 = b'\x07\x16\xc0\xbf\xd7z\xb7<\xba\xdbPg\xbaFU\x0b\x9d'
        immutable_list_0 = module_0.ImmutableList(bytes_0)
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'd&\xfc\xfb\x1au^\xd0#ew\x17\x86\xc5\xe5g\x87'
        var_0 = None
        bytes_1 = b'\xf7[\xd6\xc4\xda^9\x8a\x1c\x9fY\x98\x037\xf5\xd5N\xc2 \xf1'
        immutable_list_0 = module_0.ImmutableList(bytes_1)
        var_1 = immutable_list_0.reduce(bytes_0, var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        immutable_list_0 = module_0.ImmutableList()
        bool_0 = immutable_list_0.__eq__(immutable_list_0)
        int_0 = -2051
        list_0 = [int_0, bool_0]
        immutable_list_1 = module_0.ImmutableList(int_0, list_0, bool_0)
        callable_0 = None
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_11():
    try:
        immutable_list_0 = module_0.ImmutableList()
        bool_0 = immutable_list_0.__eq__(immutable_list_0)
        int_0 = -2051
        list_0 = [int_0, bool_0]
        immutable_list_1 = module_0.ImmutableList(int_0, list_0, bool_0)
        var_0 = immutable_list_1.__len__()
        callable_0 = None
        var_1 = immutable_list_1.map(callable_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        str_0 = 'yyh.7^e*mb~4l(r)W'
        dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0}
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_0 = immutable_list_0.append(dict_0)
        object_0 = module_1.object()
        bool_1 = immutable_list_0.__eq__(object_0)
        immutable_list_1 = module_0.ImmutableList(bool_0)
        var_1 = immutable_list_1.__len__()
        bytes_0 = b'\x0c\x95Z\xa1'
        bool_2 = True
        immutable_list_2 = module_0.ImmutableList(bytes_0, bool_2)
        callable_0 = None
        var_2 = None
        var_3 = immutable_list_2.reduce(callable_0, var_2)
    except BaseException:
        pass