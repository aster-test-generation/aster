# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0

def test_case_0():
    immutable_list_0 = module_0.ImmutableList()

def test_case_1():
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_0)

def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()

def test_case_3():
    var_0 = None
    bytes_0 = b'\xa8(M\xe1\xcf\xdc\x089\xdd\xe6\xd01\x85\xf5Z\xa2]\xee'
    int_0 = True
    immutable_list_0 = module_0.ImmutableList(int_0)
    var_1 = immutable_list_0.unshift(bytes_0)
    immutable_list_1 = module_0.ImmutableList()
    var_2 = immutable_list_1.__add__(var_1)
    immutable_list_2 = module_0.ImmutableList(var_0)

def test_case_4():
    bytes_0 = b'\x88'
    bool_0 = True
    str_0 = '\n        Take function Function(A) -> B and returns new Lazy with mapped result of Lazy constructor function.\n        Both mapper end constructor will be called only during calling fold method.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: Lazy with mapped value\n        :rtype: Lazy[Function() -> B)]\n        '
    immutable_list_0 = module_0.ImmutableList(str_0)
    var_0 = immutable_list_0.append(bool_0)
    immutable_list_1 = module_0.ImmutableList(bool_0)
    var_1 = immutable_list_1.to_list()
    var_2 = immutable_list_1.unshift(bytes_0)

def test_case_5():
    bytes_0 = b'=\x8b\xa1\x83\x7f\xdd\x84O(\x07>8)p\xa1\xd5\xeel'
    immutable_list_0 = module_0.ImmutableList()
    optional_0 = immutable_list_0.find(bytes_0)

def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()
    object_0 = None
    bool_0 = immutable_list_0.__eq__(object_0)