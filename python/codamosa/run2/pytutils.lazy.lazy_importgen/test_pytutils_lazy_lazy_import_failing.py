# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        bytes_0 = b'\x0c\x8c\x06}T8'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, bytes_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'YvUS_|*%'
        int_0 = 1802
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, int_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'msg'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        import_processor_0 = None
        dict_0 = {import_processor_0: import_processor_0, import_processor_0: import_processor_0}
        str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')\n    "
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_processor_0, str_0)
        var_0 = scope_replacer_0.__getattribute__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'yL\x90\x8dV[\xb9\xf9'
        tuple_0 = ()
        dict_0 = {}
        set_0 = {bytes_0}
        bytes_1 = b'\x80\x81\x1fL'
        list_0 = [dict_0]
        import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_1, list_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '5G874v!XbED{zVGk'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = b'\xd38\x15\x1c\xd9\x86#0\x96\xfb\x96uN'
        import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, str_0)
        var_0 = module_0.lazy_import(dict_0, import_replacer_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "        a = IllegalUseOfScopeR\rplacer('fwo', 'bar')\n \x0b      "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'szT;Z{}x'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = b'\xd38\x15\x1c\xd9\x86#0\x96\xfb\x96uN'
        import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, str_0, str_0)
        var_0 = module_0.lazy_import(dict_0, import_replacer_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 1608.0
        list_0 = [float_0, float_0, float_0, float_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(float_0, list_0)
        set_0 = set()
        var_0 = illegal_use_of_scope_replacer_0.__eq__(set_0)
        var_1 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'D8X)L;i'
        var_0 = module_0.disallow_proxying()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        var_2 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ' ng1Qr=O.\x0cnk\t3'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '3_We3(~2yjtU7rO;"F'
        var_0 = module_0.lazy_import(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'from bzrlib.lazy_import import ScopeReplacer as _ScopeReplacer'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "        a = IllegalUseOfScopeR\rplacer('fwo', 'ba')\n#\x0b      "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\n   from bzrlib import (\n       brath,\n        rrs,\n   <)\n    import bzrlib.osutis\n   '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\n    from bzrlib import (\n        branch,\n        errors,\n    )\n    import bzrlib.osutils\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass