# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        module_0.register()
        bytes_0 = b'ZnU\x03\xa5\xe9?\x1e}AlM\x93='
        int_0 = 1085
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        tuple_1 = module_0.encode(user_string_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'$\xba\x1dh\x18\x1bq\x14{+.'
        str_0 = 'R'
        tuple_0 = module_0.decode(bytes_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x0b\x8fF\x04\xfdb\xb6\x87\\4@E\x90Lmo'
        module_0.register()
        module_0.register()
        tuple_0 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'dummy'
        module_0.register()
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        module_0.register()
        str_0 = 'PU'
        tuple_0 = module_0.decode(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.register()
        str_0 = "Validate the given string is a proper identifier.\n\n    This validator will also raise an error if the given identifier is a\n    keyword or a builtin identifier.\n\n    Args:\n        identifier (:obj:`str` or :obj:`UserString <collections.UserString>`):\n            The value to be tested.\n        allow_underscore (:obj:`bool`, optional): A value of :obj:`False`\n            will raise an error when the ``identifier`` has a value that starts\n            with an underscore ``_``. (Use :obj:`False` when validating\n            potential :obj:`namedtuple <collections.namedtuple>` keys)\n            Defaults to: :obj:`True`.\n\n    Raises:\n        SyntaxError: If the given identifier is invalid.\n        TypeError: If the given identifier is not a :obj:`str` or\n            :obj:`UserString <collections.UserString>`.\n\n    :rtype: :obj:`None`\n\n    Example:\n        >>> from flutils.validators import validate_identifier\n        >>> validate_identifier('123')\n        SyntaxError: The given 'identifier', '123', cannot start with a number\n    "
        str_1 = 'mp<Wfd'
        bytes_0 = b'\xfew\xc2\x8b\x825\tT\xa1\xc6rF\xf1\x85\xa8@\x01'
        str_2 = "[zm;q'z@ALDy5|"
        dict_0 = {str_0: str_0, str_1: bytes_0, str_0: str_0, str_2: str_1}
        user_string_0 = module_1.UserString(dict_0)
        user_string_1 = module_1.UserString(user_string_0)
        tuple_0 = module_0.encode(user_string_1, user_string_0)
    except BaseException:
        pass