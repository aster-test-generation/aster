# Automatically generated by Pynguin.
import ansible.plugins.action.debug as module_0

def test_case_0():
    try:
        bytes_0 = b'\xf1f{\xafC\x90 *\xa8\xb7\x1e\xdeb\xc4{\x8a'
        set_0 = set()
        dict_0 = {bytes_0: bytes_0, bytes_0: set_0, bytes_0: set_0, bytes_0: set_0}
        list_0 = []
        list_1 = [set_0]
        tuple_0 = ()
        int_0 = 499
        action_module_0 = module_0.ActionModule(dict_0, list_0, list_1, tuple_0, int_0, set_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        bytes_0 = b'\xfb\xda\x9bu'
        bytes_1 = b''
        bytes_2 = b'*\x8a\x96'
        list_0 = [bool_0, bytes_2, bool_0]
        tuple_0 = (bytes_1, list_0)
        bool_1 = None
        list_1 = [bool_1, bool_1, bool_1, set_0]
        str_0 = 'PSRP CLOSE RUNSPACE: %s'
        int_0 = 1823
        str_1 = "Generate a string containing all valid chars as defined by ``characters``\n\n    :arg characters: A list of character specs. The character specs are\n        shorthand names for sets of characters like 'digits', 'ascii_letters',\n        or 'punctuation' or a string to be included verbatim.\n\n    The values of each char spec can be:\n\n    * a name of an attribute in the 'strings' module ('digits' for example).\n      The value of the attribute will be added to the candidate chars.\n    * a string of characters. If the string isn't an attribute in 'string'\n      module, the string will be directly added to the candidate chars.\n\n    For example::\n\n        characters=['digits', '?|']``\n\n    will match ``string.digits`` and add all ascii digits.  ``'?|'`` will add\n    the question mark and pipe characters directly. Return will be the string::\n\n        u'0123456789?|'\n    "
        action_module_0 = module_0.ActionModule(bool_0, str_1, set_0, int_0, set_0, list_1)
        float_0 = -2126.0
        action_module_1 = module_0.ActionModule(list_1, str_0, int_0, action_module_0, list_1, float_0)
        var_0 = action_module_1.run(bytes_0, tuple_0)
    except BaseException:
        pass