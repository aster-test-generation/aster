# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_1 = ansible_vault_encrypted_unicode_1.__unicode__()
        int_0 = 32602
        var_2 = ansible_vault_encrypted_unicode_1.__unicode__()
        var_3 = ansible_vault_encrypted_unicode_1.upper()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_4 = ansible_vault_encrypted_unicode_2.isdigit()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_5 = ansible_vault_encrypted_unicode_2.splitlines()
        var_6 = ansible_vault_encrypted_unicode_2.ljust(ansible_unicode_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\t1E@'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -3589.16717
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_1.__float__()
    except BaseException:
        pass

def test_case_3():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        bool_0 = True
        bytes_0 = b'\xe3]B\x85\x06N\xaclBl\xe6\x9f\xd0'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_base_y_a_m_l_object_0 = None
        bytes_0 = b'\x1a(\x037\xb5\xd8\x16\x02q\xaby;'
        dict_0 = {ansible_base_y_a_m_l_object_0: bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.lower()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.__le__(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "['[]', 1750, 1615.5645]"
        str_1 = '_[I$'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__eq__(str_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_1 = ansible_vault_encrypted_unicode_1.__ne__(ansible_mapping_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_2 = ansible_vault_encrypted_unicode_2.__eq__(ansible_vault_encrypted_unicode_2)
        tuple_0 = None
        var_3 = ansible_vault_encrypted_unicode_1.__ge__(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(ansible_mapping_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 0.1
        str_0 = 'Yn \\yjzn2&'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(float_0, float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalpha()
        float_0 = -137.1735
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_1.__add__(ansible_vault_encrypted_unicode_0)
        ansible_mapping_1 = module_0.AnsibleMapping()
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '(\'l\', "{\'l\'}", False, None)'
        str_1 = "\x0cF-\x0b#\\*^[']S8JJ:FT"
        str_2 = '$K;V:\nl\x0b\\,~'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        int_0 = 70
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_2.is_encrypted()
        var_1 = ansible_vault_encrypted_unicode_2.capitalize()
        set_0 = {var_0, var_1, var_0, int_0}
        var_2 = ansible_vault_encrypted_unicode_2.__mod__(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 163.1301
        bytes_0 = b'\xa9'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        list_0 = None
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_0 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        bytes_1 = b'\x13\x9e\xba\x90i1\xc5\rc\xd5\x94V\xdf'
        str_0 = 'u?uQST_#'
        list_1 = [float_0, str_0]
        var_1 = ansible_vault_encrypted_unicode_0.center(bytes_1, *list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        set_0 = {ansible_base_y_a_m_l_object_0}
        list_0 = [set_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0]
        int_0 = 530
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        bytes_0 = b'\xbc&O\\\xda0\xee*\xe2'
        var_0 = ansible_vault_encrypted_unicode_0.format_map(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_0.__lt__(list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalnum()
        float_0 = 1615.564483
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(ansible_vault_encrypted_unicode_1)
        ansible_sequence_1 = module_0.AnsibleSequence()
        bytes_0 = b'>\xb0\x05\xd6\xd0&\xec\xfd\xa2GrZ\xf9\x81'
        str_0 = 'v[U|I]r0(%Eppy"rs\']e'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_2.__lt__(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -722
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.casefold()
        str_0 = '\n- name: create a mysql user with a random password\n  mysql_user:\n    name: "{{ client }}"\n    password: "{{ lookup(\'password\', \'credentials/\' + client + \'/\' + tier + \'/\' + role + \'/mysqlpassword length=15\') }}"\n    priv: "{{ client }}_{{ tier }}_{{ role }}.*:ALL"\n\n- name: create a mysql user with a random password using only ascii letters\n  mysql_user:\n    name: "{{ client }}"\n    password: "{{ lookup(\'password\', \'/tmp/passwordfile chars=ascii_letters\') }}"\n    priv: \'{{ client }}_{{ tier }}_{{ role }}.*:ALL\'\n\n- name: create a mysql user with an 8 character random password using only digits\n  mysql_user:\n    name: "{{ client }}"\n    password: "{{ lookup(\'password\', \'/tmp/passwordfile length=8 chars=digits\') }}"\n    priv: "{{ client }}_{{ tier }}_{{ role }}.*:ALL"\n\n- name: create a mysql user with a random password using many different char sets\n  mysql_user:\n    name: "{{ client }}"\n    password: "{{ lookup(\'password\', \'/tmp/passwordfile chars=ascii_letters,digits,punctuation\') }}"\n    priv: "{{ client }}_{{ tier }}_{{ role }}.*:ALL"\n\n- name: create lowercase 8 character name for Kubernetes pod name\n  set_fact:\n    random_pod_name: "web-{{ lookup(\'password\', \'/dev/null chars=ascii_lowercase,digits length=8\') }}"\n\n- name: create random but idempotent password\n  set_fact:\n    password: "{{ lookup(\'password\', \'/dev/null\', seed=inventory_hostname) }}"\n'
        str_1 = '9n'
        var_1 = ansible_vault_encrypted_unicode_0.isprintable()
        dict_0 = {str_0: str_0, str_1: str_1}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_2 = ansible_vault_encrypted_unicode_1.isnumeric()
        var_3 = ansible_vault_encrypted_unicode_1.isupper()
        list_0 = [var_1, var_0, str_1]
        var_4 = ansible_vault_encrypted_unicode_0.rjust(list_0, *list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        bytes_0 = b''
        var_0 = ansible_vault_encrypted_unicode_0.isspace()
        var_1 = ansible_vault_encrypted_unicode_0.__contains__(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = None
        str_0 = 'W0@";lMM,/2CY\t\tyhE'
        set_0 = {list_0, str_0, list_0, str_0}
        str_1 = '\x0c1'
        dict_0 = {str_1: str_1}
        list_1 = [dict_0, str_1, str_1]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.upper()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_2.ljust(set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(ansible_unicode_0)
        bytes_0 = b'\xa9'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.is_encrypted()
        list_0 = None
        var_2 = ansible_vault_encrypted_unicode_1.__add__(list_0)
        list_1 = [var_0, list_0]
        dict_0 = None
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_3 = ansible_vault_encrypted_unicode_1.replace(list_1, ansible_vault_encrypted_unicode_2)
    except BaseException:
        pass

def test_case_17():
    try:
        list_0 = []
        float_0 = 100.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        ansible_sequence_0 = module_0.AnsibleSequence()
        float_0 = 2793.22713
        tuple_0 = (ansible_sequence_0, float_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.rindex(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = "Failed to parse https_proxy environment variable. Please make sure you export https proxy as 'https_proxy=<SCHEME>://<IP_ADDRESS>:<PORT>'"
        set_0 = {str_0, str_0, str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.rjust(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'roundrobin'
        bool_0 = False
        str_1 = 'V\nb&_'
        str_2 = 't-~BE9q|N=rg/I8'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__repr__()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_1 = ansible_vault_encrypted_unicode_2.startswith(str_0, bool_0)
        str_3 = 'You should manually specify use_backend to tell the module whether to use the yum (yum3) or dnf (yum4) backend})'
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(str_3)
        var_2 = ansible_vault_encrypted_unicode_3.isascii()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_3 = ansible_vault_encrypted_unicode_3.casefold()
        var_4 = ansible_vault_encrypted_unicode_4.islower()
        ansible_sequence_1 = module_0.AnsibleSequence()
        var_5 = ansible_vault_encrypted_unicode_3.__ge__(ansible_sequence_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'H{'
        bytes_0 = b'\xa9'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.isspace()
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_2 = ansible_vault_encrypted_unicode_1.strip(ansible_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_1.rstrip()
        var_4 = ansible_vault_encrypted_unicode_1.isalnum()
        list_0 = [ansible_vault_encrypted_unicode_0]
        var_5 = ansible_vault_encrypted_unicode_0.center(bytes_0, *list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '5"'
        dict_0 = {}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
        dict_1 = {}
        list_0 = [ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, dict_1, dict_1]
        list_1 = [ansible_base_y_a_m_l_object_0, list_0, list_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        float_0 = 594.0
        str_0 = 'True!'
        str_1 = 'T)I'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: float_0}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__len__()
        float_1 = 9.265
        var_1 = ansible_vault_encrypted_unicode_0.replace(ansible_vault_encrypted_unicode_0, float_1)
    except BaseException:
        pass

def test_case_24():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '(\'l\', "{\'l\'}", False, None)'
        str_1 = "\x0cF-\x0b#\\*^[']S8JJ:FT"
        str_2 = '$K;V:\nl\x0b\\,~'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_1.__ge__(ansible_vault_encrypted_unicode_0)
        int_0 = 70
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_1 = ansible_vault_encrypted_unicode_2.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_2.capitalize()
        set_0 = {var_1, var_2, var_1, int_0}
        var_3 = ansible_vault_encrypted_unicode_2.__mod__(set_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = 1000.0
        ansible_sequence_0 = module_0.AnsibleSequence()
        set_0 = None
        set_1 = {float_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.strip(set_0)
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: ansible_sequence_0}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_1 = ansible_vault_encrypted_unicode_2.__unicode__()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_2 = ansible_vault_encrypted_unicode_3.istitle()
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_3 = ansible_vault_encrypted_unicode_4.casefold()
        var_4 = ansible_vault_encrypted_unicode_4.index(float_0, float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = -395
        str_0 = 'd~A'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        dict_0 = {str_0: int_0, str_0: int_0, str_0: ansible_vault_encrypted_unicode_0, str_0: int_0}
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(dict_0)
        var_1 = ansible_vault_encrypted_unicode_0.find(int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_29():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_sequence_0 = module_0.AnsibleSequence()
        str_0 = '@z@aO]$^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.endswith(ansible_sequence_0)
    except BaseException:
        pass

def test_case_30():
    try:
        list_0 = None
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(list_0)
    except BaseException:
        pass

def test_case_31():
    try:
        float_0 = 2928.019
        str_0 = 'jv~vofo'
        list_0 = []
        str_1 = '\x0caMEHT]'
        str_2 = 'Y'
        dict_0 = {str_1: list_0, str_2: str_1}
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0, **dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__rmod__(str_0)
        list_1 = [float_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_1.casefold()
        var_2 = ansible_vault_encrypted_unicode_1.__hash__()
        var_3 = ansible_vault_encrypted_unicode_1.isprintable()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_4 = ansible_vault_encrypted_unicode_1.rfind(ansible_mapping_0)
    except BaseException:
        pass

def test_case_32():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.__hash__()
        bytes_0 = b'*qS\x8fy\x0e\xadl\xa2m\xb6\xcd\x96@A\x8a/t\xa6'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.isdecimal()
        str_0 = "W]Mcv%kM7!'@\\7~\tq"
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_1.isalnum()
        str_1 = 'DVd{UX v\\xLW._S3U'
        var_3 = ansible_vault_encrypted_unicode_0.__radd__(str_1)
        var_4 = ansible_vault_encrypted_unicode_2.isascii()
        int_0 = 250000
        var_5 = ansible_vault_encrypted_unicode_2.rstrip(int_0)
    except BaseException:
        pass

def test_case_33():
    try:
        float_0 = 2281.0
        str_0 = ':?\tfq'
        str_1 = 'U#%>F\'"mZ{G0\x0bZp]L,bb'
        str_2 = 'aOHTiX'
        dict_0 = {str_0: float_0, str_0: str_0, str_1: float_0, str_2: str_1}
        list_0 = [float_0, float_0, dict_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_2)
        var_1 = ansible_vault_encrypted_unicode_3.translate()
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'H{'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bytes_0 = b'\xbb\xfeb+\x90\x03Gq\xa0\xd0_'
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(bytes_0)
        list_0 = None
        var_1 = ansible_vault_encrypted_unicode_0.rstrip()
        var_2 = ansible_vault_encrypted_unicode_0.isalnum()
        var_3 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        dict_0 = {}
        var_4 = ansible_vault_encrypted_unicode_0.count(ansible_base_y_a_m_l_object_0, dict_0)
    except BaseException:
        pass

def test_case_35():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.swapcase()
        bytes_0 = b'\xc5\x00\xfa,]\x8d\x18yA\xc0\x06\x9e%\x05'
        var_1 = ansible_vault_encrypted_unicode_0.__add__(bytes_0)
        str_0 = 'PtfT&gHBeZl'
        var_2 = ansible_vault_encrypted_unicode_0.__mul__(str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 919
        set_0 = {int_0}
        float_0 = -2570.4
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.islower()
        str_0 = 'EcXQ7YLYux,JDMT\\'
        dict_0 = {str_0: int_0, str_0: set_0}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = ''
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__radd__(dict_0)
        bytes_0 = b'\xa9'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.is_encrypted()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bytes_1 = b'\xbb\xfeb+\x90\x03Gq\xa0\xd0_'
        var_2 = ansible_vault_encrypted_unicode_1.__ne__(bytes_1)
        list_0 = None
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_3 = ansible_vault_encrypted_unicode_2.strip(ansible_unicode_0)
        var_4 = ansible_vault_encrypted_unicode_2.rindex(str_0)
        var_5 = ansible_vault_encrypted_unicode_2.rstrip()
        var_6 = ansible_vault_encrypted_unicode_2.isalnum()
        var_7 = ansible_vault_encrypted_unicode_1.__add__(list_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        dict_1 = {}
        var_8 = ansible_vault_encrypted_unicode_1.count(ansible_base_y_a_m_l_object_0, dict_1)
    except BaseException:
        pass

def test_case_38():
    try:
        bytes_0 = b'\xa9'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        list_0 = []
        var_0 = ansible_vault_encrypted_unicode_0.partition(list_0)
    except BaseException:
        pass

def test_case_39():
    try:
        ansible_unicode_0 = None
        str_0 = 'g9|E<{3{%2_;'
        str_1 = '\\'
        set_0 = {ansible_unicode_0, str_0}
        str_2 = 'eN17o[=}-L{$'
        str_3 = None
        str_4 = 'nQ3'
        set_1 = set()
        dict_0 = {str_4: ansible_unicode_0, str_2: set_1}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        dict_1 = {str_2: str_1, str_3: ansible_sequence_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_0 = ansible_vault_encrypted_unicode_0.__hash__()
        tuple_0 = (set_0,)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        float_0 = 517.47324
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_2.__le__(ansible_vault_encrypted_unicode_1)
        str_5 = 'X{\n'
        dict_2 = {str_1: str_0, str_5: ansible_unicode_0, str_0: str_5}
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(dict_2)
        var_2 = ansible_vault_encrypted_unicode_3.encode()
    except BaseException:
        pass

def test_case_40():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        float_0 = 1749.61
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_1.rfind(ansible_vault_encrypted_unicode_0, list_0)
    except BaseException:
        pass