# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        int_0 = 1297
        int_1 = module_0.increase(int_0)
        list_0 = [callable_1]
        var_0 = module_0.compose(list_0, *list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1]
        var_0 = module_0.pipe(callable_1, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = None
        var_0 = module_0.cond(list_0)
        list_1 = [callable_1]
        var_1 = module_0.compose(list_1, *list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        float_0 = -98.296131
        set_0 = set()
        var_0 = module_0.curry(float_0, set_0)
        list_0 = [callable_0, callable_1, callable_1, callable_1, callable_0, callable_1]
        var_1 = module_0.compose(callable_1, *list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1]
        var_0 = module_0.compose(list_0, *list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        callable_1 = None
        tuple_0 = (callable_1, callable_0)
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.cond(list_0)
        str_0 = 'Maybe[T]'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_1 = [tuple_0, str_0, var_0]
        var_1 = module_0.compose(dict_0, *list_1)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        var_0 = module_0.cond(list_0)
        int_0 = None
        list_1 = [int_0, var_0]
        var_1 = module_0.compose(int_0, *list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        int_0 = None
        str_0 = '\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    '
        var_0 = module_0.curry(str_0, tuple_0)
        list_0 = [int_0, var_0]
        var_1 = module_0.compose(int_0, *list_0)
    except BaseException:
        pass