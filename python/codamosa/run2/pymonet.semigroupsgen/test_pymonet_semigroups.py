# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    pass

def test_case_1():
    set_0 = set()
    map_0 = module_0.Map(set_0)

def test_case_2():
    bool_0 = False
    all_0 = module_0.All(bool_0)
    sum_0 = module_0.Sum(all_0)
    str_0 = sum_0.__str__()

def test_case_3():
    str_0 = 'Maybe[None]'
    semigroup_0 = module_0.Semigroup(str_0)
    sum_0 = module_0.Sum(semigroup_0)
    tuple_0 = (sum_0,)
    first_0 = module_0.First(tuple_0)
    str_1 = 'wOQ`Px|T\x0c'
    one_0 = module_0.One(str_1)
    var_0 = one_0.concat(first_0)

def test_case_4():
    tuple_0 = ()
    last_0 = module_0.Last(tuple_0)
    sum_0 = None
    map_0 = module_0.Map(sum_0)
    bytes_0 = b"\x93\x04\x05S\x8e\xaa\x87z\x0bf8\x8d'\xbc\xab\xcf\t\xbf"
    max_0 = module_0.Max(bytes_0)
    first_0 = module_0.First(max_0)
    str_0 = first_0.__str__()
    str_1 = max_0.__str__()
    dict_0 = {}
    float_0 = -3785.391
    min_0 = module_0.Min(float_0)
    map_1 = module_0.Map(dict_0)
    min_1 = None
    var_0 = map_1.concat(min_1)

def test_case_5():
    float_0 = -571.3958
    one_0 = module_0.One(float_0)
    float_1 = 331.6
    dict_0 = {float_1: float_1}
    first_0 = module_0.First(dict_0)
    var_0 = first_0.concat(one_0)

def test_case_6():
    str_0 = '=!pH1|MU( '
    map_0 = module_0.Map(str_0)
    all_0 = module_0.All(map_0)
    list_0 = [all_0, str_0]
    all_1 = all_0.concat(all_0)
    float_0 = -536.12
    bool_0 = True
    semigroup_0 = module_0.Semigroup(bool_0)
    tuple_0 = (list_0, float_0)
    str_1 = all_0.__str__()
    min_0 = module_0.Min(tuple_0)
    str_2 = min_0.__str__()

def test_case_7():
    float_0 = -1953.8
    map_0 = module_0.Map(float_0)
    sum_0 = None
    map_1 = module_0.Map(sum_0)
    dict_0 = {}
    map_2 = module_0.Map(dict_0)
    min_0 = None
    var_0 = map_2.concat(min_0)

def test_case_8():
    int_0 = 7
    max_0 = module_0.Max(int_0)
    int_1 = 5
    max_1 = module_0.Max(int_1)
    var_0 = max_0.concat(max_1)
    max_2 = module_0.Max(int_0)
    var_1 = max_1.concat(max_0)
    max_3 = module_0.Max(int_0)

def test_case_9():
    float_0 = -1953.8
    map_0 = module_0.Map(float_0)
    tuple_0 = ()
    last_0 = module_0.Last(tuple_0)
    bytes_0 = b"\x93\x04\x05S\x8e\xaa\x87z\x0bf8\x8d'\xbc\xab\xcf\t\xbf"
    max_0 = module_0.Max(bytes_0)
    first_0 = module_0.First(max_0)
    str_0 = max_0.__str__()
    all_0 = module_0.All(tuple_0)
    one_0 = module_0.One(all_0)
    all_1 = all_0.concat(all_0)
    float_1 = -3785.391
    var_0 = one_0.concat(float_1)

def test_case_10():
    str_0 = 'a'
    str_1 = 'c'
    int_0 = 1
    sum_0 = module_0.Sum(int_0)
    sum_1 = module_0.Sum(int_0)
    int_1 = 2
    sum_2 = {str_0: sum_0, str_0: sum_1, str_1: sum_1}
    map_0 = module_0.Map(sum_2)
    sum_3 = module_0.Sum(int_1)
    sum_4 = module_0.Sum(int_1)
    sum_5 = module_0.Sum(int_1)
    sum_6 = {str_0: sum_3, str_1: sum_4, str_1: sum_5}
    map_1 = module_0.Map(sum_6)
    var_0 = map_0.concat(map_1)
    int_2 = 3
    sum_7 = module_0.Sum(int_2)
    sum_8 = module_0.Sum(int_2)
    int_3 = 4
    sum_9 = module_0.Sum(int_3)
    sum_10 = {str_0: sum_7, str_1: sum_8, str_1: sum_9}
    map_2 = module_0.Map(sum_10)
    var_1 = lambda value: value[str_0].value
    var_2 = lambda value: value[str_0].value
    var_3 = lambda value: value[str_1].value

def test_case_11():
    int_0 = 2
    min_0 = module_0.Min(int_0)
    int_1 = 3
    min_1 = module_0.Min(int_1)
    min_2 = module_0.Min(int_1)
    min_3 = module_0.Min(int_0)
    var_0 = min_0.concat(min_1)
    min_4 = module_0.Min(int_1)
    min_5 = module_0.Min(int_1)
    var_1 = min_1.concat(min_0)
    min_6 = module_0.Min(int_0)
    one_0 = module_0.One(min_1)
    max_0 = module_0.Max(one_0)