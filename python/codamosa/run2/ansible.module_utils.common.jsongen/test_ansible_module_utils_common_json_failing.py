# Automatically generated by Pynguin.
import ansible.module_utils.common.json as module_0

def test_case_0():
    try:
        float_0 = -4528.9436229133335
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(float_0)
        var_0 = ansible_j_s_o_n_encoder_0.encode(ansible_j_s_o_n_encoder_0)
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder()
        var_0 = ansible_j_s_o_n_encoder_0.default(ansible_j_s_o_n_encoder_0)
    except BaseException:
        pass

def test_case_2():
    try:
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder()
        var_0 = ansible_j_s_o_n_encoder_0.encode(ansible_j_s_o_n_encoder_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Failed to stat %s, %s'
        set_0 = {str_0, str_0, str_0}
        dict_0 = {str_0: str_0, str_0: set_0}
        str_1 = 'GPL-2.0-or-later'
        dict_1 = {str_0: dict_0, str_1: str_0}
        float_0 = 0.0001
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(float_0)
        var_0 = ansible_j_s_o_n_encoder_0.iterencode(dict_0, **dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 487.0
        list_0 = []
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(dict_0)
        var_0 = ansible_j_s_o_n_encoder_0.iterencode(list_0)
        bool_0 = True
        str_0 = ':'
        str_1 = '^"2@Sa-?\x0b4\n@_KT'
        str_2 = 'tF@d+\x0b|6\t$8\\M?\x0c7'
        bytes_0 = None
        dict_1 = {str_0: str_1, str_2: str_0, str_2: bytes_0}
        var_1 = ansible_j_s_o_n_encoder_0.iterencode(bool_0, **dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -426
        ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(int_0)
        bool_0 = True
        var_0 = ansible_j_s_o_n_encoder_0.iterencode(bool_0)
        str_0 = 'zn3<vV}'
        list_0 = [bool_0, ansible_j_s_o_n_encoder_0]
        bytes_0 = b'\xba'
        tuple_0 = (list_0, bytes_0)
        dict_0 = {str_0: var_0, str_0: str_0}
        var_1 = ansible_j_s_o_n_encoder_0.iterencode(tuple_0, **dict_0)
    except BaseException:
        pass