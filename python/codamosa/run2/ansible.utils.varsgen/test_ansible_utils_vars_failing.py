# Automatically generated by Pynguin.
import ansible.utils.vars as module_0
import ansible.errors as module_1

def test_case_0():
    try:
        str_0 = 'virtualenv_python should not be used when using the venv module or pyvenv as virtualenv_command'
        set_0 = {str_0}
        var_0 = module_0.combine_vars(set_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        str_0 = 'N<hIFI6eTjkdU'
        var_0 = module_0.load_options_vars(int_0)
        var_1 = module_0.load_extra_vars(str_0)
        bytes_0 = b'\xbd\r\xbe\x1d\xf6\xf4'
        ansible_options_error_0 = module_1.AnsibleOptionsError(bytes_0)
        list_0 = [bytes_0, int_0, bytes_0, var_0]
        var_2 = module_0.combine_vars(ansible_options_error_0, list_0, ansible_options_error_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        bytes_0 = b''
        var_0 = module_0.merge_hash(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -3697
        set_0 = None
        var_0 = module_0.load_options_vars(set_0)
        dict_0 = {int_0: int_0, int_0: int_0}
        bytes_0 = b'\x81\xf19\xdb\xbb\xf0e\xc1Y>v\xee%\x0c<\xa8&\x07'
        var_1 = module_0.merge_hash(int_0, dict_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = module_0.get_unique_id()
        bool_0 = False
        var_1 = module_0.load_options_vars(bool_0)
        str_0 = '$*-B;~\t'
        var_2 = module_0._isidentifier_PY3(str_0)
        str_1 = '+ufN\\-Zz)'
        var_3 = module_0._isidentifier_PY3(str_1)
        var_4 = module_0.get_unique_id()
        float_0 = 2.0
        var_5 = module_0.merge_hash(float_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'mJ'
        str_1 = 'ak2,\n\n{Ah}qD4GMTS'
        tuple_0 = None
        dict_0 = {str_0: str_1, tuple_0: str_0, str_1: str_0}
        list_0 = None
        var_0 = module_0.combine_vars(dict_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_0.get_unique_id()
        int_0 = 4542
        set_0 = set()
        var_1 = module_0.combine_vars(int_0, set_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'b'
        str_1 = 'c'
        str_2 = {str_0: str_1, str_1: str_1}
        str_3 = {str_1: str_1}
        bool_0 = False
        var_0 = module_0.merge_hash(str_2, str_3, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1
        int_1 = 2
        int_2 = {int_0: int_1}
        int_3 = {int_0: int_1}
        var_0 = module_0.merge_hash(int_2, int_3)
        int_4 = 0
        int_5 = {int_4: int_4}
        int_6 = {int_4: int_0}
        var_1 = module_0.merge_hash(int_5, int_6)
        int_7 = {int_4: int_4}
        var_2 = module_0.merge_hash(int_7, int_1)
    except BaseException:
        pass