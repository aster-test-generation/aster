# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'ls!}KDnl#L(b;\r&qx0h%'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()

def test_case_2():
    object_0 = module_1.object()
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)

def test_case_3():
    bool_0 = True
    bytes_0 = b'\xf1\x94\xc8?\xb5\xee\xf1\xc6\xd6\xec\x92\xfc9\xfa\xd8^\xf7\xd4\xad\xa6'
    bool_1 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_1)
    var_0 = maybe_0.bind(bool_0)

def test_case_4():
    bytes_0 = b'\xf6\xcb\x9b\x9b62'
    tuple_0 = (bytes_0,)
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_lazy()
    str_0 = None
    var_1 = maybe_0.ap(tuple_0)
    list_0 = [bool_0, bool_0, str_0]
    var_2 = maybe_0.map(list_0)

def test_case_5():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = None
    set_0 = {dict_0, dict_0, bool_0}
    callable_0 = None
    str_0 = '\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        '
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.map(callable_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(set_0, bool_1)
    var_1 = maybe_1.to_validation()
    dict_1 = {object_0: bool_0}
    bool_2 = True
    var_2 = None
    bool_3 = False
    maybe_2 = module_0.Maybe(var_2, bool_3)
    int_0 = 2028
    bool_4 = False
    maybe_3 = module_0.Maybe(str_0, bool_4)
    var_3 = maybe_3.get_or_else(int_0)
    maybe_4 = module_0.Maybe(dict_1, bool_2)
    str_1 = '\tW(%3nOd<h^*vhe'
    tuple_0 = (str_1,)
    var_4 = maybe_4.map(tuple_0)
    var_5 = maybe_4.to_either()
    var_6 = maybe_4.to_try()
    var_7 = maybe_4.ap(dict_0)
    maybe_5 = module_0.Maybe(object_0, bool_0)
    var_8 = maybe_5.to_box()
    var_9 = maybe_4.to_try()
    var_10 = maybe_5.to_either()

def test_case_6():
    bytes_0 = b'\xf6\xcb\x9b\x9b62'
    tuple_0 = (bytes_0,)
    bool_0 = True
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_lazy()
    str_0 = None
    var_1 = maybe_0.ap(tuple_0)
    bool_1 = True
    var_2 = maybe_0.get_or_else(bool_1)
    list_0 = [bool_0, bool_0, str_0]
    var_3 = maybe_0.map(list_0)

def test_case_7():
    int_0 = 5
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_either()
    bool_2 = False
    maybe_1 = module_0.Maybe(int_0, bool_2)
    bool_3 = True
    maybe_2 = module_0.Maybe(int_0, bool_3)
    maybe_3 = module_0.Maybe(int_0, bool_2)
    bool_4 = maybe_1.__eq__(maybe_1)
    bool_5 = maybe_1.__eq__(maybe_2)
    bool_6 = maybe_1.__eq__(maybe_3)

def test_case_8():
    str_0 = 'ls!}KDnl#L(b;\r&qx0h%'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_box()

def test_case_9():
    str_0 = '*#E\rJnvwPj~"=\x0cZgg\x0b|u'
    str_1 = "sz87\x0c'lH(`0]Uy"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_0 = maybe_1.to_lazy()

def test_case_10():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_lazy()

def test_case_11():
    str_0 = 'f\x0b1lmCDb`K\tKt:}'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()

def test_case_12():
    str_0 = '\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    '
    str_1 = ''
    set_0 = {str_1, str_0, str_0}
    bool_0 = None
    dict_0 = {str_0: str_0, str_1: set_0, str_0: bool_0}
    bool_1 = True
    maybe_0 = module_0.Maybe(dict_0, bool_1)
    var_0 = maybe_0.to_try()

def test_case_13():
    str_0 = ';eAY{$E(H'
    dict_0 = None
    tuple_0 = (str_0, dict_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_validation()

def test_case_14():
    float_0 = 1462.34295
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_0, bool_1)
    var_0 = maybe_0.to_validation()
    bool_2 = True
    maybe_1 = module_0.Maybe(float_0, bool_2)
    var_1 = maybe_1.to_try()
    list_0 = [var_0, float_0]
    tuple_0 = (list_0, float_0)
    var_2 = maybe_0.get_or_else(tuple_0)
    var_3 = maybe_1.to_try()

def test_case_15():
    int_0 = 5
    bool_0 = False
    bool_1 = True
    maybe_0 = module_0.Maybe(int_0, bool_1)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    bool_3 = maybe_1.__eq__(maybe_0)

def test_case_16():
    int_0 = 5
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    bool_2 = maybe_0.__eq__(maybe_0)
    bool_3 = maybe_0.__eq__(maybe_1)
    bool_4 = maybe_0.__eq__(maybe_2)