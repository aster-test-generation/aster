# Automatically generated by Pynguin.
import ansible.executor.task_result as module_0
import ansible.parsing.dataloader as module_1

def test_case_0():
    try:
        str_0 = '4`0L|.H!pY;d{'
        bytes_0 = b'\x89\xfe'
        int_0 = -3336
        list_0 = [str_0, bytes_0, int_0]
        task_result_0 = module_0.TaskResult(str_0, bytes_0, int_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = {}
        task_result_0 = module_0.TaskResult(var_0, var_0, var_0, var_0)
        var_1 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'testHost'
        str_1 = 'testTask'
        str_2 = 'testField'
        str_3 = 'testResult'
        task_result_0 = module_0.TaskResult(str_0, str_1, str_3, str_2)
        var_0 = task_result_0.is_failed()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2550
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
        task_result_0 = module_0.TaskResult(int_0, int_0, dict_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'name'
        str_1 = 'debugger'
        str_2 = 'test-debug'
        bool_0 = False
        str_3 = 'never'
        var_0 = {str_0: str_2, str_1: bool_0, str_1: str_3}
        str_4 = 'skipped'
        bool_1 = {str_4: bool_0}
        str_5 = 'test-host'
        var_1 = None
        task_result_0 = module_0.TaskResult(str_5, var_1, bool_1, var_0)
        var_2 = task_result_0.needs_debugger()
        task_result_1 = module_0.TaskResult(str_5, var_1, bool_1, var_0)
        task_result_2 = module_0.TaskResult(str_5, var_1, bool_0, var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'aWh>/`W+?08j`Iq<^H'
        str_1 = 'gnre_&rr)ors'
        str_2 = 'deug\rBe'
        str_3 = 'test-debug'
        bool_0 = True
        var_0 = {bool_0: str_1, str_0: str_3, str_1: bool_0, str_2: str_0, str_0: str_3}
        str_4 = 'results'
        str_5 = 'E|]"J/B"7oesg{=I8.l['
        bool_1 = {str_5: bool_0}
        str_6 = 'failed'
        bool_2 = {str_6: bool_0}
        bool_3 = [bool_1, bool_2, bool_1]
        bool_4 = {str_4: bool_3}
        var_1 = None
        task_result_0 = module_0.TaskResult(str_3, var_1, bool_4, var_0)
        str_7 = '5/Z)b_fVo'
        var_2 = task_result_0.needs_debugger(str_7)
        var_3 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'aWh>/W+?08j*`Iq<Up^H'
        str_1 = 'ignore_errors'
        data_loader_0 = module_1.DataLoader()
        float_0 = -1070.064
        str_2 = 'SVy\\p``XJ'
        str_3 = 'q/-IP='
        task_result_0 = module_0.TaskResult(data_loader_0, float_0, str_2, str_3)
        str_4 = 'deug\rBe'
        str_5 = 'test-debug'
        bool_0 = False
        var_0 = {bool_0: str_1, str_0: str_5, str_1: bool_0, str_4: str_0, str_0: str_5}
        str_6 = 'results'
        bool_1 = {str_6: bool_0}
        var_1 = None
        task_result_1 = module_0.TaskResult(str_5, var_1, bool_1, var_0)
        var_2 = task_result_1.is_skipped()
        str_7 = 'AL-:;&o[\\XtBJA].\\'
        var_3 = task_result_1.needs_debugger(str_7)
    except BaseException:
        pass