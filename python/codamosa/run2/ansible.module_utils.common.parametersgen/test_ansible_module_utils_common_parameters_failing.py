# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        float_0 = -1729.9008
        set_0 = {float_0}
        tuple_0 = ()
        var_0 = module_0.sanitize_keys(set_0, tuple_0)
        var_1 = module_0.remove_values(float_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ')nYB{9Z\\45H'
        int_0 = -2884
        dict_0 = {int_0: int_0}
        list_0 = [dict_0, dict_0, str_0]
        var_0 = module_0.remove_values(list_0, list_0)
        bytes_0 = b']\x88+\xfd5\t\xe1dV\x07YL'
        dict_1 = {str_0: dict_0, str_0: bytes_0}
        var_1 = module_0.sanitize_keys(int_0, dict_1)
        str_1 = None
        list_1 = [str_1, list_0, var_1, int_0]
        str_2 = 'R\\;p3/5v|FA5M ]Q?'
        var_2 = module_0.sanitize_keys(list_1, str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '24/i8Z^I\nz'
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2269
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        bytes_0 = b"6>\xc8i\x04\x15'\xb9\xa2|a\x0e\x1a-\x1byG\\\x87\xac"
        var_0 = module_0.set_fallbacks(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ')nYB{9Z\\45H'
        int_0 = -2884
        dict_0 = {int_0: int_0}
        list_0 = [dict_0, dict_0, str_0]
        var_0 = module_0.remove_values(list_0, list_0)
        str_1 = None
        var_1 = module_0.set_fallbacks(str_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1729.9008
        var_0 = module_0.remove_values(float_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '(:\ttKY\nnc;5mV4m'
        tuple_0 = ()
        dict_0 = {str_0: str_0, tuple_0: str_0, str_0: tuple_0}
        str_1 = 'nl'
        list_0 = [str_0]
        tuple_1 = (list_0,)
        str_2 = 'Q#R]JD~P[g? '
        dict_1 = {str_0: dict_0, str_2: tuple_0, str_1: tuple_1, str_2: tuple_0}
        list_1 = []
        var_0 = module_0.set_fallbacks(dict_1, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '_'
        str_1 = 'wpLuW'
        dict_0 = {str_0: str_0, str_1: str_0}
        list_0 = [str_0]
        var_0 = module_0.env_fallback(*list_0, **dict_0)
        str_2 = 'DB~#Ws0Pu'
        str_3 = 'Tu9VI'
        set_0 = set()
        var_1 = module_0.sanitize_keys(str_2, set_0)
        bytes_0 = b'\xe6"\x89$'
        str_4 = '\n    Hold a parsed copy of cli arguments\n\n    We have oth this non-Singleton version and the Singleton, GlobalCLIArgs, version to leave us\n    room to implement a Context object in the future.  Whereas there should only be one set ofargs\n    in a global context, individual Context objects might want to preted that they have different\n    command line switches to trigger different behaviour when they run.  So if we support Contexts\n    in the future, they would use CLIArgs instead of GlobalCLIArgs to store their version of command\n    line flags.\n    '
        bool_0 = True
        float_0 = None
        dict_1 = {str_4: bytes_0, str_2: float_0}
        list_1 = []
        var_2 = module_0.remove_values(dict_1, list_1)
        bool_1 = None
        list_2 = [bool_0, dict_1, bool_1]
        dict_2 = {bool_1: dict_1}
        var_3 = module_0.sanitize_keys(list_2, dict_2)
        bool_2 = False
        str_5 = '~Y)jOxa\x0b9D'
        var_4 = module_0.sanitize_keys(bool_2, str_5)
        var_5 = module_0.set_fallbacks(dict_2, set_0)
        bytes_1 = b'\x1c\xb2\x0b\x9eb\xb1)\xc2{\xf6\x063-ab\xd3P'
        int_0 = 1915
        var_6 = module_0.sanitize_keys(bytes_1, dict_1, int_0)
        set_1 = {bool_1}
        list_3 = [var_1, str_4, set_1]
        var_7 = module_0.sanitize_keys(list_3, list_3)
        var_8 = module_0.remove_values(int_0, str_3)
        var_9 = module_0.remove_values(list_3, str_2)
        var_10 = module_0.env_fallback(*list_1, **dict_1)
    except BaseException:
        pass