# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        int_0 = 1840
        str_0 = '<":dl<'
        bool_0 = True
        dict_0 = {bool_0: bool_0, int_0: bool_0, bool_0: int_0}
        validation_0 = module_0.Validation(dict_0, dict_0)
        var_0 = validation_0.is_success()
        validation_1 = module_0.Validation(str_0, bool_0)
        var_1 = validation_0.__eq__(validation_0)
        var_2 = validation_0.is_fail()
        var_3 = validation_0.is_fail()
        var_4 = validation_1.to_try()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x1a\x88\xe1p\x1aJ\xdb\x08Z\xe9}\x9d\xe7Q\x90\x8e\x9f\xdc'
        validation_0 = None
        set_0 = {bytes_0, validation_0, validation_0}
        list_0 = [set_0, validation_0, validation_0]
        validation_1 = module_0.Validation(validation_0, list_0)
        list_1 = []
        set_1 = set()
        validation_2 = module_0.Validation(list_1, set_1)
        var_0 = validation_2.__eq__(validation_1)
        float_0 = 1832.0
        bool_0 = True
        dict_0 = {bytes_0: bytes_0, bool_0: bytes_0, bytes_0: bytes_0}
        validation_3 = module_0.Validation(bytes_0, dict_0)
        var_1 = validation_3.__str__()
        tuple_0 = (bytes_0, float_0, bool_0, validation_3)
        str_0 = ''
        validation_4 = module_0.Validation(tuple_0, str_0)
        var_2 = validation_4.is_success()
        var_3 = validation_4.__str__()
        var_4 = validation_3.to_either()
        int_0 = 101
        var_5 = validation_3.map(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2476.78557
        tuple_0 = None
        dict_0 = {float_0: float_0, float_0: float_0}
        int_0 = -1651
        validation_0 = module_0.Validation(dict_0, int_0)
        validation_1 = module_0.Validation(validation_0, float_0)
        var_0 = validation_1.map(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2914
        str_0 = '\n        Two Lazy are equals where both are evaluated both have the same value and constructor functions.\n        '
        bool_0 = False
        validation_0 = module_0.Validation(str_0, bool_0)
        var_0 = validation_0.bind(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        int_0 = 1840
        str_0 = '<":dl<'
        bool_0 = True
        dict_0 = {bool_0: bool_0, int_0: bool_0, bool_0: int_0}
        validation_0 = module_0.Validation(dict_0, dict_0)
        var_0 = validation_0.is_success()
        validation_1 = module_0.Validation(str_0, bool_0)
        validation_2 = module_0.Validation(int_0, validation_1)
        var_1 = validation_1.__eq__(int_0)
        var_2 = validation_2.ap(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        str_0 = ''
        str_1 = 'YD@2'
        list_0 = []
        validation_0 = module_0.Validation(str_1, list_0)
        var_0 = validation_0.to_maybe()
        float_0 = 572.21663
        int_0 = -2333
        validation_1 = module_0.Validation(float_0, int_0)
        validation_2 = module_0.Validation(str_0, validation_1)
        var_1 = validation_2.bind(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'S:Q[X\x0b!7Pw7|'
        bytes_0 = b"<[K\xf4('~\xc1\xa20\x8d"
        str_1 = ',3}@Qa#b1*ao@ljsV!'
        int_0 = 254
        float_0 = 2860.90903
        validation_0 = module_0.Validation(int_0, float_0)
        var_0 = validation_0.to_lazy()
        int_1 = 2443
        dict_0 = {str_0: int_1, str_0: str_1, bytes_0: str_0, str_1: str_1}
        set_0 = {str_1}
        validation_1 = module_0.Validation(dict_0, set_0)
        var_1 = validation_1.to_box()
        var_2 = validation_1.to_either()
        tuple_0 = (str_1, int_1, bytes_0)
        validation_2 = module_0.Validation(bytes_0, tuple_0)
        var_3 = validation_2.map(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        bytes_0 = b'\xa7\xb8\xd7\x98cG\ti\x82\xb1'
        str_0 = 'Maybe[T]'
        validation_0 = module_0.Validation(bytes_0, str_0)
        validation_1 = module_0.Validation(bool_0, validation_0)
        var_0 = validation_1.to_try()
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\x1a\x88\xe1p\x1aJ\xdb\x08Z\xe9}\x9d\xe7Q\x90\x8e\x9f\xdc'
        validation_0 = None
        set_0 = {bytes_0, validation_0, validation_0}
        list_0 = [set_0, validation_0]
        validation_1 = module_0.Validation(validation_0, list_0)
        list_1 = []
        set_1 = set()
        validation_2 = module_0.Validation(list_1, set_1)
        var_0 = validation_2.__eq__(validation_1)
        bool_0 = True
        bytes_1 = b'\xc7R\xd6'
        dict_0 = {bytes_0: bytes_0, bool_0: bytes_0, bytes_0: bytes_1}
        validation_3 = module_0.Validation(bytes_1, dict_0)
        var_1 = validation_3.__str__()
        var_2 = validation_3.to_either()
        float_0 = 806.766
        var_3 = validation_0.map(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x1a\x88\xe1p\x1aJ\xdb\x08Z\xe9}\x9d\xe7Q\x90\x8e\x9f\xdc'
        validation_0 = None
        set_0 = {bytes_0, validation_0, validation_0}
        list_0 = [set_0, validation_0, validation_0]
        validation_1 = module_0.Validation(validation_0, list_0)
        list_1 = []
        set_1 = set()
        validation_2 = module_0.Validation(list_1, set_1)
        var_0 = validation_2.__eq__(validation_1)
        float_0 = 1832.0
        bool_0 = True
        var_1 = validation_1.__str__()
        tuple_0 = (bytes_0, float_0, bool_0, validation_2)
        str_0 = ''
        validation_3 = module_0.Validation(tuple_0, str_0)
        var_2 = validation_3.is_success()
        var_3 = validation_3.__str__()
        var_4 = validation_3.to_either()
        int_0 = 101
        var_5 = validation_1.map(int_0)
    except BaseException:
        pass