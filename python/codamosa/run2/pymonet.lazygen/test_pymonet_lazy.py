# Automatically generated by Pynguin.
import pymonet.lazy as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'V~tv@YZ\t]fI:\r'
    lazy_0 = module_0.Lazy(str_0)
    str_1 = lazy_0.__str__()

def test_case_2():
    object_0 = module_1.object()
    lazy_0 = module_0.Lazy(object_0)
    bool_0 = lazy_0.__eq__(object_0)

def test_case_3():
    callable_0 = None
    str_0 = '\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        '
    lazy_0 = module_0.Lazy(callable_0)
    var_0 = lazy_0.ap(str_0)
    list_0 = [var_0, lazy_0, str_0]
    var_1 = lazy_0.map(list_0)
    str_1 = lazy_0.__str__()
    lazy_1 = module_0.Lazy(callable_0)

def test_case_4():
    str_0 = "^|!k\x0c5sE'Vy2(lD=Ov*E"
    lazy_0 = module_0.Lazy(str_0)
    var_0 = lazy_0.bind(str_0)

def test_case_5():
    int_0 = 19
    lazy_0 = module_0.Lazy(int_0)
    lazy_1 = module_0.Lazy(int_0)
    var_0 = lazy_0.to_try()
    lazy_2 = module_0.Lazy(int_0)
    var_1 = lazy_2 == lazy_0

def test_case_6():
    int_0 = 1
    lazy_0 = module_0.Lazy(int_0)
    var_0 = lazy_0 == lazy_0

def test_case_7():
    var_0 = lambda *args: sum(args)
    lazy_0 = module_0.Lazy(var_0)
    int_0 = 2
    var_1 = lazy_0.to_maybe()
    var_2 = lambda *args: sum(args) ** int_0
    var_3 = lambda *args: mapper(lazy.get(*args))
    int_1 = False
    var_4 = lazy_0.map(int_1)
    lazy_1 = module_0.Lazy(var_3)
    var_5 = lazy_0.map(var_2)

def test_case_8():
    var_0 = lambda *args: sum(args)
    lazy_0 = module_0.Lazy(var_0)
    int_0 = 2
    var_1 = lazy_0.to_maybe()
    var_2 = lambda *args: sum(args) ** int_0
    var_3 = lambda *args: mapper(lazy.get(*args))
    list_0 = [var_2, var_2]
    var_4 = lazy_0.to_either(*list_0)
    int_1 = False
    var_5 = lazy_0.map(int_1)
    lazy_1 = module_0.Lazy(var_3)
    var_6 = lazy_0.map(var_2)