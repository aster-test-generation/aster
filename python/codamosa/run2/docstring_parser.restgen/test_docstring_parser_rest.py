# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n    This is a sample docstring.\n\n    :param foo: Foo\n    :param bar: Bar\n    :param foo_bar: Foo-bar\n    :param int|float|None foo:\n        Description of foo. Defaults to None.\n    :param int|float bar:\n        Description of bar.\n    :param int|float|None baz: Optional. Description of baz. Defaults to None.\n    :param int|None qux: Optional. Description of qux. Defaults to None.\n\n    :raises ValueError: if something bad happens\n    :raises AttributeError: if something else happens\n\n    :returns: a string telling you all about it\n    :rtype: str\n\n    :yields: a number of some sort\n    :rtype: int\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '#&|v7c9~&)ty*_}|q6L='
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = '\n    This is the short description\n    This is the long description\n    :param str input: input string\n    :returns: converted string\n    :raises: TypeError if input is not valid\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = 'Gets a value from a dictionary given its key.\n\n:param dictionary: Dictionary to get the value from.\n:param key: Key to get the value for.\n:raises: :exc:`KeyError` if the key is not in the dictioary.\n:returns: Value fr\nm the dictionary for the given key.'
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = '\n        Test docstring parsing.\n        :param str text: Input text.\n                         This is a second line of description.\n                         This is a third line of description.\n        :param optional(str) tag: Tag for the text.\n                                  This is a second line of description.\n        :returns: Parsed docstring.\n        :raises ValueError: If the text is empty.\n        :Yields: Message.\n        :Raises AttributeError: If text is a string.\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'This is a description for a function.\n:parameter str param: Description of the first parameter.\n:parameter int param2: Description of the second parameter.\n:returns output: Description of the return value.\n'
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '\n    Function for testing docstring parsing\n\n    :param str arg1: description of arg1\n    :param arg2: description of arg2\n    :param int? arg3: description of arg3\n    :returns: description of return value\n    :yields: description of yielded value\n    :raises ValueError: if error\n\n    This function does nothing useful\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    str_0 = '\n    This function does something complicated.\n    :optional: the input has some optional parts\n    :param int a: first parameter\n    :param b: second parameter, defaults to 10.\n    :param str? c: an optional string\n    :returns bool: True on success, False otherwise\n    :raises ValueError: when things go wrong\n    :yields int: each number in the sequence\n    '
    docstring_0 = module_0.parse(str_0)
    var_0 = docstring_0.meta
    var_1 = len(var_0)