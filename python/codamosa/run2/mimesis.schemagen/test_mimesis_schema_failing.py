# Automatically generated by Pynguin.
import mimesis.schema as module_0

def test_case_0():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = '8Ub#'
        set_0 = {abstract_field_0, abstract_field_0}
        any_0 = abstract_field_0.__call__(str_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        abstract_field_0 = module_0.AbstractField()
        var_0 = abstract_field_0.__str__()
        str_0 = ")2\t\\Q>',\x0c'VI"
        abstract_field_1 = module_0.AbstractField(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        schema_0 = module_0.Schema(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = 'Cv~3SrE=^hY0!)0BD`.'
        set_0 = {abstract_field_0, abstract_field_0}
        any_0 = abstract_field_0.__call__(str_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        abstract_field_0 = module_0.AbstractField()
        schema_0 = module_0.Schema(abstract_field_0)
        list_0 = schema_0.create()
    except BaseException:
        pass

def test_case_7():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = '}\\=$K.vHi\r'
        set_0 = {abstract_field_0, abstract_field_0}
        int_0 = -981
        schema_0 = module_0.Schema(abstract_field_0)
        list_0 = schema_0.create(int_0)
        any_0 = abstract_field_0.__call__(str_0, set_0)
    except BaseException:
        pass