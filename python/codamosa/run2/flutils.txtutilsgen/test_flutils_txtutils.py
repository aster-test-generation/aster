# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_2():
    bool_0 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_0)

def test_case_3():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()

def test_case_4():
    int_0 = 50987248
    str_0 = 'bdVow{U)HSz[z\ny'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_5():
    str_0 = 'ilk#'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_6():
    int_0 = 1749
    str_0 = ')\\;@Gd^ng"C'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_7():
    str_0 = 'HeykZz'
    list_0 = [str_0]
    int_0 = module_0.len_without_ansi(list_0)

def test_case_8():
    int_0 = -566
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    str_0 = " C*R?~./x'"
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_9():
    str_0 = 'o.j\x0cyE3#NR'
    int_0 = module_0.len_without_ansi(str_0)
    str_1 = 'bdVow{U\r)HSz[z\ny'
    str_2 = 'M'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_2)
    str_3 = ansi_text_wrapper_0.fill(str_1)
    str_4 = 'G=6]S'
    list_0 = ansi_text_wrapper_0.wrap(str_4)
    list_1 = ansi_text_wrapper_0.wrap(str_1)

def test_case_10():
    int_0 = -566
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    str_0 = 'fiu\n-<KK<t2t52*} '
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_11():
    str_0 = 'g'
    int_0 = 50987248
    str_1 = "n,/qz'%S"
    int_1 = module_0.len_without_ansi(str_1)
    bool_0 = True
    str_2 = 'M'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    str_3 = '3P6w^u,W-,\\JG?q5GHH\t'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_1, placeholder=str_2)
    list_0 = ansi_text_wrapper_0.wrap(str_3)
    str_4 = ansi_text_wrapper_1.fill(str_3)
    str_5 = 'G=6]S'
    list_1 = ansi_text_wrapper_0.wrap(str_5)
    list_2 = ansi_text_wrapper_1.wrap(str_4)
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(int_1, str_1, max_lines=int_1)
    list_3 = ansi_text_wrapper_2.wrap(str_0)

def test_case_12():
    str_0 = 'g'
    int_0 = module_0.len_without_ansi(str_0)
    str_1 = 'M'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_1)
    list_0 = ansi_text_wrapper_0.wrap(str_1)
    str_2 = ''
    list_1 = ansi_text_wrapper_0.wrap(str_2)

def test_case_13():
    str_0 = '\x1b[38;5;2l9mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_14():
    str_0 = 'g'
    int_0 = module_0.len_without_ansi(str_0)
    str_1 = 'M'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_1)
    str_2 = 'G=6AS`'
    list_0 = ansi_text_wrapper_0.wrap(str_2)

def test_case_15():
    str_0 = 'g'
    int_0 = module_0.len_without_ansi(str_0)
    str_1 = 'M'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_1)
    str_2 = '*DcMcDshLDW3\tv4D'
    list_0 = ansi_text_wrapper_0.wrap(str_2)

def test_case_16():
    int_0 = -551
    str_0 = "n/)z'%S"
    int_1 = module_0.len_without_ansi(str_0)
    str_1 = 'bdVow{U\r)HSz[z\ny'
    str_2 = ''
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    bool_0 = True
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_2)
    str_3 = ansi_text_wrapper_1.fill(str_1)
    str_4 = ''
    str_5 = ansi_text_wrapper_0.fill(str_4)

def test_case_17():
    int_0 = -551
    str_0 = "n/)z'%S"
    int_1 = module_0.len_without_ansi(str_0)
    str_1 = 'bdVow{U\r)HSz[z\ny'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_1)
    list_0 = ansi_text_wrapper_0.wrap(str_1)
    str_2 = 'M'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(max_lines=int_0)
    bool_0 = True
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_2)
    str_3 = ansi_text_wrapper_2.fill(str_1)
    str_4 = 'Parse the given tuple, with each row containing a :term:`foreign-name`\n    and return info needed for the cherry-picking-module.\n    '
    str_5 = ansi_text_wrapper_1.fill(str_4)

def test_case_18():
    str_0 = '\x0b6;y}'
    int_0 = 2541
    str_1 = '){K7^t'
    bool_0 = None
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_1, str_1, bool_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    str_2 = "n,/qz'%S"
    int_1 = module_0.len_without_ansi(str_2)
    bool_1 = True
    str_3 = ' '
    str_4 = '3P6w^u,W-,\\JG?q5GHH\t'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_1, max_lines=int_1, placeholder=str_3)
    list_1 = ansi_text_wrapper_0.wrap(str_4)
    str_5 = ansi_text_wrapper_1.fill(str_4)
    str_6 = 'setup.cfg'
    str_7 = ansi_text_wrapper_1.fill(str_6)
    str_8 = 'G=6]S'
    int_2 = module_0.len_without_ansi(list_1)
    list_2 = ansi_text_wrapper_0.wrap(str_8)
    list_3 = [str_3]
    int_3 = module_0.len_without_ansi(list_3)
    list_4 = ansi_text_wrapper_1.wrap(str_5)
    list_5 = ansi_text_wrapper_1.wrap(str_2)