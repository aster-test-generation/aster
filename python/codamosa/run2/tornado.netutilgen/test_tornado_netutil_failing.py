# Automatically generated by Pynguin.
import tornado.netutil as module_0
import concurrent.futures._base as module_1
import socket as module_2
import ssl as module_3
import tornado.ioloop as module_4

def test_case_0():
    try:
        int_0 = -820
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'E,w'
        default_executor_resolver_0 = module_0.DefaultExecutorResolver()
        list_0 = [str_0]
        resolver_0 = module_0.Resolver(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Body must be None for GET request'
        str_1 = 'name'
        resolver_0 = module_0.Resolver()
        resolver_0.close()
        resolver_1 = module_0.Resolver()
        resolver_1.close()
        str_2 = 'm@IMxn{K]f_~Y'
        int_0 = 599
        awaitable_0 = resolver_1.resolve(str_2, int_0)
        str_3 = 'y9lw)5'
        dict_0 = {str_1: str_0, str_3: str_1, str_0: str_1}
        threaded_resolver_0 = module_0.ThreadedResolver(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        blocking_resolver_0 = module_0.BlockingResolver()
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        threaded_resolver_0 = module_0.ThreadedResolver(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '9>(\t}'
        str_1 = ')3[.2L$]in`TidU'
        int_0 = 5309
        socket_0 = module_0.bind_unix_socket(str_1, int_0)
        s_s_l_context_0 = None
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\\0$"bUe"gEK4\\qXz(\'?='
        socket_0 = module_0.bind_unix_socket(str_0)
        bool_0 = False
        str_1 = ')wXruPpv+\\u\n65R\n'
        dict_0 = {str_1: bool_0, str_0: socket_0, str_1: bool_0}
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        executor_0 = module_1.Executor()
        socket_0 = module_2.socket()
        int_0 = 1141
        callable_0 = module_0.add_accept_handler(socket_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        str_1 = '::b'
        int_0 = 0
        list_0 = module_0.bind_sockets(int_0)
        var_0 = len(list_0)
        list_1 = module_0.bind_sockets(int_0, str_0)
        var_1 = len(list_1)
        list_2 = module_0.bind_sockets(int_0, str_0)
        var_2 = len(list_2)
        list_3 = module_0.bind_sockets(int_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'G/\tC\\'
        socket_0 = module_0.bind_unix_socket(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        bool_0 = module_0.is_valid_ip(str_0)
        s_s_l_context_0 = module_3.SSLContext()
        int_0 = 1559
        bool_1 = None
        list_0 = module_0.bind_sockets(int_0, bool_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'H'
        int_0 = None
        socket_0 = module_0.bind_unix_socket(str_0, int_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '.Kf>GFj.B|H}2]__#E'
        resolver_0 = module_0.Resolver()
        bool_0 = module_0.is_valid_ip(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 23
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'Returns ``True`` if the given string is a well-formed IP address.\n\n    Supports IPv4 and IPv6.\n    '
        int_0 = -2428
        address_family_0 = module_2.AddressFamily.AF_ROSE
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        awaitable_0 = override_resolver_0.resolve(str_0, int_0, address_family_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -1084
        str_0 = '}<}%B9OCYAaw7\x0bVf '
        address_family_0 = module_2.AddressFamily.AF_IPX
        bool_0 = False
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '::b'
        int_0 = 0
        list_0 = module_0.bind_sockets(int_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        default_executor_resolver_0 = module_0.DefaultExecutorResolver()
        dict_0 = {}
        str_0 = '7E%(D\x0b w="^N\''
        str_1 = ''
        str_2 = 'localhost'
        bool_0 = module_0.is_valid_ip(str_0)
        default_executor_resolver_1 = module_0.DefaultExecutorResolver()
        str_3 = '::aE9'
        socket_0 = module_0.bind_unix_socket(str_3)
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
        int_0 = 0
        bool_1 = module_0.is_valid_ip(str_3)
        list_0 = module_0.bind_sockets(int_0)
        var_0 = len(list_0)
        list_1 = module_0.bind_sockets(int_0, str_1)
        var_1 = len(list_1)
        list_2 = module_0.bind_sockets(int_0, str_2)
        var_2 = len(list_2)
        default_executor_resolver_2 = module_0.DefaultExecutorResolver()
        list_3 = module_0.bind_sockets(int_0, str_3)
    except BaseException:
        pass

def test_case_20():
    try:
        i_o_loop_0 = module_4.IOLoop()
        bool_0 = True
        executor_resolver_0 = module_0.ExecutorResolver()
        executor_resolver_0.initialize(i_o_loop_0, bool_0)
        executor_resolver_0.close()
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '\x0cE4'
        socket_0 = module_0.bind_unix_socket(str_0)
        str_1 = ']EZ+D'
        default_executor_resolver_0 = module_0.DefaultExecutorResolver()
        int_0 = -1413
        socket_1 = module_0.bind_unix_socket(str_1, int_0)
        i_o_loop_0 = module_4.IOLoop()
        int_1 = 1106
        str_2 = 'e59;Mdf:dYY_=G+\\'
        list_0 = default_executor_resolver_0.resolve(str_2, int_1)
        list_1 = default_executor_resolver_0.resolve(str_1, int_1)
        address_family_0 = module_2.AddressFamily.AF_SECURITY
        var_0 = socket_1.detach()
        list_2 = []
        executor_resolver_0 = module_0.ExecutorResolver(*list_2)
        list_3 = executor_resolver_0.resolve(str_1, int_0, address_family_0)
        i_o_loop_1 = i_o_loop_0.instance()
        int_2 = None
        list_4 = executor_resolver_0.resolve(str_1, int_2)
        i_o_loop_2 = i_o_loop_1.instance()
        var_1 = socket_1.set_inheritable(i_o_loop_2)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '?.h(bOf'
        socket_0 = module_0.bind_unix_socket(str_0)
        complex_0 = None
        default_executor_resolver_0 = module_0.DefaultExecutorResolver()
        list_0 = []
        i_o_loop_0 = module_4.IOLoop()
        awaitable_0 = i_o_loop_0.run_in_executor(complex_0, default_executor_resolver_0, *list_0)
        callable_0 = module_0.add_accept_handler(socket_0, awaitable_0)
        threaded_resolver_0 = module_0.ThreadedResolver()
        dict_0 = {str_0: str_0}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
    except BaseException:
        pass