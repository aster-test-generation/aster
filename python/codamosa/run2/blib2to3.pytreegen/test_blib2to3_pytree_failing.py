# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 671
        leaf_0 = None
        list_0 = [leaf_0, leaf_0, leaf_0]
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        leaf_0 = None
        list_0 = [leaf_0, leaf_0]
        node_pattern_0 = module_0.NodePattern(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_4():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'bz'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(dict_0)
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '^0)p`\x0bOK'
        grammar_0 = module_1.Grammar()
        int_0 = 13
        optional_0 = None
        tuple_0 = (int_0, str_0, optional_0, str_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2182
        str_0 = '&A-my"{%,0}Aq '
        list_0 = []
        leaf_0 = module_0.Leaf(int_0, str_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = -276
        str_0 = '\\*\\*=?'
        list_0 = [str_0]
        leaf_0 = module_0.Leaf(int_0, str_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        str_0 = ' lBDj'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'b'
        int_0 = 598
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match(str_0, wildcard_pattern_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -1356
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        str_0 = '\\d+(?:C\\d+)g[jJ]'
        int_0 = 5134
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 905
        str_0 = '[5Ob=u?I&'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -937
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 1563
        list_0 = []
        str_0 = 'i`\\'
        node_0 = module_0.Node(int_0, list_0, str_0, str_0)
        node_0.set_child(int_0, node_0)
    except BaseException:
        pass

def test_case_17():
    try:
        dict_0 = {}
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(dict_0)
        none_type_0 = None
        list_0 = [bool_0, bool_0]
        node_pattern_0 = module_0.NodePattern(none_type_0, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '{\r,7t(\r0'
        int_0 = 46
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        list_0 = []
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 1309
        node_0 = module_0.Node(int_0, list_0)
        node_0.insert_child(int_0, node_0)
    except BaseException:
        pass

def test_case_20():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 738
        str_0 = 'pa'
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        iterator_0 = None
        tuple_2 = (int_0, str_0, tuple_1, iterator_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_21():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -1109
        iterator_0 = None
        list_0 = []
        tuple_0 = (int_0, iterator_0, grammar_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_22():
    try:
        grammar_0 = module_1.Grammar()
        bytes_0 = b''
        dict_0 = {bytes_0: grammar_0}
        wildcard_pattern_0 = module_0.WildcardPattern(dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '\\d+(?:_\\d+)*[jJ]'
        negated_pattern_0 = module_0.NegatedPattern(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -936
        dict_0 = None
        wildcard_pattern_0 = module_0.WildcardPattern(int_0, int_0, dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'bz'
        int_0 = 2147483624
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, any_0, str_0)
        node_1 = node_0.clone()
        node_1.append_child(node_0)
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 2167
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = ''
        int_0 = 5165
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 5115
        leaf_pattern_0 = module_0.LeafPattern()
        grammar_0 = module_1.Grammar()
        str_0 = '@GCW.7{pK'
        int_1 = 3869
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '}h'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = -1938
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'Z_oIX{C<,7ez\t'
        int_0 = 483
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        list_1 = [node_0]
        node_1 = module_0.Node(int_0, list_1)
        node_2 = node_1.clone()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'bz'
        int_0 = 2147483647
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        list_1 = [node_0, node_0]
        node_1 = module_0.Node(int_0, list_1)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '0'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 3246
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        list_1 = [node_2, node_1]
        any_0 = wildcard_pattern_0.optimize()
        node_3 = module_0.Node(int_0, list_1, any_0, str_0)
        int_1 = -1711
        any_1 = wildcard_pattern_0.optimize()
        node_4 = module_0.Node(int_1, list_0, any_1)
    except BaseException:
        pass

def test_case_33():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -712
        str_0 = 'z{IsDrvS6=6<bmW'
        int_1 = 2175
        int_2 = 2180
        list_0 = []
        node_0 = module_0.Node(int_2, list_0)
        node_1 = node_0.clone()
        list_1 = [node_1]
        tuple_0 = (int_0, str_0, int_1, list_1)
        var_0 = module_0.convert(grammar_0, tuple_0)
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 256
        int_1 = 1
        str_0 = 'foo'
        leaf_0 = module_0.Leaf(int_1, str_0)
        str_1 = 'bar'
        leaf_1 = module_0.Leaf(int_1, str_1)
        leaf_2 = [leaf_0, leaf_1]
        node_0 = module_0.Node(int_0, leaf_2)
        iterator_0 = node_0.post_order()
        var_0 = list(iterator_0)
        leaf_3 = module_0.Leaf(int_1, str_0)
        leaf_4 = module_0.Leaf(int_1, str_1)
        var_1 = None
        node_1 = module_0.Node(int_0, var_1)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'z'
        int_0 = 1
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = [leaf_0]
        var_0 = {}
        bool_0 = leaf_pattern_0.match_seq(leaf_1, var_0)
        leaf_2 = module_0.Leaf(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 1
        str_0 = ''
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = [leaf_0, int_0, str_0]
        optional_0 = leaf_0.get_lineno()
        leaf_2 = [leaf_0]
        leaf_3 = [int_0, leaf_1, leaf_2, leaf_2, leaf_2]
        wildcard_pattern_0 = module_0.WildcardPattern(leaf_3, int_0, int_0, str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 1
        str_0 = ''
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = leaf_0.depth()
        leaf_1 = [leaf_0]
        leaf_2 = [leaf_1, leaf_1, leaf_1]
        wildcard_pattern_0 = module_0.WildcardPattern(leaf_2, int_0, int_0, str_0)
        leaf_3 = leaf_0.clone()
        any_0 = wildcard_pattern_0.optimize()
        iterator_0 = wildcard_pattern_0.generate_matches(leaf_3)
        var_0 = list(iterator_0)
    except BaseException:
        pass