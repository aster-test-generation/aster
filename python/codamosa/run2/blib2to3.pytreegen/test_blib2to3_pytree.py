# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 2200
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    int_0 = 8
    str_0 = '3+?|u`FD<x^'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_3():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_4():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_5():
    str_0 = '3UFbz'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_6():
    str_0 = '3bz'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_7():
    str_0 = 'b'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_8():
    grammar_0 = module_1.Grammar()
    bytes_0 = b'\xf3\x03QW\xe1'
    dict_0 = {bytes_0: grammar_0}
    wildcard_pattern_0 = module_0.WildcardPattern(dict_0)
    any_0 = wildcard_pattern_0.optimize()
    grammar_0.report()

def test_case_9():
    int_0 = 1
    str_0 = 'z'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    leaf_0 = None
    wildcard_pattern_1 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_1.optimize()
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_10():
    leaf_pattern_0 = module_0.LeafPattern()
    negated_pattern_0 = module_0.NegatedPattern()
    set_0 = {negated_pattern_0}
    bool_0 = negated_pattern_0.match_seq(set_0)

def test_case_11():
    str_0 = 'ze'
    int_0 = 2147483647
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    list_0 = []
    node_0 = module_0.Node(int_0, list_0, any_0, str_0)
    node_1 = node_0.clone()

def test_case_12():
    int_0 = 2200
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    str_0 = node_0.__str__()

def test_case_13():
    int_0 = 2773
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_14():
    int_0 = 756
    str_0 = 'uy{t.sI:w'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_15():
    int_0 = 1432
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_0.clone()
    node_2.insert_child(int_0, node_1)
    node_2.invalidate_sibling_maps()

def test_case_16():
    int_0 = 14
    str_0 = "|'\x0cPZc[=\\%KQ"
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    str_1 = leaf_1.__str__()

def test_case_17():
    str_0 = 'bz'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)

def test_case_18():
    int_0 = 1
    str_0 = 'b'
    str_1 = 'Lmkp]\x0ci'
    var_0 = None
    leaf_0 = module_0.Leaf(int_0, str_1, var_0, str_0)

def test_case_19():
    int_0 = 2200
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    optional_0 = node_0.remove()
    str_0 = node_0.__str__()

def test_case_20():
    int_0 = 16
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_0, str_1)
    iterator_0 = leaf_0.leaves()
    var_0 = list(iterator_0)
    iterator_1 = leaf_1.leaves()
    var_1 = list(iterator_1)

def test_case_21():
    str_0 = '6K'
    complex_0 = None
    leaf_pattern_0 = module_0.LeafPattern(complex_0, str_0)

def test_case_22():
    int_0 = 18
    str_0 = 'X$Km_3J;>ol KK\r'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.post_order()
    var_0 = list(iterator_0)

def test_case_23():
    int_0 = 1
    str_0 = 'b'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_24():
    int_0 = 0
    str_0 = 'value'
    var_0 = None
    var_1 = (var_0, var_0)
    var_2 = (var_0, var_1)
    leaf_0 = module_0.Leaf(int_0, str_0, var_2)
    iterator_0 = leaf_0.pre_order()
    var_3 = list(iterator_0)

def test_case_25():
    int_0 = 2200
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    optional_0 = node_0.get_lineno()

def test_case_26():
    str_0 = 'ze'
    int_0 = 1432
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    node_3 = node_2.clone()
    node_2.insert_child(int_0, node_1)
    node_3.invalidate_sibling_maps()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    node_2.update_sibling_maps()

def test_case_27():
    var_0 = []
    negated_pattern_0 = module_0.NegatedPattern()
    iterator_0 = negated_pattern_0.generate_matches(var_0)
    str_0 = 'hello'
    str_1 = [str_0]
    negated_pattern_1 = module_0.NegatedPattern()
    iterator_1 = negated_pattern_1.generate_matches(str_1)
    var_1 = [m for m in iterator_0]
    str_2 = 'world'
    str_3 = [iterator_1, str_2, negated_pattern_1]
    negated_pattern_2 = module_0.NegatedPattern()
    iterator_2 = negated_pattern_2.generate_matches(str_3)
    var_2 = [m for m in iterator_2]

def test_case_28():
    int_0 = 1
    str_0 = 'bare_name'
    int_1 = -192
    tuple_0 = (int_0, int_1)
    tuple_1 = (str_0, tuple_0)
    list_0 = [int_0, int_0, tuple_0, int_1]
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_29():
    int_0 = 1
    str_0 = 'bare_name'
    int_1 = 917
    tuple_0 = (int_1, int_1)
    tuple_1 = (str_0, tuple_0)
    list_0 = [int_0, int_0, tuple_0, int_1]
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
    leaf_pattern_0 = module_0.LeafPattern()
    negated_pattern_0 = module_0.NegatedPattern()
    str_1 = 'whB_dCr\\<Y7a\t'
    int_2 = 4016
    list_1 = []
    node_0 = module_0.Node(int_2, list_1, str_1)
    node_0.append_child(leaf_0)
    optional_0 = leaf_0.remove()
    node_1 = node_0.clone()

def test_case_30():
    int_0 = 1
    str_0 = 'foo'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = leaf_0.depth()

def test_case_31():
    int_0 = 1
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = [leaf_0]
    bool_0 = leaf_pattern_0.match_seq(leaf_1)
    leaf_2 = module_0.Leaf(int_0, str_0)
    leaf_3 = [leaf_2]
    var_0 = {}
    bool_1 = leaf_pattern_0.match_seq(leaf_3, var_0)
    leaf_4 = module_0.Leaf(int_0, str_0)
    int_1 = 2
    str_1 = 'b'
    leaf_5 = module_0.Leaf(int_1, str_1)
    leaf_6 = [leaf_4, leaf_5]
    bool_2 = leaf_pattern_0.match_seq(leaf_6)

def test_case_32():
    int_0 = 1
    str_0 = 'bare_name'
    int_1 = 917
    tuple_0 = (int_0, int_1)
    tuple_1 = (str_0, tuple_0)
    list_0 = [int_0, int_0, tuple_0, int_1]
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(leaf_0)
    negated_pattern_0 = module_0.NegatedPattern()
    str_1 = 'whB_dCr\\<Y7a\t'
    int_2 = 4016
    list_1 = []
    node_0 = module_0.Node(int_2, list_1, str_1)
    node_0.append_child(leaf_0)
    optional_0 = node_0.get_lineno()
    node_1 = node_0.clone()