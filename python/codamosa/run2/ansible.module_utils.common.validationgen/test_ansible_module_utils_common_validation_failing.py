# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        str_0 = '.'
        str_1 = '|B43^_A* aDe`>$2W)'
        var_0 = module_0.check_required_one_of(str_0, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        tuple_0 = ()
        var_0 = module_0.check_required_one_of(bytes_0, tuple_0)
        str_0 = "{                                    *                  I   J [somekey': 'somevalue',                                      'otherkey': 'othervalue',                         >          }"
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'B1[EXTZ1P~d]Ru'
        int_0 = None
        list_0 = [str_0, int_0, str_0]
        var_0 = module_0.check_required_together(list_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '^3>*CvbuC(;'
        var_0 = module_0.check_required_by(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -837.198
        str_0 = "F.Xn5U?c[d'+GG-+"
        var_0 = module_0.check_required_arguments(float_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 2674
        dict_0 = None
        str_0 = 'free host task: %s'
        bool_0 = False
        var_0 = module_0.check_required_arguments(dict_0, str_0, bool_0)
        set_0 = {int_0}
        bool_1 = True
        var_1 = module_0.check_required_arguments(set_0, bool_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '<'
        var_0 = module_0.check_required_if(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = '<o'
        var_0 = module_0.check_missing_parameters(dict_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        var_0 = module_0.check_type_str(dict_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'w )3cey'
        str_1 = '<'
        var_0 = module_0.check_type_str(str_0, str_1)
        str_2 = "{                              |     *                  I   J 'somekey': 'somevadue',                                      Notherkey': 'othervalue',                        >          }"
        var_1 = module_0.check_type_dict(str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = None
        var_0 = module_0.check_type_list(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'K.l T=Z\x0b2w_&3'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = None
        bytes_0 = b'\xdaw,W\x8c\x03\x7f\xb2\x97X\x80\xf9\x17\xfd\xbfy\xd4\xf8'
        var_0 = module_0.check_required_together(float_0, bytes_0)
        str_0 = 'T\\+p1-^=H_OY'
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 999999999999
        var_0 = module_0.check_type_dict(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'F.'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -1059.42
        var_0 = module_0.check_type_bool(float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        tuple_0 = None
        list_0 = [tuple_0]
        var_0 = module_0.check_type_bool(list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = "{                                    *                  I   J 'somekey': 'somevalue',                                      'otherkey': 'othervalue',                         >          }"
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\x0bp8$<N ;="+TE'
        bool_0 = True
        var_0 = module_0.check_type_int(bool_0)
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = []
        var_0 = module_0.check_type_float(list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'\xb0d%O!S\x98\xfc\xea\xeb\xdb\xef'
        var_0 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 429
        var_0 = module_0.check_type_raw(int_0)
        str_0 = '{-1SyFBe\'C:\tp&"k'
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = -2909.8
        var_0 = module_0.check_type_bytes(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 's{'
        var_0 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        set_0 = set()
        var_0 = module_0.check_type_jsonarg(set_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = "{                                                           J 'somekey': 'somevalue',                                      otherkey': 'othervalue',                                   }"
        var_0 = module_0.check_type_jsonarg(str_0)
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = -837.198
        str_0 = "F.Xn5U?c[d'+GG-+"
        str_1 = "}'<h`J{V"
        set_0 = {str_0, str_1, str_1}
        var_0 = module_0.check_required_together(str_1, set_0, str_1)
        var_1 = module_0.check_required_arguments(float_0, str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 999999999992
        var_0 = module_0.check_type_path(int_0)
        str_0 = 'J\\}M}ytV6bz_~=%Uj]'
        var_1 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        float_0 = 679.247
        var_0 = module_0.check_type_int(float_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '{-1SyF>{Be\'C:\tp&"'
        tuple_0 = None
        list_0 = [str_0, tuple_0, tuple_0]
        var_0 = module_0.check_required_together(tuple_0, list_0)
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '4Y#@'
        set_0 = {str_0, str_0}
        list_0 = []
        var_0 = module_0.check_missing_parameters(set_0, list_0)
        dict_0 = None
        var_1 = module_0.check_required_if(str_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'RfHqzy'
        set_0 = {str_0, str_0}
        list_0 = []
        var_0 = module_0.check_missing_parameters(set_0, list_0)
        var_1 = module_0.check_required_if(list_0, list_0)
        str_1 = 'K'
        str_2 = 'Dn}o>RP2eH]'
        var_2 = module_0.check_required_one_of(str_1, str_2, set_0)
    except BaseException:
        pass

def test_case_32():
    try:
        bool_0 = False
        var_0 = module_0.check_type_list(bool_0)
        str_0 = '_'
        var_1 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_33():
    try:
        float_0 = -4374.392
        var_0 = module_0.check_type_list(float_0)
        str_0 = '[1,2,3]'
        var_1 = module_0.safe_eval(str_0)
        list_0 = []
        var_2 = module_0.check_type_list(list_0)
        str_1 = 'q'
        str_2 = '[1,2,3].pop('
        var_3 = module_0.safe_eval(str_2)
        str_3 = 'import os'
        var_4 = module_0.safe_eval(str_3)
        var_5 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_34():
    try:
        dict_0 = {}
        bytes_0 = b'\xb1\xac'
        str_0 = 'P'
        var_0 = module_0.safe_eval(dict_0, bytes_0, str_0)
        dict_1 = {}
        var_1 = module_0.check_type_bits(dict_1)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'required_five'
        var_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_1 = module_0.check_required_by(var_0, str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        dict_0 = {}
        str_0 = '*A<)\x0cuVa'
        var_0 = module_0.check_required_arguments(dict_0, str_0)
        var_1 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'ke#_four'
        str_1 = 'rEqired_five'
        var_0 = {str_1: str_1, str_0: str_1, str_1: str_1, str_0: str_1, str_1: str_1}
        str_2 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_1 = module_0.check_required_by(var_0, str_2)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = -4577
        dict_0 = {int_0: int_0, int_0: int_0}
        bool_0 = False
        var_0 = module_0.check_required_arguments(dict_0, bool_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = "=5yNZ6 q%_|2W'}"
        list_0 = [str_0, str_0, str_0, str_0, str_0]
        var_0 = module_0.check_mutually_exclusive(str_0, list_0)
        bool_0 = True
        var_1 = module_0.check_type_bool(bool_0)
        str_1 = "D\\@'?"
        var_2 = module_0.check_required_one_of(list_0, str_1)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = ' ,glst'
        bool_0 = True
        var_0 = [str_0, str_0, str_0, bool_0]
        int_0 = 99
        var_1 = [str_0, int_0, str_0]
        var_2 = [var_0, var_1]
        int_1 = {str_0: int_0}
        str_1 = 'test'
        var_3 = module_0.check_required_if(var_2, int_1, str_1)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'baz'
        str_1 = 'required'
        bool_0 = True
        bool_1 = {str_1: bool_0}
        bool_2 = {str_1: bool_1, str_0: bool_1, str_0: bool_1}
        var_0 = module_0.check_required_arguments(bool_2, str_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'wkgy_n'
        str_1 = 'key_four'
        str_2 = 'requiredG_three'
        str_3 = 'required_five'
        str_4 = [str_1, str_2, str_1, str_3, str_1]
        var_0 = {str_0: str_2, str_1: str_2, str_2: str_3, str_1: str_4, str_2: str_2}
        str_5 = 'value_one'
        str_6 = '!/Y'
        str_7 = {str_0: str_5, str_0: str_2, str_2: str_1, str_1: str_6}
        var_1 = module_0.check_required_by(var_0, str_7)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = '^tvH'
        str_1 = 'baz'
        bool_0 = False
        bool_1 = {str_0: bool_0}
        bool_2 = {str_1: bool_0}
        bool_3 = {str_0: bool_1, str_0: bool_1, str_1: bool_2}
        str_2 = 'c'
        var_0 = module_0.check_required_arguments(bool_3, str_1)
        bytes_0 = b',\xc15\r\xad\xa9'
        var_1 = module_0.check_required_one_of(str_2, bytes_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'pCth'
        bool_0 = True
        var_0 = [str_0, str_0, str_0, bool_0]
        str_1 = 'someint'
        int_0 = 99
        str_2 = 'strin_aram'
        str_3 = (str_1, str_2)
        var_1 = [str_1, int_0, str_3]
        var_2 = [var_0, var_1]
        int_1 = {str_1: int_0}
        str_4 = 'test'
        var_3 = module_0.check_required_if(var_2, int_1, str_4)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'stiae'
        str_1 = 'present'
        str_2 = (str_0,)
        bool_0 = False
        int_0 = 32620
        str_3 = 'string_param'
        str_4 = 'Z;65g2Mx$Ch1|])Xk$u'
        var_0 = [str_0, str_1, str_4, bool_0]
        var_1 = [str_3, int_0, str_2]
        var_2 = [var_0, var_1]
        var_3 = {str_3: str_0, str_3: bool_0, str_0: str_1, str_3: int_0}
        var_4 = module_0.check_required_if(var_2, var_3)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'pCth'
        bool_0 = True
        var_0 = [str_0, str_0, str_0, bool_0]
        int_0 = 99
        str_1 = 'strin_aram'
        var_1 = [str_1, int_0, str_0]
        var_2 = [var_0, var_1]
        int_1 = {str_1: int_0}
        str_2 = 'test'
        var_3 = module_0.check_required_if(var_2, int_1, str_2)
    except BaseException:
        pass

def test_case_47():
    try:
        tuple_0 = ()
        float_0 = None
        var_0 = module_0.check_missing_parameters(tuple_0, float_0)
        var_1 = {}
        var_2 = module_0.check_required_if(tuple_0, var_1)
        str_0 = 'state'
        str_1 = 'present'
        str_2 = 'j'
        str_3 = (str_2,)
        bool_0 = True
        var_3 = [str_0, str_1, str_3, bool_0]
        int_0 = 99
        str_4 = 'bool_param'
        str_5 = 'string_param'
        str_6 = (str_4, str_5)
        var_4 = [str_4, int_0, str_6]
        var_5 = [var_3, var_4]
        str_7 = '/home/user/userfile.txt'
        var_6 = {str_2: str_7, str_4: bool_0, str_5: str_1, str_0: str_1, str_3: int_0}
        var_7 = module_0.check_required_if(var_5, var_6)
        var_8 = [str_0, str_1, str_6, bool_0]
        str_8 = (str_4, str_5)
        var_9 = [str_4, int_0, str_8]
        var_10 = [var_8, var_9]
        var_11 = {str_2: str_7, str_4: bool_0, str_0: str_1, str_4: int_0}
        var_12 = module_0.check_required_if(var_10, var_11)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = 'proxy_user'
        str_1 = '|P_'
        str_2 = [str_0, str_1]
        str_3 = [str_2]
        var_0 = module_0.check_mutually_exclusive(str_3, str_2)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = 'K.lT=Z\x0b2w_&'
        int_0 = 8192
        var_0 = module_0.check_type_path(int_0)
        var_1 = module_0.check_type_dict(str_0)
        list_0 = [str_0, str_0, var_1]
        str_1 = 'here goes the callback...'
        var_2 = module_0.check_required_together(list_0, str_1)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = 'second'
        str_1 = 'application/json'
        str_2 = [str_1, str_0, str_1]
        str_3 = 'fourth'
        str_4 = 'seventh'
        str_5 = [str_1, str_4, str_2, str_1]
        int_0 = 2
        int_1 = {str_4: int_0, str_0: int_0, str_3: int_0}
        var_0 = module_0.check_required_together(str_5, int_1, str_5)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = "{                                                           J 'somekey': 'somevalue',                                      'otherkey': 'othervalue',                                    }"
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'required_param'
        str_1 = 'Bob'
        str_2 = 'required_param2'
        str_3 = ''
        str_4 = {str_0: str_1, str_2: str_3}
        str_5 = [str_0, str_2]
        var_0 = module_0.check_missing_parameters(str_4, str_5)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = {str_0: str_1}
        str_3 = 'c'
        str_4 = 'd'
        var_0 = module_0.check_required_by(str_2, str_3)
        str_5 = {str_0: str_1}
        var_1 = None
        var_2 = module_0.check_required_by(str_5, str_3)
        var_3 = len(var_2)
        str_6 = {str_0: str_1}
        var_4 = {str_0: var_1, str_1: str_4}
        var_5 = module_0.check_required_by(str_6, var_4)
        var_6 = len(var_5)
        str_7 = {str_0: str_1}
        var_7 = {str_0: var_1, str_1: var_1}
        var_8 = module_0.check_required_by(str_7, var_7)
        var_9 = len(var_8)
        str_8 = {str_0: str_1}
        str_9 = {str_0: str_3}
        var_10 = module_0.check_required_by(str_8, str_9)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = "{                                   *                 I   J [someey': 'someva.ui',                                    'otherkwy': 'othervalue',           O           > \n        }"
        set_0 = None
        tuple_0 = None
        var_0 = module_0.check_mutually_exclusive(set_0, tuple_0)
        float_0 = -2491.1
        var_1 = module_0.check_type_raw(float_0)
        str_1 = 'import os'
        bool_0 = True
        var_2 = module_0.safe_eval(float_0, bool_0)
        int_0 = 9
        list_0 = [str_0, bool_0, float_0]
        var_3 = module_0.safe_eval(str_1, int_0, list_0)
        bytes_0 = b'^eY\xc0\x97\xe9A\xf6\x00'
        var_4 = module_0.check_required_one_of(str_0, bytes_0)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = '[X=Zo", " a{"]'
        str_1 = 'os.path.abspath()'
        var_0 = module_0.safe_eval(str_1)
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = 'foo'
        str_1 = 'bar'
        str_2 = 'baz'
        str_3 = [str_0, str_1, str_2]
        str_4 = 'buz'
        str_5 = [str_0, str_1, str_4]
        str_6 = [str_3, str_5]
        str_7 = {str_0: str_1}
        str_8 = 'items'
        str_9 = [str_8]
        var_0 = module_0.check_mutually_exclusive(str_6, str_7, str_9)
        var_1 = print(var_0)
        str_10 = [str_0, str_1, str_2]
        str_11 = [str_0, str_1, str_4]
        str_12 = [str_10, str_11]
        str_13 = 'abc'
        str_14 = {str_0: str_9, str_1: str_13}
        str_15 = [str_8]
        var_2 = module_0.check_mutually_exclusive(str_12, str_14, str_15)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = {str_0: str_1}
        str_3 = 'c'
        str_4 = 'd'
        str_5 = {str_0: str_3, str_1: str_4}
        var_0 = module_0.check_required_by(str_2, str_5)
        var_1 = len(var_0)
        str_6 = {str_0: str_1}
        var_2 = None
        var_3 = {str_0: str_3, str_1: var_2}
        var_4 = module_0.check_required_by(str_6, var_3)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = 'key'
        str_1 = 'key2'
        str_2 = {str_0: str_1}
        str_3 = 'value2'
        str_4 = {str_1: str_3}
        str_5 = [str_1]
        var_0 = module_0.check_required_by(str_2, str_4, str_5)
        str_6 = 'key'
        str_7 = 'key2'
        str_8 = {str_6: str_7}
        str_9 = 'value3'
        str_10 = {str_6: str_9}
        str_11 = 'deep'
        str_12 = [str_11, str_6]
        var_1 = module_0.check_required_by(str_8, str_10, str_12)
    except BaseException:
        pass