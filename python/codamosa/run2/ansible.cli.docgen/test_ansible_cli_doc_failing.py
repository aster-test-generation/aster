# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        set_0 = set()
        var_0 = module_0.jdump(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '06wk$G~Do\x0c[BF@'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'n^znQ5\\E'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = 'v?$'
        str_2 = '\t@W'
        dict_1 = {str_1: str_1, str_1: str_1, str_2: str_1}
        list_0 = [dict_1, str_2, str_2, str_1]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.get_plugin_metadata(dict_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = None
        list_0 = [float_0, float_0, float_0, float_0]
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        doc_c_l_i_0 = module_0.DocCLI(plugin_not_found_0)
        bool_0 = True
        str_0 = None
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(doc_c_l_i_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        bool_0 = False
        dict_0 = {plugin_not_found_0: bool_0}
        list_0 = [dict_0]
        str_0 = None
        bytes_0 = None
        set_0 = set()
        tuple_0 = (bytes_0, bytes_0, set_0)
        bool_1 = True
        doc_c_l_i_0 = module_0.DocCLI(bool_1)
        var_0 = doc_c_l_i_0.format_plugin_doc(dict_0, plugin_not_found_0, list_0, plugin_not_found_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x8b\xf6\xc8\x0c\xc8\x85\x82\xaa\xef\xdf=8\x8a'
        str_0 = 'gqnW(b \rug'
        int_0 = 504
        str_1 = 'Z@Y'
        tuple_0 = (str_1, bytes_0)
        doc_c_l_i_0 = module_0.DocCLI(tuple_0)
        var_0 = doc_c_l_i_0.find_plugins(str_0, int_0, doc_c_l_i_0)
        doc_c_l_i_1 = module_0.DocCLI(bytes_0)
        list_0 = [doc_c_l_i_1, doc_c_l_i_1, bytes_0]
        role_mixin_0 = module_0.RoleMixin()
        list_1 = [role_mixin_0]
        var_1 = doc_c_l_i_1.get_role_man_text(list_0, list_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xfa\xd0\xc9\xda\xdf<W6\xc7\xd6'
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        tuple_0 = ()
        var_0 = doc_c_l_i_0.get_man_text(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '24JD+weMqqh=6;z{8>X'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.display_plugin_list(doc_c_l_i_0)
    except BaseException:
        pass

def test_case_8():
    try:
        role_mixin_0 = module_0.RoleMixin()
        bytes_0 = b"\x01\x86:y\xb9\xba\x7f\xd2\xbc\n\x92\xc4'8"
        plugin_not_found_0 = module_0.PluginNotFound()
        bool_0 = True
        tuple_0 = None
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: tuple_0, tuple_0: plugin_not_found_0}
        list_0 = [plugin_not_found_0, plugin_not_found_0, bytes_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.get_all_plugins_of_type(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = set()
        str_0 = '+;:Bv/^-'
        list_0 = [str_0, str_0]
        dict_0 = {str_0: set_0, str_0: set_0}
        float_0 = 48.55370011561711
        plugin_not_found_0 = module_0.PluginNotFound()
        tuple_0 = (str_0,)
        doc_c_l_i_0 = module_0.DocCLI(tuple_0)
        var_0 = doc_c_l_i_0.add_fields(list_0, dict_0, float_0, plugin_not_found_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Uodule'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        str_1 = '0fG)C6b'
        dict_0 = {str_0: doc_c_l_i_0, str_1: str_0, str_1: str_1, str_1: str_1}
        bytes_0 = b'z\x1d\xed\xf9%>N\xc7$\xbe\x1f\x91(\xe2'
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(dict_0, bytes_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 301
        list_0 = [int_0, int_0]
        complex_0 = None
        tuple_0 = ()
        dict_0 = {}
        str_0 = 'startsrc'
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.add_fields(complex_0, tuple_0, dict_0, list_0, str_0)
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        plugin_not_found_0 = module_0.PluginNotFound(**dict_0)
        str_0 = 'Failed to retrieve submodule status: %s'
        bytes_0 = b'F\xd6\xf3t\xa8c\x90\x14'
        tuple_0 = (str_0, bytes_0)
        var_0 = module_0.add_collection_plugins(plugin_not_found_0, tuple_0)
        bytes_1 = b'\xc6\xb9\x1dR\x00\xba\x00\x8d>\x13\xe9\xc8'
        float_0 = None
        int_0 = 453
        doc_c_l_i_0 = module_0.DocCLI(int_0)
        doc_c_l_i_1 = module_0.DocCLI(doc_c_l_i_0)
        var_1 = doc_c_l_i_1.format_snippet(bytes_1, float_0, str_0)
        dict_1 = {}
        str_1 = "r%\x0cmSt6Y2F'5!W="
        var_2 = doc_c_l_i_0.get_man_text(dict_1, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        str_0 = '+;:Bv/^-'
        list_0 = [str_0, str_0]
        str_1 = 'jsonrpc'
        bytes_0 = b'*\xd8\xfehe\xde\x88\x87\xecK\xb0\x12'
        list_1 = [list_0, list_0, bool_0]
        doc_c_l_i_0 = module_0.DocCLI(list_1)
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(str_1, bytes_0, str_1)
    except BaseException:
        pass