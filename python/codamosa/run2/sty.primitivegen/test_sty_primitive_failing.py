# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    try:
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        dict_0 = {}
        style_0 = module_0.Style(**dict_0)
        str_0 = None
        var_1 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 4123
        list_0 = [int_0, int_0, int_0, int_0]
        register_0 = module_0.Register()
        register_0.set_eightbit_call(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_3 = module_0.Register()
        register_4 = register_3.copy()
        bytes_0 = b'\'\n"\x8dZ\xe8B\xe8\x98\x9f\x1c'
        register_0.set_rgb_call(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        type_0 = None
        register_0.set_renderfunc(type_0, register_0)
        str_0 = register_0.__call__()
        register_0.mute()
        dict_0 = {}
        style_0 = module_0.Style(**dict_0)
        str_1 = None
        var_0 = register_0.__setattr__(str_1, style_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        type_0 = None
        register_0.set_renderfunc(type_0, register_0)
        var_0 = register_0.as_namedtuple()
        str_0 = '\x1b[48;5;'
        str_1 = register_0.__call__()
        register_0.mute()
        register_0.set_rgb_call(type_0)
        register_1 = module_0.Register()
        register_2 = register_0.copy()
        register_3 = register_2.copy()
        register_0.unmute()
        bool_0 = False
        style_0 = module_0.Style()
        list_0 = [str_0, register_3, bool_0]
        style_1 = style_0.__new__(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        str_0 = 'jmFIG2k@&1&HZ*wFPAM3'
        str_1 = register_0.__call__()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        var_0 = register_0.as_namedtuple()
        register_2.mute()
        style_0 = module_0.Style()
        var_1 = register_0.__setattr__(str_1, style_0)
        register_3 = module_0.Register()
        callable_0 = None
        register_3.set_renderfunc(register_2, callable_0)
        dict_0 = register_3.as_dict()
        register_0.mute()
        list_0 = [str_0, register_1]
        var_2 = register_0.__setattr__(str_1, style_0)
        register_1.set_rgb_call(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        str_0 = register_0.__call__()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        str_1 = '+byozv'
        var_0 = register_0.as_namedtuple()
        register_2.unmute()
        style_0 = module_0.Style()
        var_1 = register_0.__setattr__(str_1, style_0)
        str_2 = register_1.__call__()
        callable_0 = None
        register_0.set_renderfunc(register_2, callable_0)
        dict_0 = register_1.as_dict()
        register_1.mute()
        list_0 = [str_2, register_1]
        var_2 = register_0.__setattr__(str_1, style_0)
        register_1.set_rgb_call(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'f'
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        var_0 = register_1.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        var_0 = register_1.as_namedtuple()
        var_1 = register_0.as_namedtuple()
        var_2 = register_0.as_namedtuple()
        str_0 = register_0.__call__()
        list_0 = [str_0]
        str_1 = register_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 27
        list_0 = [int_0]
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        register_2 = register_1.copy()
        str_0 = register_2.__call__()
        register_3 = register_0.copy()
        register_4 = register_3.copy()
        str_1 = register_3.__call__(*list_0)
        var_0 = register_2.as_namedtuple()
        register_5 = register_0.copy()
        type_0 = None
        str_2 = "\n    This type stores the different styling rules for the registers and the resulting\n    ANSI-sequence as a string.\n\n    For example:\n\n        fg.orange = Style(RgbFg(1,5,10), Sgr(1))\n\n        isinstance(fg.orange, Style) # True\n\n        isinstance(fg.orange, str) # True\n\n        str(fg.orange) # '\x1b[38;2;1;5;10m\x1b[1m' (The ASNI sequence for orange and bold)\n\n    "
        register_6 = register_5.copy()
        register_7 = register_6.copy()
        list_1 = [type_0, str_2, register_7, register_2]
        str_3 = 'R6v'
        str_4 = None
        dict_0 = {str_3: register_3, str_4: register_4}
        style_0 = module_0.Style(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        register_0 = module_0.Register()
        str_0 = '>]w7|#i@M OIN'
        render_type_0 = module_1.RenderType()
        bool_0 = True
        list_0 = [render_type_0, bool_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_11():
    try:
        register_0 = module_0.Register()
        type_0 = None
        register_0.set_renderfunc(type_0, register_0)
        var_0 = register_0.as_namedtuple()
        str_0 = register_0.__call__()
        register_0.mute()
        register_1 = module_0.Register()
        dict_0 = {}
        register_2 = module_0.Register()
        register_3 = register_2.copy()
        register_4 = module_0.Register()
        register_2.unmute()
        register_5 = module_0.Register()
        str_1 = register_3.__call__(**dict_0)
        int_0 = 286
        list_0 = [type_0, int_0, register_4]
        style_0 = module_0.Style(*list_0)
        list_1 = [style_0, style_0, style_0]
        style_1 = module_0.Style(*list_1)
        str_2 = '\x1b[38;2;'
        var_1 = register_3.__setattr__(str_2, style_1)
    except BaseException:
        pass