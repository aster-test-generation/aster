# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        str_0 = ''
        set_0 = {str_0}
        bytes_0 = b'\xc6\xd6k\xa6v\xee\xc4\xe5G\x82\xad@\xae\xb3'
        bool_0 = False
        var_0 = module_0.append_csv(bytes_0, bool_0, bool_0)
        list_0 = [str_0]
        bytes_1 = None
        var_1 = module_0.append_param(set_0, list_0, bytes_1, bytes_1)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'x\xa4k\xfb\x1c\xd9\t'
        str_0 = '0P`^=*\n=C}Ql\n.OH'
        dict_0 = {str_0: bytes_0}
        bool_0 = False
        tuple_0 = (bool_0,)
        float_0 = -616.72
        list_0 = [tuple_0, float_0, dict_0, tuple_0]
        str_1 = '8`:Q'
        var_0 = module_0.append_csv(list_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 817.096523
        dict_0 = {float_0: float_0, float_0: float_0}
        bool_0 = False
        tuple_0 = (dict_0, bool_0)
        list_0 = [tuple_0, tuple_0, bool_0]
        list_1 = [dict_0, tuple_0, dict_0]
        var_0 = module_0.append_jump(tuple_0, list_0, list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        bool_0 = False
        int_0 = 2
        str_0 = None
        dict_0 = {}
        tuple_0 = (set_0, int_0, str_0, dict_0)
        var_0 = module_0.append_wait(bool_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'table'
        str_1 = 'chain'
        str_2 = 'YR?'
        str_3 = ''
        str_4 = '80g0'
        str_5 = {str_0: str_0, str_1: str_4, str_2: str_3, str_3: str_3, str_0: str_4, str_4: str_3}
        var_0 = module_0.push_arguments(str_0, str_1, str_5)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        set_0 = {str_0, str_0}
        var_0 = module_0.flush_table(set_0, set_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 5986
        float_0 = 364.6889
        bytes_0 = b'\xd3\xc7t\xfc\xa8\xe9\xb0,T\xd8\xa3'
        var_0 = module_0.check_present(int_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 60.0
        list_0 = [float_0, float_0, float_0, float_0]
        var_0 = module_0.append_rule(float_0, list_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\t#Y32^g(n'
        int_0 = 11
        str_1 = '8v^p'
        var_0 = module_0.insert_rule(str_0, int_0, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 2492
        bytes_0 = None
        complex_0 = None
        set_0 = None
        var_0 = module_0.append_param(int_0, bytes_0, complex_0, set_0)
        int_1 = -1241
        str_0 = 'XEJ2R_u<=$Rf]9o^XH'
        var_1 = module_0.remove_rule(int_1, bytes_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '@gRAcS'
        str_1 = 'M`owK@;\nTzB\tv.U'
        bytes_0 = b'\x96'
        dict_0 = {str_0: str_1, bytes_0: bytes_0, str_0: str_1}
        tuple_0 = (dict_0,)
        list_0 = [tuple_0, bytes_0, dict_0]
        str_2 = 'J%18}Y3Z'
        var_0 = module_0.set_chain_policy(list_0, str_2, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'xm\n&7\xdb\xbav`\xa1\\\x17\x8c\x15\xba8\x87\xdc'
        bool_0 = True
        var_0 = module_0.get_chain_policy(bytes_0, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        complex_0 = None
        tuple_0 = ()
        str_0 = 'Up+YR#\\7^'
        float_0 = -5689.1
        dict_0 = {}
        tuple_1 = (tuple_0, str_0, float_0, dict_0)
        var_0 = module_0.get_iptables_version(complex_0, tuple_1)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = None
        int_0 = 90
        str_0 = '~yRI<WXUU\r d;;3=cdW\r'
        var_0 = module_0.append_param(set_0, int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = None
        dict_0 = {int_0: int_0}
        list_0 = []
        str_0 = 'VX'
        var_0 = module_0.append_jump(dict_0, list_0, str_0)
        float_0 = -2364.377212
        str_1 = None
        list_1 = [float_0, str_1]
        set_0 = {str_1, float_0, str_1}
        var_1 = module_0.set_chain_policy(list_1, set_0, list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'table'
        str_1 = 'chain'
        str_2 = 'rule_num'
        str_3 = '/sys/devices/virtual/dmi/id/board_serial'
        str_4 = '5'
        str_5 = '8080'
        str_6 = 'ACCEPT'
        bytes_0 = b'4M\x1e\x01]D\xb8\x8fL\xd6g\x18\xf8\xb7\xf2%\xce'
        bool_0 = False
        dict_0 = {bool_0: str_5}
        var_0 = module_0.append_wait(bytes_0, bool_0, dict_0)
        str_7 = {str_0: str_0, str_1: str_5, str_2: str_4, str_4: str_4, str_0: str_5, str_3: str_6}
        var_1 = module_0.push_arguments(str_3, str_1, str_7)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = None
        str_0 = '--foo'
        str_1 = 'match'
        var_1 = []
        bool_0 = True
        var_2 = module_0.append_match_flag(var_1, var_0, str_0, bool_0)
        var_3 = module_0.append_match_flag(str_0, str_1, str_0, bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = []
        str_0 = 'flags'
        str_1 = 'flags_set'
        str_2 = 'ALL'
        str_3 = 'ACK'
        str_4 = 'RST'
        str_5 = 'SYN'
        str_6 = 'FIN'
        str_7 = [str_3, str_4, str_5, str_6]
        str_8 = {str_0: str_2, str_1: str_7}
        var_1 = module_0.append_tcp_flags(var_0, str_8, str_2)
        str_9 = 'SYN,FIN'
        str_10 = [str_5, str_6]
        str_11 = {str_0: str_9, str_1: str_10}
        var_2 = module_0.append_tcp_flags(str_3, str_11, str_11)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'ip_version'
        str_1 = 'table'
        str_2 = 'ion'
        str_3 = 'chain'
        str_4 = 'state'
        str_5 = 'source'
        str_6 = 'jump'
        str_7 = 'loZ_lel'
        str_8 = 'policy'
        str_9 = 'rule_num'
        str_10 = 'ctstate'
        str_11 = 'vpv4'
        str_12 = 'filter'
        str_13 = 'insert'
        str_14 = 'present'
        var_0 = None
        str_15 = 'ACCEPT'
        int_0 = 1
        var_1 = {str_0: str_11, str_1: str_12, str_2: str_13, str_3: str_2, str_4: str_14, str_5: var_0, str_6: str_15, str_4: var_0, str_7: var_0, str_8: str_15, str_9: int_0, str_10: var_0}
        str_16 = '/usr/sbin/iptables'
        str_17 = '-I'
        var_2 = module_0.push_arguments(str_16, str_17, var_1)
    except BaseException:
        pass