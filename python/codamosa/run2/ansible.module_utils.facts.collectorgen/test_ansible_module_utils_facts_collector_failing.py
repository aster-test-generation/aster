# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        str_0 = 'q/_8gkIwA*B/QN'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.get_collector_names(dict_0, str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1681.478
        int_0 = None
        str_0 = 'joZr!dfQ_n1!'
        tuple_0 = (float_0, int_0, str_0)
        var_0 = module_0.collector_classes_from_gather_subset(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        list_0 = []
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(*list_0)
        str_1 = 'MEa3`k\x0b{FM1KVI78'
        dict_0 = {str_0: unresolved_fact_dep_0, str_0: str_0, str_1: unresolved_fact_dep_0}
        str_2 = '"%gxEi<AAg-\x0by'
        tuple_0 = (dict_0, str_2)
        var_0 = module_0.build_fact_id_to_collector_map(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'?\xa0\x90\xd7\x8f\x1d'
        set_0 = {bytes_0, bytes_0}
        var_0 = module_0.find_unresolved_requires(bytes_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '2l;Np JH+'
        str_1 = 'l.Em~16KQf@8o\t'
        dict_0 = {str_0: str_0, str_1: str_0}
        float_0 = 1000.0
        var_0 = module_0.resolve_requires(dict_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\rV?u2/;+1\x0c!7P X>(vN'
        base_fact_collector_0 = module_0.BaseFactCollector(str_0, str_0)
        bytes_0 = b'\xd2\xe6\xe9G\xd5\x8c\x92\xdf'
        str_1 = 'pQuw'
        list_0 = [bytes_0, str_0]
        bool_0 = True
        int_0 = -1303
        tuple_0 = (list_0, bool_0, int_0)
        dict_0 = {str_0: str_0, str_1: tuple_0}
        var_0 = module_0.resolve_requires(bytes_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xc8q\xa7\xe9\x0b@\xfdPL\xb8\xbe\x0b\xa2:I\x80D\x88\x87'
        str_0 = '*&Wqyh~VdE+N:H<D(q'
        dict_0 = {str_0: bytes_0}
        var_0 = module_0.tsort(dict_0)
        var_1 = module_0.build_fact_id_to_collector_map(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        set_0 = {base_fact_collector_0, base_fact_collector_0}
        var_0 = module_0.build_fact_id_to_collector_map(set_0)
        tuple_0 = ()
        var_1 = base_fact_collector_0.collect(tuple_0)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        bytes_0 = b'\xef\xc3L\xa7\x08~}#\x92\xfc{\xff'
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_2 = base_fact_collector_0.collect_with_namespace(bytes_0)
        var_3 = module_0.tsort(cycle_found_in_fact_deps_0)
    except BaseException:
        pass

def test_case_8():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_0 = module_0.get_collector_names(cycle_found_in_fact_deps_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 198.1506
        complex_0 = None
        var_0 = module_0.collector_classes_from_gather_subset(float_0, complex_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\x17\x98l\xc8\xa5>.<\xd2\x08\xd4\x9co'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        str_0 = 'i'
        str_1 = "l'e$`91P\t;okbVsL8"
        str_2 = ''
        dict_0 = {str_0: list_0, str_1: str_0, str_1: str_0, str_0: str_0, str_1: str_1, str_2: str_2}
        var_0 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\x17\x98l\xc8\xa5>.<\xd2\x08\xd4\x9co'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0)
        str_0 = '*"1>X;.qS,)o'
        var_0 = module_0.resolve_requires(str_0, str_0)
        set_0 = set()
        base_fact_collector_0 = module_0.BaseFactCollector(collector_not_found_error_0, collector_not_found_error_0)
        var_1 = module_0.resolve_requires(set_0, collector_not_found_error_0)
        var_2 = base_fact_collector_0.collect_with_namespace(set_0)
        var_3 = module_0.collector_classes_from_gather_subset()
        str_1 = 'openstack'
        float_0 = -4000.6603
        var_4 = module_0.resolve_requires(str_1, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '}xt\r6(`$_P'
        dict_0 = {}
        var_0 = module_0.find_unresolved_requires(str_0, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'all'
        list_0 = [str_0]
        str_1 = 'J9#&a/REfEkaWz$;\x0bz '
        str_2 = '?#-mE8n%~q4J'
        dict_0 = {str_1: str_0, str_0: str_0, str_2: list_0}
        var_0 = module_0.build_dep_data(list_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        set_0 = {base_fact_collector_0, base_fact_collector_0}
        var_0 = module_0.build_fact_id_to_collector_map(set_0)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_1 = module_0.tsort(cycle_found_in_fact_deps_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'test2'
        str_1 = 'test3'
        str_2 = [str_1, str_0, str_1]
        str_3 = 'subset1'
        str_4 = 'subset2'
        str_5 = 'subset3'
        str_6 = [str_3, str_4, str_5]
        str_7 = 'gather1'
        str_8 = 'gather2'
        str_9 = 'gather3'
        str_10 = [str_7, str_8, str_9]
        str_11 = [str_3, str_8]
        int_0 = 10
        str_12 = 'testPlatform'
        var_0 = module_0.collector_classes_from_gather_subset(str_2, str_6, str_10, str_11, int_0, str_12)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\rIeYo?t,#'
        str_1 = '!ay$'
        str_2 = [str_1]
        var_0 = module_0.get_collector_names(str_0, str_2, str_2, str_2)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x17\x98l\xc8\xa5>.<\xd2\x08\xd4\x9co'
        str_0 = 'atAKO1W'
        str_1 = 'H'
        str_2 = None
        dict_0 = {str_0: bytes_0, str_0: bytes_0, str_1: bytes_0, str_2: str_2}
        var_0 = module_0.select_collector_classes(dict_0, dict_0)
    except BaseException:
        pass