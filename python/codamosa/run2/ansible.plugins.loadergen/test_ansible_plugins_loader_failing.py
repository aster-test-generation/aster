# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        list_0 = []
        dict_0 = {}
        bool_0 = True
        str_0 = ''
        jinja2_loader_0 = module_0.Jinja2Loader(list_0, dict_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'LookupModule'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ',5X\tv*gr\x0bJgk'
        list_0 = [str_0, str_0]
        get_with_context_result_0 = module_0.get_with_context_result(*list_0)
        str_1 = '&\x0c{2$syIq" r=&bs]T5'
        bytes_0 = b'*\xcb'
        list_1 = [bytes_0, str_0, str_1, str_0]
        jinja2_loader_0 = module_0.Jinja2Loader(get_with_context_result_0, str_1, bytes_0, get_with_context_result_0, list_1)
        var_0 = module_0.add_dirs_to_loader(str_0, jinja2_loader_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'p6'
        str_1 = '$Hl'
        str_2 = '&'
        plugin_loader_0 = module_0.PluginLoader(str_1, str_0, str_0, str_1, str_2, str_1)
        str_3 = '{r: L\t4zjJr^'
        var_0 = plugin_loader_0.get_with_context(str_3)
    except BaseException:
        pass

def test_case_5():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        str_0 = '|Bjs">Fp}\rJ$dU'
        plugin_load_context_2 = module_0.PluginLoadContext()
        float_0 = 1183.0
        var_0 = module_0.add_all_plugin_dirs(float_0)
        list_0 = [var_0, var_0]
        var_1 = plugin_load_context_1.redirect(list_0)
        var_2 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -919
        get_with_context_result_0 = None
        set_0 = set()
        plugin_loader_0 = module_0.PluginLoader(int_0, get_with_context_result_0, set_0, set_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'W]TzrGsUQN. rwV'
        dict_0 = {str_0: set_0}
        var_0 = plugin_loader_0.find_plugin(plugin_load_context_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'l\xdf\xf06\xdep\x91\xd5\xdb\x86\xab\x1fE*\xa0\x17'
        dict_0 = None
        int_0 = 1306
        list_0 = None
        str_0 = ''
        str_1 = '/home/myeongsoo/aster-py-cli/\udca0a\x06\udcdfk\udc97C$/windows'
        plugin_loader_0 = module_0.PluginLoader(int_0, list_0, str_0, str_1)
        bytes_1 = b'\x87\xf0\xd3+\x18\xa2\xf2\x84\x8b\x9e'
        jinja2_loader_0 = module_0.Jinja2Loader(dict_0, plugin_loader_0, bytes_1, plugin_loader_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(bytes_0, bytes_0, jinja2_loader_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\\\xbd'
        bool_0 = True
        tuple_0 = (bool_0,)
        tuple_1 = (tuple_0,)
        str_0 = 'T@$"s\'J'
        dict_0 = {str_0: tuple_1, str_0: tuple_1, str_0: bool_0}
        plugin_loader_0 = module_0.PluginLoader(bytes_0, bytes_0, tuple_1, dict_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        bytes_0 = b"\xca}T\x82#\xe4'\x1d"
        str_0 = 'author'
        set_0 = {bytes_0, str_0}
        bool_0 = True
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, str_0, set_0, bool_0)
        var_0 = jinja2_loader_0.all(**dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = False
        list_0 = [bool_0]
        str_0 = '_ g|'
        var_0 = plugin_load_context_0.nope(str_0)
        plugin_path_context_0 = module_0.PluginPathContext(bool_0, list_0)
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_0 = 2209
        str_1 = 'Expected task_id or github_user and github_repo'
        tuple_0 = (list_0,)
        str_2 = '4t4\x0c-u_tc}&\x0ct'
        int_1 = -1579
        get_with_context_result_0 = None
        bytes_0 = b'\xf7\x9ac\xf9\xff$'
        float_0 = -736.597014
        str_3 = "Parameter 'baseurl', 'metalink' or 'mirrorlist' is required for adding a new repo."
        list_1 = []
        complex_0 = None
        plugin_loader_0 = module_0.PluginLoader(str_3, list_0, list_1, complex_0, str_1, list_0)
        jinja2_loader_0 = module_0.Jinja2Loader(get_with_context_result_0, tuple_0, bytes_0, float_0, plugin_loader_0)
        var_1 = plugin_load_context_1.resolve(int_1, plugin_path_context_0, get_with_context_result_0, jinja2_loader_0)
        plugin_loader_1 = module_0.PluginLoader(str_1, tuple_0, str_2, str_1, list_0)
        set_0 = {plugin_load_context_1}
        plugin_loader_2 = module_0.PluginLoader(int_0, list_0, plugin_loader_1, set_0)
        var_2 = plugin_loader_1.print_paths()
    except BaseException:
        pass

def test_case_11():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = None
        int_0 = 384
        set_0 = {bool_0, plugin_load_context_0, bool_0, bool_0}
        var_0 = plugin_load_context_0.nope(set_0)
        str_0 = '_cuj e(RJ%|2\\n'
        str_1 = '|Bj">Fp}\rJ$dU'
        str_2 = 'X,*aYDCA4*'
        dict_0 = {}
        dict_1 = {str_2: bool_0, str_1: plugin_load_context_0, str_2: int_0, str_1: str_0, str_2: str_2, str_2: dict_0}
        tuple_0 = (dict_1,)
        var_1 = plugin_load_context_0.resolve(tuple_0, dict_0, dict_0, tuple_0)
        str_3 = 'WE\x0cqa'
        var_2 = module_0.get_shell_plugin(str_3)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b"\xf2\x07\xe3n\xf2CW\x8d\x81\xdb\xce\x02*Qu'\xe2\x82R"
        bytes_1 = b'\x96\x19YY'
        plugin_path_context_0 = None
        list_0 = [bytes_0, plugin_path_context_0, bytes_0]
        list_1 = [plugin_path_context_0, bytes_0]
        get_with_context_result_0 = module_0.get_with_context_result(*list_1)
        int_0 = -2474
        plugin_loader_0 = module_0.PluginLoader(bytes_0, bytes_1, list_0, get_with_context_result_0, int_0)
        var_0 = plugin_loader_0.__repr__()
    except BaseException:
        pass

def test_case_13():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = None
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_0 = 384
        str_0 = '_cuj e(RJ%|2\\n'
        str_1 = '|Bj">Fp}\rJ$dU'
        str_2 = None
        str_3 = ';eh4:l,{Z8'
        dict_0 = {}
        dict_1 = {str_2: bool_0, str_1: plugin_load_context_1, str_2: int_0, str_1: str_0, str_2: str_0, str_3: dict_0}
        tuple_0 = (dict_1,)
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_1, int_0, str_0, tuple_0, plugin_path_context_0)
        var_0 = plugin_loader_0.has_plugin(plugin_load_context_0, bool_0)
        var_1 = plugin_loader_0.add_directory(bytes_0, plugin_path_context_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 454.556482
        dict_0 = {}
        str_0 = 'Z?jn4%\r[&}Va\rT'
        bytes_0 = b'\xd5\x1c\x1dq\x92\xe8\x0e\xd4'
        list_0 = [bytes_0]
        jinja2_loader_0 = module_0.Jinja2Loader(float_0, dict_0, str_0, bytes_0, list_0)
        var_0 = jinja2_loader_0.find_plugin(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ' checks if the expected password prompt exists in b_output '
        bytes_0 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = []
        tuple_0 = ()
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, bytes_0, plugin_load_context_0, list_0, tuple_0)
        str_1 = ''
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_0 = 3164
        list_1 = [plugin_load_context_1, plugin_load_context_1, str_1, str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, plugin_load_context_1, int_0, list_1)
        var_0 = plugin_loader_0.__setstate__(jinja2_loader_0)
    except BaseException:
        pass

def test_case_16():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = None
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_0 = 384
        str_0 = '_cuj e(RJ%|2\\n'
        str_1 = '|Bj">Fp}\rJ$dU'
        str_2 = None
        str_3 = ';eh4:l,{Z8'
        dict_0 = {}
        dict_1 = {str_2: bool_0, str_1: plugin_load_context_1, str_2: int_0, str_1: str_0, str_2: str_0, str_3: dict_0}
        tuple_0 = (dict_1,)
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_1, int_0, str_0, tuple_0, plugin_path_context_0)
        set_0 = {str_2}
        var_0 = plugin_loader_0.has_plugin(set_0)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_17():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        str_0 = '83/p3uP3mH^~'
        tuple_0 = (str_0, plugin_load_context_0)
        plugin_path_context_1 = module_0.PluginPathContext(plugin_path_context_0, tuple_0)
        bool_0 = False
        set_0 = set()
        plugin_loader_0 = module_0.PluginLoader(bool_0, plugin_path_context_1, plugin_load_context_0, set_0, set_0)
        str_1 = 'wvK'
        var_0 = plugin_loader_0.has_plugin(str_1)
        var_1 = plugin_load_context_0.nope(bytes_0)
        var_2 = module_0.get_shell_plugin(plugin_path_context_0)
    except BaseException:
        pass

def test_case_18():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        str_0 = '83/p3uP3mH^~'
        tuple_0 = (str_0, plugin_load_context_0)
        plugin_path_context_1 = module_0.PluginPathContext(plugin_path_context_0, tuple_0)
        bool_0 = False
        set_0 = set()
        plugin_loader_0 = module_0.PluginLoader(bool_0, plugin_path_context_1, plugin_load_context_0, set_0, set_0)
        str_1 = 'wvK'
        var_0 = plugin_loader_0.has_plugin(str_1)
        var_1 = plugin_load_context_0.nope(bytes_0)
        var_2 = module_0.get_shell_plugin(plugin_path_context_0)
    except BaseException:
        pass

def test_case_19():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'WE\x0cqa'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'Bj">Fp}\rJ&dU'
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        set_0 = None
        var_0 = module_0.get_shell_plugin(set_0, str_0)
        bytes_1 = b'\xb7Jv\xbb\xbbp\n\x96\xe6\xac\xf3+\\_'
        str_1 = '3\n'
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
        get_with_context_result_0 = None
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_1, dict_0, plugin_load_context_0, get_with_context_result_0)
        var_1 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_21():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = True
        str_0 = "'n=$RZi&\t@udByj"
        set_0 = {str_0, plugin_load_context_0, plugin_load_context_0, str_0}
        float_0 = 60.0
        bool_1 = False
        plugin_loader_0 = module_0.PluginLoader(str_0, set_0, float_0, bool_1)
        var_0 = plugin_loader_0.format_paths(bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = None
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_0 = 384
        str_0 = '_cuj e(RJ%|2\\n'
        str_1 = 'Bj">Fp}\rJ$dU'
        str_2 = None
        str_3 = ';eh4:l,{Z8'
        dict_0 = {}
        dict_1 = {str_2: bool_0, str_1: plugin_load_context_1, str_2: int_0, str_1: str_0, str_2: str_0, str_3: dict_0}
        tuple_0 = (dict_1,)
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_1, int_0, str_0, tuple_0, plugin_path_context_0)
        list_0 = [plugin_path_context_0, str_0]
        var_0 = plugin_loader_0.format_paths(list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = 403
        str_0 = '_uj e(R%|2\\n'
        str_1 = 'Bj">Fp}\rJ$dU'
        str_2 = None
        str_3 = ';eh4:l,{Z8'
        dict_0 = {}
        dict_1 = {str_2: bool_0, str_1: plugin_load_context_0, str_2: int_0, str_1: str_0, str_2: str_0, str_3: dict_0}
        tuple_0 = (dict_1,)
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, str_0, tuple_0, plugin_path_context_0)
        set_0 = {plugin_loader_0, bool_0, plugin_path_context_0}
        bool_1 = False
        var_0 = plugin_load_context_0.record_deprecation(set_0, bool_1, set_0)
        int_1 = 207
        str_4 = 'g-d#_YUM'
        list_0 = [str_0]
        str_5 = 'B\tQ>C!P\n=U'
        var_1 = plugin_loader_0.find_plugin(int_1, str_4, list_0, str_5)
    except BaseException:
        pass

def test_case_24():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = None
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_0 = 363
        str_0 = '_cuj e(RJ%|2\\n'
        str_1 = 'Bj">Fp}\rJ$dU'
        str_2 = None
        str_3 = ';eh4:l,{Z8'
        dict_0 = {}
        dict_1 = {str_2: bool_0, str_1: plugin_load_context_1, str_2: int_0, str_1: str_0, str_2: str_0, str_3: dict_0}
        str_4 = '/home/myeongsoo/aster-py-cli/\udca0a\x06\udcdfk\udc97C$/windows'
        str_5 = ']|hu:zd^c'
        list_0 = [dict_0, str_1]
        tuple_0 = (dict_1, list_0)
        plugin_loader_0 = module_0.PluginLoader(str_5, tuple_0, plugin_load_context_1, dict_1)
        var_0 = plugin_loader_0.format_paths(str_4)
    except BaseException:
        pass

def test_case_25():
    try:
        bool_0 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = 403
        str_0 = '_uj e(R%|2\\n'
        str_1 = 'Bj">Fp}\rJ$dU'
        str_2 = ';eh4:l,{Z8'
        dict_0 = {}
        dict_1 = {str_2: bool_0, str_1: plugin_load_context_0, str_2: int_0, str_1: str_0, str_2: str_0, str_2: dict_0}
        tuple_0 = (dict_1,)
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, str_0, tuple_0, plugin_path_context_0)
        set_0 = None
        var_0 = plugin_loader_0.add_directory(bytes_0)
        var_1 = plugin_loader_0.has_plugin(set_0, set_0)
        var_2 = plugin_load_context_0.nope(str_1)
        set_1 = set()
        var_3 = module_0.get_shell_plugin(set_1, plugin_load_context_0)
        bytes_1 = b'\xa0a\x06\xdfk\x97C$'
        float_0 = -485.1
        var_4 = plugin_load_context_0.record_deprecation(bytes_1, float_0, plugin_loader_0)
    except BaseException:
        pass

def test_case_26():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = None
        int_0 = 351
        str_0 = '_cuj e(RJ%|2\\n'
        str_1 = 'Bj">Fp}\rJ&dU'
        str_2 = ';eh4:l,{Z8'
        dict_0 = {}
        dict_1 = {str_1: bool_0, str_1: plugin_load_context_0, str_1: int_0, str_1: str_0, str_1: str_0, str_2: dict_0}
        tuple_0 = (dict_1,)
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, str_0, tuple_0, plugin_path_context_0, str_0)
        bytes_1 = b'\xb7Jv\xbb\xbbp\n\x96\xe6\xac\xf3+\\_'
        str_3 = '/hoe/myeongsoo/astIr-py-cli/test-apps/ansible/lib/ansible/plugins/shell/windows'
        var_0 = plugin_loader_0.__getstate__()
        dict_2 = {str_1: str_1, str_2: str_2, str_3: str_1}
        get_with_context_result_0 = None
        list_0 = []
        plugin_path_context_1 = module_0.PluginPathContext(list_0, bytes_0)
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_1, dict_2, plugin_load_context_0, get_with_context_result_0)
        list_1 = [str_1]
        plugin_loader_1 = module_0.PluginLoader(jinja2_loader_0, get_with_context_result_0, bytes_0, list_1, plugin_loader_0)
        str_4 = '%(fI$&m2X\\xk\x0cUv}FW='
        var_1 = plugin_loader_1.has_plugin(str_4, dict_0)
        var_2 = jinja2_loader_0.all(*list_1)
    except BaseException:
        pass

def test_case_27():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = None
        int_0 = 347
        str_0 = '_cuj e(RJ%|2\\n'
        str_1 = 'Bj">Fp}\rJ&dU'
        str_2 = None
        str_3 = ';eh4:l,{Z)(8'
        dict_0 = {}
        dict_1 = {str_2: bool_0, str_1: plugin_load_context_0, str_2: int_0, str_1: str_0, str_2: str_0, str_3: dict_0}
        tuple_0 = (dict_1,)
        bytes_0 = b'\xf4\xfdy\x1d'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, str_0, tuple_0, plugin_path_context_0, str_2)
        set_0 = None
        var_0 = plugin_loader_0.has_plugin(set_0, set_0)
        var_1 = module_0.get_shell_plugin(set_0, plugin_load_context_0)
        bytes_1 = b'\xb7Jv\xbb\xbbp\n\x96\xe6\xac\xf3+\\_'
        str_4 = '/hoe/myeongsoo/astIr-py-cli/test-apps/ansible/lib/ansible/plugins/shell/windows'
        var_2 = plugin_loader_0.__getstate__()
        dict_2 = {str_1: str_1, str_3: str_3, str_4: str_1}
        get_with_context_result_0 = None
        list_0 = []
        plugin_path_context_1 = module_0.PluginPathContext(list_0, bytes_0)
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_1, dict_2, plugin_load_context_0, get_with_context_result_0)
        list_1 = [str_1]
        plugin_loader_1 = module_0.PluginLoader(jinja2_loader_0, get_with_context_result_0, bytes_0, list_1, plugin_loader_0)
        str_5 = '%.fI$&m2V\\xk\x0cUv}FW='
        var_3 = plugin_loader_1.has_plugin(str_5, dict_0)
        var_4 = jinja2_loader_0.all(*list_1)
    except BaseException:
        pass