# Automatically generated by Pynguin.
import ansible.plugins.action.validate_argument_spec as module_0

def test_case_0():
    try:
        str_0 = 'inyR3n#2=:~\r>vna^-'
        tuple_0 = None
        float_0 = -149.67659
        set_0 = {float_0}
        float_1 = -633.54
        action_module_0 = module_0.ActionModule(tuple_0, set_0, float_1, set_0, set_0, str_0)
        dict_0 = {action_module_0: float_1}
        int_0 = -2759
        var_0 = action_module_0.get_args_from_task_vars(dict_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        str_0 = 'No inventory plugins available to generate inventory, make sure you have at least one whitelisted.'
        bytes_0 = b'0m5\xe90\xc7\xbb\x97\x9fl\xcaS\xa0\xfcM'
        tuple_0 = (bytes_0,)
        str_1 = 'X\nL@8j'
        dict_0 = {str_1: bool_0}
        str_2 = '[:([-?pv{'
        str_3 = '>'
        int_0 = 1637
        str_4 = 'y\'E"\x0bB\r"&n((a P=6{>)'
        action_module_0 = module_0.ActionModule(dict_0, str_2, bool_0, str_3, int_0, str_4)
        action_module_1 = module_0.ActionModule(bool_0, list_0, str_0, tuple_0, dict_0, action_module_0)
        var_0 = action_module_0.get_args_from_task_vars(dict_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 2071
        str_0 = 'Iv>,DH-+w4bW)|'
        dict_0 = {str_0: str_0, str_0: str_0, int_0: int_0}
        list_0 = [dict_0, dict_0]
        tuple_0 = (int_0, str_0, dict_0, list_0)
        set_0 = {str_0}
        action_module_0 = module_0.ActionModule(tuple_0, set_0, set_0, set_0, str_0, dict_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        list_0 = None
        bool_0 = True
        str_0 = '>m0keD]Y(=,z'
        bytes_0 = b'$\x94G\xc7\x9b\xcaO\x10o\xfe'
        str_1 = 'H\x0b@'
        bytes_1 = b"\x9a)\xb2i\xf6\xb2'8\x8e\x0b\xaaZd\xb9\xebw"
        action_module_0 = module_0.ActionModule(list_0, bool_0, str_0, bytes_0, str_1, bytes_1)
        bool_1 = True
        bytes_2 = b'\xb5\xa33\x9c\xb3\xf0>\xb2QE'
        tuple_0 = (set_0, action_module_0, bool_1, bytes_2)
        int_0 = None
        float_0 = None
        action_module_1 = module_0.ActionModule(action_module_0, int_0, list_0, list_0, float_0, action_module_0)
        dict_0 = {tuple_0: action_module_1}
        str_2 = "Failed to create the directory '%s': %s"
        int_1 = -2089
        dict_1 = {str_2: int_1}
        bool_2 = True
        bool_3 = True
        str_3 = 'GR\'\'\rH,#M|")sy^'
        str_4 = 'o/O?Q4Y1a1HI\t~DMMf'
        int_2 = 1513
        tuple_1 = (str_4, dict_1, int_2)
        bytes_3 = b'\x9a\xd2\xd2\xc4'
        set_1 = {str_2}
        list_1 = [bool_2]
        str_5 = 'ND:'
        action_module_2 = module_0.ActionModule(bytes_3, int_2, tuple_1, set_1, list_1, str_5)
        str_6 = 'h\n1ra5^iL\x0b<$HL+bB}<J'
        tuple_2 = (list_1, str_6)
        str_7 = None
        action_module_3 = module_0.ActionModule(bool_3, str_3, tuple_1, action_module_2, tuple_2, str_7)
        set_2 = {str_2, action_module_3}
        action_module_4 = module_0.ActionModule(dict_1, bool_2, bool_2, set_2, tuple_1, int_1)
        var_0 = action_module_4.get_args_from_task_vars(dict_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -691
        set_0 = set()
        list_0 = [int_0, int_0, int_0, set_0]
        tuple_0 = (int_0, set_0, list_0)
        bytes_0 = b'\xbc\xafx\x86\x97F\x9f\xbf\xc7B2E\xf9\x9a\x12\x8f\xdf\xfe\xaf'
        bool_0 = True
        str_0 = 'C'
        action_module_0 = module_0.ActionModule(tuple_0, bytes_0, tuple_0, bool_0, tuple_0, str_0)
        tuple_1 = (action_module_0,)
        list_1 = [tuple_1, list_0]
        str_1 = 'import_playbook statements must specify the file name to import'
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
        float_0 = 100.0
        bool_1 = True
        int_1 = 32600
        action_module_1 = module_0.ActionModule(str_1, dict_0, float_0, bool_1, int_1, float_0)
        var_0 = action_module_1.run(list_1, set_0)
    except BaseException:
        pass